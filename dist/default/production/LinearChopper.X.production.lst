

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Feb 26 12:28:37 2021

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	stringtext6,global,class=STRCODE,delta=2
    15                           	psect	stringtext7,global,class=STRCODE,delta=2
    16                           	psect	stringtext8,global,class=STRCODE,delta=2
    17                           	psect	stringtext9,global,class=STRCODE,delta=2
    18                           	psect	stringtext10,global,class=STRCODE,delta=2
    19                           	psect	stringtext11,global,class=STRCODE,delta=2
    20                           	psect	stringtext12,global,class=STRCODE,delta=2
    21                           	psect	stringtext13,global,class=STRCODE,delta=2
    22                           	psect	stringtext14,global,class=STRCODE,delta=2
    23                           	psect	stringtext15,global,class=STRCODE,delta=2
    24                           	psect	stringtext16,global,class=STRCODE,delta=2
    25                           	psect	stringtext17,global,class=STRCODE,delta=2
    26                           	psect	stringtext18,global,class=STRCODE,delta=2
    27                           	psect	stringtext19,global,class=STRCODE,delta=2
    28                           	psect	stringtext20,global,class=STRCODE,delta=2
    29                           	psect	stringtext21,global,class=STRCODE,delta=2
    30                           	psect	stringtext22,global,class=STRCODE,delta=2
    31                           	psect	stringtext23,global,class=STRCODE,delta=2
    32                           	psect	cinit,global,class=CODE,merge=1,delta=2
    33                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    34                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    35                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    37                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    38                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    39                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    40                           	psect	inittext,global,class=CODE,delta=2
    41                           	psect	clrtext,global,class=CODE,delta=2
    42                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    43                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    44                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    45                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    46                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    47                           	psect	text1,local,class=CODE,merge=1,delta=2
    48                           	psect	text2,local,class=CODE,merge=1,delta=2
    49                           	psect	text3,local,class=CODE,merge=1,delta=2
    50                           	psect	text4,local,class=CODE,merge=1,delta=2
    51                           	psect	text5,local,class=CODE,merge=1,delta=2
    52                           	psect	text6,local,class=CODE,merge=1,delta=2
    53                           	psect	text7,local,class=CODE,merge=1,delta=2
    54                           	psect	text8,local,class=CODE,merge=1,delta=2
    55                           	psect	text9,local,class=CODE,merge=1,delta=2
    56                           	psect	text10,local,class=CODE,merge=1,delta=2
    57                           	psect	text11,local,class=CODE,merge=1,delta=2
    58                           	psect	text12,local,class=CODE,merge=1,delta=2
    59                           	psect	text13,local,class=CODE,merge=1,delta=2
    60                           	psect	text14,local,class=CODE,merge=1,delta=2
    61                           	psect	text15,local,class=CODE,merge=1,delta=2
    62                           	psect	text16,local,class=CODE,merge=1,delta=2
    63                           	psect	text17,local,class=CODE,merge=1,delta=2
    64                           	psect	text18,local,class=CODE,merge=1,delta=2
    65                           	psect	text19,local,class=CODE,merge=1,delta=2
    66                           	psect	text20,local,class=CODE,merge=1,delta=2
    67                           	psect	text21,local,class=CODE,merge=1,delta=2
    68                           	psect	text22,local,class=CODE,merge=1,delta=2
    69                           	psect	text23,local,class=CODE,merge=1,delta=2
    70                           	psect	text24,local,class=CODE,merge=1,delta=2
    71                           	psect	text25,local,class=CODE,merge=1,delta=2
    72                           	psect	text26,local,class=CODE,merge=1,delta=2
    73                           	psect	text27,local,class=CODE,merge=1,delta=2
    74                           	psect	text28,local,class=CODE,merge=1,delta=2
    75                           	psect	text29,local,class=CODE,merge=1,delta=2
    76                           	psect	text30,local,class=CODE,merge=1,delta=2
    77                           	psect	text31,local,class=CODE,merge=1,delta=2
    78                           	psect	text32,local,class=CODE,merge=1,delta=2
    79                           	psect	text33,local,class=CODE,merge=1,delta=2
    80                           	psect	text34,local,class=CODE,merge=1,delta=2
    81                           	psect	text35,local,class=CODE,merge=1,delta=2
    82                           	psect	text36,local,class=CODE,merge=1,delta=2
    83                           	psect	text37,local,class=CODE,merge=1,delta=2
    84                           	psect	text38,local,class=CODE,merge=1,delta=2
    85                           	psect	text39,local,class=CODE,merge=1,delta=2
    86                           	psect	text40,local,class=CODE,merge=1,delta=2
    87                           	psect	text41,local,class=CODE,merge=1,delta=2
    88                           	psect	text42,local,class=CODE,merge=1,delta=2
    89                           	psect	text43,local,class=CODE,merge=1,delta=2
    90                           	psect	text44,local,class=CODE,merge=1,delta=2
    91                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    92                           	psect	text46,local,class=CODE,merge=1,delta=2
    93                           	psect	text47,local,class=CODE,merge=1,delta=2
    94                           	psect	text48,local,class=CODE,merge=1,delta=2
    95                           	psect	text49,local,class=CODE,merge=1,delta=2
    96                           	psect	text50,local,class=CODE,merge=1,delta=2
    97                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
    98                           	psect	text52,local,class=CODE,merge=1,delta=2
    99                           	psect	text53,local,class=CODE,merge=1,delta=2
   100                           	psect	text54,local,class=CODE,merge=1,delta=2
   101                           	psect	text55,local,class=CODE,merge=1,delta=2
   102                           	psect	text56,local,class=CODE,merge=1,delta=2
   103                           	psect	text57,local,class=CODE,merge=1,delta=2
   104                           	psect	intentry,global,class=CODE,delta=2
   105                           	psect	text59,local,class=CODE,merge=1,delta=2
   106                           	psect	text60,local,class=CODE,merge=1,delta=2
   107                           	psect	text61,local,class=CODE,merge=1,delta=2
   108                           	psect	text62,local,class=CODE,merge=1,delta=2
   109                           	psect	text63,local,class=CODE,merge=1,delta=2
   110                           	psect	text64,local,class=CODE,merge=1,delta=2
   111                           	psect	text65,local,class=CODE,merge=1,delta=2
   112                           	psect	text66,local,class=CODE,merge=1,delta=2
   113                           	psect	text67,local,class=CODE,merge=1,delta=2
   114                           	psect	text68,local,class=CODE,merge=1,delta=2
   115                           	psect	text69,local,class=CODE,merge=1,delta=2
   116                           	psect	text70,local,class=CODE,merge=1,delta=2
   117                           	psect	text71,local,class=CODE,merge=1,delta=2
   118                           	psect	text72,local,class=CODE,merge=1,delta=2
   119                           	psect	text73,local,class=CODE,merge=1,delta=2
   120                           	psect	text74,local,class=CODE,merge=1,delta=2
   121                           	psect	text75,local,class=CODE,merge=1,delta=2
   122                           	psect	text76,local,class=CODE,merge=1,delta=2
   123                           	psect	text77,local,class=CODE,merge=1,delta=2,group=1
   124                           	psect	text78,local,class=CODE,merge=1,delta=2,group=1
   125                           	psect	text79,local,class=CODE,merge=1,delta=2
   126                           	psect	text80,local,class=CODE,merge=1,delta=2
   127                           	psect	text81,local,class=CODE,merge=1,delta=2
   128                           	dabs	1,0x7E,2
   129  0000                     
   130                           ; Version 2.05
   131                           ; Generated 20/12/2018 GMT
   132                           ; 
   133                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   134                           ; All rights reserved.
   135                           ; 
   136                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   137                           ; 
   138                           ; Redistribution and use in source and binary forms, with or without modification, are
   139                           ; permitted provided that the following conditions are met:
   140                           ; 
   141                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   142                           ;        conditions and the following disclaimer.
   143                           ; 
   144                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   145                           ;        of conditions and the following disclaimer in the documentation and/or other
   146                           ;        materials provided with the distribution.
   147                           ; 
   148                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   149                           ;        software without specific prior written permission.
   150                           ; 
   151                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   152                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   153                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   154                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   155                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   156                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   157                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   158                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   159                           ; 
   160                           ; 
   161                           ; Code-generator required, PIC16F1705 Definitions
   162                           ; 
   163                           ; SFR Addresses
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000E                     	;# 
   178  0011                     	;# 
   179  0012                     	;# 
   180  0013                     	;# 
   181  0015                     	;# 
   182  0016                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001C                     	;# 
   190  008C                     	;# 
   191  008E                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  009F                     	;# 
   207  010C                     	;# 
   208  010E                     	;# 
   209  0111                     	;# 
   210  0112                     	;# 
   211  0113                     	;# 
   212  0114                     	;# 
   213  0115                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  0118                     	;# 
   217  0119                     	;# 
   218  011C                     	;# 
   219  018C                     	;# 
   220  018E                     	;# 
   221  0191                     	;# 
   222  0191                     	;# 
   223  0192                     	;# 
   224  0193                     	;# 
   225  0193                     	;# 
   226  0194                     	;# 
   227  0195                     	;# 
   228  0196                     	;# 
   229  0197                     	;# 
   230  0199                     	;# 
   231  0199                     	;# 
   232  0199                     	;# 
   233  019A                     	;# 
   234  019A                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019C                     	;# 
   242  019C                     	;# 
   243  019C                     	;# 
   244  019D                     	;# 
   245  019D                     	;# 
   246  019D                     	;# 
   247  019E                     	;# 
   248  019E                     	;# 
   249  019E                     	;# 
   250  019F                     	;# 
   251  019F                     	;# 
   252  019F                     	;# 
   253  019F                     	;# 
   254  019F                     	;# 
   255  020C                     	;# 
   256  020E                     	;# 
   257  0211                     	;# 
   258  0211                     	;# 
   259  0212                     	;# 
   260  0212                     	;# 
   261  0213                     	;# 
   262  0213                     	;# 
   263  0214                     	;# 
   264  0214                     	;# 
   265  0215                     	;# 
   266  0215                     	;# 
   267  0215                     	;# 
   268  0215                     	;# 
   269  0216                     	;# 
   270  0216                     	;# 
   271  0217                     	;# 
   272  0217                     	;# 
   273  028C                     	;# 
   274  028E                     	;# 
   275  0291                     	;# 
   276  0291                     	;# 
   277  0292                     	;# 
   278  0293                     	;# 
   279  0293                     	;# 
   280  0298                     	;# 
   281  0298                     	;# 
   282  0299                     	;# 
   283  029A                     	;# 
   284  029A                     	;# 
   285  029E                     	;# 
   286  030C                     	;# 
   287  030E                     	;# 
   288  038C                     	;# 
   289  038E                     	;# 
   290  0391                     	;# 
   291  0392                     	;# 
   292  0393                     	;# 
   293  0397                     	;# 
   294  0398                     	;# 
   295  0399                     	;# 
   296  0415                     	;# 
   297  0416                     	;# 
   298  0417                     	;# 
   299  041C                     	;# 
   300  041D                     	;# 
   301  041E                     	;# 
   302  0511                     	;# 
   303  0515                     	;# 
   304  0617                     	;# 
   305  0618                     	;# 
   306  0619                     	;# 
   307  0619                     	;# 
   308  061A                     	;# 
   309  061B                     	;# 
   310  061C                     	;# 
   311  061C                     	;# 
   312  0691                     	;# 
   313  0692                     	;# 
   314  0693                     	;# 
   315  0694                     	;# 
   316  0695                     	;# 
   317  0696                     	;# 
   318  0697                     	;# 
   319  0698                     	;# 
   320  0699                     	;# 
   321  069A                     	;# 
   322  069B                     	;# 
   323  069C                     	;# 
   324  069D                     	;# 
   325  069E                     	;# 
   326  069F                     	;# 
   327  0E0F                     	;# 
   328  0E10                     	;# 
   329  0E11                     	;# 
   330  0E12                     	;# 
   331  0E13                     	;# 
   332  0E14                     	;# 
   333  0E15                     	;# 
   334  0E17                     	;# 
   335  0E20                     	;# 
   336  0E21                     	;# 
   337  0E22                     	;# 
   338  0E24                     	;# 
   339  0E25                     	;# 
   340  0E28                     	;# 
   341  0E29                     	;# 
   342  0E2A                     	;# 
   343  0E2B                     	;# 
   344  0E90                     	;# 
   345  0E91                     	;# 
   346  0E92                     	;# 
   347  0E94                     	;# 
   348  0E95                     	;# 
   349  0EA0                     	;# 
   350  0EA1                     	;# 
   351  0EA2                     	;# 
   352  0EA3                     	;# 
   353  0EA4                     	;# 
   354  0EA5                     	;# 
   355  0F0F                     	;# 
   356  0F10                     	;# 
   357  0F11                     	;# 
   358  0F12                     	;# 
   359  0F13                     	;# 
   360  0F14                     	;# 
   361  0F15                     	;# 
   362  0F16                     	;# 
   363  0F17                     	;# 
   364  0F18                     	;# 
   365  0F19                     	;# 
   366  0F1A                     	;# 
   367  0F1B                     	;# 
   368  0F1C                     	;# 
   369  0F1D                     	;# 
   370  0F1E                     	;# 
   371  0F1F                     	;# 
   372  0F20                     	;# 
   373  0F21                     	;# 
   374  0F22                     	;# 
   375  0F23                     	;# 
   376  0F24                     	;# 
   377  0F25                     	;# 
   378  0F26                     	;# 
   379  0F27                     	;# 
   380  0F28                     	;# 
   381  0F29                     	;# 
   382  0F2A                     	;# 
   383  0F2B                     	;# 
   384  0F2C                     	;# 
   385  0F2D                     	;# 
   386  0F9E                     	;# 
   387  0FE4                     	;# 
   388  0FE5                     	;# 
   389  0FE6                     	;# 
   390  0FE7                     	;# 
   391  0FE8                     	;# 
   392  0FE9                     	;# 
   393  0FEA                     	;# 
   394  0FEB                     	;# 
   395  0FED                     	;# 
   396  0FEE                     	;# 
   397  0FEF                     	;# 
   398  0000                     	;# 
   399  0001                     	;# 
   400  0002                     	;# 
   401  0003                     	;# 
   402  0004                     	;# 
   403  0005                     	;# 
   404  0006                     	;# 
   405  0007                     	;# 
   406  0008                     	;# 
   407  0009                     	;# 
   408  000A                     	;# 
   409  000B                     	;# 
   410  000C                     	;# 
   411  000E                     	;# 
   412  0011                     	;# 
   413  0012                     	;# 
   414  0013                     	;# 
   415  0015                     	;# 
   416  0016                     	;# 
   417  0016                     	;# 
   418  0017                     	;# 
   419  0018                     	;# 
   420  0019                     	;# 
   421  001A                     	;# 
   422  001B                     	;# 
   423  001C                     	;# 
   424  008C                     	;# 
   425  008E                     	;# 
   426  0091                     	;# 
   427  0092                     	;# 
   428  0093                     	;# 
   429  0095                     	;# 
   430  0096                     	;# 
   431  0097                     	;# 
   432  0098                     	;# 
   433  0099                     	;# 
   434  009A                     	;# 
   435  009B                     	;# 
   436  009B                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  009F                     	;# 
   441  010C                     	;# 
   442  010E                     	;# 
   443  0111                     	;# 
   444  0112                     	;# 
   445  0113                     	;# 
   446  0114                     	;# 
   447  0115                     	;# 
   448  0116                     	;# 
   449  0117                     	;# 
   450  0118                     	;# 
   451  0119                     	;# 
   452  011C                     	;# 
   453  018C                     	;# 
   454  018E                     	;# 
   455  0191                     	;# 
   456  0191                     	;# 
   457  0192                     	;# 
   458  0193                     	;# 
   459  0193                     	;# 
   460  0194                     	;# 
   461  0195                     	;# 
   462  0196                     	;# 
   463  0197                     	;# 
   464  0199                     	;# 
   465  0199                     	;# 
   466  0199                     	;# 
   467  019A                     	;# 
   468  019A                     	;# 
   469  019A                     	;# 
   470  019B                     	;# 
   471  019B                     	;# 
   472  019B                     	;# 
   473  019B                     	;# 
   474  019B                     	;# 
   475  019C                     	;# 
   476  019C                     	;# 
   477  019C                     	;# 
   478  019D                     	;# 
   479  019D                     	;# 
   480  019D                     	;# 
   481  019E                     	;# 
   482  019E                     	;# 
   483  019E                     	;# 
   484  019F                     	;# 
   485  019F                     	;# 
   486  019F                     	;# 
   487  019F                     	;# 
   488  019F                     	;# 
   489  020C                     	;# 
   490  020E                     	;# 
   491  0211                     	;# 
   492  0211                     	;# 
   493  0212                     	;# 
   494  0212                     	;# 
   495  0213                     	;# 
   496  0213                     	;# 
   497  0214                     	;# 
   498  0214                     	;# 
   499  0215                     	;# 
   500  0215                     	;# 
   501  0215                     	;# 
   502  0215                     	;# 
   503  0216                     	;# 
   504  0216                     	;# 
   505  0217                     	;# 
   506  0217                     	;# 
   507  028C                     	;# 
   508  028E                     	;# 
   509  0291                     	;# 
   510  0291                     	;# 
   511  0292                     	;# 
   512  0293                     	;# 
   513  0293                     	;# 
   514  0298                     	;# 
   515  0298                     	;# 
   516  0299                     	;# 
   517  029A                     	;# 
   518  029A                     	;# 
   519  029E                     	;# 
   520  030C                     	;# 
   521  030E                     	;# 
   522  038C                     	;# 
   523  038E                     	;# 
   524  0391                     	;# 
   525  0392                     	;# 
   526  0393                     	;# 
   527  0397                     	;# 
   528  0398                     	;# 
   529  0399                     	;# 
   530  0415                     	;# 
   531  0416                     	;# 
   532  0417                     	;# 
   533  041C                     	;# 
   534  041D                     	;# 
   535  041E                     	;# 
   536  0511                     	;# 
   537  0515                     	;# 
   538  0617                     	;# 
   539  0618                     	;# 
   540  0619                     	;# 
   541  0619                     	;# 
   542  061A                     	;# 
   543  061B                     	;# 
   544  061C                     	;# 
   545  061C                     	;# 
   546  0691                     	;# 
   547  0692                     	;# 
   548  0693                     	;# 
   549  0694                     	;# 
   550  0695                     	;# 
   551  0696                     	;# 
   552  0697                     	;# 
   553  0698                     	;# 
   554  0699                     	;# 
   555  069A                     	;# 
   556  069B                     	;# 
   557  069C                     	;# 
   558  069D                     	;# 
   559  069E                     	;# 
   560  069F                     	;# 
   561  0E0F                     	;# 
   562  0E10                     	;# 
   563  0E11                     	;# 
   564  0E12                     	;# 
   565  0E13                     	;# 
   566  0E14                     	;# 
   567  0E15                     	;# 
   568  0E17                     	;# 
   569  0E20                     	;# 
   570  0E21                     	;# 
   571  0E22                     	;# 
   572  0E24                     	;# 
   573  0E25                     	;# 
   574  0E28                     	;# 
   575  0E29                     	;# 
   576  0E2A                     	;# 
   577  0E2B                     	;# 
   578  0E90                     	;# 
   579  0E91                     	;# 
   580  0E92                     	;# 
   581  0E94                     	;# 
   582  0E95                     	;# 
   583  0EA0                     	;# 
   584  0EA1                     	;# 
   585  0EA2                     	;# 
   586  0EA3                     	;# 
   587  0EA4                     	;# 
   588  0EA5                     	;# 
   589  0F0F                     	;# 
   590  0F10                     	;# 
   591  0F11                     	;# 
   592  0F12                     	;# 
   593  0F13                     	;# 
   594  0F14                     	;# 
   595  0F15                     	;# 
   596  0F16                     	;# 
   597  0F17                     	;# 
   598  0F18                     	;# 
   599  0F19                     	;# 
   600  0F1A                     	;# 
   601  0F1B                     	;# 
   602  0F1C                     	;# 
   603  0F1D                     	;# 
   604  0F1E                     	;# 
   605  0F1F                     	;# 
   606  0F20                     	;# 
   607  0F21                     	;# 
   608  0F22                     	;# 
   609  0F23                     	;# 
   610  0F24                     	;# 
   611  0F25                     	;# 
   612  0F26                     	;# 
   613  0F27                     	;# 
   614  0F28                     	;# 
   615  0F29                     	;# 
   616  0F2A                     	;# 
   617  0F2B                     	;# 
   618  0F2C                     	;# 
   619  0F2D                     	;# 
   620  0F9E                     	;# 
   621  0FE4                     	;# 
   622  0FE5                     	;# 
   623  0FE6                     	;# 
   624  0FE7                     	;# 
   625  0FE8                     	;# 
   626  0FE9                     	;# 
   627  0FEA                     	;# 
   628  0FEB                     	;# 
   629  0FED                     	;# 
   630  0FEE                     	;# 
   631  0FEF                     	;# 
   632  0000                     	;# 
   633  0001                     	;# 
   634  0002                     	;# 
   635  0003                     	;# 
   636  0004                     	;# 
   637  0005                     	;# 
   638  0006                     	;# 
   639  0007                     	;# 
   640  0008                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000E                     	;# 
   646  0011                     	;# 
   647  0012                     	;# 
   648  0013                     	;# 
   649  0015                     	;# 
   650  0016                     	;# 
   651  0016                     	;# 
   652  0017                     	;# 
   653  0018                     	;# 
   654  0019                     	;# 
   655  001A                     	;# 
   656  001B                     	;# 
   657  001C                     	;# 
   658  008C                     	;# 
   659  008E                     	;# 
   660  0091                     	;# 
   661  0092                     	;# 
   662  0093                     	;# 
   663  0095                     	;# 
   664  0096                     	;# 
   665  0097                     	;# 
   666  0098                     	;# 
   667  0099                     	;# 
   668  009A                     	;# 
   669  009B                     	;# 
   670  009B                     	;# 
   671  009C                     	;# 
   672  009D                     	;# 
   673  009E                     	;# 
   674  009F                     	;# 
   675  010C                     	;# 
   676  010E                     	;# 
   677  0111                     	;# 
   678  0112                     	;# 
   679  0113                     	;# 
   680  0114                     	;# 
   681  0115                     	;# 
   682  0116                     	;# 
   683  0117                     	;# 
   684  0118                     	;# 
   685  0119                     	;# 
   686  011C                     	;# 
   687  018C                     	;# 
   688  018E                     	;# 
   689  0191                     	;# 
   690  0191                     	;# 
   691  0192                     	;# 
   692  0193                     	;# 
   693  0193                     	;# 
   694  0194                     	;# 
   695  0195                     	;# 
   696  0196                     	;# 
   697  0197                     	;# 
   698  0199                     	;# 
   699  0199                     	;# 
   700  0199                     	;# 
   701  019A                     	;# 
   702  019A                     	;# 
   703  019A                     	;# 
   704  019B                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019B                     	;# 
   708  019B                     	;# 
   709  019C                     	;# 
   710  019C                     	;# 
   711  019C                     	;# 
   712  019D                     	;# 
   713  019D                     	;# 
   714  019D                     	;# 
   715  019E                     	;# 
   716  019E                     	;# 
   717  019E                     	;# 
   718  019F                     	;# 
   719  019F                     	;# 
   720  019F                     	;# 
   721  019F                     	;# 
   722  019F                     	;# 
   723  020C                     	;# 
   724  020E                     	;# 
   725  0211                     	;# 
   726  0211                     	;# 
   727  0212                     	;# 
   728  0212                     	;# 
   729  0213                     	;# 
   730  0213                     	;# 
   731  0214                     	;# 
   732  0214                     	;# 
   733  0215                     	;# 
   734  0215                     	;# 
   735  0215                     	;# 
   736  0215                     	;# 
   737  0216                     	;# 
   738  0216                     	;# 
   739  0217                     	;# 
   740  0217                     	;# 
   741  028C                     	;# 
   742  028E                     	;# 
   743  0291                     	;# 
   744  0291                     	;# 
   745  0292                     	;# 
   746  0293                     	;# 
   747  0293                     	;# 
   748  0298                     	;# 
   749  0298                     	;# 
   750  0299                     	;# 
   751  029A                     	;# 
   752  029A                     	;# 
   753  029E                     	;# 
   754  030C                     	;# 
   755  030E                     	;# 
   756  038C                     	;# 
   757  038E                     	;# 
   758  0391                     	;# 
   759  0392                     	;# 
   760  0393                     	;# 
   761  0397                     	;# 
   762  0398                     	;# 
   763  0399                     	;# 
   764  0415                     	;# 
   765  0416                     	;# 
   766  0417                     	;# 
   767  041C                     	;# 
   768  041D                     	;# 
   769  041E                     	;# 
   770  0511                     	;# 
   771  0515                     	;# 
   772  0617                     	;# 
   773  0618                     	;# 
   774  0619                     	;# 
   775  0619                     	;# 
   776  061A                     	;# 
   777  061B                     	;# 
   778  061C                     	;# 
   779  061C                     	;# 
   780  0691                     	;# 
   781  0692                     	;# 
   782  0693                     	;# 
   783  0694                     	;# 
   784  0695                     	;# 
   785  0696                     	;# 
   786  0697                     	;# 
   787  0698                     	;# 
   788  0699                     	;# 
   789  069A                     	;# 
   790  069B                     	;# 
   791  069C                     	;# 
   792  069D                     	;# 
   793  069E                     	;# 
   794  069F                     	;# 
   795  0E0F                     	;# 
   796  0E10                     	;# 
   797  0E11                     	;# 
   798  0E12                     	;# 
   799  0E13                     	;# 
   800  0E14                     	;# 
   801  0E15                     	;# 
   802  0E17                     	;# 
   803  0E20                     	;# 
   804  0E21                     	;# 
   805  0E22                     	;# 
   806  0E24                     	;# 
   807  0E25                     	;# 
   808  0E28                     	;# 
   809  0E29                     	;# 
   810  0E2A                     	;# 
   811  0E2B                     	;# 
   812  0E90                     	;# 
   813  0E91                     	;# 
   814  0E92                     	;# 
   815  0E94                     	;# 
   816  0E95                     	;# 
   817  0EA0                     	;# 
   818  0EA1                     	;# 
   819  0EA2                     	;# 
   820  0EA3                     	;# 
   821  0EA4                     	;# 
   822  0EA5                     	;# 
   823  0F0F                     	;# 
   824  0F10                     	;# 
   825  0F11                     	;# 
   826  0F12                     	;# 
   827  0F13                     	;# 
   828  0F14                     	;# 
   829  0F15                     	;# 
   830  0F16                     	;# 
   831  0F17                     	;# 
   832  0F18                     	;# 
   833  0F19                     	;# 
   834  0F1A                     	;# 
   835  0F1B                     	;# 
   836  0F1C                     	;# 
   837  0F1D                     	;# 
   838  0F1E                     	;# 
   839  0F1F                     	;# 
   840  0F20                     	;# 
   841  0F21                     	;# 
   842  0F22                     	;# 
   843  0F23                     	;# 
   844  0F24                     	;# 
   845  0F25                     	;# 
   846  0F26                     	;# 
   847  0F27                     	;# 
   848  0F28                     	;# 
   849  0F29                     	;# 
   850  0F2A                     	;# 
   851  0F2B                     	;# 
   852  0F2C                     	;# 
   853  0F2D                     	;# 
   854  0F9E                     	;# 
   855  0FE4                     	;# 
   856  0FE5                     	;# 
   857  0FE6                     	;# 
   858  0FE7                     	;# 
   859  0FE8                     	;# 
   860  0FE9                     	;# 
   861  0FEA                     	;# 
   862  0FEB                     	;# 
   863  0FED                     	;# 
   864  0FEE                     	;# 
   865  0FEF                     	;# 
   866  0000                     	;# 
   867  0001                     	;# 
   868  0002                     	;# 
   869  0003                     	;# 
   870  0004                     	;# 
   871  0005                     	;# 
   872  0006                     	;# 
   873  0007                     	;# 
   874  0008                     	;# 
   875  0009                     	;# 
   876  000A                     	;# 
   877  000B                     	;# 
   878  000C                     	;# 
   879  000E                     	;# 
   880  0011                     	;# 
   881  0012                     	;# 
   882  0013                     	;# 
   883  0015                     	;# 
   884  0016                     	;# 
   885  0016                     	;# 
   886  0017                     	;# 
   887  0018                     	;# 
   888  0019                     	;# 
   889  001A                     	;# 
   890  001B                     	;# 
   891  001C                     	;# 
   892  008C                     	;# 
   893  008E                     	;# 
   894  0091                     	;# 
   895  0092                     	;# 
   896  0093                     	;# 
   897  0095                     	;# 
   898  0096                     	;# 
   899  0097                     	;# 
   900  0098                     	;# 
   901  0099                     	;# 
   902  009A                     	;# 
   903  009B                     	;# 
   904  009B                     	;# 
   905  009C                     	;# 
   906  009D                     	;# 
   907  009E                     	;# 
   908  009F                     	;# 
   909  010C                     	;# 
   910  010E                     	;# 
   911  0111                     	;# 
   912  0112                     	;# 
   913  0113                     	;# 
   914  0114                     	;# 
   915  0115                     	;# 
   916  0116                     	;# 
   917  0117                     	;# 
   918  0118                     	;# 
   919  0119                     	;# 
   920  011C                     	;# 
   921  018C                     	;# 
   922  018E                     	;# 
   923  0191                     	;# 
   924  0191                     	;# 
   925  0192                     	;# 
   926  0193                     	;# 
   927  0193                     	;# 
   928  0194                     	;# 
   929  0195                     	;# 
   930  0196                     	;# 
   931  0197                     	;# 
   932  0199                     	;# 
   933  0199                     	;# 
   934  0199                     	;# 
   935  019A                     	;# 
   936  019A                     	;# 
   937  019A                     	;# 
   938  019B                     	;# 
   939  019B                     	;# 
   940  019B                     	;# 
   941  019B                     	;# 
   942  019B                     	;# 
   943  019C                     	;# 
   944  019C                     	;# 
   945  019C                     	;# 
   946  019D                     	;# 
   947  019D                     	;# 
   948  019D                     	;# 
   949  019E                     	;# 
   950  019E                     	;# 
   951  019E                     	;# 
   952  019F                     	;# 
   953  019F                     	;# 
   954  019F                     	;# 
   955  019F                     	;# 
   956  019F                     	;# 
   957  020C                     	;# 
   958  020E                     	;# 
   959  0211                     	;# 
   960  0211                     	;# 
   961  0212                     	;# 
   962  0212                     	;# 
   963  0213                     	;# 
   964  0213                     	;# 
   965  0214                     	;# 
   966  0214                     	;# 
   967  0215                     	;# 
   968  0215                     	;# 
   969  0215                     	;# 
   970  0215                     	;# 
   971  0216                     	;# 
   972  0216                     	;# 
   973  0217                     	;# 
   974  0217                     	;# 
   975  028C                     	;# 
   976  028E                     	;# 
   977  0291                     	;# 
   978  0291                     	;# 
   979  0292                     	;# 
   980  0293                     	;# 
   981  0293                     	;# 
   982  0298                     	;# 
   983  0298                     	;# 
   984  0299                     	;# 
   985  029A                     	;# 
   986  029A                     	;# 
   987  029E                     	;# 
   988  030C                     	;# 
   989  030E                     	;# 
   990  038C                     	;# 
   991  038E                     	;# 
   992  0391                     	;# 
   993  0392                     	;# 
   994  0393                     	;# 
   995  0397                     	;# 
   996  0398                     	;# 
   997  0399                     	;# 
   998  0415                     	;# 
   999  0416                     	;# 
  1000  0417                     	;# 
  1001  041C                     	;# 
  1002  041D                     	;# 
  1003  041E                     	;# 
  1004  0511                     	;# 
  1005  0515                     	;# 
  1006  0617                     	;# 
  1007  0618                     	;# 
  1008  0619                     	;# 
  1009  0619                     	;# 
  1010  061A                     	;# 
  1011  061B                     	;# 
  1012  061C                     	;# 
  1013  061C                     	;# 
  1014  0691                     	;# 
  1015  0692                     	;# 
  1016  0693                     	;# 
  1017  0694                     	;# 
  1018  0695                     	;# 
  1019  0696                     	;# 
  1020  0697                     	;# 
  1021  0698                     	;# 
  1022  0699                     	;# 
  1023  069A                     	;# 
  1024  069B                     	;# 
  1025  069C                     	;# 
  1026  069D                     	;# 
  1027  069E                     	;# 
  1028  069F                     	;# 
  1029  0E0F                     	;# 
  1030  0E10                     	;# 
  1031  0E11                     	;# 
  1032  0E12                     	;# 
  1033  0E13                     	;# 
  1034  0E14                     	;# 
  1035  0E15                     	;# 
  1036  0E17                     	;# 
  1037  0E20                     	;# 
  1038  0E21                     	;# 
  1039  0E22                     	;# 
  1040  0E24                     	;# 
  1041  0E25                     	;# 
  1042  0E28                     	;# 
  1043  0E29                     	;# 
  1044  0E2A                     	;# 
  1045  0E2B                     	;# 
  1046  0E90                     	;# 
  1047  0E91                     	;# 
  1048  0E92                     	;# 
  1049  0E94                     	;# 
  1050  0E95                     	;# 
  1051  0EA0                     	;# 
  1052  0EA1                     	;# 
  1053  0EA2                     	;# 
  1054  0EA3                     	;# 
  1055  0EA4                     	;# 
  1056  0EA5                     	;# 
  1057  0F0F                     	;# 
  1058  0F10                     	;# 
  1059  0F11                     	;# 
  1060  0F12                     	;# 
  1061  0F13                     	;# 
  1062  0F14                     	;# 
  1063  0F15                     	;# 
  1064  0F16                     	;# 
  1065  0F17                     	;# 
  1066  0F18                     	;# 
  1067  0F19                     	;# 
  1068  0F1A                     	;# 
  1069  0F1B                     	;# 
  1070  0F1C                     	;# 
  1071  0F1D                     	;# 
  1072  0F1E                     	;# 
  1073  0F1F                     	;# 
  1074  0F20                     	;# 
  1075  0F21                     	;# 
  1076  0F22                     	;# 
  1077  0F23                     	;# 
  1078  0F24                     	;# 
  1079  0F25                     	;# 
  1080  0F26                     	;# 
  1081  0F27                     	;# 
  1082  0F28                     	;# 
  1083  0F29                     	;# 
  1084  0F2A                     	;# 
  1085  0F2B                     	;# 
  1086  0F2C                     	;# 
  1087  0F2D                     	;# 
  1088  0F9E                     	;# 
  1089  0FE4                     	;# 
  1090  0FE5                     	;# 
  1091  0FE6                     	;# 
  1092  0FE7                     	;# 
  1093  0FE8                     	;# 
  1094  0FE9                     	;# 
  1095  0FEA                     	;# 
  1096  0FEB                     	;# 
  1097  0FED                     	;# 
  1098  0FEE                     	;# 
  1099  0FEF                     	;# 
  1100  0000                     	;# 
  1101  0001                     	;# 
  1102  0002                     	;# 
  1103  0003                     	;# 
  1104  0004                     	;# 
  1105  0005                     	;# 
  1106  0006                     	;# 
  1107  0007                     	;# 
  1108  0008                     	;# 
  1109  0009                     	;# 
  1110  000A                     	;# 
  1111  000B                     	;# 
  1112  000C                     	;# 
  1113  000E                     	;# 
  1114  0011                     	;# 
  1115  0012                     	;# 
  1116  0013                     	;# 
  1117  0015                     	;# 
  1118  0016                     	;# 
  1119  0016                     	;# 
  1120  0017                     	;# 
  1121  0018                     	;# 
  1122  0019                     	;# 
  1123  001A                     	;# 
  1124  001B                     	;# 
  1125  001C                     	;# 
  1126  008C                     	;# 
  1127  008E                     	;# 
  1128  0091                     	;# 
  1129  0092                     	;# 
  1130  0093                     	;# 
  1131  0095                     	;# 
  1132  0096                     	;# 
  1133  0097                     	;# 
  1134  0098                     	;# 
  1135  0099                     	;# 
  1136  009A                     	;# 
  1137  009B                     	;# 
  1138  009B                     	;# 
  1139  009C                     	;# 
  1140  009D                     	;# 
  1141  009E                     	;# 
  1142  009F                     	;# 
  1143  010C                     	;# 
  1144  010E                     	;# 
  1145  0111                     	;# 
  1146  0112                     	;# 
  1147  0113                     	;# 
  1148  0114                     	;# 
  1149  0115                     	;# 
  1150  0116                     	;# 
  1151  0117                     	;# 
  1152  0118                     	;# 
  1153  0119                     	;# 
  1154  011C                     	;# 
  1155  018C                     	;# 
  1156  018E                     	;# 
  1157  0191                     	;# 
  1158  0191                     	;# 
  1159  0192                     	;# 
  1160  0193                     	;# 
  1161  0193                     	;# 
  1162  0194                     	;# 
  1163  0195                     	;# 
  1164  0196                     	;# 
  1165  0197                     	;# 
  1166  0199                     	;# 
  1167  0199                     	;# 
  1168  0199                     	;# 
  1169  019A                     	;# 
  1170  019A                     	;# 
  1171  019A                     	;# 
  1172  019B                     	;# 
  1173  019B                     	;# 
  1174  019B                     	;# 
  1175  019B                     	;# 
  1176  019B                     	;# 
  1177  019C                     	;# 
  1178  019C                     	;# 
  1179  019C                     	;# 
  1180  019D                     	;# 
  1181  019D                     	;# 
  1182  019D                     	;# 
  1183  019E                     	;# 
  1184  019E                     	;# 
  1185  019E                     	;# 
  1186  019F                     	;# 
  1187  019F                     	;# 
  1188  019F                     	;# 
  1189  019F                     	;# 
  1190  019F                     	;# 
  1191  020C                     	;# 
  1192  020E                     	;# 
  1193  0211                     	;# 
  1194  0211                     	;# 
  1195  0212                     	;# 
  1196  0212                     	;# 
  1197  0213                     	;# 
  1198  0213                     	;# 
  1199  0214                     	;# 
  1200  0214                     	;# 
  1201  0215                     	;# 
  1202  0215                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0216                     	;# 
  1206  0216                     	;# 
  1207  0217                     	;# 
  1208  0217                     	;# 
  1209  028C                     	;# 
  1210  028E                     	;# 
  1211  0291                     	;# 
  1212  0291                     	;# 
  1213  0292                     	;# 
  1214  0293                     	;# 
  1215  0293                     	;# 
  1216  0298                     	;# 
  1217  0298                     	;# 
  1218  0299                     	;# 
  1219  029A                     	;# 
  1220  029A                     	;# 
  1221  029E                     	;# 
  1222  030C                     	;# 
  1223  030E                     	;# 
  1224  038C                     	;# 
  1225  038E                     	;# 
  1226  0391                     	;# 
  1227  0392                     	;# 
  1228  0393                     	;# 
  1229  0397                     	;# 
  1230  0398                     	;# 
  1231  0399                     	;# 
  1232  0415                     	;# 
  1233  0416                     	;# 
  1234  0417                     	;# 
  1235  041C                     	;# 
  1236  041D                     	;# 
  1237  041E                     	;# 
  1238  0511                     	;# 
  1239  0515                     	;# 
  1240  0617                     	;# 
  1241  0618                     	;# 
  1242  0619                     	;# 
  1243  0619                     	;# 
  1244  061A                     	;# 
  1245  061B                     	;# 
  1246  061C                     	;# 
  1247  061C                     	;# 
  1248  0691                     	;# 
  1249  0692                     	;# 
  1250  0693                     	;# 
  1251  0694                     	;# 
  1252  0695                     	;# 
  1253  0696                     	;# 
  1254  0697                     	;# 
  1255  0698                     	;# 
  1256  0699                     	;# 
  1257  069A                     	;# 
  1258  069B                     	;# 
  1259  069C                     	;# 
  1260  069D                     	;# 
  1261  069E                     	;# 
  1262  069F                     	;# 
  1263  0E0F                     	;# 
  1264  0E10                     	;# 
  1265  0E11                     	;# 
  1266  0E12                     	;# 
  1267  0E13                     	;# 
  1268  0E14                     	;# 
  1269  0E15                     	;# 
  1270  0E17                     	;# 
  1271  0E20                     	;# 
  1272  0E21                     	;# 
  1273  0E22                     	;# 
  1274  0E24                     	;# 
  1275  0E25                     	;# 
  1276  0E28                     	;# 
  1277  0E29                     	;# 
  1278  0E2A                     	;# 
  1279  0E2B                     	;# 
  1280  0E90                     	;# 
  1281  0E91                     	;# 
  1282  0E92                     	;# 
  1283  0E94                     	;# 
  1284  0E95                     	;# 
  1285  0EA0                     	;# 
  1286  0EA1                     	;# 
  1287  0EA2                     	;# 
  1288  0EA3                     	;# 
  1289  0EA4                     	;# 
  1290  0EA5                     	;# 
  1291  0F0F                     	;# 
  1292  0F10                     	;# 
  1293  0F11                     	;# 
  1294  0F12                     	;# 
  1295  0F13                     	;# 
  1296  0F14                     	;# 
  1297  0F15                     	;# 
  1298  0F16                     	;# 
  1299  0F17                     	;# 
  1300  0F18                     	;# 
  1301  0F19                     	;# 
  1302  0F1A                     	;# 
  1303  0F1B                     	;# 
  1304  0F1C                     	;# 
  1305  0F1D                     	;# 
  1306  0F1E                     	;# 
  1307  0F1F                     	;# 
  1308  0F20                     	;# 
  1309  0F21                     	;# 
  1310  0F22                     	;# 
  1311  0F23                     	;# 
  1312  0F24                     	;# 
  1313  0F25                     	;# 
  1314  0F26                     	;# 
  1315  0F27                     	;# 
  1316  0F28                     	;# 
  1317  0F29                     	;# 
  1318  0F2A                     	;# 
  1319  0F2B                     	;# 
  1320  0F2C                     	;# 
  1321  0F2D                     	;# 
  1322  0F9E                     	;# 
  1323  0FE4                     	;# 
  1324  0FE5                     	;# 
  1325  0FE6                     	;# 
  1326  0FE7                     	;# 
  1327  0FE8                     	;# 
  1328  0FE9                     	;# 
  1329  0FEA                     	;# 
  1330  0FEB                     	;# 
  1331  0FED                     	;# 
  1332  0FEE                     	;# 
  1333  0FEF                     	;# 
  1334  0000                     	;# 
  1335  0001                     	;# 
  1336  0002                     	;# 
  1337  0003                     	;# 
  1338  0004                     	;# 
  1339  0005                     	;# 
  1340  0006                     	;# 
  1341  0007                     	;# 
  1342  0008                     	;# 
  1343  0009                     	;# 
  1344  000A                     	;# 
  1345  000B                     	;# 
  1346  000C                     	;# 
  1347  000E                     	;# 
  1348  0011                     	;# 
  1349  0012                     	;# 
  1350  0013                     	;# 
  1351  0015                     	;# 
  1352  0016                     	;# 
  1353  0016                     	;# 
  1354  0017                     	;# 
  1355  0018                     	;# 
  1356  0019                     	;# 
  1357  001A                     	;# 
  1358  001B                     	;# 
  1359  001C                     	;# 
  1360  008C                     	;# 
  1361  008E                     	;# 
  1362  0091                     	;# 
  1363  0092                     	;# 
  1364  0093                     	;# 
  1365  0095                     	;# 
  1366  0096                     	;# 
  1367  0097                     	;# 
  1368  0098                     	;# 
  1369  0099                     	;# 
  1370  009A                     	;# 
  1371  009B                     	;# 
  1372  009B                     	;# 
  1373  009C                     	;# 
  1374  009D                     	;# 
  1375  009E                     	;# 
  1376  009F                     	;# 
  1377  010C                     	;# 
  1378  010E                     	;# 
  1379  0111                     	;# 
  1380  0112                     	;# 
  1381  0113                     	;# 
  1382  0114                     	;# 
  1383  0115                     	;# 
  1384  0116                     	;# 
  1385  0117                     	;# 
  1386  0118                     	;# 
  1387  0119                     	;# 
  1388  011C                     	;# 
  1389  018C                     	;# 
  1390  018E                     	;# 
  1391  0191                     	;# 
  1392  0191                     	;# 
  1393  0192                     	;# 
  1394  0193                     	;# 
  1395  0193                     	;# 
  1396  0194                     	;# 
  1397  0195                     	;# 
  1398  0196                     	;# 
  1399  0197                     	;# 
  1400  0199                     	;# 
  1401  0199                     	;# 
  1402  0199                     	;# 
  1403  019A                     	;# 
  1404  019A                     	;# 
  1405  019A                     	;# 
  1406  019B                     	;# 
  1407  019B                     	;# 
  1408  019B                     	;# 
  1409  019B                     	;# 
  1410  019B                     	;# 
  1411  019C                     	;# 
  1412  019C                     	;# 
  1413  019C                     	;# 
  1414  019D                     	;# 
  1415  019D                     	;# 
  1416  019D                     	;# 
  1417  019E                     	;# 
  1418  019E                     	;# 
  1419  019E                     	;# 
  1420  019F                     	;# 
  1421  019F                     	;# 
  1422  019F                     	;# 
  1423  019F                     	;# 
  1424  019F                     	;# 
  1425  020C                     	;# 
  1426  020E                     	;# 
  1427  0211                     	;# 
  1428  0211                     	;# 
  1429  0212                     	;# 
  1430  0212                     	;# 
  1431  0213                     	;# 
  1432  0213                     	;# 
  1433  0214                     	;# 
  1434  0214                     	;# 
  1435  0215                     	;# 
  1436  0215                     	;# 
  1437  0215                     	;# 
  1438  0215                     	;# 
  1439  0216                     	;# 
  1440  0216                     	;# 
  1441  0217                     	;# 
  1442  0217                     	;# 
  1443  028C                     	;# 
  1444  028E                     	;# 
  1445  0291                     	;# 
  1446  0291                     	;# 
  1447  0292                     	;# 
  1448  0293                     	;# 
  1449  0293                     	;# 
  1450  0298                     	;# 
  1451  0298                     	;# 
  1452  0299                     	;# 
  1453  029A                     	;# 
  1454  029A                     	;# 
  1455  029E                     	;# 
  1456  030C                     	;# 
  1457  030E                     	;# 
  1458  038C                     	;# 
  1459  038E                     	;# 
  1460  0391                     	;# 
  1461  0392                     	;# 
  1462  0393                     	;# 
  1463  0397                     	;# 
  1464  0398                     	;# 
  1465  0399                     	;# 
  1466  0415                     	;# 
  1467  0416                     	;# 
  1468  0417                     	;# 
  1469  041C                     	;# 
  1470  041D                     	;# 
  1471  041E                     	;# 
  1472  0511                     	;# 
  1473  0515                     	;# 
  1474  0617                     	;# 
  1475  0618                     	;# 
  1476  0619                     	;# 
  1477  0619                     	;# 
  1478  061A                     	;# 
  1479  061B                     	;# 
  1480  061C                     	;# 
  1481  061C                     	;# 
  1482  0691                     	;# 
  1483  0692                     	;# 
  1484  0693                     	;# 
  1485  0694                     	;# 
  1486  0695                     	;# 
  1487  0696                     	;# 
  1488  0697                     	;# 
  1489  0698                     	;# 
  1490  0699                     	;# 
  1491  069A                     	;# 
  1492  069B                     	;# 
  1493  069C                     	;# 
  1494  069D                     	;# 
  1495  069E                     	;# 
  1496  069F                     	;# 
  1497  0E0F                     	;# 
  1498  0E10                     	;# 
  1499  0E11                     	;# 
  1500  0E12                     	;# 
  1501  0E13                     	;# 
  1502  0E14                     	;# 
  1503  0E15                     	;# 
  1504  0E17                     	;# 
  1505  0E20                     	;# 
  1506  0E21                     	;# 
  1507  0E22                     	;# 
  1508  0E24                     	;# 
  1509  0E25                     	;# 
  1510  0E28                     	;# 
  1511  0E29                     	;# 
  1512  0E2A                     	;# 
  1513  0E2B                     	;# 
  1514  0E90                     	;# 
  1515  0E91                     	;# 
  1516  0E92                     	;# 
  1517  0E94                     	;# 
  1518  0E95                     	;# 
  1519  0EA0                     	;# 
  1520  0EA1                     	;# 
  1521  0EA2                     	;# 
  1522  0EA3                     	;# 
  1523  0EA4                     	;# 
  1524  0EA5                     	;# 
  1525  0F0F                     	;# 
  1526  0F10                     	;# 
  1527  0F11                     	;# 
  1528  0F12                     	;# 
  1529  0F13                     	;# 
  1530  0F14                     	;# 
  1531  0F15                     	;# 
  1532  0F16                     	;# 
  1533  0F17                     	;# 
  1534  0F18                     	;# 
  1535  0F19                     	;# 
  1536  0F1A                     	;# 
  1537  0F1B                     	;# 
  1538  0F1C                     	;# 
  1539  0F1D                     	;# 
  1540  0F1E                     	;# 
  1541  0F1F                     	;# 
  1542  0F20                     	;# 
  1543  0F21                     	;# 
  1544  0F22                     	;# 
  1545  0F23                     	;# 
  1546  0F24                     	;# 
  1547  0F25                     	;# 
  1548  0F26                     	;# 
  1549  0F27                     	;# 
  1550  0F28                     	;# 
  1551  0F29                     	;# 
  1552  0F2A                     	;# 
  1553  0F2B                     	;# 
  1554  0F2C                     	;# 
  1555  0F2D                     	;# 
  1556  0F9E                     	;# 
  1557  0FE4                     	;# 
  1558  0FE5                     	;# 
  1559  0FE6                     	;# 
  1560  0FE7                     	;# 
  1561  0FE8                     	;# 
  1562  0FE9                     	;# 
  1563  0FEA                     	;# 
  1564  0FEB                     	;# 
  1565  0FED                     	;# 
  1566  0FEE                     	;# 
  1567  0FEF                     	;# 
  1568  0000                     	;# 
  1569  0001                     	;# 
  1570  0002                     	;# 
  1571  0003                     	;# 
  1572  0004                     	;# 
  1573  0005                     	;# 
  1574  0006                     	;# 
  1575  0007                     	;# 
  1576  0008                     	;# 
  1577  0009                     	;# 
  1578  000A                     	;# 
  1579  000B                     	;# 
  1580  000C                     	;# 
  1581  000E                     	;# 
  1582  0011                     	;# 
  1583  0012                     	;# 
  1584  0013                     	;# 
  1585  0015                     	;# 
  1586  0016                     	;# 
  1587  0016                     	;# 
  1588  0017                     	;# 
  1589  0018                     	;# 
  1590  0019                     	;# 
  1591  001A                     	;# 
  1592  001B                     	;# 
  1593  001C                     	;# 
  1594  008C                     	;# 
  1595  008E                     	;# 
  1596  0091                     	;# 
  1597  0092                     	;# 
  1598  0093                     	;# 
  1599  0095                     	;# 
  1600  0096                     	;# 
  1601  0097                     	;# 
  1602  0098                     	;# 
  1603  0099                     	;# 
  1604  009A                     	;# 
  1605  009B                     	;# 
  1606  009B                     	;# 
  1607  009C                     	;# 
  1608  009D                     	;# 
  1609  009E                     	;# 
  1610  009F                     	;# 
  1611  010C                     	;# 
  1612  010E                     	;# 
  1613  0111                     	;# 
  1614  0112                     	;# 
  1615  0113                     	;# 
  1616  0114                     	;# 
  1617  0115                     	;# 
  1618  0116                     	;# 
  1619  0117                     	;# 
  1620  0118                     	;# 
  1621  0119                     	;# 
  1622  011C                     	;# 
  1623  018C                     	;# 
  1624  018E                     	;# 
  1625  0191                     	;# 
  1626  0191                     	;# 
  1627  0192                     	;# 
  1628  0193                     	;# 
  1629  0193                     	;# 
  1630  0194                     	;# 
  1631  0195                     	;# 
  1632  0196                     	;# 
  1633  0197                     	;# 
  1634  0199                     	;# 
  1635  0199                     	;# 
  1636  0199                     	;# 
  1637  019A                     	;# 
  1638  019A                     	;# 
  1639  019A                     	;# 
  1640  019B                     	;# 
  1641  019B                     	;# 
  1642  019B                     	;# 
  1643  019B                     	;# 
  1644  019B                     	;# 
  1645  019C                     	;# 
  1646  019C                     	;# 
  1647  019C                     	;# 
  1648  019D                     	;# 
  1649  019D                     	;# 
  1650  019D                     	;# 
  1651  019E                     	;# 
  1652  019E                     	;# 
  1653  019E                     	;# 
  1654  019F                     	;# 
  1655  019F                     	;# 
  1656  019F                     	;# 
  1657  019F                     	;# 
  1658  019F                     	;# 
  1659  020C                     	;# 
  1660  020E                     	;# 
  1661  0211                     	;# 
  1662  0211                     	;# 
  1663  0212                     	;# 
  1664  0212                     	;# 
  1665  0213                     	;# 
  1666  0213                     	;# 
  1667  0214                     	;# 
  1668  0214                     	;# 
  1669  0215                     	;# 
  1670  0215                     	;# 
  1671  0215                     	;# 
  1672  0215                     	;# 
  1673  0216                     	;# 
  1674  0216                     	;# 
  1675  0217                     	;# 
  1676  0217                     	;# 
  1677  028C                     	;# 
  1678  028E                     	;# 
  1679  0291                     	;# 
  1680  0291                     	;# 
  1681  0292                     	;# 
  1682  0293                     	;# 
  1683  0293                     	;# 
  1684  0298                     	;# 
  1685  0298                     	;# 
  1686  0299                     	;# 
  1687  029A                     	;# 
  1688  029A                     	;# 
  1689  029E                     	;# 
  1690  030C                     	;# 
  1691  030E                     	;# 
  1692  038C                     	;# 
  1693  038E                     	;# 
  1694  0391                     	;# 
  1695  0392                     	;# 
  1696  0393                     	;# 
  1697  0397                     	;# 
  1698  0398                     	;# 
  1699  0399                     	;# 
  1700  0415                     	;# 
  1701  0416                     	;# 
  1702  0417                     	;# 
  1703  041C                     	;# 
  1704  041D                     	;# 
  1705  041E                     	;# 
  1706  0511                     	;# 
  1707  0515                     	;# 
  1708  0617                     	;# 
  1709  0618                     	;# 
  1710  0619                     	;# 
  1711  0619                     	;# 
  1712  061A                     	;# 
  1713  061B                     	;# 
  1714  061C                     	;# 
  1715  061C                     	;# 
  1716  0691                     	;# 
  1717  0692                     	;# 
  1718  0693                     	;# 
  1719  0694                     	;# 
  1720  0695                     	;# 
  1721  0696                     	;# 
  1722  0697                     	;# 
  1723  0698                     	;# 
  1724  0699                     	;# 
  1725  069A                     	;# 
  1726  069B                     	;# 
  1727  069C                     	;# 
  1728  069D                     	;# 
  1729  069E                     	;# 
  1730  069F                     	;# 
  1731  0E0F                     	;# 
  1732  0E10                     	;# 
  1733  0E11                     	;# 
  1734  0E12                     	;# 
  1735  0E13                     	;# 
  1736  0E14                     	;# 
  1737  0E15                     	;# 
  1738  0E17                     	;# 
  1739  0E20                     	;# 
  1740  0E21                     	;# 
  1741  0E22                     	;# 
  1742  0E24                     	;# 
  1743  0E25                     	;# 
  1744  0E28                     	;# 
  1745  0E29                     	;# 
  1746  0E2A                     	;# 
  1747  0E2B                     	;# 
  1748  0E90                     	;# 
  1749  0E91                     	;# 
  1750  0E92                     	;# 
  1751  0E94                     	;# 
  1752  0E95                     	;# 
  1753  0EA0                     	;# 
  1754  0EA1                     	;# 
  1755  0EA2                     	;# 
  1756  0EA3                     	;# 
  1757  0EA4                     	;# 
  1758  0EA5                     	;# 
  1759  0F0F                     	;# 
  1760  0F10                     	;# 
  1761  0F11                     	;# 
  1762  0F12                     	;# 
  1763  0F13                     	;# 
  1764  0F14                     	;# 
  1765  0F15                     	;# 
  1766  0F16                     	;# 
  1767  0F17                     	;# 
  1768  0F18                     	;# 
  1769  0F19                     	;# 
  1770  0F1A                     	;# 
  1771  0F1B                     	;# 
  1772  0F1C                     	;# 
  1773  0F1D                     	;# 
  1774  0F1E                     	;# 
  1775  0F1F                     	;# 
  1776  0F20                     	;# 
  1777  0F21                     	;# 
  1778  0F22                     	;# 
  1779  0F23                     	;# 
  1780  0F24                     	;# 
  1781  0F25                     	;# 
  1782  0F26                     	;# 
  1783  0F27                     	;# 
  1784  0F28                     	;# 
  1785  0F29                     	;# 
  1786  0F2A                     	;# 
  1787  0F2B                     	;# 
  1788  0F2C                     	;# 
  1789  0F2D                     	;# 
  1790  0F9E                     	;# 
  1791  0FE4                     	;# 
  1792  0FE5                     	;# 
  1793  0FE6                     	;# 
  1794  0FE7                     	;# 
  1795  0FE8                     	;# 
  1796  0FE9                     	;# 
  1797  0FEA                     	;# 
  1798  0FEB                     	;# 
  1799  0FED                     	;# 
  1800  0FEE                     	;# 
  1801  0FEF                     	;# 
  1802  0000                     	;# 
  1803  0001                     	;# 
  1804  0002                     	;# 
  1805  0003                     	;# 
  1806  0004                     	;# 
  1807  0005                     	;# 
  1808  0006                     	;# 
  1809  0007                     	;# 
  1810  0008                     	;# 
  1811  0009                     	;# 
  1812  000A                     	;# 
  1813  000B                     	;# 
  1814  000C                     	;# 
  1815  000E                     	;# 
  1816  0011                     	;# 
  1817  0012                     	;# 
  1818  0013                     	;# 
  1819  0015                     	;# 
  1820  0016                     	;# 
  1821  0016                     	;# 
  1822  0017                     	;# 
  1823  0018                     	;# 
  1824  0019                     	;# 
  1825  001A                     	;# 
  1826  001B                     	;# 
  1827  001C                     	;# 
  1828  008C                     	;# 
  1829  008E                     	;# 
  1830  0091                     	;# 
  1831  0092                     	;# 
  1832  0093                     	;# 
  1833  0095                     	;# 
  1834  0096                     	;# 
  1835  0097                     	;# 
  1836  0098                     	;# 
  1837  0099                     	;# 
  1838  009A                     	;# 
  1839  009B                     	;# 
  1840  009B                     	;# 
  1841  009C                     	;# 
  1842  009D                     	;# 
  1843  009E                     	;# 
  1844  009F                     	;# 
  1845  010C                     	;# 
  1846  010E                     	;# 
  1847  0111                     	;# 
  1848  0112                     	;# 
  1849  0113                     	;# 
  1850  0114                     	;# 
  1851  0115                     	;# 
  1852  0116                     	;# 
  1853  0117                     	;# 
  1854  0118                     	;# 
  1855  0119                     	;# 
  1856  011C                     	;# 
  1857  018C                     	;# 
  1858  018E                     	;# 
  1859  0191                     	;# 
  1860  0191                     	;# 
  1861  0192                     	;# 
  1862  0193                     	;# 
  1863  0193                     	;# 
  1864  0194                     	;# 
  1865  0195                     	;# 
  1866  0196                     	;# 
  1867  0197                     	;# 
  1868  0199                     	;# 
  1869  0199                     	;# 
  1870  0199                     	;# 
  1871  019A                     	;# 
  1872  019A                     	;# 
  1873  019A                     	;# 
  1874  019B                     	;# 
  1875  019B                     	;# 
  1876  019B                     	;# 
  1877  019B                     	;# 
  1878  019B                     	;# 
  1879  019C                     	;# 
  1880  019C                     	;# 
  1881  019C                     	;# 
  1882  019D                     	;# 
  1883  019D                     	;# 
  1884  019D                     	;# 
  1885  019E                     	;# 
  1886  019E                     	;# 
  1887  019E                     	;# 
  1888  019F                     	;# 
  1889  019F                     	;# 
  1890  019F                     	;# 
  1891  019F                     	;# 
  1892  019F                     	;# 
  1893  020C                     	;# 
  1894  020E                     	;# 
  1895  0211                     	;# 
  1896  0211                     	;# 
  1897  0212                     	;# 
  1898  0212                     	;# 
  1899  0213                     	;# 
  1900  0213                     	;# 
  1901  0214                     	;# 
  1902  0214                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0215                     	;# 
  1906  0215                     	;# 
  1907  0216                     	;# 
  1908  0216                     	;# 
  1909  0217                     	;# 
  1910  0217                     	;# 
  1911  028C                     	;# 
  1912  028E                     	;# 
  1913  0291                     	;# 
  1914  0291                     	;# 
  1915  0292                     	;# 
  1916  0293                     	;# 
  1917  0293                     	;# 
  1918  0298                     	;# 
  1919  0298                     	;# 
  1920  0299                     	;# 
  1921  029A                     	;# 
  1922  029A                     	;# 
  1923  029E                     	;# 
  1924  030C                     	;# 
  1925  030E                     	;# 
  1926  038C                     	;# 
  1927  038E                     	;# 
  1928  0391                     	;# 
  1929  0392                     	;# 
  1930  0393                     	;# 
  1931  0397                     	;# 
  1932  0398                     	;# 
  1933  0399                     	;# 
  1934  0415                     	;# 
  1935  0416                     	;# 
  1936  0417                     	;# 
  1937  041C                     	;# 
  1938  041D                     	;# 
  1939  041E                     	;# 
  1940  0511                     	;# 
  1941  0515                     	;# 
  1942  0617                     	;# 
  1943  0618                     	;# 
  1944  0619                     	;# 
  1945  0619                     	;# 
  1946  061A                     	;# 
  1947  061B                     	;# 
  1948  061C                     	;# 
  1949  061C                     	;# 
  1950  0691                     	;# 
  1951  0692                     	;# 
  1952  0693                     	;# 
  1953  0694                     	;# 
  1954  0695                     	;# 
  1955  0696                     	;# 
  1956  0697                     	;# 
  1957  0698                     	;# 
  1958  0699                     	;# 
  1959  069A                     	;# 
  1960  069B                     	;# 
  1961  069C                     	;# 
  1962  069D                     	;# 
  1963  069E                     	;# 
  1964  069F                     	;# 
  1965  0E0F                     	;# 
  1966  0E10                     	;# 
  1967  0E11                     	;# 
  1968  0E12                     	;# 
  1969  0E13                     	;# 
  1970  0E14                     	;# 
  1971  0E15                     	;# 
  1972  0E17                     	;# 
  1973  0E20                     	;# 
  1974  0E21                     	;# 
  1975  0E22                     	;# 
  1976  0E24                     	;# 
  1977  0E25                     	;# 
  1978  0E28                     	;# 
  1979  0E29                     	;# 
  1980  0E2A                     	;# 
  1981  0E2B                     	;# 
  1982  0E90                     	;# 
  1983  0E91                     	;# 
  1984  0E92                     	;# 
  1985  0E94                     	;# 
  1986  0E95                     	;# 
  1987  0EA0                     	;# 
  1988  0EA1                     	;# 
  1989  0EA2                     	;# 
  1990  0EA3                     	;# 
  1991  0EA4                     	;# 
  1992  0EA5                     	;# 
  1993  0F0F                     	;# 
  1994  0F10                     	;# 
  1995  0F11                     	;# 
  1996  0F12                     	;# 
  1997  0F13                     	;# 
  1998  0F14                     	;# 
  1999  0F15                     	;# 
  2000  0F16                     	;# 
  2001  0F17                     	;# 
  2002  0F18                     	;# 
  2003  0F19                     	;# 
  2004  0F1A                     	;# 
  2005  0F1B                     	;# 
  2006  0F1C                     	;# 
  2007  0F1D                     	;# 
  2008  0F1E                     	;# 
  2009  0F1F                     	;# 
  2010  0F20                     	;# 
  2011  0F21                     	;# 
  2012  0F22                     	;# 
  2013  0F23                     	;# 
  2014  0F24                     	;# 
  2015  0F25                     	;# 
  2016  0F26                     	;# 
  2017  0F27                     	;# 
  2018  0F28                     	;# 
  2019  0F29                     	;# 
  2020  0F2A                     	;# 
  2021  0F2B                     	;# 
  2022  0F2C                     	;# 
  2023  0F2D                     	;# 
  2024  0F9E                     	;# 
  2025  0FE4                     	;# 
  2026  0FE5                     	;# 
  2027  0FE6                     	;# 
  2028  0FE7                     	;# 
  2029  0FE8                     	;# 
  2030  0FE9                     	;# 
  2031  0FEA                     	;# 
  2032  0FEB                     	;# 
  2033  0FED                     	;# 
  2034  0FEE                     	;# 
  2035  0FEF                     	;# 
  2036  0000                     	;# 
  2037  0001                     	;# 
  2038  0002                     	;# 
  2039  0003                     	;# 
  2040  0004                     	;# 
  2041  0005                     	;# 
  2042  0006                     	;# 
  2043  0007                     	;# 
  2044  0008                     	;# 
  2045  0009                     	;# 
  2046  000A                     	;# 
  2047  000B                     	;# 
  2048  000C                     	;# 
  2049  000E                     	;# 
  2050  0011                     	;# 
  2051  0012                     	;# 
  2052  0013                     	;# 
  2053  0015                     	;# 
  2054  0016                     	;# 
  2055  0016                     	;# 
  2056  0017                     	;# 
  2057  0018                     	;# 
  2058  0019                     	;# 
  2059  001A                     	;# 
  2060  001B                     	;# 
  2061  001C                     	;# 
  2062  008C                     	;# 
  2063  008E                     	;# 
  2064  0091                     	;# 
  2065  0092                     	;# 
  2066  0093                     	;# 
  2067  0095                     	;# 
  2068  0096                     	;# 
  2069  0097                     	;# 
  2070  0098                     	;# 
  2071  0099                     	;# 
  2072  009A                     	;# 
  2073  009B                     	;# 
  2074  009B                     	;# 
  2075  009C                     	;# 
  2076  009D                     	;# 
  2077  009E                     	;# 
  2078  009F                     	;# 
  2079  010C                     	;# 
  2080  010E                     	;# 
  2081  0111                     	;# 
  2082  0112                     	;# 
  2083  0113                     	;# 
  2084  0114                     	;# 
  2085  0115                     	;# 
  2086  0116                     	;# 
  2087  0117                     	;# 
  2088  0118                     	;# 
  2089  0119                     	;# 
  2090  011C                     	;# 
  2091  018C                     	;# 
  2092  018E                     	;# 
  2093  0191                     	;# 
  2094  0191                     	;# 
  2095  0192                     	;# 
  2096  0193                     	;# 
  2097  0193                     	;# 
  2098  0194                     	;# 
  2099  0195                     	;# 
  2100  0196                     	;# 
  2101  0197                     	;# 
  2102  0199                     	;# 
  2103  0199                     	;# 
  2104  0199                     	;# 
  2105  019A                     	;# 
  2106  019A                     	;# 
  2107  019A                     	;# 
  2108  019B                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019C                     	;# 
  2115  019C                     	;# 
  2116  019D                     	;# 
  2117  019D                     	;# 
  2118  019D                     	;# 
  2119  019E                     	;# 
  2120  019E                     	;# 
  2121  019E                     	;# 
  2122  019F                     	;# 
  2123  019F                     	;# 
  2124  019F                     	;# 
  2125  019F                     	;# 
  2126  019F                     	;# 
  2127  020C                     	;# 
  2128  020E                     	;# 
  2129  0211                     	;# 
  2130  0211                     	;# 
  2131  0212                     	;# 
  2132  0212                     	;# 
  2133  0213                     	;# 
  2134  0213                     	;# 
  2135  0214                     	;# 
  2136  0214                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0215                     	;# 
  2140  0215                     	;# 
  2141  0216                     	;# 
  2142  0216                     	;# 
  2143  0217                     	;# 
  2144  0217                     	;# 
  2145  028C                     	;# 
  2146  028E                     	;# 
  2147  0291                     	;# 
  2148  0291                     	;# 
  2149  0292                     	;# 
  2150  0293                     	;# 
  2151  0293                     	;# 
  2152  0298                     	;# 
  2153  0298                     	;# 
  2154  0299                     	;# 
  2155  029A                     	;# 
  2156  029A                     	;# 
  2157  029E                     	;# 
  2158  030C                     	;# 
  2159  030E                     	;# 
  2160  038C                     	;# 
  2161  038E                     	;# 
  2162  0391                     	;# 
  2163  0392                     	;# 
  2164  0393                     	;# 
  2165  0397                     	;# 
  2166  0398                     	;# 
  2167  0399                     	;# 
  2168  0415                     	;# 
  2169  0416                     	;# 
  2170  0417                     	;# 
  2171  041C                     	;# 
  2172  041D                     	;# 
  2173  041E                     	;# 
  2174  0511                     	;# 
  2175  0515                     	;# 
  2176  0617                     	;# 
  2177  0618                     	;# 
  2178  0619                     	;# 
  2179  0619                     	;# 
  2180  061A                     	;# 
  2181  061B                     	;# 
  2182  061C                     	;# 
  2183  061C                     	;# 
  2184  0691                     	;# 
  2185  0692                     	;# 
  2186  0693                     	;# 
  2187  0694                     	;# 
  2188  0695                     	;# 
  2189  0696                     	;# 
  2190  0697                     	;# 
  2191  0698                     	;# 
  2192  0699                     	;# 
  2193  069A                     	;# 
  2194  069B                     	;# 
  2195  069C                     	;# 
  2196  069D                     	;# 
  2197  069E                     	;# 
  2198  069F                     	;# 
  2199  0E0F                     	;# 
  2200  0E10                     	;# 
  2201  0E11                     	;# 
  2202  0E12                     	;# 
  2203  0E13                     	;# 
  2204  0E14                     	;# 
  2205  0E15                     	;# 
  2206  0E17                     	;# 
  2207  0E20                     	;# 
  2208  0E21                     	;# 
  2209  0E22                     	;# 
  2210  0E24                     	;# 
  2211  0E25                     	;# 
  2212  0E28                     	;# 
  2213  0E29                     	;# 
  2214  0E2A                     	;# 
  2215  0E2B                     	;# 
  2216  0E90                     	;# 
  2217  0E91                     	;# 
  2218  0E92                     	;# 
  2219  0E94                     	;# 
  2220  0E95                     	;# 
  2221  0EA0                     	;# 
  2222  0EA1                     	;# 
  2223  0EA2                     	;# 
  2224  0EA3                     	;# 
  2225  0EA4                     	;# 
  2226  0EA5                     	;# 
  2227  0F0F                     	;# 
  2228  0F10                     	;# 
  2229  0F11                     	;# 
  2230  0F12                     	;# 
  2231  0F13                     	;# 
  2232  0F14                     	;# 
  2233  0F15                     	;# 
  2234  0F16                     	;# 
  2235  0F17                     	;# 
  2236  0F18                     	;# 
  2237  0F19                     	;# 
  2238  0F1A                     	;# 
  2239  0F1B                     	;# 
  2240  0F1C                     	;# 
  2241  0F1D                     	;# 
  2242  0F1E                     	;# 
  2243  0F1F                     	;# 
  2244  0F20                     	;# 
  2245  0F21                     	;# 
  2246  0F22                     	;# 
  2247  0F23                     	;# 
  2248  0F24                     	;# 
  2249  0F25                     	;# 
  2250  0F26                     	;# 
  2251  0F27                     	;# 
  2252  0F28                     	;# 
  2253  0F29                     	;# 
  2254  0F2A                     	;# 
  2255  0F2B                     	;# 
  2256  0F2C                     	;# 
  2257  0F2D                     	;# 
  2258  0F9E                     	;# 
  2259  0FE4                     	;# 
  2260  0FE5                     	;# 
  2261  0FE6                     	;# 
  2262  0FE7                     	;# 
  2263  0FE8                     	;# 
  2264  0FE9                     	;# 
  2265  0FEA                     	;# 
  2266  0FEB                     	;# 
  2267  0FED                     	;# 
  2268  0FEE                     	;# 
  2269  0FEF                     	;# 
  2270  0000                     	;# 
  2271  0001                     	;# 
  2272  0002                     	;# 
  2273  0003                     	;# 
  2274  0004                     	;# 
  2275  0005                     	;# 
  2276  0006                     	;# 
  2277  0007                     	;# 
  2278  0008                     	;# 
  2279  0009                     	;# 
  2280  000A                     	;# 
  2281  000B                     	;# 
  2282  000C                     	;# 
  2283  000E                     	;# 
  2284  0011                     	;# 
  2285  0012                     	;# 
  2286  0013                     	;# 
  2287  0015                     	;# 
  2288  0016                     	;# 
  2289  0016                     	;# 
  2290  0017                     	;# 
  2291  0018                     	;# 
  2292  0019                     	;# 
  2293  001A                     	;# 
  2294  001B                     	;# 
  2295  001C                     	;# 
  2296  008C                     	;# 
  2297  008E                     	;# 
  2298  0091                     	;# 
  2299  0092                     	;# 
  2300  0093                     	;# 
  2301  0095                     	;# 
  2302  0096                     	;# 
  2303  0097                     	;# 
  2304  0098                     	;# 
  2305  0099                     	;# 
  2306  009A                     	;# 
  2307  009B                     	;# 
  2308  009B                     	;# 
  2309  009C                     	;# 
  2310  009D                     	;# 
  2311  009E                     	;# 
  2312  009F                     	;# 
  2313  010C                     	;# 
  2314  010E                     	;# 
  2315  0111                     	;# 
  2316  0112                     	;# 
  2317  0113                     	;# 
  2318  0114                     	;# 
  2319  0115                     	;# 
  2320  0116                     	;# 
  2321  0117                     	;# 
  2322  0118                     	;# 
  2323  0119                     	;# 
  2324  011C                     	;# 
  2325  018C                     	;# 
  2326  018E                     	;# 
  2327  0191                     	;# 
  2328  0191                     	;# 
  2329  0192                     	;# 
  2330  0193                     	;# 
  2331  0193                     	;# 
  2332  0194                     	;# 
  2333  0195                     	;# 
  2334  0196                     	;# 
  2335  0197                     	;# 
  2336  0199                     	;# 
  2337  0199                     	;# 
  2338  0199                     	;# 
  2339  019A                     	;# 
  2340  019A                     	;# 
  2341  019A                     	;# 
  2342  019B                     	;# 
  2343  019B                     	;# 
  2344  019B                     	;# 
  2345  019B                     	;# 
  2346  019B                     	;# 
  2347  019C                     	;# 
  2348  019C                     	;# 
  2349  019C                     	;# 
  2350  019D                     	;# 
  2351  019D                     	;# 
  2352  019D                     	;# 
  2353  019E                     	;# 
  2354  019E                     	;# 
  2355  019E                     	;# 
  2356  019F                     	;# 
  2357  019F                     	;# 
  2358  019F                     	;# 
  2359  019F                     	;# 
  2360  019F                     	;# 
  2361  020C                     	;# 
  2362  020E                     	;# 
  2363  0211                     	;# 
  2364  0211                     	;# 
  2365  0212                     	;# 
  2366  0212                     	;# 
  2367  0213                     	;# 
  2368  0213                     	;# 
  2369  0214                     	;# 
  2370  0214                     	;# 
  2371  0215                     	;# 
  2372  0215                     	;# 
  2373  0215                     	;# 
  2374  0215                     	;# 
  2375  0216                     	;# 
  2376  0216                     	;# 
  2377  0217                     	;# 
  2378  0217                     	;# 
  2379  028C                     	;# 
  2380  028E                     	;# 
  2381  0291                     	;# 
  2382  0291                     	;# 
  2383  0292                     	;# 
  2384  0293                     	;# 
  2385  0293                     	;# 
  2386  0298                     	;# 
  2387  0298                     	;# 
  2388  0299                     	;# 
  2389  029A                     	;# 
  2390  029A                     	;# 
  2391  029E                     	;# 
  2392  030C                     	;# 
  2393  030E                     	;# 
  2394  038C                     	;# 
  2395  038E                     	;# 
  2396  0391                     	;# 
  2397  0392                     	;# 
  2398  0393                     	;# 
  2399  0397                     	;# 
  2400  0398                     	;# 
  2401  0399                     	;# 
  2402  0415                     	;# 
  2403  0416                     	;# 
  2404  0417                     	;# 
  2405  041C                     	;# 
  2406  041D                     	;# 
  2407  041E                     	;# 
  2408  0511                     	;# 
  2409  0515                     	;# 
  2410  0617                     	;# 
  2411  0618                     	;# 
  2412  0619                     	;# 
  2413  0619                     	;# 
  2414  061A                     	;# 
  2415  061B                     	;# 
  2416  061C                     	;# 
  2417  061C                     	;# 
  2418  0691                     	;# 
  2419  0692                     	;# 
  2420  0693                     	;# 
  2421  0694                     	;# 
  2422  0695                     	;# 
  2423  0696                     	;# 
  2424  0697                     	;# 
  2425  0698                     	;# 
  2426  0699                     	;# 
  2427  069A                     	;# 
  2428  069B                     	;# 
  2429  069C                     	;# 
  2430  069D                     	;# 
  2431  069E                     	;# 
  2432  069F                     	;# 
  2433  0E0F                     	;# 
  2434  0E10                     	;# 
  2435  0E11                     	;# 
  2436  0E12                     	;# 
  2437  0E13                     	;# 
  2438  0E14                     	;# 
  2439  0E15                     	;# 
  2440  0E17                     	;# 
  2441  0E20                     	;# 
  2442  0E21                     	;# 
  2443  0E22                     	;# 
  2444  0E24                     	;# 
  2445  0E25                     	;# 
  2446  0E28                     	;# 
  2447  0E29                     	;# 
  2448  0E2A                     	;# 
  2449  0E2B                     	;# 
  2450  0E90                     	;# 
  2451  0E91                     	;# 
  2452  0E92                     	;# 
  2453  0E94                     	;# 
  2454  0E95                     	;# 
  2455  0EA0                     	;# 
  2456  0EA1                     	;# 
  2457  0EA2                     	;# 
  2458  0EA3                     	;# 
  2459  0EA4                     	;# 
  2460  0EA5                     	;# 
  2461  0F0F                     	;# 
  2462  0F10                     	;# 
  2463  0F11                     	;# 
  2464  0F12                     	;# 
  2465  0F13                     	;# 
  2466  0F14                     	;# 
  2467  0F15                     	;# 
  2468  0F16                     	;# 
  2469  0F17                     	;# 
  2470  0F18                     	;# 
  2471  0F19                     	;# 
  2472  0F1A                     	;# 
  2473  0F1B                     	;# 
  2474  0F1C                     	;# 
  2475  0F1D                     	;# 
  2476  0F1E                     	;# 
  2477  0F1F                     	;# 
  2478  0F20                     	;# 
  2479  0F21                     	;# 
  2480  0F22                     	;# 
  2481  0F23                     	;# 
  2482  0F24                     	;# 
  2483  0F25                     	;# 
  2484  0F26                     	;# 
  2485  0F27                     	;# 
  2486  0F28                     	;# 
  2487  0F29                     	;# 
  2488  0F2A                     	;# 
  2489  0F2B                     	;# 
  2490  0F2C                     	;# 
  2491  0F2D                     	;# 
  2492  0F9E                     	;# 
  2493  0FE4                     	;# 
  2494  0FE5                     	;# 
  2495  0FE6                     	;# 
  2496  0FE7                     	;# 
  2497  0FE8                     	;# 
  2498  0FE9                     	;# 
  2499  0FEA                     	;# 
  2500  0FEB                     	;# 
  2501  0FED                     	;# 
  2502  0FEE                     	;# 
  2503  0FEF                     	;# 
  2504  0000                     	;# 
  2505  0001                     	;# 
  2506  0002                     	;# 
  2507  0003                     	;# 
  2508  0004                     	;# 
  2509  0005                     	;# 
  2510  0006                     	;# 
  2511  0007                     	;# 
  2512  0008                     	;# 
  2513  0009                     	;# 
  2514  000A                     	;# 
  2515  000B                     	;# 
  2516  000C                     	;# 
  2517  000E                     	;# 
  2518  0011                     	;# 
  2519  0012                     	;# 
  2520  0013                     	;# 
  2521  0015                     	;# 
  2522  0016                     	;# 
  2523  0016                     	;# 
  2524  0017                     	;# 
  2525  0018                     	;# 
  2526  0019                     	;# 
  2527  001A                     	;# 
  2528  001B                     	;# 
  2529  001C                     	;# 
  2530  008C                     	;# 
  2531  008E                     	;# 
  2532  0091                     	;# 
  2533  0092                     	;# 
  2534  0093                     	;# 
  2535  0095                     	;# 
  2536  0096                     	;# 
  2537  0097                     	;# 
  2538  0098                     	;# 
  2539  0099                     	;# 
  2540  009A                     	;# 
  2541  009B                     	;# 
  2542  009B                     	;# 
  2543  009C                     	;# 
  2544  009D                     	;# 
  2545  009E                     	;# 
  2546  009F                     	;# 
  2547  010C                     	;# 
  2548  010E                     	;# 
  2549  0111                     	;# 
  2550  0112                     	;# 
  2551  0113                     	;# 
  2552  0114                     	;# 
  2553  0115                     	;# 
  2554  0116                     	;# 
  2555  0117                     	;# 
  2556  0118                     	;# 
  2557  0119                     	;# 
  2558  011C                     	;# 
  2559  018C                     	;# 
  2560  018E                     	;# 
  2561  0191                     	;# 
  2562  0191                     	;# 
  2563  0192                     	;# 
  2564  0193                     	;# 
  2565  0193                     	;# 
  2566  0194                     	;# 
  2567  0195                     	;# 
  2568  0196                     	;# 
  2569  0197                     	;# 
  2570  0199                     	;# 
  2571  0199                     	;# 
  2572  0199                     	;# 
  2573  019A                     	;# 
  2574  019A                     	;# 
  2575  019A                     	;# 
  2576  019B                     	;# 
  2577  019B                     	;# 
  2578  019B                     	;# 
  2579  019B                     	;# 
  2580  019B                     	;# 
  2581  019C                     	;# 
  2582  019C                     	;# 
  2583  019C                     	;# 
  2584  019D                     	;# 
  2585  019D                     	;# 
  2586  019D                     	;# 
  2587  019E                     	;# 
  2588  019E                     	;# 
  2589  019E                     	;# 
  2590  019F                     	;# 
  2591  019F                     	;# 
  2592  019F                     	;# 
  2593  019F                     	;# 
  2594  019F                     	;# 
  2595  020C                     	;# 
  2596  020E                     	;# 
  2597  0211                     	;# 
  2598  0211                     	;# 
  2599  0212                     	;# 
  2600  0212                     	;# 
  2601  0213                     	;# 
  2602  0213                     	;# 
  2603  0214                     	;# 
  2604  0214                     	;# 
  2605  0215                     	;# 
  2606  0215                     	;# 
  2607  0215                     	;# 
  2608  0215                     	;# 
  2609  0216                     	;# 
  2610  0216                     	;# 
  2611  0217                     	;# 
  2612  0217                     	;# 
  2613  028C                     	;# 
  2614  028E                     	;# 
  2615  0291                     	;# 
  2616  0291                     	;# 
  2617  0292                     	;# 
  2618  0293                     	;# 
  2619  0293                     	;# 
  2620  0298                     	;# 
  2621  0298                     	;# 
  2622  0299                     	;# 
  2623  029A                     	;# 
  2624  029A                     	;# 
  2625  029E                     	;# 
  2626  030C                     	;# 
  2627  030E                     	;# 
  2628  038C                     	;# 
  2629  038E                     	;# 
  2630  0391                     	;# 
  2631  0392                     	;# 
  2632  0393                     	;# 
  2633  0397                     	;# 
  2634  0398                     	;# 
  2635  0399                     	;# 
  2636  0415                     	;# 
  2637  0416                     	;# 
  2638  0417                     	;# 
  2639  041C                     	;# 
  2640  041D                     	;# 
  2641  041E                     	;# 
  2642  0511                     	;# 
  2643  0515                     	;# 
  2644  0617                     	;# 
  2645  0618                     	;# 
  2646  0619                     	;# 
  2647  0619                     	;# 
  2648  061A                     	;# 
  2649  061B                     	;# 
  2650  061C                     	;# 
  2651  061C                     	;# 
  2652  0691                     	;# 
  2653  0692                     	;# 
  2654  0693                     	;# 
  2655  0694                     	;# 
  2656  0695                     	;# 
  2657  0696                     	;# 
  2658  0697                     	;# 
  2659  0698                     	;# 
  2660  0699                     	;# 
  2661  069A                     	;# 
  2662  069B                     	;# 
  2663  069C                     	;# 
  2664  069D                     	;# 
  2665  069E                     	;# 
  2666  069F                     	;# 
  2667  0E0F                     	;# 
  2668  0E10                     	;# 
  2669  0E11                     	;# 
  2670  0E12                     	;# 
  2671  0E13                     	;# 
  2672  0E14                     	;# 
  2673  0E15                     	;# 
  2674  0E17                     	;# 
  2675  0E20                     	;# 
  2676  0E21                     	;# 
  2677  0E22                     	;# 
  2678  0E24                     	;# 
  2679  0E25                     	;# 
  2680  0E28                     	;# 
  2681  0E29                     	;# 
  2682  0E2A                     	;# 
  2683  0E2B                     	;# 
  2684  0E90                     	;# 
  2685  0E91                     	;# 
  2686  0E92                     	;# 
  2687  0E94                     	;# 
  2688  0E95                     	;# 
  2689  0EA0                     	;# 
  2690  0EA1                     	;# 
  2691  0EA2                     	;# 
  2692  0EA3                     	;# 
  2693  0EA4                     	;# 
  2694  0EA5                     	;# 
  2695  0F0F                     	;# 
  2696  0F10                     	;# 
  2697  0F11                     	;# 
  2698  0F12                     	;# 
  2699  0F13                     	;# 
  2700  0F14                     	;# 
  2701  0F15                     	;# 
  2702  0F16                     	;# 
  2703  0F17                     	;# 
  2704  0F18                     	;# 
  2705  0F19                     	;# 
  2706  0F1A                     	;# 
  2707  0F1B                     	;# 
  2708  0F1C                     	;# 
  2709  0F1D                     	;# 
  2710  0F1E                     	;# 
  2711  0F1F                     	;# 
  2712  0F20                     	;# 
  2713  0F21                     	;# 
  2714  0F22                     	;# 
  2715  0F23                     	;# 
  2716  0F24                     	;# 
  2717  0F25                     	;# 
  2718  0F26                     	;# 
  2719  0F27                     	;# 
  2720  0F28                     	;# 
  2721  0F29                     	;# 
  2722  0F2A                     	;# 
  2723  0F2B                     	;# 
  2724  0F2C                     	;# 
  2725  0F2D                     	;# 
  2726  0F9E                     	;# 
  2727  0FE4                     	;# 
  2728  0FE5                     	;# 
  2729  0FE6                     	;# 
  2730  0FE7                     	;# 
  2731  0FE8                     	;# 
  2732  0FE9                     	;# 
  2733  0FEA                     	;# 
  2734  0FEB                     	;# 
  2735  0FED                     	;# 
  2736  0FEE                     	;# 
  2737  0FEF                     	;# 
  2738  0000                     	;# 
  2739  0001                     	;# 
  2740  0002                     	;# 
  2741  0003                     	;# 
  2742  0004                     	;# 
  2743  0005                     	;# 
  2744  0006                     	;# 
  2745  0007                     	;# 
  2746  0008                     	;# 
  2747  0009                     	;# 
  2748  000A                     	;# 
  2749  000B                     	;# 
  2750  000C                     	;# 
  2751  000E                     	;# 
  2752  0011                     	;# 
  2753  0012                     	;# 
  2754  0013                     	;# 
  2755  0015                     	;# 
  2756  0016                     	;# 
  2757  0016                     	;# 
  2758  0017                     	;# 
  2759  0018                     	;# 
  2760  0019                     	;# 
  2761  001A                     	;# 
  2762  001B                     	;# 
  2763  001C                     	;# 
  2764  008C                     	;# 
  2765  008E                     	;# 
  2766  0091                     	;# 
  2767  0092                     	;# 
  2768  0093                     	;# 
  2769  0095                     	;# 
  2770  0096                     	;# 
  2771  0097                     	;# 
  2772  0098                     	;# 
  2773  0099                     	;# 
  2774  009A                     	;# 
  2775  009B                     	;# 
  2776  009B                     	;# 
  2777  009C                     	;# 
  2778  009D                     	;# 
  2779  009E                     	;# 
  2780  009F                     	;# 
  2781  010C                     	;# 
  2782  010E                     	;# 
  2783  0111                     	;# 
  2784  0112                     	;# 
  2785  0113                     	;# 
  2786  0114                     	;# 
  2787  0115                     	;# 
  2788  0116                     	;# 
  2789  0117                     	;# 
  2790  0118                     	;# 
  2791  0119                     	;# 
  2792  011C                     	;# 
  2793  018C                     	;# 
  2794  018E                     	;# 
  2795  0191                     	;# 
  2796  0191                     	;# 
  2797  0192                     	;# 
  2798  0193                     	;# 
  2799  0193                     	;# 
  2800  0194                     	;# 
  2801  0195                     	;# 
  2802  0196                     	;# 
  2803  0197                     	;# 
  2804  0199                     	;# 
  2805  0199                     	;# 
  2806  0199                     	;# 
  2807  019A                     	;# 
  2808  019A                     	;# 
  2809  019A                     	;# 
  2810  019B                     	;# 
  2811  019B                     	;# 
  2812  019B                     	;# 
  2813  019B                     	;# 
  2814  019B                     	;# 
  2815  019C                     	;# 
  2816  019C                     	;# 
  2817  019C                     	;# 
  2818  019D                     	;# 
  2819  019D                     	;# 
  2820  019D                     	;# 
  2821  019E                     	;# 
  2822  019E                     	;# 
  2823  019E                     	;# 
  2824  019F                     	;# 
  2825  019F                     	;# 
  2826  019F                     	;# 
  2827  019F                     	;# 
  2828  019F                     	;# 
  2829  020C                     	;# 
  2830  020E                     	;# 
  2831  0211                     	;# 
  2832  0211                     	;# 
  2833  0212                     	;# 
  2834  0212                     	;# 
  2835  0213                     	;# 
  2836  0213                     	;# 
  2837  0214                     	;# 
  2838  0214                     	;# 
  2839  0215                     	;# 
  2840  0215                     	;# 
  2841  0215                     	;# 
  2842  0215                     	;# 
  2843  0216                     	;# 
  2844  0216                     	;# 
  2845  0217                     	;# 
  2846  0217                     	;# 
  2847  028C                     	;# 
  2848  028E                     	;# 
  2849  0291                     	;# 
  2850  0291                     	;# 
  2851  0292                     	;# 
  2852  0293                     	;# 
  2853  0293                     	;# 
  2854  0298                     	;# 
  2855  0298                     	;# 
  2856  0299                     	;# 
  2857  029A                     	;# 
  2858  029A                     	;# 
  2859  029E                     	;# 
  2860  030C                     	;# 
  2861  030E                     	;# 
  2862  038C                     	;# 
  2863  038E                     	;# 
  2864  0391                     	;# 
  2865  0392                     	;# 
  2866  0393                     	;# 
  2867  0397                     	;# 
  2868  0398                     	;# 
  2869  0399                     	;# 
  2870  0415                     	;# 
  2871  0416                     	;# 
  2872  0417                     	;# 
  2873  041C                     	;# 
  2874  041D                     	;# 
  2875  041E                     	;# 
  2876  0511                     	;# 
  2877  0515                     	;# 
  2878  0617                     	;# 
  2879  0618                     	;# 
  2880  0619                     	;# 
  2881  0619                     	;# 
  2882  061A                     	;# 
  2883  061B                     	;# 
  2884  061C                     	;# 
  2885  061C                     	;# 
  2886  0691                     	;# 
  2887  0692                     	;# 
  2888  0693                     	;# 
  2889  0694                     	;# 
  2890  0695                     	;# 
  2891  0696                     	;# 
  2892  0697                     	;# 
  2893  0698                     	;# 
  2894  0699                     	;# 
  2895  069A                     	;# 
  2896  069B                     	;# 
  2897  069C                     	;# 
  2898  069D                     	;# 
  2899  069E                     	;# 
  2900  069F                     	;# 
  2901  0E0F                     	;# 
  2902  0E10                     	;# 
  2903  0E11                     	;# 
  2904  0E12                     	;# 
  2905  0E13                     	;# 
  2906  0E14                     	;# 
  2907  0E15                     	;# 
  2908  0E17                     	;# 
  2909  0E20                     	;# 
  2910  0E21                     	;# 
  2911  0E22                     	;# 
  2912  0E24                     	;# 
  2913  0E25                     	;# 
  2914  0E28                     	;# 
  2915  0E29                     	;# 
  2916  0E2A                     	;# 
  2917  0E2B                     	;# 
  2918  0E90                     	;# 
  2919  0E91                     	;# 
  2920  0E92                     	;# 
  2921  0E94                     	;# 
  2922  0E95                     	;# 
  2923  0EA0                     	;# 
  2924  0EA1                     	;# 
  2925  0EA2                     	;# 
  2926  0EA3                     	;# 
  2927  0EA4                     	;# 
  2928  0EA5                     	;# 
  2929  0F0F                     	;# 
  2930  0F10                     	;# 
  2931  0F11                     	;# 
  2932  0F12                     	;# 
  2933  0F13                     	;# 
  2934  0F14                     	;# 
  2935  0F15                     	;# 
  2936  0F16                     	;# 
  2937  0F17                     	;# 
  2938  0F18                     	;# 
  2939  0F19                     	;# 
  2940  0F1A                     	;# 
  2941  0F1B                     	;# 
  2942  0F1C                     	;# 
  2943  0F1D                     	;# 
  2944  0F1E                     	;# 
  2945  0F1F                     	;# 
  2946  0F20                     	;# 
  2947  0F21                     	;# 
  2948  0F22                     	;# 
  2949  0F23                     	;# 
  2950  0F24                     	;# 
  2951  0F25                     	;# 
  2952  0F26                     	;# 
  2953  0F27                     	;# 
  2954  0F28                     	;# 
  2955  0F29                     	;# 
  2956  0F2A                     	;# 
  2957  0F2B                     	;# 
  2958  0F2C                     	;# 
  2959  0F2D                     	;# 
  2960  0F9E                     	;# 
  2961  0FE4                     	;# 
  2962  0FE5                     	;# 
  2963  0FE6                     	;# 
  2964  0FE7                     	;# 
  2965  0FE8                     	;# 
  2966  0FE9                     	;# 
  2967  0FEA                     	;# 
  2968  0FEB                     	;# 
  2969  0FED                     	;# 
  2970  0FEE                     	;# 
  2971  0FEF                     	;# 
  2972  0000                     	;# 
  2973  0001                     	;# 
  2974  0002                     	;# 
  2975  0003                     	;# 
  2976  0004                     	;# 
  2977  0005                     	;# 
  2978  0006                     	;# 
  2979  0007                     	;# 
  2980  0008                     	;# 
  2981  0009                     	;# 
  2982  000A                     	;# 
  2983  000B                     	;# 
  2984  000C                     	;# 
  2985  000E                     	;# 
  2986  0011                     	;# 
  2987  0012                     	;# 
  2988  0013                     	;# 
  2989  0015                     	;# 
  2990  0016                     	;# 
  2991  0016                     	;# 
  2992  0017                     	;# 
  2993  0018                     	;# 
  2994  0019                     	;# 
  2995  001A                     	;# 
  2996  001B                     	;# 
  2997  001C                     	;# 
  2998  008C                     	;# 
  2999  008E                     	;# 
  3000  0091                     	;# 
  3001  0092                     	;# 
  3002  0093                     	;# 
  3003  0095                     	;# 
  3004  0096                     	;# 
  3005  0097                     	;# 
  3006  0098                     	;# 
  3007  0099                     	;# 
  3008  009A                     	;# 
  3009  009B                     	;# 
  3010  009B                     	;# 
  3011  009C                     	;# 
  3012  009D                     	;# 
  3013  009E                     	;# 
  3014  009F                     	;# 
  3015  010C                     	;# 
  3016  010E                     	;# 
  3017  0111                     	;# 
  3018  0112                     	;# 
  3019  0113                     	;# 
  3020  0114                     	;# 
  3021  0115                     	;# 
  3022  0116                     	;# 
  3023  0117                     	;# 
  3024  0118                     	;# 
  3025  0119                     	;# 
  3026  011C                     	;# 
  3027  018C                     	;# 
  3028  018E                     	;# 
  3029  0191                     	;# 
  3030  0191                     	;# 
  3031  0192                     	;# 
  3032  0193                     	;# 
  3033  0193                     	;# 
  3034  0194                     	;# 
  3035  0195                     	;# 
  3036  0196                     	;# 
  3037  0197                     	;# 
  3038  0199                     	;# 
  3039  0199                     	;# 
  3040  0199                     	;# 
  3041  019A                     	;# 
  3042  019A                     	;# 
  3043  019A                     	;# 
  3044  019B                     	;# 
  3045  019B                     	;# 
  3046  019B                     	;# 
  3047  019B                     	;# 
  3048  019B                     	;# 
  3049  019C                     	;# 
  3050  019C                     	;# 
  3051  019C                     	;# 
  3052  019D                     	;# 
  3053  019D                     	;# 
  3054  019D                     	;# 
  3055  019E                     	;# 
  3056  019E                     	;# 
  3057  019E                     	;# 
  3058  019F                     	;# 
  3059  019F                     	;# 
  3060  019F                     	;# 
  3061  019F                     	;# 
  3062  019F                     	;# 
  3063  020C                     	;# 
  3064  020E                     	;# 
  3065  0211                     	;# 
  3066  0211                     	;# 
  3067  0212                     	;# 
  3068  0212                     	;# 
  3069  0213                     	;# 
  3070  0213                     	;# 
  3071  0214                     	;# 
  3072  0214                     	;# 
  3073  0215                     	;# 
  3074  0215                     	;# 
  3075  0215                     	;# 
  3076  0215                     	;# 
  3077  0216                     	;# 
  3078  0216                     	;# 
  3079  0217                     	;# 
  3080  0217                     	;# 
  3081  028C                     	;# 
  3082  028E                     	;# 
  3083  0291                     	;# 
  3084  0291                     	;# 
  3085  0292                     	;# 
  3086  0293                     	;# 
  3087  0293                     	;# 
  3088  0298                     	;# 
  3089  0298                     	;# 
  3090  0299                     	;# 
  3091  029A                     	;# 
  3092  029A                     	;# 
  3093  029E                     	;# 
  3094  030C                     	;# 
  3095  030E                     	;# 
  3096  038C                     	;# 
  3097  038E                     	;# 
  3098  0391                     	;# 
  3099  0392                     	;# 
  3100  0393                     	;# 
  3101  0397                     	;# 
  3102  0398                     	;# 
  3103  0399                     	;# 
  3104  0415                     	;# 
  3105  0416                     	;# 
  3106  0417                     	;# 
  3107  041C                     	;# 
  3108  041D                     	;# 
  3109  041E                     	;# 
  3110  0511                     	;# 
  3111  0515                     	;# 
  3112  0617                     	;# 
  3113  0618                     	;# 
  3114  0619                     	;# 
  3115  0619                     	;# 
  3116  061A                     	;# 
  3117  061B                     	;# 
  3118  061C                     	;# 
  3119  061C                     	;# 
  3120  0691                     	;# 
  3121  0692                     	;# 
  3122  0693                     	;# 
  3123  0694                     	;# 
  3124  0695                     	;# 
  3125  0696                     	;# 
  3126  0697                     	;# 
  3127  0698                     	;# 
  3128  0699                     	;# 
  3129  069A                     	;# 
  3130  069B                     	;# 
  3131  069C                     	;# 
  3132  069D                     	;# 
  3133  069E                     	;# 
  3134  069F                     	;# 
  3135  0E0F                     	;# 
  3136  0E10                     	;# 
  3137  0E11                     	;# 
  3138  0E12                     	;# 
  3139  0E13                     	;# 
  3140  0E14                     	;# 
  3141  0E15                     	;# 
  3142  0E17                     	;# 
  3143  0E20                     	;# 
  3144  0E21                     	;# 
  3145  0E22                     	;# 
  3146  0E24                     	;# 
  3147  0E25                     	;# 
  3148  0E28                     	;# 
  3149  0E29                     	;# 
  3150  0E2A                     	;# 
  3151  0E2B                     	;# 
  3152  0E90                     	;# 
  3153  0E91                     	;# 
  3154  0E92                     	;# 
  3155  0E94                     	;# 
  3156  0E95                     	;# 
  3157  0EA0                     	;# 
  3158  0EA1                     	;# 
  3159  0EA2                     	;# 
  3160  0EA3                     	;# 
  3161  0EA4                     	;# 
  3162  0EA5                     	;# 
  3163  0F0F                     	;# 
  3164  0F10                     	;# 
  3165  0F11                     	;# 
  3166  0F12                     	;# 
  3167  0F13                     	;# 
  3168  0F14                     	;# 
  3169  0F15                     	;# 
  3170  0F16                     	;# 
  3171  0F17                     	;# 
  3172  0F18                     	;# 
  3173  0F19                     	;# 
  3174  0F1A                     	;# 
  3175  0F1B                     	;# 
  3176  0F1C                     	;# 
  3177  0F1D                     	;# 
  3178  0F1E                     	;# 
  3179  0F1F                     	;# 
  3180  0F20                     	;# 
  3181  0F21                     	;# 
  3182  0F22                     	;# 
  3183  0F23                     	;# 
  3184  0F24                     	;# 
  3185  0F25                     	;# 
  3186  0F26                     	;# 
  3187  0F27                     	;# 
  3188  0F28                     	;# 
  3189  0F29                     	;# 
  3190  0F2A                     	;# 
  3191  0F2B                     	;# 
  3192  0F2C                     	;# 
  3193  0F2D                     	;# 
  3194  0F9E                     	;# 
  3195  0FE4                     	;# 
  3196  0FE5                     	;# 
  3197  0FE6                     	;# 
  3198  0FE7                     	;# 
  3199  0FE8                     	;# 
  3200  0FE9                     	;# 
  3201  0FEA                     	;# 
  3202  0FEB                     	;# 
  3203  0FED                     	;# 
  3204  0FEE                     	;# 
  3205  0FEF                     	;# 
  3206  0000                     	;# 
  3207  0001                     	;# 
  3208  0002                     	;# 
  3209  0003                     	;# 
  3210  0004                     	;# 
  3211  0005                     	;# 
  3212  0006                     	;# 
  3213  0007                     	;# 
  3214  0008                     	;# 
  3215  0009                     	;# 
  3216  000A                     	;# 
  3217  000B                     	;# 
  3218  000C                     	;# 
  3219  000E                     	;# 
  3220  0011                     	;# 
  3221  0012                     	;# 
  3222  0013                     	;# 
  3223  0015                     	;# 
  3224  0016                     	;# 
  3225  0016                     	;# 
  3226  0017                     	;# 
  3227  0018                     	;# 
  3228  0019                     	;# 
  3229  001A                     	;# 
  3230  001B                     	;# 
  3231  001C                     	;# 
  3232  008C                     	;# 
  3233  008E                     	;# 
  3234  0091                     	;# 
  3235  0092                     	;# 
  3236  0093                     	;# 
  3237  0095                     	;# 
  3238  0096                     	;# 
  3239  0097                     	;# 
  3240  0098                     	;# 
  3241  0099                     	;# 
  3242  009A                     	;# 
  3243  009B                     	;# 
  3244  009B                     	;# 
  3245  009C                     	;# 
  3246  009D                     	;# 
  3247  009E                     	;# 
  3248  009F                     	;# 
  3249  010C                     	;# 
  3250  010E                     	;# 
  3251  0111                     	;# 
  3252  0112                     	;# 
  3253  0113                     	;# 
  3254  0114                     	;# 
  3255  0115                     	;# 
  3256  0116                     	;# 
  3257  0117                     	;# 
  3258  0118                     	;# 
  3259  0119                     	;# 
  3260  011C                     	;# 
  3261  018C                     	;# 
  3262  018E                     	;# 
  3263  0191                     	;# 
  3264  0191                     	;# 
  3265  0192                     	;# 
  3266  0193                     	;# 
  3267  0193                     	;# 
  3268  0194                     	;# 
  3269  0195                     	;# 
  3270  0196                     	;# 
  3271  0197                     	;# 
  3272  0199                     	;# 
  3273  0199                     	;# 
  3274  0199                     	;# 
  3275  019A                     	;# 
  3276  019A                     	;# 
  3277  019A                     	;# 
  3278  019B                     	;# 
  3279  019B                     	;# 
  3280  019B                     	;# 
  3281  019B                     	;# 
  3282  019B                     	;# 
  3283  019C                     	;# 
  3284  019C                     	;# 
  3285  019C                     	;# 
  3286  019D                     	;# 
  3287  019D                     	;# 
  3288  019D                     	;# 
  3289  019E                     	;# 
  3290  019E                     	;# 
  3291  019E                     	;# 
  3292  019F                     	;# 
  3293  019F                     	;# 
  3294  019F                     	;# 
  3295  019F                     	;# 
  3296  019F                     	;# 
  3297  020C                     	;# 
  3298  020E                     	;# 
  3299  0211                     	;# 
  3300  0211                     	;# 
  3301  0212                     	;# 
  3302  0212                     	;# 
  3303  0213                     	;# 
  3304  0213                     	;# 
  3305  0214                     	;# 
  3306  0214                     	;# 
  3307  0215                     	;# 
  3308  0215                     	;# 
  3309  0215                     	;# 
  3310  0215                     	;# 
  3311  0216                     	;# 
  3312  0216                     	;# 
  3313  0217                     	;# 
  3314  0217                     	;# 
  3315  028C                     	;# 
  3316  028E                     	;# 
  3317  0291                     	;# 
  3318  0291                     	;# 
  3319  0292                     	;# 
  3320  0293                     	;# 
  3321  0293                     	;# 
  3322  0298                     	;# 
  3323  0298                     	;# 
  3324  0299                     	;# 
  3325  029A                     	;# 
  3326  029A                     	;# 
  3327  029E                     	;# 
  3328  030C                     	;# 
  3329  030E                     	;# 
  3330  038C                     	;# 
  3331  038E                     	;# 
  3332  0391                     	;# 
  3333  0392                     	;# 
  3334  0393                     	;# 
  3335  0397                     	;# 
  3336  0398                     	;# 
  3337  0399                     	;# 
  3338  0415                     	;# 
  3339  0416                     	;# 
  3340  0417                     	;# 
  3341  041C                     	;# 
  3342  041D                     	;# 
  3343  041E                     	;# 
  3344  0511                     	;# 
  3345  0515                     	;# 
  3346  0617                     	;# 
  3347  0618                     	;# 
  3348  0619                     	;# 
  3349  0619                     	;# 
  3350  061A                     	;# 
  3351  061B                     	;# 
  3352  061C                     	;# 
  3353  061C                     	;# 
  3354  0691                     	;# 
  3355  0692                     	;# 
  3356  0693                     	;# 
  3357  0694                     	;# 
  3358  0695                     	;# 
  3359  0696                     	;# 
  3360  0697                     	;# 
  3361  0698                     	;# 
  3362  0699                     	;# 
  3363  069A                     	;# 
  3364  069B                     	;# 
  3365  069C                     	;# 
  3366  069D                     	;# 
  3367  069E                     	;# 
  3368  069F                     	;# 
  3369  0E0F                     	;# 
  3370  0E10                     	;# 
  3371  0E11                     	;# 
  3372  0E12                     	;# 
  3373  0E13                     	;# 
  3374  0E14                     	;# 
  3375  0E15                     	;# 
  3376  0E17                     	;# 
  3377  0E20                     	;# 
  3378  0E21                     	;# 
  3379  0E22                     	;# 
  3380  0E24                     	;# 
  3381  0E25                     	;# 
  3382  0E28                     	;# 
  3383  0E29                     	;# 
  3384  0E2A                     	;# 
  3385  0E2B                     	;# 
  3386  0E90                     	;# 
  3387  0E91                     	;# 
  3388  0E92                     	;# 
  3389  0E94                     	;# 
  3390  0E95                     	;# 
  3391  0EA0                     	;# 
  3392  0EA1                     	;# 
  3393  0EA2                     	;# 
  3394  0EA3                     	;# 
  3395  0EA4                     	;# 
  3396  0EA5                     	;# 
  3397  0F0F                     	;# 
  3398  0F10                     	;# 
  3399  0F11                     	;# 
  3400  0F12                     	;# 
  3401  0F13                     	;# 
  3402  0F14                     	;# 
  3403  0F15                     	;# 
  3404  0F16                     	;# 
  3405  0F17                     	;# 
  3406  0F18                     	;# 
  3407  0F19                     	;# 
  3408  0F1A                     	;# 
  3409  0F1B                     	;# 
  3410  0F1C                     	;# 
  3411  0F1D                     	;# 
  3412  0F1E                     	;# 
  3413  0F1F                     	;# 
  3414  0F20                     	;# 
  3415  0F21                     	;# 
  3416  0F22                     	;# 
  3417  0F23                     	;# 
  3418  0F24                     	;# 
  3419  0F25                     	;# 
  3420  0F26                     	;# 
  3421  0F27                     	;# 
  3422  0F28                     	;# 
  3423  0F29                     	;# 
  3424  0F2A                     	;# 
  3425  0F2B                     	;# 
  3426  0F2C                     	;# 
  3427  0F2D                     	;# 
  3428  0F9E                     	;# 
  3429  0FE4                     	;# 
  3430  0FE5                     	;# 
  3431  0FE6                     	;# 
  3432  0FE7                     	;# 
  3433  0FE8                     	;# 
  3434  0FE9                     	;# 
  3435  0FEA                     	;# 
  3436  0FEB                     	;# 
  3437  0FED                     	;# 
  3438  0FEE                     	;# 
  3439  0FEF                     	;# 
  3440  0000                     	;# 
  3441  0001                     	;# 
  3442  0002                     	;# 
  3443  0003                     	;# 
  3444  0004                     	;# 
  3445  0005                     	;# 
  3446  0006                     	;# 
  3447  0007                     	;# 
  3448  0008                     	;# 
  3449  0009                     	;# 
  3450  000A                     	;# 
  3451  000B                     	;# 
  3452  000C                     	;# 
  3453  000E                     	;# 
  3454  0011                     	;# 
  3455  0012                     	;# 
  3456  0013                     	;# 
  3457  0015                     	;# 
  3458  0016                     	;# 
  3459  0016                     	;# 
  3460  0017                     	;# 
  3461  0018                     	;# 
  3462  0019                     	;# 
  3463  001A                     	;# 
  3464  001B                     	;# 
  3465  001C                     	;# 
  3466  008C                     	;# 
  3467  008E                     	;# 
  3468  0091                     	;# 
  3469  0092                     	;# 
  3470  0093                     	;# 
  3471  0095                     	;# 
  3472  0096                     	;# 
  3473  0097                     	;# 
  3474  0098                     	;# 
  3475  0099                     	;# 
  3476  009A                     	;# 
  3477  009B                     	;# 
  3478  009B                     	;# 
  3479  009C                     	;# 
  3480  009D                     	;# 
  3481  009E                     	;# 
  3482  009F                     	;# 
  3483  010C                     	;# 
  3484  010E                     	;# 
  3485  0111                     	;# 
  3486  0112                     	;# 
  3487  0113                     	;# 
  3488  0114                     	;# 
  3489  0115                     	;# 
  3490  0116                     	;# 
  3491  0117                     	;# 
  3492  0118                     	;# 
  3493  0119                     	;# 
  3494  011C                     	;# 
  3495  018C                     	;# 
  3496  018E                     	;# 
  3497  0191                     	;# 
  3498  0191                     	;# 
  3499  0192                     	;# 
  3500  0193                     	;# 
  3501  0193                     	;# 
  3502  0194                     	;# 
  3503  0195                     	;# 
  3504  0196                     	;# 
  3505  0197                     	;# 
  3506  0199                     	;# 
  3507  0199                     	;# 
  3508  0199                     	;# 
  3509  019A                     	;# 
  3510  019A                     	;# 
  3511  019A                     	;# 
  3512  019B                     	;# 
  3513  019B                     	;# 
  3514  019B                     	;# 
  3515  019B                     	;# 
  3516  019B                     	;# 
  3517  019C                     	;# 
  3518  019C                     	;# 
  3519  019C                     	;# 
  3520  019D                     	;# 
  3521  019D                     	;# 
  3522  019D                     	;# 
  3523  019E                     	;# 
  3524  019E                     	;# 
  3525  019E                     	;# 
  3526  019F                     	;# 
  3527  019F                     	;# 
  3528  019F                     	;# 
  3529  019F                     	;# 
  3530  019F                     	;# 
  3531  020C                     	;# 
  3532  020E                     	;# 
  3533  0211                     	;# 
  3534  0211                     	;# 
  3535  0212                     	;# 
  3536  0212                     	;# 
  3537  0213                     	;# 
  3538  0213                     	;# 
  3539  0214                     	;# 
  3540  0214                     	;# 
  3541  0215                     	;# 
  3542  0215                     	;# 
  3543  0215                     	;# 
  3544  0215                     	;# 
  3545  0216                     	;# 
  3546  0216                     	;# 
  3547  0217                     	;# 
  3548  0217                     	;# 
  3549  028C                     	;# 
  3550  028E                     	;# 
  3551  0291                     	;# 
  3552  0291                     	;# 
  3553  0292                     	;# 
  3554  0293                     	;# 
  3555  0293                     	;# 
  3556  0298                     	;# 
  3557  0298                     	;# 
  3558  0299                     	;# 
  3559  029A                     	;# 
  3560  029A                     	;# 
  3561  029E                     	;# 
  3562  030C                     	;# 
  3563  030E                     	;# 
  3564  038C                     	;# 
  3565  038E                     	;# 
  3566  0391                     	;# 
  3567  0392                     	;# 
  3568  0393                     	;# 
  3569  0397                     	;# 
  3570  0398                     	;# 
  3571  0399                     	;# 
  3572  0415                     	;# 
  3573  0416                     	;# 
  3574  0417                     	;# 
  3575  041C                     	;# 
  3576  041D                     	;# 
  3577  041E                     	;# 
  3578  0511                     	;# 
  3579  0515                     	;# 
  3580  0617                     	;# 
  3581  0618                     	;# 
  3582  0619                     	;# 
  3583  0619                     	;# 
  3584  061A                     	;# 
  3585  061B                     	;# 
  3586  061C                     	;# 
  3587  061C                     	;# 
  3588  0691                     	;# 
  3589  0692                     	;# 
  3590  0693                     	;# 
  3591  0694                     	;# 
  3592  0695                     	;# 
  3593  0696                     	;# 
  3594  0697                     	;# 
  3595  0698                     	;# 
  3596  0699                     	;# 
  3597  069A                     	;# 
  3598  069B                     	;# 
  3599  069C                     	;# 
  3600  069D                     	;# 
  3601  069E                     	;# 
  3602  069F                     	;# 
  3603  0E0F                     	;# 
  3604  0E10                     	;# 
  3605  0E11                     	;# 
  3606  0E12                     	;# 
  3607  0E13                     	;# 
  3608  0E14                     	;# 
  3609  0E15                     	;# 
  3610  0E17                     	;# 
  3611  0E20                     	;# 
  3612  0E21                     	;# 
  3613  0E22                     	;# 
  3614  0E24                     	;# 
  3615  0E25                     	;# 
  3616  0E28                     	;# 
  3617  0E29                     	;# 
  3618  0E2A                     	;# 
  3619  0E2B                     	;# 
  3620  0E90                     	;# 
  3621  0E91                     	;# 
  3622  0E92                     	;# 
  3623  0E94                     	;# 
  3624  0E95                     	;# 
  3625  0EA0                     	;# 
  3626  0EA1                     	;# 
  3627  0EA2                     	;# 
  3628  0EA3                     	;# 
  3629  0EA4                     	;# 
  3630  0EA5                     	;# 
  3631  0F0F                     	;# 
  3632  0F10                     	;# 
  3633  0F11                     	;# 
  3634  0F12                     	;# 
  3635  0F13                     	;# 
  3636  0F14                     	;# 
  3637  0F15                     	;# 
  3638  0F16                     	;# 
  3639  0F17                     	;# 
  3640  0F18                     	;# 
  3641  0F19                     	;# 
  3642  0F1A                     	;# 
  3643  0F1B                     	;# 
  3644  0F1C                     	;# 
  3645  0F1D                     	;# 
  3646  0F1E                     	;# 
  3647  0F1F                     	;# 
  3648  0F20                     	;# 
  3649  0F21                     	;# 
  3650  0F22                     	;# 
  3651  0F23                     	;# 
  3652  0F24                     	;# 
  3653  0F25                     	;# 
  3654  0F26                     	;# 
  3655  0F27                     	;# 
  3656  0F28                     	;# 
  3657  0F29                     	;# 
  3658  0F2A                     	;# 
  3659  0F2B                     	;# 
  3660  0F2C                     	;# 
  3661  0F2D                     	;# 
  3662  0F9E                     	;# 
  3663  0FE4                     	;# 
  3664  0FE5                     	;# 
  3665  0FE6                     	;# 
  3666  0FE7                     	;# 
  3667  0FE8                     	;# 
  3668  0FE9                     	;# 
  3669  0FEA                     	;# 
  3670  0FEB                     	;# 
  3671  0FED                     	;# 
  3672  0FEE                     	;# 
  3673  0FEF                     	;# 
  3674                           
  3675                           	psect	idataBANK0
  3676  0002                     __pidataBANK0:	
  3677                           
  3678                           ;initializer for _lock_isr
  3679  0002  3401               	retlw	1
  3680                           
  3681                           ;initializer for _init_required
  3682  0003  3401               	retlw	1
  3683                           
  3684                           	psect	idataBANK1
  3685  0873                     __pidataBANK1:	
  3686                           
  3687                           ;initializer for uart_task@none
  3688  0873  3402               	retlw	2
  3689                           
  3690                           	psect	idataBANK2
  3691  13A5                     __pidataBANK2:	
  3692                           
  3693                           ;initializer for _reset_duration_ms
  3694  13A5  34FF               	retlw	255
  3695  13A6  34FF               	retlw	255
  3696                           
  3697                           ;initializer for _duty_count_down_max
  3698  13A7  340A               	retlw	10
  3699  13A8  3400               	retlw	0
  3700                           
  3701                           ;initializer for _duty_pwm_dec
  3702  13A9  3404               	retlw	4
  3703  13AA  3400               	retlw	0
  3704                           
  3705                           ;initializer for _duty_count_up_max
  3706  13AB  3405               	retlw	5
  3707  13AC  3400               	retlw	0
  3708                           
  3709                           	psect	stringtext1
  3710  0072                     __pstringtext1:	
  3711  0072                     _v_table:	
  3712  0072  3400               	retlw	0
  3713  0073  3400               	retlw	0
  3714  0074  3401               	retlw	1
  3715  0075  3400               	retlw	0
  3716  0076  3402               	retlw	2
  3717  0077  3400               	retlw	0
  3718  0078  3402               	retlw	2
  3719  0079  3400               	retlw	0
  3720  007A  3403               	retlw	3
  3721  007B  3400               	retlw	0
  3722  007C  3404               	retlw	4
  3723  007D  3400               	retlw	0
  3724  007E  3405               	retlw	5
  3725  007F  3400               	retlw	0
  3726  0080  3406               	retlw	6
  3727  0081  3400               	retlw	0
  3728  0082  3407               	retlw	7
  3729  0083  3400               	retlw	0
  3730  0084  3407               	retlw	7
  3731  0085  3400               	retlw	0
  3732  0086  3408               	retlw	8
  3733  0087  3400               	retlw	0
  3734  0088  3409               	retlw	9
  3735  0089  3400               	retlw	0
  3736  008A  340A               	retlw	10
  3737  008B  3400               	retlw	0
  3738  008C  340B               	retlw	11
  3739  008D  3400               	retlw	0
  3740  008E  340B               	retlw	11
  3741  008F  3400               	retlw	0
  3742  0090  340C               	retlw	12
  3743  0091  3400               	retlw	0
  3744  0092  340D               	retlw	13
  3745  0093  3400               	retlw	0
  3746  0094  340E               	retlw	14
  3747  0095  3400               	retlw	0
  3748  0096  340F               	retlw	15
  3749  0097  3400               	retlw	0
  3750  0098  3410               	retlw	16
  3751  0099  3400               	retlw	0
  3752  009A  3410               	retlw	16
  3753  009B  3400               	retlw	0
  3754  009C  3411               	retlw	17
  3755  009D  3400               	retlw	0
  3756  009E  3412               	retlw	18
  3757  009F  3400               	retlw	0
  3758  00A0  3413               	retlw	19
  3759  00A1  3400               	retlw	0
  3760  00A2  3414               	retlw	20
  3761  00A3  3400               	retlw	0
  3762  00A4  3415               	retlw	21
  3763  00A5  3400               	retlw	0
  3764  00A6  3415               	retlw	21
  3765  00A7  3400               	retlw	0
  3766  00A8  3416               	retlw	22
  3767  00A9  3400               	retlw	0
  3768  00AA  3417               	retlw	23
  3769  00AB  3400               	retlw	0
  3770  00AC  3418               	retlw	24
  3771  00AD  3400               	retlw	0
  3772  00AE  3419               	retlw	25
  3773  00AF  3400               	retlw	0
  3774  00B0  3419               	retlw	25
  3775  00B1  3400               	retlw	0
  3776  00B2  341A               	retlw	26
  3777  00B3  3400               	retlw	0
  3778  00B4  341B               	retlw	27
  3779  00B5  3400               	retlw	0
  3780  00B6  341C               	retlw	28
  3781  00B7  3400               	retlw	0
  3782  00B8  341D               	retlw	29
  3783  00B9  3400               	retlw	0
  3784  00BA  341E               	retlw	30
  3785  00BB  3400               	retlw	0
  3786  00BC  341E               	retlw	30
  3787  00BD  3400               	retlw	0
  3788  00BE  341F               	retlw	31
  3789  00BF  3400               	retlw	0
  3790  00C0  3420               	retlw	32
  3791  00C1  3400               	retlw	0
  3792  00C2  3421               	retlw	33
  3793  00C3  3400               	retlw	0
  3794  00C4  3422               	retlw	34
  3795  00C5  3400               	retlw	0
  3796  00C6  3422               	retlw	34
  3797  00C7  3400               	retlw	0
  3798  00C8  3423               	retlw	35
  3799  00C9  3400               	retlw	0
  3800  00CA  3424               	retlw	36
  3801  00CB  3400               	retlw	0
  3802  00CC  3425               	retlw	37
  3803  00CD  3400               	retlw	0
  3804  00CE  3426               	retlw	38
  3805  00CF  3400               	retlw	0
  3806  00D0  3427               	retlw	39
  3807  00D1  3400               	retlw	0
  3808  00D2  3427               	retlw	39
  3809  00D3  3400               	retlw	0
  3810  00D4  3428               	retlw	40
  3811  00D5  3400               	retlw	0
  3812  00D6  3429               	retlw	41
  3813  00D7  3400               	retlw	0
  3814  00D8  342A               	retlw	42
  3815  00D9  3400               	retlw	0
  3816  00DA  342B               	retlw	43
  3817  00DB  3400               	retlw	0
  3818  00DC  342C               	retlw	44
  3819  00DD  3400               	retlw	0
  3820  00DE  342C               	retlw	44
  3821  00DF  3400               	retlw	0
  3822  00E0  342D               	retlw	45
  3823  00E1  3400               	retlw	0
  3824  00E2  342E               	retlw	46
  3825  00E3  3400               	retlw	0
  3826  00E4  342F               	retlw	47
  3827  00E5  3400               	retlw	0
  3828  00E6  3430               	retlw	48
  3829  00E7  3400               	retlw	0
  3830  00E8  3430               	retlw	48
  3831  00E9  3400               	retlw	0
  3832  00EA  3431               	retlw	49
  3833  00EB  3400               	retlw	0
  3834  00EC  3432               	retlw	50
  3835  00ED  3400               	retlw	0
  3836  00EE  3433               	retlw	51
  3837  00EF  3400               	retlw	0
  3838  00F0  3434               	retlw	52
  3839  00F1  3400               	retlw	0
  3840  00F2  3435               	retlw	53
  3841  00F3  3400               	retlw	0
  3842  00F4  3435               	retlw	53
  3843  00F5  3400               	retlw	0
  3844  00F6  3436               	retlw	54
  3845  00F7  3400               	retlw	0
  3846  00F8  3437               	retlw	55
  3847  00F9  3400               	retlw	0
  3848  00FA  3438               	retlw	56
  3849  00FB  3400               	retlw	0
  3850  00FC  3439               	retlw	57
  3851  00FD  3400               	retlw	0
  3852  00FE  3439               	retlw	57
  3853  00FF  3400               	retlw	0
  3854  0100  343A               	retlw	58
  3855  0101  3400               	retlw	0
  3856  0102  343B               	retlw	59
  3857  0103  3400               	retlw	0
  3858  0104  343C               	retlw	60
  3859  0105  3400               	retlw	0
  3860  0106  343D               	retlw	61
  3861  0107  3400               	retlw	0
  3862  0108  343E               	retlw	62
  3863  0109  3400               	retlw	0
  3864  010A  343E               	retlw	62
  3865  010B  3400               	retlw	0
  3866  010C  343F               	retlw	63
  3867  010D  3400               	retlw	0
  3868  010E  3440               	retlw	64
  3869  010F  3400               	retlw	0
  3870  0110  3441               	retlw	65
  3871  0111  3400               	retlw	0
  3872  0112  3442               	retlw	66
  3873  0113  3400               	retlw	0
  3874  0114  3443               	retlw	67
  3875  0115  3400               	retlw	0
  3876  0116  3443               	retlw	67
  3877  0117  3400               	retlw	0
  3878  0118  3444               	retlw	68
  3879  0119  3400               	retlw	0
  3880  011A  3445               	retlw	69
  3881  011B  3400               	retlw	0
  3882  011C  3446               	retlw	70
  3883  011D  3400               	retlw	0
  3884  011E  3447               	retlw	71
  3885  011F  3400               	retlw	0
  3886  0120  3447               	retlw	71
  3887  0121  3400               	retlw	0
  3888  0122  3448               	retlw	72
  3889  0123  3400               	retlw	0
  3890  0124  3449               	retlw	73
  3891  0125  3400               	retlw	0
  3892  0126  344A               	retlw	74
  3893  0127  3400               	retlw	0
  3894  0128  344B               	retlw	75
  3895  0129  3400               	retlw	0
  3896  012A  344C               	retlw	76
  3897  012B  3400               	retlw	0
  3898  012C  344C               	retlw	76
  3899  012D  3400               	retlw	0
  3900  012E  344D               	retlw	77
  3901  012F  3400               	retlw	0
  3902  0130  344E               	retlw	78
  3903  0131  3400               	retlw	0
  3904  0132  344F               	retlw	79
  3905  0133  3400               	retlw	0
  3906  0134  3450               	retlw	80
  3907  0135  3400               	retlw	0
  3908  0136  3450               	retlw	80
  3909  0137  3400               	retlw	0
  3910  0138  3451               	retlw	81
  3911  0139  3400               	retlw	0
  3912  013A  3452               	retlw	82
  3913  013B  3400               	retlw	0
  3914  013C  3453               	retlw	83
  3915  013D  3400               	retlw	0
  3916  013E  3454               	retlw	84
  3917  013F  3400               	retlw	0
  3918  0140  3455               	retlw	85
  3919  0141  3400               	retlw	0
  3920  0142  3455               	retlw	85
  3921  0143  3400               	retlw	0
  3922  0144  3456               	retlw	86
  3923  0145  3400               	retlw	0
  3924  0146  3457               	retlw	87
  3925  0147  3400               	retlw	0
  3926  0148  3458               	retlw	88
  3927  0149  3400               	retlw	0
  3928  014A  3459               	retlw	89
  3929  014B  3400               	retlw	0
  3930  014C  3459               	retlw	89
  3931  014D  3400               	retlw	0
  3932  014E  345A               	retlw	90
  3933  014F  3400               	retlw	0
  3934  0150  345B               	retlw	91
  3935  0151  3400               	retlw	0
  3936  0152  345C               	retlw	92
  3937  0153  3400               	retlw	0
  3938  0154  345D               	retlw	93
  3939  0155  3400               	retlw	0
  3940  0156  345E               	retlw	94
  3941  0157  3400               	retlw	0
  3942  0158  345E               	retlw	94
  3943  0159  3400               	retlw	0
  3944  015A  345F               	retlw	95
  3945  015B  3400               	retlw	0
  3946  015C  3460               	retlw	96
  3947  015D  3400               	retlw	0
  3948  015E  3461               	retlw	97
  3949  015F  3400               	retlw	0
  3950  0160  3462               	retlw	98
  3951  0161  3400               	retlw	0
  3952  0162  3463               	retlw	99
  3953  0163  3400               	retlw	0
  3954  0164  3463               	retlw	99
  3955  0165  3400               	retlw	0
  3956  0166  3464               	retlw	100
  3957  0167  3400               	retlw	0
  3958  0168  3465               	retlw	101
  3959  0169  3400               	retlw	0
  3960  016A  3466               	retlw	102
  3961  016B  3400               	retlw	0
  3962  016C  3467               	retlw	103
  3963  016D  3400               	retlw	0
  3964  016E  3467               	retlw	103
  3965  016F  3400               	retlw	0
  3966  0170  3468               	retlw	104
  3967  0171  3400               	retlw	0
  3968  0172  3469               	retlw	105
  3969  0173  3400               	retlw	0
  3970  0174  346A               	retlw	106
  3971  0175  3400               	retlw	0
  3972  0176  346B               	retlw	107
  3973  0177  3400               	retlw	0
  3974  0178  346C               	retlw	108
  3975  0179  3400               	retlw	0
  3976  017A  346C               	retlw	108
  3977  017B  3400               	retlw	0
  3978  017C  346D               	retlw	109
  3979  017D  3400               	retlw	0
  3980  017E  346E               	retlw	110
  3981  017F  3400               	retlw	0
  3982  0180  346F               	retlw	111
  3983  0181  3400               	retlw	0
  3984  0182  3470               	retlw	112
  3985  0183  3400               	retlw	0
  3986  0184  3470               	retlw	112
  3987  0185  3400               	retlw	0
  3988  0186  3471               	retlw	113
  3989  0187  3400               	retlw	0
  3990  0188  3472               	retlw	114
  3991  0189  3400               	retlw	0
  3992  018A  3473               	retlw	115
  3993  018B  3400               	retlw	0
  3994  018C  3474               	retlw	116
  3995  018D  3400               	retlw	0
  3996  018E  3475               	retlw	117
  3997  018F  3400               	retlw	0
  3998  0190  3475               	retlw	117
  3999  0191  3400               	retlw	0
  4000  0192  3476               	retlw	118
  4001  0193  3400               	retlw	0
  4002  0194  3477               	retlw	119
  4003  0195  3400               	retlw	0
  4004  0196  3478               	retlw	120
  4005  0197  3400               	retlw	0
  4006  0198  3479               	retlw	121
  4007  0199  3400               	retlw	0
  4008  019A  347A               	retlw	122
  4009  019B  3400               	retlw	0
  4010  019C  347A               	retlw	122
  4011  019D  3400               	retlw	0
  4012  019E  347B               	retlw	123
  4013  019F  3400               	retlw	0
  4014  01A0  347C               	retlw	124
  4015  01A1  3400               	retlw	0
  4016  01A2  347D               	retlw	125
  4017  01A3  3400               	retlw	0
  4018  01A4  347E               	retlw	126
  4019  01A5  3400               	retlw	0
  4020  01A6  347E               	retlw	126
  4021  01A7  3400               	retlw	0
  4022  01A8  347F               	retlw	127
  4023  01A9  3400               	retlw	0
  4024  01AA  3480               	retlw	128
  4025  01AB  3400               	retlw	0
  4026  01AC  3481               	retlw	129
  4027  01AD  3400               	retlw	0
  4028  01AE  3482               	retlw	130
  4029  01AF  3400               	retlw	0
  4030  01B0  3483               	retlw	131
  4031  01B1  3400               	retlw	0
  4032  01B2  3483               	retlw	131
  4033  01B3  3400               	retlw	0
  4034  01B4  3484               	retlw	132
  4035  01B5  3400               	retlw	0
  4036  01B6  3485               	retlw	133
  4037  01B7  3400               	retlw	0
  4038  01B8  3486               	retlw	134
  4039  01B9  3400               	retlw	0
  4040  01BA  3487               	retlw	135
  4041  01BB  3400               	retlw	0
  4042  01BC  3487               	retlw	135
  4043  01BD  3400               	retlw	0
  4044  01BE  3488               	retlw	136
  4045  01BF  3400               	retlw	0
  4046  01C0  3489               	retlw	137
  4047  01C1  3400               	retlw	0
  4048  01C2  348A               	retlw	138
  4049  01C3  3400               	retlw	0
  4050  01C4  348B               	retlw	139
  4051  01C5  3400               	retlw	0
  4052  01C6  348C               	retlw	140
  4053  01C7  3400               	retlw	0
  4054  01C8  348C               	retlw	140
  4055  01C9  3400               	retlw	0
  4056  01CA  348D               	retlw	141
  4057  01CB  3400               	retlw	0
  4058  01CC  348E               	retlw	142
  4059  01CD  3400               	retlw	0
  4060  01CE  348F               	retlw	143
  4061  01CF  3400               	retlw	0
  4062  01D0  3490               	retlw	144
  4063  01D1  3400               	retlw	0
  4064  01D2  3491               	retlw	145
  4065  01D3  3400               	retlw	0
  4066  01D4  3491               	retlw	145
  4067  01D5  3400               	retlw	0
  4068  01D6  3492               	retlw	146
  4069  01D7  3400               	retlw	0
  4070  01D8  3493               	retlw	147
  4071  01D9  3400               	retlw	0
  4072  01DA  3494               	retlw	148
  4073  01DB  3400               	retlw	0
  4074  01DC  3495               	retlw	149
  4075  01DD  3400               	retlw	0
  4076  01DE  3495               	retlw	149
  4077  01DF  3400               	retlw	0
  4078  01E0  3496               	retlw	150
  4079  01E1  3400               	retlw	0
  4080  01E2  3497               	retlw	151
  4081  01E3  3400               	retlw	0
  4082  01E4  3498               	retlw	152
  4083  01E5  3400               	retlw	0
  4084  01E6  3499               	retlw	153
  4085  01E7  3400               	retlw	0
  4086  01E8  349A               	retlw	154
  4087  01E9  3400               	retlw	0
  4088  01EA  349A               	retlw	154
  4089  01EB  3400               	retlw	0
  4090  01EC  349B               	retlw	155
  4091  01ED  3400               	retlw	0
  4092  01EE  349C               	retlw	156
  4093  01EF  3400               	retlw	0
  4094  01F0  349D               	retlw	157
  4095  01F1  3400               	retlw	0
  4096  01F2  349E               	retlw	158
  4097  01F3  3400               	retlw	0
  4098  01F4  349E               	retlw	158
  4099  01F5  3400               	retlw	0
  4100  01F6  349F               	retlw	159
  4101  01F7  3400               	retlw	0
  4102  01F8  34A0               	retlw	160
  4103  01F9  3400               	retlw	0
  4104  01FA  34A1               	retlw	161
  4105  01FB  3400               	retlw	0
  4106  01FC  34A2               	retlw	162
  4107  01FD  3400               	retlw	0
  4108  01FE  34A3               	retlw	163
  4109  01FF  3400               	retlw	0
  4110  0200  34A3               	retlw	163
  4111  0201  3400               	retlw	0
  4112  0202  34A4               	retlw	164
  4113  0203  3400               	retlw	0
  4114  0204  34A5               	retlw	165
  4115  0205  3400               	retlw	0
  4116  0206  34A6               	retlw	166
  4117  0207  3400               	retlw	0
  4118  0208  34A7               	retlw	167
  4119  0209  3400               	retlw	0
  4120  020A  34A7               	retlw	167
  4121  020B  3400               	retlw	0
  4122  020C  34A8               	retlw	168
  4123  020D  3400               	retlw	0
  4124  020E  34A9               	retlw	169
  4125  020F  3400               	retlw	0
  4126  0210  34AA               	retlw	170
  4127  0211  3400               	retlw	0
  4128  0212  34AB               	retlw	171
  4129  0213  3400               	retlw	0
  4130  0214  34AC               	retlw	172
  4131  0215  3400               	retlw	0
  4132  0216  34AC               	retlw	172
  4133  0217  3400               	retlw	0
  4134  0218  34AD               	retlw	173
  4135  0219  3400               	retlw	0
  4136  021A  34AE               	retlw	174
  4137  021B  3400               	retlw	0
  4138  021C  34AF               	retlw	175
  4139  021D  3400               	retlw	0
  4140  021E  34B0               	retlw	176
  4141  021F  3400               	retlw	0
  4142  0220  34B1               	retlw	177
  4143  0221  3400               	retlw	0
  4144  0222  34B1               	retlw	177
  4145  0223  3400               	retlw	0
  4146  0224  34B2               	retlw	178
  4147  0225  3400               	retlw	0
  4148  0226  34B3               	retlw	179
  4149  0227  3400               	retlw	0
  4150  0228  34B4               	retlw	180
  4151  0229  3400               	retlw	0
  4152  022A  34B5               	retlw	181
  4153  022B  3400               	retlw	0
  4154  022C  34B5               	retlw	181
  4155  022D  3400               	retlw	0
  4156  022E  34B6               	retlw	182
  4157  022F  3400               	retlw	0
  4158  0230  34B7               	retlw	183
  4159  0231  3400               	retlw	0
  4160  0232  34B8               	retlw	184
  4161  0233  3400               	retlw	0
  4162  0234  34B9               	retlw	185
  4163  0235  3400               	retlw	0
  4164  0236  34BA               	retlw	186
  4165  0237  3400               	retlw	0
  4166  0238  34BA               	retlw	186
  4167  0239  3400               	retlw	0
  4168  023A  34BB               	retlw	187
  4169  023B  3400               	retlw	0
  4170  023C  34BC               	retlw	188
  4171  023D  3400               	retlw	0
  4172  023E  34BD               	retlw	189
  4173  023F  3400               	retlw	0
  4174  0240  34BE               	retlw	190
  4175  0241  3400               	retlw	0
  4176  0242  34BE               	retlw	190
  4177  0243  3400               	retlw	0
  4178  0244  34BF               	retlw	191
  4179  0245  3400               	retlw	0
  4180  0246  34C0               	retlw	192
  4181  0247  3400               	retlw	0
  4182  0248  34C1               	retlw	193
  4183  0249  3400               	retlw	0
  4184  024A  34C2               	retlw	194
  4185  024B  3400               	retlw	0
  4186  024C  34C3               	retlw	195
  4187  024D  3400               	retlw	0
  4188  024E  34C3               	retlw	195
  4189  024F  3400               	retlw	0
  4190  0250  34C4               	retlw	196
  4191  0251  3400               	retlw	0
  4192  0252  34C5               	retlw	197
  4193  0253  3400               	retlw	0
  4194  0254  34C6               	retlw	198
  4195  0255  3400               	retlw	0
  4196  0256  34C7               	retlw	199
  4197  0257  3400               	retlw	0
  4198  0258  34C8               	retlw	200
  4199  0259  3400               	retlw	0
  4200  025A  34C8               	retlw	200
  4201  025B  3400               	retlw	0
  4202  025C  34C9               	retlw	201
  4203  025D  3400               	retlw	0
  4204  025E  34CA               	retlw	202
  4205  025F  3400               	retlw	0
  4206  0260  34CB               	retlw	203
  4207  0261  3400               	retlw	0
  4208  0262  34CC               	retlw	204
  4209  0263  3400               	retlw	0
  4210  0264  34CC               	retlw	204
  4211  0265  3400               	retlw	0
  4212  0266  34CD               	retlw	205
  4213  0267  3400               	retlw	0
  4214  0268  34CE               	retlw	206
  4215  0269  3400               	retlw	0
  4216  026A  34CF               	retlw	207
  4217  026B  3400               	retlw	0
  4218  026C  34D0               	retlw	208
  4219  026D  3400               	retlw	0
  4220  026E  34D1               	retlw	209
  4221  026F  3400               	retlw	0
  4222  0270  34D1               	retlw	209
  4223  0271  3400               	retlw	0
  4224  0272  34D2               	retlw	210
  4225  0273  3400               	retlw	0
  4226  0274  34D3               	retlw	211
  4227  0275  3400               	retlw	0
  4228  0276  34D4               	retlw	212
  4229  0277  3400               	retlw	0
  4230  0278  34D5               	retlw	213
  4231  0279  3400               	retlw	0
  4232  027A  34D5               	retlw	213
  4233  027B  3400               	retlw	0
  4234  027C  34D6               	retlw	214
  4235  027D  3400               	retlw	0
  4236  027E  34D7               	retlw	215
  4237  027F  3400               	retlw	0
  4238  0280  34D8               	retlw	216
  4239  0281  3400               	retlw	0
  4240  0282  34D9               	retlw	217
  4241  0283  3400               	retlw	0
  4242  0284  34DA               	retlw	218
  4243  0285  3400               	retlw	0
  4244  0286  34DA               	retlw	218
  4245  0287  3400               	retlw	0
  4246  0288  34DB               	retlw	219
  4247  0289  3400               	retlw	0
  4248  028A  34DC               	retlw	220
  4249  028B  3400               	retlw	0
  4250  028C  34DD               	retlw	221
  4251  028D  3400               	retlw	0
  4252  028E  34DE               	retlw	222
  4253  028F  3400               	retlw	0
  4254  0290  34DF               	retlw	223
  4255  0291  3400               	retlw	0
  4256  0292  34DF               	retlw	223
  4257  0293  3400               	retlw	0
  4258  0294  34E0               	retlw	224
  4259  0295  3400               	retlw	0
  4260  0296  34E1               	retlw	225
  4261  0297  3400               	retlw	0
  4262  0298  34E2               	retlw	226
  4263  0299  3400               	retlw	0
  4264  029A  34E3               	retlw	227
  4265  029B  3400               	retlw	0
  4266  029C  34E3               	retlw	227
  4267  029D  3400               	retlw	0
  4268  029E  34E4               	retlw	228
  4269  029F  3400               	retlw	0
  4270  02A0  34E5               	retlw	229
  4271  02A1  3400               	retlw	0
  4272  02A2  34E6               	retlw	230
  4273  02A3  3400               	retlw	0
  4274  02A4  34E7               	retlw	231
  4275  02A5  3400               	retlw	0
  4276  02A6  34E8               	retlw	232
  4277  02A7  3400               	retlw	0
  4278  02A8  34E8               	retlw	232
  4279  02A9  3400               	retlw	0
  4280  02AA  34E9               	retlw	233
  4281  02AB  3400               	retlw	0
  4282  02AC  34EA               	retlw	234
  4283  02AD  3400               	retlw	0
  4284  02AE  34EB               	retlw	235
  4285  02AF  3400               	retlw	0
  4286  02B0  34EC               	retlw	236
  4287  02B1  3400               	retlw	0
  4288  02B2  34EC               	retlw	236
  4289  02B3  3400               	retlw	0
  4290  02B4  34ED               	retlw	237
  4291  02B5  3400               	retlw	0
  4292  02B6  34EE               	retlw	238
  4293  02B7  3400               	retlw	0
  4294  02B8  34EF               	retlw	239
  4295  02B9  3400               	retlw	0
  4296  02BA  34F0               	retlw	240
  4297  02BB  3400               	retlw	0
  4298  02BC  34F1               	retlw	241
  4299  02BD  3400               	retlw	0
  4300  02BE  34F1               	retlw	241
  4301  02BF  3400               	retlw	0
  4302  02C0  34F2               	retlw	242
  4303  02C1  3400               	retlw	0
  4304  02C2  34F3               	retlw	243
  4305  02C3  3400               	retlw	0
  4306  02C4  34F4               	retlw	244
  4307  02C5  3400               	retlw	0
  4308  02C6  34F5               	retlw	245
  4309  02C7  3400               	retlw	0
  4310  02C8  34F6               	retlw	246
  4311  02C9  3400               	retlw	0
  4312  02CA  34F6               	retlw	246
  4313  02CB  3400               	retlw	0
  4314  02CC  34F7               	retlw	247
  4315  02CD  3400               	retlw	0
  4316  02CE  34F8               	retlw	248
  4317  02CF  3400               	retlw	0
  4318  02D0  34F9               	retlw	249
  4319  02D1  3400               	retlw	0
  4320  02D2  34FA               	retlw	250
  4321  02D3  3400               	retlw	0
  4322  02D4  34FA               	retlw	250
  4323  02D5  3400               	retlw	0
  4324  02D6  34FB               	retlw	251
  4325  02D7  3400               	retlw	0
  4326  02D8  34FC               	retlw	252
  4327  02D9  3400               	retlw	0
  4328  02DA  34FD               	retlw	253
  4329  02DB  3400               	retlw	0
  4330  02DC  34FE               	retlw	254
  4331  02DD  3400               	retlw	0
  4332  02DE  34FF               	retlw	255
  4333  02DF  3400               	retlw	0
  4334  02E0  34FF               	retlw	255
  4335  02E1  3400               	retlw	0
  4336  02E2  3400               	retlw	0
  4337  02E3  3401               	retlw	1
  4338  02E4  3401               	retlw	1
  4339  02E5  3401               	retlw	1
  4340  02E6  3402               	retlw	2
  4341  02E7  3401               	retlw	1
  4342  02E8  3403               	retlw	3
  4343  02E9  3401               	retlw	1
  4344  02EA  3403               	retlw	3
  4345  02EB  3401               	retlw	1
  4346  02EC  3404               	retlw	4
  4347  02ED  3401               	retlw	1
  4348  02EE  3405               	retlw	5
  4349  02EF  3401               	retlw	1
  4350  02F0  3406               	retlw	6
  4351  02F1  3401               	retlw	1
  4352  02F2  3407               	retlw	7
  4353  02F3  3401               	retlw	1
  4354  02F4  3408               	retlw	8
  4355  02F5  3401               	retlw	1
  4356  02F6  3408               	retlw	8
  4357  02F7  3401               	retlw	1
  4358  02F8  3409               	retlw	9
  4359  02F9  3401               	retlw	1
  4360  02FA  340A               	retlw	10
  4361  02FB  3401               	retlw	1
  4362  02FC  340B               	retlw	11
  4363  02FD  3401               	retlw	1
  4364  02FE  340C               	retlw	12
  4365  02FF  3401               	retlw	1
  4366  0300  340C               	retlw	12
  4367  0301  3401               	retlw	1
  4368  0302  340D               	retlw	13
  4369  0303  3401               	retlw	1
  4370  0304  340E               	retlw	14
  4371  0305  3401               	retlw	1
  4372  0306  340F               	retlw	15
  4373  0307  3401               	retlw	1
  4374  0308  3410               	retlw	16
  4375  0309  3401               	retlw	1
  4376  030A  3411               	retlw	17
  4377  030B  3401               	retlw	1
  4378  030C  3411               	retlw	17
  4379  030D  3401               	retlw	1
  4380  030E  3412               	retlw	18
  4381  030F  3401               	retlw	1
  4382  0310  3413               	retlw	19
  4383  0311  3401               	retlw	1
  4384  0312  3414               	retlw	20
  4385  0313  3401               	retlw	1
  4386  0314  3415               	retlw	21
  4387  0315  3401               	retlw	1
  4388  0316  3416               	retlw	22
  4389  0317  3401               	retlw	1
  4390  0318  3416               	retlw	22
  4391  0319  3401               	retlw	1
  4392  031A  3417               	retlw	23
  4393  031B  3401               	retlw	1
  4394  031C  3418               	retlw	24
  4395  031D  3401               	retlw	1
  4396  031E  3419               	retlw	25
  4397  031F  3401               	retlw	1
  4398  0320  341A               	retlw	26
  4399  0321  3401               	retlw	1
  4400  0322  341A               	retlw	26
  4401  0323  3401               	retlw	1
  4402  0324  341B               	retlw	27
  4403  0325  3401               	retlw	1
  4404  0326  341C               	retlw	28
  4405  0327  3401               	retlw	1
  4406  0328  341D               	retlw	29
  4407  0329  3401               	retlw	1
  4408  032A  341E               	retlw	30
  4409  032B  3401               	retlw	1
  4410  032C  341F               	retlw	31
  4411  032D  3401               	retlw	1
  4412  032E  341F               	retlw	31
  4413  032F  3401               	retlw	1
  4414  0330  3420               	retlw	32
  4415  0331  3401               	retlw	1
  4416  0332  3421               	retlw	33
  4417  0333  3401               	retlw	1
  4418  0334  3422               	retlw	34
  4419  0335  3401               	retlw	1
  4420  0336  3423               	retlw	35
  4421  0337  3401               	retlw	1
  4422  0338  3423               	retlw	35
  4423  0339  3401               	retlw	1
  4424  033A  3424               	retlw	36
  4425  033B  3401               	retlw	1
  4426  033C  3425               	retlw	37
  4427  033D  3401               	retlw	1
  4428  033E  3426               	retlw	38
  4429  033F  3401               	retlw	1
  4430  0340  3427               	retlw	39
  4431  0341  3401               	retlw	1
  4432  0342  3428               	retlw	40
  4433  0343  3401               	retlw	1
  4434  0344  3428               	retlw	40
  4435  0345  3401               	retlw	1
  4436  0346  3429               	retlw	41
  4437  0347  3401               	retlw	1
  4438  0348  342A               	retlw	42
  4439  0349  3401               	retlw	1
  4440  034A  342B               	retlw	43
  4441  034B  3401               	retlw	1
  4442  034C  342C               	retlw	44
  4443  034D  3401               	retlw	1
  4444  034E  342D               	retlw	45
  4445  034F  3401               	retlw	1
  4446  0350  342D               	retlw	45
  4447  0351  3401               	retlw	1
  4448  0352  342E               	retlw	46
  4449  0353  3401               	retlw	1
  4450  0354  342F               	retlw	47
  4451  0355  3401               	retlw	1
  4452  0356  3430               	retlw	48
  4453  0357  3401               	retlw	1
  4454  0358  3431               	retlw	49
  4455  0359  3401               	retlw	1
  4456  035A  3431               	retlw	49
  4457  035B  3401               	retlw	1
  4458  035C  3432               	retlw	50
  4459  035D  3401               	retlw	1
  4460  035E  3433               	retlw	51
  4461  035F  3401               	retlw	1
  4462  0360  3434               	retlw	52
  4463  0361  3401               	retlw	1
  4464  0362  3435               	retlw	53
  4465  0363  3401               	retlw	1
  4466  0364  3436               	retlw	54
  4467  0365  3401               	retlw	1
  4468  0366  3436               	retlw	54
  4469  0367  3401               	retlw	1
  4470  0368  3437               	retlw	55
  4471  0369  3401               	retlw	1
  4472  036A  3438               	retlw	56
  4473  036B  3401               	retlw	1
  4474  036C  3439               	retlw	57
  4475  036D  3401               	retlw	1
  4476  036E  343A               	retlw	58
  4477  036F  3401               	retlw	1
  4478  0370  343A               	retlw	58
  4479  0371  3401               	retlw	1
  4480  0372  343B               	retlw	59
  4481  0373  3401               	retlw	1
  4482  0374  343C               	retlw	60
  4483  0375  3401               	retlw	1
  4484  0376  343D               	retlw	61
  4485  0377  3401               	retlw	1
  4486  0378  343E               	retlw	62
  4487  0379  3401               	retlw	1
  4488  037A  343F               	retlw	63
  4489  037B  3401               	retlw	1
  4490  037C  343F               	retlw	63
  4491  037D  3401               	retlw	1
  4492  037E  3440               	retlw	64
  4493  037F  3401               	retlw	1
  4494  0380  3441               	retlw	65
  4495  0381  3401               	retlw	1
  4496  0382  3442               	retlw	66
  4497  0383  3401               	retlw	1
  4498  0384  3443               	retlw	67
  4499  0385  3401               	retlw	1
  4500  0386  3444               	retlw	68
  4501  0387  3401               	retlw	1
  4502  0388  3444               	retlw	68
  4503  0389  3401               	retlw	1
  4504  038A  3445               	retlw	69
  4505  038B  3401               	retlw	1
  4506  038C  3446               	retlw	70
  4507  038D  3401               	retlw	1
  4508  038E  3447               	retlw	71
  4509  038F  3401               	retlw	1
  4510  0390  3448               	retlw	72
  4511  0391  3401               	retlw	1
  4512  0392  3448               	retlw	72
  4513  0393  3401               	retlw	1
  4514  0394  3449               	retlw	73
  4515  0395  3401               	retlw	1
  4516  0396  344A               	retlw	74
  4517  0397  3401               	retlw	1
  4518  0398  344B               	retlw	75
  4519  0399  3401               	retlw	1
  4520  039A  344C               	retlw	76
  4521  039B  3401               	retlw	1
  4522  039C  344D               	retlw	77
  4523  039D  3401               	retlw	1
  4524  039E  344D               	retlw	77
  4525  039F  3401               	retlw	1
  4526  03A0  344E               	retlw	78
  4527  03A1  3401               	retlw	1
  4528  03A2  344F               	retlw	79
  4529  03A3  3401               	retlw	1
  4530  03A4  3450               	retlw	80
  4531  03A5  3401               	retlw	1
  4532  03A6  3451               	retlw	81
  4533  03A7  3401               	retlw	1
  4534  03A8  3451               	retlw	81
  4535  03A9  3401               	retlw	1
  4536  03AA  3452               	retlw	82
  4537  03AB  3401               	retlw	1
  4538  03AC  3453               	retlw	83
  4539  03AD  3401               	retlw	1
  4540  03AE  3454               	retlw	84
  4541  03AF  3401               	retlw	1
  4542  03B0  3455               	retlw	85
  4543  03B1  3401               	retlw	1
  4544  03B2  3456               	retlw	86
  4545  03B3  3401               	retlw	1
  4546  03B4  3456               	retlw	86
  4547  03B5  3401               	retlw	1
  4548  03B6  3457               	retlw	87
  4549  03B7  3401               	retlw	1
  4550  03B8  3458               	retlw	88
  4551  03B9  3401               	retlw	1
  4552  03BA  3459               	retlw	89
  4553  03BB  3401               	retlw	1
  4554  03BC  345A               	retlw	90
  4555  03BD  3401               	retlw	1
  4556  03BE  345A               	retlw	90
  4557  03BF  3401               	retlw	1
  4558  03C0  345B               	retlw	91
  4559  03C1  3401               	retlw	1
  4560  03C2  345C               	retlw	92
  4561  03C3  3401               	retlw	1
  4562  03C4  345D               	retlw	93
  4563  03C5  3401               	retlw	1
  4564  03C6  345E               	retlw	94
  4565  03C7  3401               	retlw	1
  4566  03C8  345F               	retlw	95
  4567  03C9  3401               	retlw	1
  4568  03CA  345F               	retlw	95
  4569  03CB  3401               	retlw	1
  4570  03CC  3460               	retlw	96
  4571  03CD  3401               	retlw	1
  4572  03CE  3461               	retlw	97
  4573  03CF  3401               	retlw	1
  4574  03D0  3462               	retlw	98
  4575  03D1  3401               	retlw	1
  4576  03D2  3463               	retlw	99
  4577  03D3  3401               	retlw	1
  4578  03D4  3464               	retlw	100
  4579  03D5  3401               	retlw	1
  4580  03D6  3464               	retlw	100
  4581  03D7  3401               	retlw	1
  4582  03D8  3465               	retlw	101
  4583  03D9  3401               	retlw	1
  4584  03DA  3466               	retlw	102
  4585  03DB  3401               	retlw	1
  4586  03DC  3467               	retlw	103
  4587  03DD  3401               	retlw	1
  4588  03DE  3468               	retlw	104
  4589  03DF  3401               	retlw	1
  4590  03E0  3468               	retlw	104
  4591  03E1  3401               	retlw	1
  4592  03E2  3469               	retlw	105
  4593  03E3  3401               	retlw	1
  4594  03E4  346A               	retlw	106
  4595  03E5  3401               	retlw	1
  4596  03E6  346B               	retlw	107
  4597  03E7  3401               	retlw	1
  4598  03E8  346C               	retlw	108
  4599  03E9  3401               	retlw	1
  4600  03EA  346D               	retlw	109
  4601  03EB  3401               	retlw	1
  4602  03EC  346D               	retlw	109
  4603  03ED  3401               	retlw	1
  4604  03EE  346E               	retlw	110
  4605  03EF  3401               	retlw	1
  4606  03F0  346F               	retlw	111
  4607  03F1  3401               	retlw	1
  4608  03F2  3470               	retlw	112
  4609  03F3  3401               	retlw	1
  4610  03F4  3471               	retlw	113
  4611  03F5  3401               	retlw	1
  4612  03F6  3471               	retlw	113
  4613  03F7  3401               	retlw	1
  4614  03F8  3472               	retlw	114
  4615  03F9  3401               	retlw	1
  4616  03FA  3473               	retlw	115
  4617  03FB  3401               	retlw	1
  4618  03FC  3474               	retlw	116
  4619  03FD  3401               	retlw	1
  4620  03FE  3475               	retlw	117
  4621  03FF  3401               	retlw	1
  4622  0400  3476               	retlw	118
  4623  0401  3401               	retlw	1
  4624  0402  3476               	retlw	118
  4625  0403  3401               	retlw	1
  4626  0404  3477               	retlw	119
  4627  0405  3401               	retlw	1
  4628  0406  3478               	retlw	120
  4629  0407  3401               	retlw	1
  4630  0408  3479               	retlw	121
  4631  0409  3401               	retlw	1
  4632  040A  347A               	retlw	122
  4633  040B  3401               	retlw	1
  4634  040C  347B               	retlw	123
  4635  040D  3401               	retlw	1
  4636  040E  347B               	retlw	123
  4637  040F  3401               	retlw	1
  4638  0410  347C               	retlw	124
  4639  0411  3401               	retlw	1
  4640  0412  347D               	retlw	125
  4641  0413  3401               	retlw	1
  4642  0414  347E               	retlw	126
  4643  0415  3401               	retlw	1
  4644  0416  347F               	retlw	127
  4645  0417  3401               	retlw	1
  4646  0418  347F               	retlw	127
  4647  0419  3401               	retlw	1
  4648  041A  3480               	retlw	128
  4649  041B  3401               	retlw	1
  4650  041C  3481               	retlw	129
  4651  041D  3401               	retlw	1
  4652  041E  3482               	retlw	130
  4653  041F  3401               	retlw	1
  4654  0420  3483               	retlw	131
  4655  0421  3401               	retlw	1
  4656  0422  3484               	retlw	132
  4657  0423  3401               	retlw	1
  4658  0424  3484               	retlw	132
  4659  0425  3401               	retlw	1
  4660  0426  3485               	retlw	133
  4661  0427  3401               	retlw	1
  4662  0428  3486               	retlw	134
  4663  0429  3401               	retlw	1
  4664  042A  3487               	retlw	135
  4665  042B  3401               	retlw	1
  4666  042C  3488               	retlw	136
  4667  042D  3401               	retlw	1
  4668  042E  3488               	retlw	136
  4669  042F  3401               	retlw	1
  4670  0430  3489               	retlw	137
  4671  0431  3401               	retlw	1
  4672  0432  348A               	retlw	138
  4673  0433  3401               	retlw	1
  4674  0434  348B               	retlw	139
  4675  0435  3401               	retlw	1
  4676  0436  348C               	retlw	140
  4677  0437  3401               	retlw	1
  4678  0438  348D               	retlw	141
  4679  0439  3401               	retlw	1
  4680  043A  348D               	retlw	141
  4681  043B  3401               	retlw	1
  4682  043C  348E               	retlw	142
  4683  043D  3401               	retlw	1
  4684  043E  348F               	retlw	143
  4685  043F  3401               	retlw	1
  4686  0440  3490               	retlw	144
  4687  0441  3401               	retlw	1
  4688  0442  3491               	retlw	145
  4689  0443  3401               	retlw	1
  4690  0444  3492               	retlw	146
  4691  0445  3401               	retlw	1
  4692  0446  3492               	retlw	146
  4693  0447  3401               	retlw	1
  4694  0448  3493               	retlw	147
  4695  0449  3401               	retlw	1
  4696  044A  3494               	retlw	148
  4697  044B  3401               	retlw	1
  4698  044C  3495               	retlw	149
  4699  044D  3401               	retlw	1
  4700  044E  3496               	retlw	150
  4701  044F  3401               	retlw	1
  4702  0450  3496               	retlw	150
  4703  0451  3401               	retlw	1
  4704  0452  3497               	retlw	151
  4705  0453  3401               	retlw	1
  4706  0454  3498               	retlw	152
  4707  0455  3401               	retlw	1
  4708  0456  3499               	retlw	153
  4709  0457  3401               	retlw	1
  4710  0458  349A               	retlw	154
  4711  0459  3401               	retlw	1
  4712  045A  349B               	retlw	155
  4713  045B  3401               	retlw	1
  4714  045C  349B               	retlw	155
  4715  045D  3401               	retlw	1
  4716  045E  349C               	retlw	156
  4717  045F  3401               	retlw	1
  4718  0460  349D               	retlw	157
  4719  0461  3401               	retlw	1
  4720  0462  349E               	retlw	158
  4721  0463  3401               	retlw	1
  4722  0464  349F               	retlw	159
  4723  0465  3401               	retlw	1
  4724  0466  349F               	retlw	159
  4725  0467  3401               	retlw	1
  4726  0468  34A0               	retlw	160
  4727  0469  3401               	retlw	1
  4728  046A  34A1               	retlw	161
  4729  046B  3401               	retlw	1
  4730  046C  34A2               	retlw	162
  4731  046D  3401               	retlw	1
  4732  046E  34A3               	retlw	163
  4733  046F  3401               	retlw	1
  4734  0470  34A4               	retlw	164
  4735  0471  3401               	retlw	1
  4736  0472  34A4               	retlw	164
  4737  0473  3401               	retlw	1
  4738  0474  34A5               	retlw	165
  4739  0475  3401               	retlw	1
  4740  0476  34A6               	retlw	166
  4741  0477  3401               	retlw	1
  4742  0478  34A7               	retlw	167
  4743  0479  3401               	retlw	1
  4744  047A  34A8               	retlw	168
  4745  047B  3401               	retlw	1
  4746  047C  34A8               	retlw	168
  4747  047D  3401               	retlw	1
  4748  047E  34A9               	retlw	169
  4749  047F  3401               	retlw	1
  4750  0480  34AA               	retlw	170
  4751  0481  3401               	retlw	1
  4752  0482  34AB               	retlw	171
  4753  0483  3401               	retlw	1
  4754  0484  34AC               	retlw	172
  4755  0485  3401               	retlw	1
  4756  0486  34AD               	retlw	173
  4757  0487  3401               	retlw	1
  4758  0488  34AD               	retlw	173
  4759  0489  3401               	retlw	1
  4760  048A  34AE               	retlw	174
  4761  048B  3401               	retlw	1
  4762  048C  34AF               	retlw	175
  4763  048D  3401               	retlw	1
  4764  048E  34B0               	retlw	176
  4765  048F  3401               	retlw	1
  4766  0490  34B1               	retlw	177
  4767  0491  3401               	retlw	1
  4768  0492  34B2               	retlw	178
  4769  0493  3401               	retlw	1
  4770  0494  34B2               	retlw	178
  4771  0495  3401               	retlw	1
  4772  0496  34B3               	retlw	179
  4773  0497  3401               	retlw	1
  4774  0498  34B4               	retlw	180
  4775  0499  3401               	retlw	1
  4776  049A  34B5               	retlw	181
  4777  049B  3401               	retlw	1
  4778  049C  34B6               	retlw	182
  4779  049D  3401               	retlw	1
  4780  049E  34B6               	retlw	182
  4781  049F  3401               	retlw	1
  4782  04A0  34B7               	retlw	183
  4783  04A1  3401               	retlw	1
  4784  04A2  34B8               	retlw	184
  4785  04A3  3401               	retlw	1
  4786  04A4  34B9               	retlw	185
  4787  04A5  3401               	retlw	1
  4788  04A6  34BA               	retlw	186
  4789  04A7  3401               	retlw	1
  4790  04A8  34BB               	retlw	187
  4791  04A9  3401               	retlw	1
  4792  04AA  34BB               	retlw	187
  4793  04AB  3401               	retlw	1
  4794  04AC  34BC               	retlw	188
  4795  04AD  3401               	retlw	1
  4796  04AE  34BD               	retlw	189
  4797  04AF  3401               	retlw	1
  4798  04B0  34BE               	retlw	190
  4799  04B1  3401               	retlw	1
  4800  04B2  34BF               	retlw	191
  4801  04B3  3401               	retlw	1
  4802  04B4  34BF               	retlw	191
  4803  04B5  3401               	retlw	1
  4804  04B6  34C0               	retlw	192
  4805  04B7  3401               	retlw	1
  4806  04B8  34C1               	retlw	193
  4807  04B9  3401               	retlw	1
  4808  04BA  34C2               	retlw	194
  4809  04BB  3401               	retlw	1
  4810  04BC  34C3               	retlw	195
  4811  04BD  3401               	retlw	1
  4812  04BE  34C4               	retlw	196
  4813  04BF  3401               	retlw	1
  4814  04C0  34C4               	retlw	196
  4815  04C1  3401               	retlw	1
  4816  04C2  34C5               	retlw	197
  4817  04C3  3401               	retlw	1
  4818  04C4  34C6               	retlw	198
  4819  04C5  3401               	retlw	1
  4820  04C6  34C7               	retlw	199
  4821  04C7  3401               	retlw	1
  4822  04C8  34C8               	retlw	200
  4823  04C9  3401               	retlw	1
  4824  04CA  34C9               	retlw	201
  4825  04CB  3401               	retlw	1
  4826  04CC  34C9               	retlw	201
  4827  04CD  3401               	retlw	1
  4828  04CE  34CA               	retlw	202
  4829  04CF  3401               	retlw	1
  4830  04D0  34CB               	retlw	203
  4831  04D1  3401               	retlw	1
  4832  04D2  34CC               	retlw	204
  4833  04D3  3401               	retlw	1
  4834  04D4  34CD               	retlw	205
  4835  04D5  3401               	retlw	1
  4836  04D6  34CD               	retlw	205
  4837  04D7  3401               	retlw	1
  4838  04D8  34CE               	retlw	206
  4839  04D9  3401               	retlw	1
  4840  04DA  34CF               	retlw	207
  4841  04DB  3401               	retlw	1
  4842  04DC  34D0               	retlw	208
  4843  04DD  3401               	retlw	1
  4844  04DE  34D1               	retlw	209
  4845  04DF  3401               	retlw	1
  4846  04E0  34D2               	retlw	210
  4847  04E1  3401               	retlw	1
  4848  04E2  34D2               	retlw	210
  4849  04E3  3401               	retlw	1
  4850  04E4  34D3               	retlw	211
  4851  04E5  3401               	retlw	1
  4852  04E6  34D4               	retlw	212
  4853  04E7  3401               	retlw	1
  4854  04E8  34D5               	retlw	213
  4855  04E9  3401               	retlw	1
  4856  04EA  34D6               	retlw	214
  4857  04EB  3401               	retlw	1
  4858  04EC  34D6               	retlw	214
  4859  04ED  3401               	retlw	1
  4860  04EE  34D7               	retlw	215
  4861  04EF  3401               	retlw	1
  4862  04F0  34D8               	retlw	216
  4863  04F1  3401               	retlw	1
  4864  04F2  34D9               	retlw	217
  4865  04F3  3401               	retlw	1
  4866  04F4  34DA               	retlw	218
  4867  04F5  3401               	retlw	1
  4868  04F6  34DB               	retlw	219
  4869  04F7  3401               	retlw	1
  4870  04F8  34DB               	retlw	219
  4871  04F9  3401               	retlw	1
  4872  04FA  34DC               	retlw	220
  4873  04FB  3401               	retlw	1
  4874  04FC  34DD               	retlw	221
  4875  04FD  3401               	retlw	1
  4876  04FE  34DE               	retlw	222
  4877  04FF  3401               	retlw	1
  4878  0500  34DF               	retlw	223
  4879  0501  3401               	retlw	1
  4880  0502  34E0               	retlw	224
  4881  0503  3401               	retlw	1
  4882  0504  34E0               	retlw	224
  4883  0505  3401               	retlw	1
  4884  0506  34E1               	retlw	225
  4885  0507  3401               	retlw	1
  4886  0508  34E2               	retlw	226
  4887  0509  3401               	retlw	1
  4888  050A  34E3               	retlw	227
  4889  050B  3401               	retlw	1
  4890  050C  34E4               	retlw	228
  4891  050D  3401               	retlw	1
  4892  050E  34E4               	retlw	228
  4893  050F  3401               	retlw	1
  4894  0510  34E5               	retlw	229
  4895  0511  3401               	retlw	1
  4896  0512  34E6               	retlw	230
  4897  0513  3401               	retlw	1
  4898  0514  34E7               	retlw	231
  4899  0515  3401               	retlw	1
  4900  0516  34E8               	retlw	232
  4901  0517  3401               	retlw	1
  4902  0518  34E9               	retlw	233
  4903  0519  3401               	retlw	1
  4904  051A  34E9               	retlw	233
  4905  051B  3401               	retlw	1
  4906  051C  34EA               	retlw	234
  4907  051D  3401               	retlw	1
  4908  051E  34EB               	retlw	235
  4909  051F  3401               	retlw	1
  4910  0520  34EC               	retlw	236
  4911  0521  3401               	retlw	1
  4912  0522  34ED               	retlw	237
  4913  0523  3401               	retlw	1
  4914  0524  34ED               	retlw	237
  4915  0525  3401               	retlw	1
  4916  0526  34EE               	retlw	238
  4917  0527  3401               	retlw	1
  4918  0528  34EF               	retlw	239
  4919  0529  3401               	retlw	1
  4920  052A  34F0               	retlw	240
  4921  052B  3401               	retlw	1
  4922  052C  34F1               	retlw	241
  4923  052D  3401               	retlw	1
  4924  052E  34F2               	retlw	242
  4925  052F  3401               	retlw	1
  4926  0530  34F2               	retlw	242
  4927  0531  3401               	retlw	1
  4928  0532  34F3               	retlw	243
  4929  0533  3401               	retlw	1
  4930  0534  34F4               	retlw	244
  4931  0535  3401               	retlw	1
  4932  0536  34F5               	retlw	245
  4933  0537  3401               	retlw	1
  4934  0538  34F6               	retlw	246
  4935  0539  3401               	retlw	1
  4936  053A  34F6               	retlw	246
  4937  053B  3401               	retlw	1
  4938  053C  34F7               	retlw	247
  4939  053D  3401               	retlw	1
  4940  053E  34F8               	retlw	248
  4941  053F  3401               	retlw	1
  4942  0540  34F9               	retlw	249
  4943  0541  3401               	retlw	1
  4944  0542  34FA               	retlw	250
  4945  0543  3401               	retlw	1
  4946  0544  34FB               	retlw	251
  4947  0545  3401               	retlw	1
  4948  0546  34FB               	retlw	251
  4949  0547  3401               	retlw	1
  4950  0548  34FC               	retlw	252
  4951  0549  3401               	retlw	1
  4952  054A  34FD               	retlw	253
  4953  054B  3401               	retlw	1
  4954  054C  34FE               	retlw	254
  4955  054D  3401               	retlw	1
  4956  054E  34FF               	retlw	255
  4957  054F  3401               	retlw	1
  4958  0550  3400               	retlw	0
  4959  0551  3402               	retlw	2
  4960  0552  3400               	retlw	0
  4961  0553  3402               	retlw	2
  4962  0554  3401               	retlw	1
  4963  0555  3402               	retlw	2
  4964  0556  3402               	retlw	2
  4965  0557  3402               	retlw	2
  4966  0558  3403               	retlw	3
  4967  0559  3402               	retlw	2
  4968  055A  3404               	retlw	4
  4969  055B  3402               	retlw	2
  4970  055C  3404               	retlw	4
  4971  055D  3402               	retlw	2
  4972  055E  3405               	retlw	5
  4973  055F  3402               	retlw	2
  4974  0560  3406               	retlw	6
  4975  0561  3402               	retlw	2
  4976  0562  3407               	retlw	7
  4977  0563  3402               	retlw	2
  4978  0564  3408               	retlw	8
  4979  0565  3402               	retlw	2
  4980  0566  3409               	retlw	9
  4981  0567  3402               	retlw	2
  4982  0568  3409               	retlw	9
  4983  0569  3402               	retlw	2
  4984  056A  340A               	retlw	10
  4985  056B  3402               	retlw	2
  4986  056C  340B               	retlw	11
  4987  056D  3402               	retlw	2
  4988  056E  340C               	retlw	12
  4989  056F  3402               	retlw	2
  4990  0570  340D               	retlw	13
  4991  0571  3402               	retlw	2
  4992  0572  340D               	retlw	13
  4993  0573  3402               	retlw	2
  4994  0574  340E               	retlw	14
  4995  0575  3402               	retlw	2
  4996  0576  340F               	retlw	15
  4997  0577  3402               	retlw	2
  4998  0578  3410               	retlw	16
  4999  0579  3402               	retlw	2
  5000  057A  3411               	retlw	17
  5001  057B  3402               	retlw	2
  5002  057C  3412               	retlw	18
  5003  057D  3402               	retlw	2
  5004  057E  3412               	retlw	18
  5005  057F  3402               	retlw	2
  5006  0580  3413               	retlw	19
  5007  0581  3402               	retlw	2
  5008  0582  3414               	retlw	20
  5009  0583  3402               	retlw	2
  5010  0584  3415               	retlw	21
  5011  0585  3402               	retlw	2
  5012  0586  3416               	retlw	22
  5013  0587  3402               	retlw	2
  5014  0588  3417               	retlw	23
  5015  0589  3402               	retlw	2
  5016  058A  3417               	retlw	23
  5017  058B  3402               	retlw	2
  5018  058C  3418               	retlw	24
  5019  058D  3402               	retlw	2
  5020  058E  3419               	retlw	25
  5021  058F  3402               	retlw	2
  5022  0590  341A               	retlw	26
  5023  0591  3402               	retlw	2
  5024  0592  341B               	retlw	27
  5025  0593  3402               	retlw	2
  5026  0594  341B               	retlw	27
  5027  0595  3402               	retlw	2
  5028  0596  341C               	retlw	28
  5029  0597  3402               	retlw	2
  5030  0598  341D               	retlw	29
  5031  0599  3402               	retlw	2
  5032  059A  341E               	retlw	30
  5033  059B  3402               	retlw	2
  5034  059C  341F               	retlw	31
  5035  059D  3402               	retlw	2
  5036  059E  3420               	retlw	32
  5037  059F  3402               	retlw	2
  5038  05A0  3420               	retlw	32
  5039  05A1  3402               	retlw	2
  5040  05A2  3421               	retlw	33
  5041  05A3  3402               	retlw	2
  5042  05A4  3422               	retlw	34
  5043  05A5  3402               	retlw	2
  5044  05A6  3423               	retlw	35
  5045  05A7  3402               	retlw	2
  5046  05A8  3424               	retlw	36
  5047  05A9  3402               	retlw	2
  5048  05AA  3424               	retlw	36
  5049  05AB  3402               	retlw	2
  5050  05AC  3425               	retlw	37
  5051  05AD  3402               	retlw	2
  5052  05AE  3426               	retlw	38
  5053  05AF  3402               	retlw	2
  5054  05B0  3427               	retlw	39
  5055  05B1  3402               	retlw	2
  5056  05B2  3428               	retlw	40
  5057  05B3  3402               	retlw	2
  5058  05B4  3429               	retlw	41
  5059  05B5  3402               	retlw	2
  5060  05B6  3429               	retlw	41
  5061  05B7  3402               	retlw	2
  5062  05B8  342A               	retlw	42
  5063  05B9  3402               	retlw	2
  5064  05BA  342B               	retlw	43
  5065  05BB  3402               	retlw	2
  5066  05BC  342C               	retlw	44
  5067  05BD  3402               	retlw	2
  5068  05BE  342D               	retlw	45
  5069  05BF  3402               	retlw	2
  5070  05C0  342E               	retlw	46
  5071  05C1  3402               	retlw	2
  5072  05C2  342E               	retlw	46
  5073  05C3  3402               	retlw	2
  5074  05C4  342F               	retlw	47
  5075  05C5  3402               	retlw	2
  5076  05C6  3430               	retlw	48
  5077  05C7  3402               	retlw	2
  5078  05C8  3431               	retlw	49
  5079  05C9  3402               	retlw	2
  5080  05CA  3432               	retlw	50
  5081  05CB  3402               	retlw	2
  5082  05CC  3432               	retlw	50
  5083  05CD  3402               	retlw	2
  5084  05CE  3433               	retlw	51
  5085  05CF  3402               	retlw	2
  5086  05D0  3434               	retlw	52
  5087  05D1  3402               	retlw	2
  5088  05D2  3435               	retlw	53
  5089  05D3  3402               	retlw	2
  5090  05D4  3436               	retlw	54
  5091  05D5  3402               	retlw	2
  5092  05D6  3437               	retlw	55
  5093  05D7  3402               	retlw	2
  5094  05D8  3437               	retlw	55
  5095  05D9  3402               	retlw	2
  5096  05DA  3438               	retlw	56
  5097  05DB  3402               	retlw	2
  5098  05DC  3439               	retlw	57
  5099  05DD  3402               	retlw	2
  5100  05DE  343A               	retlw	58
  5101  05DF  3402               	retlw	2
  5102  05E0  343B               	retlw	59
  5103  05E1  3402               	retlw	2
  5104  05E2  343B               	retlw	59
  5105  05E3  3402               	retlw	2
  5106  05E4  343C               	retlw	60
  5107  05E5  3402               	retlw	2
  5108  05E6  343D               	retlw	61
  5109  05E7  3402               	retlw	2
  5110  05E8  343E               	retlw	62
  5111  05E9  3402               	retlw	2
  5112  05EA  343F               	retlw	63
  5113  05EB  3402               	retlw	2
  5114  05EC  3440               	retlw	64
  5115  05ED  3402               	retlw	2
  5116  05EE  3440               	retlw	64
  5117  05EF  3402               	retlw	2
  5118  05F0  3441               	retlw	65
  5119  05F1  3402               	retlw	2
  5120  05F2  3442               	retlw	66
  5121  05F3  3402               	retlw	2
  5122  05F4  3443               	retlw	67
  5123  05F5  3402               	retlw	2
  5124  05F6  3444               	retlw	68
  5125  05F7  3402               	retlw	2
  5126  05F8  3444               	retlw	68
  5127  05F9  3402               	retlw	2
  5128  05FA  3445               	retlw	69
  5129  05FB  3402               	retlw	2
  5130  05FC  3446               	retlw	70
  5131  05FD  3402               	retlw	2
  5132  05FE  3447               	retlw	71
  5133  05FF  3402               	retlw	2
  5134  0600  3448               	retlw	72
  5135  0601  3402               	retlw	2
  5136  0602  3449               	retlw	73
  5137  0603  3402               	retlw	2
  5138  0604  3449               	retlw	73
  5139  0605  3402               	retlw	2
  5140  0606  344A               	retlw	74
  5141  0607  3402               	retlw	2
  5142  0608  344B               	retlw	75
  5143  0609  3402               	retlw	2
  5144  060A  344C               	retlw	76
  5145  060B  3402               	retlw	2
  5146  060C  344D               	retlw	77
  5147  060D  3402               	retlw	2
  5148  060E  344E               	retlw	78
  5149  060F  3402               	retlw	2
  5150  0610  344E               	retlw	78
  5151  0611  3402               	retlw	2
  5152  0612  344F               	retlw	79
  5153  0613  3402               	retlw	2
  5154  0614  3450               	retlw	80
  5155  0615  3402               	retlw	2
  5156  0616  3451               	retlw	81
  5157  0617  3402               	retlw	2
  5158  0618  3452               	retlw	82
  5159  0619  3402               	retlw	2
  5160  061A  3452               	retlw	82
  5161  061B  3402               	retlw	2
  5162  061C  3453               	retlw	83
  5163  061D  3402               	retlw	2
  5164  061E  3454               	retlw	84
  5165  061F  3402               	retlw	2
  5166  0620  3455               	retlw	85
  5167  0621  3402               	retlw	2
  5168  0622  3456               	retlw	86
  5169  0623  3402               	retlw	2
  5170  0624  3457               	retlw	87
  5171  0625  3402               	retlw	2
  5172  0626  3457               	retlw	87
  5173  0627  3402               	retlw	2
  5174  0628  3458               	retlw	88
  5175  0629  3402               	retlw	2
  5176  062A  3459               	retlw	89
  5177  062B  3402               	retlw	2
  5178  062C  345A               	retlw	90
  5179  062D  3402               	retlw	2
  5180  062E  345B               	retlw	91
  5181  062F  3402               	retlw	2
  5182  0630  345B               	retlw	91
  5183  0631  3402               	retlw	2
  5184  0632  345C               	retlw	92
  5185  0633  3402               	retlw	2
  5186  0634  345D               	retlw	93
  5187  0635  3402               	retlw	2
  5188  0636  345E               	retlw	94
  5189  0637  3402               	retlw	2
  5190  0638  345F               	retlw	95
  5191  0639  3402               	retlw	2
  5192  063A  3460               	retlw	96
  5193  063B  3402               	retlw	2
  5194  063C  3460               	retlw	96
  5195  063D  3402               	retlw	2
  5196  063E  3461               	retlw	97
  5197  063F  3402               	retlw	2
  5198  0640  3462               	retlw	98
  5199  0641  3402               	retlw	2
  5200  0642  3463               	retlw	99
  5201  0643  3402               	retlw	2
  5202  0644  3464               	retlw	100
  5203  0645  3402               	retlw	2
  5204  0646  3465               	retlw	101
  5205  0647  3402               	retlw	2
  5206  0648  3465               	retlw	101
  5207  0649  3402               	retlw	2
  5208  064A  3466               	retlw	102
  5209  064B  3402               	retlw	2
  5210  064C  3467               	retlw	103
  5211  064D  3402               	retlw	2
  5212  064E  3468               	retlw	104
  5213  064F  3402               	retlw	2
  5214  0650  3469               	retlw	105
  5215  0651  3402               	retlw	2
  5216  0652  3469               	retlw	105
  5217  0653  3402               	retlw	2
  5218  0654  346A               	retlw	106
  5219  0655  3402               	retlw	2
  5220  0656  346B               	retlw	107
  5221  0657  3402               	retlw	2
  5222  0658  346C               	retlw	108
  5223  0659  3402               	retlw	2
  5224  065A  346D               	retlw	109
  5225  065B  3402               	retlw	2
  5226  065C  346E               	retlw	110
  5227  065D  3402               	retlw	2
  5228  065E  346E               	retlw	110
  5229  065F  3402               	retlw	2
  5230  0660  346F               	retlw	111
  5231  0661  3402               	retlw	2
  5232  0662  3470               	retlw	112
  5233  0663  3402               	retlw	2
  5234  0664  3471               	retlw	113
  5235  0665  3402               	retlw	2
  5236  0666  3472               	retlw	114
  5237  0667  3402               	retlw	2
  5238  0668  3472               	retlw	114
  5239  0669  3402               	retlw	2
  5240  066A  3473               	retlw	115
  5241  066B  3402               	retlw	2
  5242  066C  3474               	retlw	116
  5243  066D  3402               	retlw	2
  5244  066E  3475               	retlw	117
  5245  066F  3402               	retlw	2
  5246  0670  3476               	retlw	118
  5247  0671  3402               	retlw	2
  5248  0672  3477               	retlw	119
  5249  0673  3402               	retlw	2
  5250  0674  3477               	retlw	119
  5251  0675  3402               	retlw	2
  5252  0676  3478               	retlw	120
  5253  0677  3402               	retlw	2
  5254  0678  3479               	retlw	121
  5255  0679  3402               	retlw	2
  5256  067A  347A               	retlw	122
  5257  067B  3402               	retlw	2
  5258  067C  347B               	retlw	123
  5259  067D  3402               	retlw	2
  5260  067E  347C               	retlw	124
  5261  067F  3402               	retlw	2
  5262  0680  347C               	retlw	124
  5263  0681  3402               	retlw	2
  5264  0682  347D               	retlw	125
  5265  0683  3402               	retlw	2
  5266  0684  347E               	retlw	126
  5267  0685  3402               	retlw	2
  5268  0686  347F               	retlw	127
  5269  0687  3402               	retlw	2
  5270  0688  3480               	retlw	128
  5271  0689  3402               	retlw	2
  5272  068A  3480               	retlw	128
  5273  068B  3402               	retlw	2
  5274  068C  3481               	retlw	129
  5275  068D  3402               	retlw	2
  5276  068E  3482               	retlw	130
  5277  068F  3402               	retlw	2
  5278  0690  3483               	retlw	131
  5279  0691  3402               	retlw	2
  5280  0692  3484               	retlw	132
  5281  0693  3402               	retlw	2
  5282  0694  3485               	retlw	133
  5283  0695  3402               	retlw	2
  5284  0696  3485               	retlw	133
  5285  0697  3402               	retlw	2
  5286  0698  3486               	retlw	134
  5287  0699  3402               	retlw	2
  5288  069A  3487               	retlw	135
  5289  069B  3402               	retlw	2
  5290  069C  3488               	retlw	136
  5291  069D  3402               	retlw	2
  5292  069E  3489               	retlw	137
  5293  069F  3402               	retlw	2
  5294  06A0  3489               	retlw	137
  5295  06A1  3402               	retlw	2
  5296  06A2  348A               	retlw	138
  5297  06A3  3402               	retlw	2
  5298  06A4  348B               	retlw	139
  5299  06A5  3402               	retlw	2
  5300  06A6  348C               	retlw	140
  5301  06A7  3402               	retlw	2
  5302  06A8  348D               	retlw	141
  5303  06A9  3402               	retlw	2
  5304  06AA  348E               	retlw	142
  5305  06AB  3402               	retlw	2
  5306  06AC  348E               	retlw	142
  5307  06AD  3402               	retlw	2
  5308  06AE  348F               	retlw	143
  5309  06AF  3402               	retlw	2
  5310  06B0  3490               	retlw	144
  5311  06B1  3402               	retlw	2
  5312  06B2  3491               	retlw	145
  5313  06B3  3402               	retlw	2
  5314  06B4  3492               	retlw	146
  5315  06B5  3402               	retlw	2
  5316  06B6  3492               	retlw	146
  5317  06B7  3402               	retlw	2
  5318  06B8  3493               	retlw	147
  5319  06B9  3402               	retlw	2
  5320  06BA  3494               	retlw	148
  5321  06BB  3402               	retlw	2
  5322  06BC  3495               	retlw	149
  5323  06BD  3402               	retlw	2
  5324  06BE  3496               	retlw	150
  5325  06BF  3402               	retlw	2
  5326  06C0  3497               	retlw	151
  5327  06C1  3402               	retlw	2
  5328  06C2  3497               	retlw	151
  5329  06C3  3402               	retlw	2
  5330  06C4  3498               	retlw	152
  5331  06C5  3402               	retlw	2
  5332  06C6  3499               	retlw	153
  5333  06C7  3402               	retlw	2
  5334  06C8  349A               	retlw	154
  5335  06C9  3402               	retlw	2
  5336  06CA  349B               	retlw	155
  5337  06CB  3402               	retlw	2
  5338  06CC  349C               	retlw	156
  5339  06CD  3402               	retlw	2
  5340  06CE  349C               	retlw	156
  5341  06CF  3402               	retlw	2
  5342  06D0  349D               	retlw	157
  5343  06D1  3402               	retlw	2
  5344  06D2  349E               	retlw	158
  5345  06D3  3402               	retlw	2
  5346  06D4  349F               	retlw	159
  5347  06D5  3402               	retlw	2
  5348  06D6  34A0               	retlw	160
  5349  06D7  3402               	retlw	2
  5350  06D8  34A0               	retlw	160
  5351  06D9  3402               	retlw	2
  5352  06DA  34A1               	retlw	161
  5353  06DB  3402               	retlw	2
  5354  06DC  34A2               	retlw	162
  5355  06DD  3402               	retlw	2
  5356  06DE  34A3               	retlw	163
  5357  06DF  3402               	retlw	2
  5358  06E0  34A4               	retlw	164
  5359  06E1  3402               	retlw	2
  5360  06E2  34A5               	retlw	165
  5361  06E3  3402               	retlw	2
  5362  06E4  34A5               	retlw	165
  5363  06E5  3402               	retlw	2
  5364  06E6  34A6               	retlw	166
  5365  06E7  3402               	retlw	2
  5366  06E8  34A7               	retlw	167
  5367  06E9  3402               	retlw	2
  5368  06EA  34A8               	retlw	168
  5369  06EB  3402               	retlw	2
  5370  06EC  34A9               	retlw	169
  5371  06ED  3402               	retlw	2
  5372  06EE  34A9               	retlw	169
  5373  06EF  3402               	retlw	2
  5374  06F0  34AA               	retlw	170
  5375  06F1  3402               	retlw	2
  5376  06F2  34AB               	retlw	171
  5377  06F3  3402               	retlw	2
  5378  06F4  34AC               	retlw	172
  5379  06F5  3402               	retlw	2
  5380  06F6  34AD               	retlw	173
  5381  06F7  3402               	retlw	2
  5382  06F8  34AE               	retlw	174
  5383  06F9  3402               	retlw	2
  5384  06FA  34AE               	retlw	174
  5385  06FB  3402               	retlw	2
  5386  06FC  34AF               	retlw	175
  5387  06FD  3402               	retlw	2
  5388  06FE  34B0               	retlw	176
  5389  06FF  3402               	retlw	2
  5390  0700  34B1               	retlw	177
  5391  0701  3402               	retlw	2
  5392  0702  34B2               	retlw	178
  5393  0703  3402               	retlw	2
  5394  0704  34B3               	retlw	179
  5395  0705  3402               	retlw	2
  5396  0706  34B3               	retlw	179
  5397  0707  3402               	retlw	2
  5398  0708  34B4               	retlw	180
  5399  0709  3402               	retlw	2
  5400  070A  34B5               	retlw	181
  5401  070B  3402               	retlw	2
  5402  070C  34B6               	retlw	182
  5403  070D  3402               	retlw	2
  5404  070E  34B7               	retlw	183
  5405  070F  3402               	retlw	2
  5406  0710  34B7               	retlw	183
  5407  0711  3402               	retlw	2
  5408  0712  34B8               	retlw	184
  5409  0713  3402               	retlw	2
  5410  0714  34B9               	retlw	185
  5411  0715  3402               	retlw	2
  5412  0716  34BA               	retlw	186
  5413  0717  3402               	retlw	2
  5414  0718  34BB               	retlw	187
  5415  0719  3402               	retlw	2
  5416  071A  34BC               	retlw	188
  5417  071B  3402               	retlw	2
  5418  071C  34BC               	retlw	188
  5419  071D  3402               	retlw	2
  5420  071E  34BD               	retlw	189
  5421  071F  3402               	retlw	2
  5422  0720  34BE               	retlw	190
  5423  0721  3402               	retlw	2
  5424  0722  34BF               	retlw	191
  5425  0723  3402               	retlw	2
  5426  0724  34C0               	retlw	192
  5427  0725  3402               	retlw	2
  5428  0726  34C0               	retlw	192
  5429  0727  3402               	retlw	2
  5430  0728  34C1               	retlw	193
  5431  0729  3402               	retlw	2
  5432  072A  34C2               	retlw	194
  5433  072B  3402               	retlw	2
  5434  072C  34C3               	retlw	195
  5435  072D  3402               	retlw	2
  5436  072E  34C4               	retlw	196
  5437  072F  3402               	retlw	2
  5438  0730  34C5               	retlw	197
  5439  0731  3402               	retlw	2
  5440  0732  34C5               	retlw	197
  5441  0733  3402               	retlw	2
  5442  0734  34C6               	retlw	198
  5443  0735  3402               	retlw	2
  5444  0736  34C7               	retlw	199
  5445  0737  3402               	retlw	2
  5446  0738  34C8               	retlw	200
  5447  0739  3402               	retlw	2
  5448  073A  34C9               	retlw	201
  5449  073B  3402               	retlw	2
  5450  073C  34CA               	retlw	202
  5451  073D  3402               	retlw	2
  5452  073E  34CA               	retlw	202
  5453  073F  3402               	retlw	2
  5454  0740  34CB               	retlw	203
  5455  0741  3402               	retlw	2
  5456  0742  34CC               	retlw	204
  5457  0743  3402               	retlw	2
  5458  0744  34CD               	retlw	205
  5459  0745  3402               	retlw	2
  5460  0746  34CE               	retlw	206
  5461  0747  3402               	retlw	2
  5462  0748  34CE               	retlw	206
  5463  0749  3402               	retlw	2
  5464  074A  34CF               	retlw	207
  5465  074B  3402               	retlw	2
  5466  074C  34D0               	retlw	208
  5467  074D  3402               	retlw	2
  5468  074E  34D1               	retlw	209
  5469  074F  3402               	retlw	2
  5470  0750  34D2               	retlw	210
  5471  0751  3402               	retlw	2
  5472  0752  34D3               	retlw	211
  5473  0753  3402               	retlw	2
  5474  0754  34D3               	retlw	211
  5475  0755  3402               	retlw	2
  5476  0756  34D4               	retlw	212
  5477  0757  3402               	retlw	2
  5478  0758  34D5               	retlw	213
  5479  0759  3402               	retlw	2
  5480  075A  34D6               	retlw	214
  5481  075B  3402               	retlw	2
  5482  075C  34D7               	retlw	215
  5483  075D  3402               	retlw	2
  5484  075E  34D7               	retlw	215
  5485  075F  3402               	retlw	2
  5486  0760  34D8               	retlw	216
  5487  0761  3402               	retlw	2
  5488  0762  34D9               	retlw	217
  5489  0763  3402               	retlw	2
  5490  0764  34DA               	retlw	218
  5491  0765  3402               	retlw	2
  5492  0766  34DB               	retlw	219
  5493  0767  3402               	retlw	2
  5494  0768  34DC               	retlw	220
  5495  0769  3402               	retlw	2
  5496  076A  34DC               	retlw	220
  5497  076B  3402               	retlw	2
  5498  076C  34DD               	retlw	221
  5499  076D  3402               	retlw	2
  5500  076E  34DE               	retlw	222
  5501  076F  3402               	retlw	2
  5502  0770  34DF               	retlw	223
  5503  0771  3402               	retlw	2
  5504  0772  34E0               	retlw	224
  5505  0773  3402               	retlw	2
  5506  0774  34E1               	retlw	225
  5507  0775  3402               	retlw	2
  5508  0776  34E1               	retlw	225
  5509  0777  3402               	retlw	2
  5510  0778  34E2               	retlw	226
  5511  0779  3402               	retlw	2
  5512  077A  34E3               	retlw	227
  5513  077B  3402               	retlw	2
  5514  077C  34E4               	retlw	228
  5515  077D  3402               	retlw	2
  5516  077E  34E5               	retlw	229
  5517  077F  3402               	retlw	2
  5518  0780  34E5               	retlw	229
  5519  0781  3402               	retlw	2
  5520  0782  34E6               	retlw	230
  5521  0783  3402               	retlw	2
  5522  0784  34E7               	retlw	231
  5523  0785  3402               	retlw	2
  5524  0786  34E8               	retlw	232
  5525  0787  3402               	retlw	2
  5526  0788  34E9               	retlw	233
  5527  0789  3402               	retlw	2
  5528  078A  34EA               	retlw	234
  5529  078B  3402               	retlw	2
  5530  078C  34EA               	retlw	234
  5531  078D  3402               	retlw	2
  5532  078E  34EB               	retlw	235
  5533  078F  3402               	retlw	2
  5534  0790  34EC               	retlw	236
  5535  0791  3402               	retlw	2
  5536  0792  34ED               	retlw	237
  5537  0793  3402               	retlw	2
  5538  0794  34EE               	retlw	238
  5539  0795  3402               	retlw	2
  5540  0796  34EE               	retlw	238
  5541  0797  3402               	retlw	2
  5542  0798  34EF               	retlw	239
  5543  0799  3402               	retlw	2
  5544  079A  34F0               	retlw	240
  5545  079B  3402               	retlw	2
  5546  079C  34F1               	retlw	241
  5547  079D  3402               	retlw	2
  5548  079E  34F2               	retlw	242
  5549  079F  3402               	retlw	2
  5550  07A0  34F3               	retlw	243
  5551  07A1  3402               	retlw	2
  5552  07A2  34F3               	retlw	243
  5553  07A3  3402               	retlw	2
  5554  07A4  34F4               	retlw	244
  5555  07A5  3402               	retlw	2
  5556  07A6  34F5               	retlw	245
  5557  07A7  3402               	retlw	2
  5558  07A8  34F6               	retlw	246
  5559  07A9  3402               	retlw	2
  5560  07AA  34F7               	retlw	247
  5561  07AB  3402               	retlw	2
  5562  07AC  34F7               	retlw	247
  5563  07AD  3402               	retlw	2
  5564  07AE  34F8               	retlw	248
  5565  07AF  3402               	retlw	2
  5566  07B0  34F9               	retlw	249
  5567  07B1  3402               	retlw	2
  5568  07B2  34FA               	retlw	250
  5569  07B3  3402               	retlw	2
  5570  07B4  34FB               	retlw	251
  5571  07B5  3402               	retlw	2
  5572  07B6  34FC               	retlw	252
  5573  07B7  3402               	retlw	2
  5574  07B8  34FC               	retlw	252
  5575  07B9  3402               	retlw	2
  5576  07BA  34FD               	retlw	253
  5577  07BB  3402               	retlw	2
  5578  07BC  34FE               	retlw	254
  5579  07BD  3402               	retlw	2
  5580  07BE  34FF               	retlw	255
  5581  07BF  3402               	retlw	2
  5582  07C0  3400               	retlw	0
  5583  07C1  3403               	retlw	3
  5584  07C2  3401               	retlw	1
  5585  07C3  3403               	retlw	3
  5586  07C4  3401               	retlw	1
  5587  07C5  3403               	retlw	3
  5588  07C6  3402               	retlw	2
  5589  07C7  3403               	retlw	3
  5590  07C8  3403               	retlw	3
  5591  07C9  3403               	retlw	3
  5592  07CA  3404               	retlw	4
  5593  07CB  3403               	retlw	3
  5594  07CC  3405               	retlw	5
  5595  07CD  3403               	retlw	3
  5596  07CE  3405               	retlw	5
  5597  07CF  3403               	retlw	3
  5598  07D0  3406               	retlw	6
  5599  07D1  3403               	retlw	3
  5600  07D2  3407               	retlw	7
  5601  07D3  3403               	retlw	3
  5602  07D4  3408               	retlw	8
  5603  07D5  3403               	retlw	3
  5604  07D6  3409               	retlw	9
  5605  07D7  3403               	retlw	3
  5606  07D8  340A               	retlw	10
  5607  07D9  3403               	retlw	3
  5608  07DA  340A               	retlw	10
  5609  07DB  3403               	retlw	3
  5610  07DC  340B               	retlw	11
  5611  07DD  3403               	retlw	3
  5612  07DE  340C               	retlw	12
  5613  07DF  3403               	retlw	3
  5614  07E0  340D               	retlw	13
  5615  07E1  3403               	retlw	3
  5616  07E2  340E               	retlw	14
  5617  07E3  3403               	retlw	3
  5618  07E4  340E               	retlw	14
  5619  07E5  3403               	retlw	3
  5620  07E6  340F               	retlw	15
  5621  07E7  3403               	retlw	3
  5622  07E8  3410               	retlw	16
  5623  07E9  3403               	retlw	3
  5624  07EA  3411               	retlw	17
  5625  07EB  3403               	retlw	3
  5626  07EC  3412               	retlw	18
  5627  07ED  3403               	retlw	3
  5628  07EE  3413               	retlw	19
  5629  07EF  3403               	retlw	3
  5630  07F0  3413               	retlw	19
  5631  07F1  3403               	retlw	3
  5632  07F2  3414               	retlw	20
  5633  07F3  3403               	retlw	3
  5634  07F4  3415               	retlw	21
  5635  07F5  3403               	retlw	3
  5636  07F6  3416               	retlw	22
  5637  07F7  3403               	retlw	3
  5638  07F8  3417               	retlw	23
  5639  07F9  3403               	retlw	3
  5640  07FA  3418               	retlw	24
  5641  07FB  3403               	retlw	3
  5642  07FC  3418               	retlw	24
  5643  07FD  3403               	retlw	3
  5644  07FE  3419               	retlw	25
  5645  07FF  3403               	retlw	3
  5646  0800  341A               	retlw	26
  5647  0801  3403               	retlw	3
  5648  0802  341B               	retlw	27
  5649  0803  3403               	retlw	3
  5650  0804  341C               	retlw	28
  5651  0805  3403               	retlw	3
  5652  0806  341C               	retlw	28
  5653  0807  3403               	retlw	3
  5654  0808  341D               	retlw	29
  5655  0809  3403               	retlw	3
  5656  080A  341E               	retlw	30
  5657  080B  3403               	retlw	3
  5658  080C  341F               	retlw	31
  5659  080D  3403               	retlw	3
  5660  080E  3420               	retlw	32
  5661  080F  3403               	retlw	3
  5662  0810  3421               	retlw	33
  5663  0811  3403               	retlw	3
  5664  0812  3421               	retlw	33
  5665  0813  3403               	retlw	3
  5666  0814  3422               	retlw	34
  5667  0815  3403               	retlw	3
  5668  0816  3423               	retlw	35
  5669  0817  3403               	retlw	3
  5670  0818  3424               	retlw	36
  5671  0819  3403               	retlw	3
  5672  081A  3425               	retlw	37
  5673  081B  3403               	retlw	3
  5674  081C  3425               	retlw	37
  5675  081D  3403               	retlw	3
  5676  081E  3426               	retlw	38
  5677  081F  3403               	retlw	3
  5678  0820  3427               	retlw	39
  5679  0821  3403               	retlw	3
  5680  0822  3428               	retlw	40
  5681  0823  3403               	retlw	3
  5682  0824  3429               	retlw	41
  5683  0825  3403               	retlw	3
  5684  0826  342A               	retlw	42
  5685  0827  3403               	retlw	3
  5686  0828  342A               	retlw	42
  5687  0829  3403               	retlw	3
  5688  082A  342B               	retlw	43
  5689  082B  3403               	retlw	3
  5690  082C  342C               	retlw	44
  5691  082D  3403               	retlw	3
  5692  082E  342D               	retlw	45
  5693  082F  3403               	retlw	3
  5694  0830  342E               	retlw	46
  5695  0831  3403               	retlw	3
  5696  0832  342F               	retlw	47
  5697  0833  3403               	retlw	3
  5698  0834  342F               	retlw	47
  5699  0835  3403               	retlw	3
  5700  0836  3430               	retlw	48
  5701  0837  3403               	retlw	3
  5702  0838  3431               	retlw	49
  5703  0839  3403               	retlw	3
  5704  083A  3432               	retlw	50
  5705  083B  3403               	retlw	3
  5706  083C  3433               	retlw	51
  5707  083D  3403               	retlw	3
  5708  083E  3433               	retlw	51
  5709  083F  3403               	retlw	3
  5710  0840  3434               	retlw	52
  5711  0841  3403               	retlw	3
  5712  0842  3435               	retlw	53
  5713  0843  3403               	retlw	3
  5714  0844  3436               	retlw	54
  5715  0845  3403               	retlw	3
  5716  0846  3437               	retlw	55
  5717  0847  3403               	retlw	3
  5718  0848  3438               	retlw	56
  5719  0849  3403               	retlw	3
  5720  084A  3438               	retlw	56
  5721  084B  3403               	retlw	3
  5722  084C  3439               	retlw	57
  5723  084D  3403               	retlw	3
  5724  084E  343A               	retlw	58
  5725  084F  3403               	retlw	3
  5726  0850  343B               	retlw	59
  5727  0851  3403               	retlw	3
  5728  0852  343C               	retlw	60
  5729  0853  3403               	retlw	3
  5730  0854  343C               	retlw	60
  5731  0855  3403               	retlw	3
  5732  0856  343D               	retlw	61
  5733  0857  3403               	retlw	3
  5734  0858  343E               	retlw	62
  5735  0859  3403               	retlw	3
  5736  085A  343F               	retlw	63
  5737  085B  3403               	retlw	3
  5738  085C  3440               	retlw	64
  5739  085D  3403               	retlw	3
  5740  085E  3441               	retlw	65
  5741  085F  3403               	retlw	3
  5742  0860  3441               	retlw	65
  5743  0861  3403               	retlw	3
  5744  0862  3442               	retlw	66
  5745  0863  3403               	retlw	3
  5746  0864  3443               	retlw	67
  5747  0865  3403               	retlw	3
  5748  0866  3444               	retlw	68
  5749  0867  3403               	retlw	3
  5750  0868  3445               	retlw	69
  5751  0869  3403               	retlw	3
  5752  086A  3445               	retlw	69
  5753  086B  3403               	retlw	3
  5754  086C  3446               	retlw	70
  5755  086D  3403               	retlw	3
  5756  086E  3447               	retlw	71
  5757  086F  3403               	retlw	3
  5758  0870  3448               	retlw	72
  5759  0871  3403               	retlw	3
  5760  0872                     __end_of_v_table:	
  5761                           
  5762                           	psect	stringtext2
  5763  18B3                     __pstringtext2:	
  5764  18B3                     _invalid_arg:	
  5765  18B3  3445               	retlw	69
  5766  18B4  3472               	retlw	114
  5767  18B5  3472               	retlw	114
  5768  18B6  346F               	retlw	111
  5769  18B7  3472               	retlw	114
  5770  18B8  343A               	retlw	58
  5771  18B9  3420               	retlw	32
  5772  18BA  3469               	retlw	105
  5773  18BB  346E               	retlw	110
  5774  18BC  3476               	retlw	118
  5775  18BD  3461               	retlw	97
  5776  18BE  346C               	retlw	108
  5777  18BF  3469               	retlw	105
  5778  18C0  3464               	retlw	100
  5779  18C1  3420               	retlw	32
  5780  18C2  3461               	retlw	97
  5781  18C3  3472               	retlw	114
  5782  18C4  3467               	retlw	103
  5783  18C5  342E               	retlw	46
  5784  18C6  340D               	retlw	13
  5785  18C7  340A               	retlw	10
  5786  18C8  3400               	retlw	0
  5787  18C9                     __end_of_invalid_arg:	
  5788                           
  5789                           	psect	stringtext3
  5790  18C9                     __pstringtext3:	
  5791  18C9                     _invalid_com:	
  5792  18C9  3445               	retlw	69
  5793  18CA  3472               	retlw	114
  5794  18CB  3472               	retlw	114
  5795  18CC  346F               	retlw	111
  5796  18CD  3472               	retlw	114
  5797  18CE  343A               	retlw	58
  5798  18CF  3420               	retlw	32
  5799  18D0  3469               	retlw	105
  5800  18D1  346E               	retlw	110
  5801  18D2  3476               	retlw	118
  5802  18D3  3461               	retlw	97
  5803  18D4  346C               	retlw	108
  5804  18D5  3469               	retlw	105
  5805  18D6  3464               	retlw	100
  5806  18D7  3420               	retlw	32
  5807  18D8  3463               	retlw	99
  5808  18D9  346F               	retlw	111
  5809  18DA  346D               	retlw	109
  5810  18DB  342E               	retlw	46
  5811  18DC  340D               	retlw	13
  5812  18DD  340A               	retlw	10
  5813  18DE  3400               	retlw	0
  5814  18DF                     __end_of_invalid_com:	
  5815                           
  5816                           	psect	stringtext4
  5817  1958                     __pstringtext4:	
  5818  1958                     _duty_inc:	
  5819  1958  3408               	retlw	8
  5820  1959  3400               	retlw	0
  5821  195A                     __end_of_duty_inc:	
  5822                           
  5823                           	psect	stringtext5
  5824  195A                     __pstringtext5:	
  5825  195A                     _duty_pwm_inc:	
  5826  195A  3408               	retlw	8
  5827  195B  3400               	retlw	0
  5828  195C                     __end_of_duty_pwm_inc:	
  5829                           
  5830                           	psect	nvBANK2
  5831  015A                     __pnvBANK2:	
  5832  015A                     _TMR1_InterruptHandler:	
  5833  015A                     	ds	2
  5834  015C                     _timer1ReloadVal:	
  5835  015C                     	ds	2
  5836  015E                     _ADC_InterruptHandler:	
  5837  015E                     	ds	2
  5838  0160                     _TMR2_InterruptHandler:	
  5839  0160                     	ds	2
  5840  0162                     _EUSART_OverrunErrorHandler:	
  5841  0162                     	ds	2
  5842  0164                     _EUSART_FramingErrorHandler:	
  5843  0164                     	ds	2
  5844  0166                     _EUSART_RxDefaultInterruptHandler:	
  5845  0166                     	ds	2
  5846                           
  5847                           	psect	nvBANK3
  5848  01CC                     __pnvBANK3:	
  5849  01CC                     _EUSART_ErrorHandler:	
  5850  01CC                     	ds	2
  5851  0018                     _T1CONbits	set	24
  5852  0018                     _T1CON	set	24
  5853  0016                     _TMR1L	set	22
  5854  0017                     _TMR1H	set	23
  5855  0019                     _T1GCON	set	25
  5856  0012                     _PIR2bits	set	18
  5857  001C                     _T2CONbits	set	28
  5858  001C                     _T2CON	set	28
  5859  001A                     _TMR2	set	26
  5860  001B                     _PR2	set	27
  5861  000B                     _INTCONbits	set	11
  5862  0011                     _PIR1bits	set	17
  5863  008C                     _TRISAbits	set	140
  5864  0095                     _OPTION_REGbits	set	149
  5865  008E                     _TRISC	set	142
  5866  008C                     _TRISA	set	140
  5867  0097                     _WDTCON	set	151
  5868  0098                     _OSCTUNE	set	152
  5869  009A                     _OSCSTAT	set	154
  5870  0099                     _OSCCON	set	153
  5871  009D                     _ADCON0bits	set	157
  5872  009C                     _ADRESH	set	156
  5873  009B                     _ADRESL	set	155
  5874  009F                     _ADCON2	set	159
  5875  009E                     _ADCON1	set	158
  5876  009D                     _ADCON0	set	157
  5877  0091                     _PIE1bits	set	145
  5878  010E                     _LATCbits	set	270
  5879  010C                     _LATAbits	set	268
  5880  010E                     _LATC	set	270
  5881  010C                     _LATA	set	268
  5882  0116                     _BORCON	set	278
  5883  018C                     _ANSELA	set	396
  5884  018E                     _ANSELC	set	398
  5885  0196                     _PMCON2	set	406
  5886  0193                     _PMDATL	set	403
  5887  0194                     _PMDATH	set	404
  5888  0195                     _PMCON1bits	set	405
  5889  0192                     _PMADRH	set	402
  5890  0191                     _PMADRL	set	401
  5891  0199                     _RC1REG	set	409
  5892  019D                     _RC1STAbits	set	413
  5893  019A                     _TX1REG	set	410
  5894  019E                     _TX1STAbits	set	414
  5895  019C                     _SP1BRGH	set	412
  5896  019B                     _SP1BRGL	set	411
  5897  019E                     _TX1STA	set	414
  5898  019D                     _RC1STA	set	413
  5899  019F                     _BAUD1CON	set	415
  5900  020E                     _WPUC	set	526
  5901  020C                     _WPUA	set	524
  5902  028E                     _ODCONC	set	654
  5903  028C                     _ODCONA	set	652
  5904  029E                     _CCPTMRSbits	set	670
  5905  030E                     _SLRCONC	set	782
  5906  030C                     _SLRCONA	set	780
  5907  038E                     _INLVLC	set	910
  5908  038C                     _INLVLA	set	908
  5909  0417                     _T4CON	set	1047
  5910  0415                     _TMR4	set	1045
  5911  0416                     _PR4	set	1046
  5912  0617                     _PWM3DCL	set	1559
  5913  0618                     _PWM3DCH	set	1560
  5914  0619                     _PWM3CON	set	1561
  5915  0E24                     _RXPPS	set	3620
  5916  0EA2                     _RC2PPS	set	3746
  5917  0EA1                     _RC1PPS	set	3745
  5918  0EA0                     _RC0PPS	set	3744
  5919                           
  5920                           	psect	stringtext6
  5921  1800                     __pstringtext6:	
  5922  1800                     STR_14:	
  5923  1800  3420               	retlw	32	;' '
  5924  1801  3420               	retlw	32	;' '
  5925  1802  344E               	retlw	78	;'N'
  5926  1803  344E               	retlw	78	;'N'
  5927  1804  344E               	retlw	78	;'N'
  5928  1805  344E               	retlw	78	;'N'
  5929  1806  343A               	retlw	58	;':'
  5930  1807  3420               	retlw	32	;' '
  5931  1808  346E               	retlw	110	;'n'
  5932  1809  3475               	retlw	117	;'u'
  5933  180A  346D               	retlw	109	;'m'
  5934  180B  3462               	retlw	98	;'b'
  5935  180C  3465               	retlw	101	;'e'
  5936  180D  3472               	retlw	114	;'r'
  5937  180E  3420               	retlw	32	;' '
  5938  180F  3466               	retlw	102	;'f'
  5939  1810  3472               	retlw	114	;'r'
  5940  1811  346F               	retlw	111	;'o'
  5941  1812  346D               	retlw	109	;'m'
  5942  1813  3420               	retlw	32	;' '
  5943  1814  3430               	retlw	48	;'0'
  5944  1815  3420               	retlw	32	;' '
  5945  1816  3474               	retlw	116	;'t'
  5946  1817  346F               	retlw	111	;'o'
  5947  1818  3420               	retlw	32	;' '
  5948  1819  3439               	retlw	57	;'9'
  5949  181A  3439               	retlw	57	;'9'
  5950  181B  3439               	retlw	57	;'9'
  5951  181C  3439               	retlw	57	;'9'
  5952  181D  340D               	retlw	13
  5953  181E  340A               	retlw	10
  5954  181F  340D               	retlw	13
  5955  1820  340A               	retlw	10
  5956  1821  3400               	retlw	0
  5957                           
  5958                           	psect	stringtext7
  5959  1822                     __pstringtext7:	
  5960  1822                     STR_8:	
  5961  1822  3445               	retlw	69	;'E'
  5962  1823  3452               	retlw	82	;'R'
  5963  1824  3452               	retlw	82	;'R'
  5964  1825  344F               	retlw	79	;'O'
  5965  1826  3452               	retlw	82	;'R'
  5966  1827  343A               	retlw	58	;':'
  5967  1828  3420               	retlw	32	;' '
  5968  1829  3469               	retlw	105	;'i'
  5969  182A  346E               	retlw	110	;'n'
  5970  182B  3476               	retlw	118	;'v'
  5971  182C  3461               	retlw	97	;'a'
  5972  182D  346C               	retlw	108	;'l'
  5973  182E  3469               	retlw	105	;'i'
  5974  182F  3464               	retlw	100	;'d'
  5975  1830  3420               	retlw	32	;' '
  5976  1831  3473               	retlw	115	;'s'
  5977  1832  3479               	retlw	121	;'y'
  5978  1833  346E               	retlw	110	;'n'
  5979  1834  3474               	retlw	116	;'t'
  5980  1835  3461               	retlw	97	;'a'
  5981  1836  3478               	retlw	120	;'x'
  5982  1837  342E               	retlw	46	;'.'
  5983  1838  340D               	retlw	13
  5984  1839  340A               	retlw	10
  5985  183A  3400               	retlw	0
  5986                           
  5987                           	psect	stringtext8
  5988  183B                     __pstringtext8:	
  5989  183B                     STR_19:	
  5990  183B  3420               	retlw	32	;' '
  5991  183C  3420               	retlw	32	;' '
  5992  183D  3449               	retlw	73	;'I'
  5993  183E  343A               	retlw	58	;':'
  5994  183F  3420               	retlw	32	;' '
  5995  1840  3470               	retlw	112	;'p'
  5996  1841  3472               	retlw	114	;'r'
  5997  1842  3469               	retlw	105	;'i'
  5998  1843  346E               	retlw	110	;'n'
  5999  1844  3474               	retlw	116	;'t'
  6000  1845  3420               	retlw	32	;' '
  6001  1846  3473               	retlw	115	;'s'
  6002  1847  3479               	retlw	121	;'y'
  6003  1848  3473               	retlw	115	;'s'
  6004  1849  3474               	retlw	116	;'t'
  6005  184A  3465               	retlw	101	;'e'
  6006  184B  346D               	retlw	109	;'m'
  6007  184C  3420               	retlw	32	;' '
  6008  184D  3449               	retlw	73	;'I'
  6009  184E  344E               	retlw	78	;'N'
  6010  184F  3446               	retlw	70	;'F'
  6011  1850  344F               	retlw	79	;'O'
  6012  1851  340D               	retlw	13
  6013  1852  340A               	retlw	10
  6014  1853  3400               	retlw	0
  6015                           
  6016                           	psect	stringtext9
  6017  1854                     __pstringtext9:	
  6018  1854                     STR_20:	
  6019  1854  3420               	retlw	32	;' '
  6020  1855  3420               	retlw	32	;' '
  6021  1856  343F               	retlw	63	;'?'
  6022  1857  343A               	retlw	58	;':'
  6023  1858  3420               	retlw	32	;' '
  6024  1859  3470               	retlw	112	;'p'
  6025  185A  3472               	retlw	114	;'r'
  6026  185B  3469               	retlw	105	;'i'
  6027  185C  346E               	retlw	110	;'n'
  6028  185D  3474               	retlw	116	;'t'
  6029  185E  3420               	retlw	32	;' '
  6030  185F  3474               	retlw	116	;'t'
  6031  1860  3468               	retlw	104	;'h'
  6032  1861  3469               	retlw	105	;'i'
  6033  1862  3473               	retlw	115	;'s'
  6034  1863  3420               	retlw	32	;' '
  6035  1864  3473               	retlw	115	;'s'
  6036  1865  3463               	retlw	99	;'c'
  6037  1866  3472               	retlw	114	;'r'
  6038  1867  3465               	retlw	101	;'e'
  6039  1868  3465               	retlw	101	;'e'
  6040  1869  346E               	retlw	110	;'n'
  6041  186A  340D               	retlw	13
  6042  186B  340A               	retlw	10
  6043  186C  3400               	retlw	0
  6044                           
  6045                           	psect	stringtext10
  6046  186D                     __pstringtext10:	
  6047  186D                     STR_17:	
  6048  186D  3420               	retlw	32	;' '
  6049  186E  3420               	retlw	32	;' '
  6050  186F  3448               	retlw	72	;'H'
  6051  1870  343A               	retlw	58	;':'
  6052  1871  3420               	retlw	32	;' '
  6053  1872  3473               	retlw	115	;'s'
  6054  1873  3465               	retlw	101	;'e'
  6055  1874  3474               	retlw	116	;'t'
  6056  1875  3420               	retlw	32	;' '
  6057  1876  3448               	retlw	72	;'H'
  6058  1877  3449               	retlw	73	;'I'
  6059  1878  3447               	retlw	71	;'G'
  6060  1879  3448               	retlw	72	;'H'
  6061  187A  3420               	retlw	32	;' '
  6062  187B  3476               	retlw	118	;'v'
  6063  187C  346F               	retlw	111	;'o'
  6064  187D  346C               	retlw	108	;'l'
  6065  187E  3474               	retlw	116	;'t'
  6066  187F  3461               	retlw	97	;'a'
  6067  1880  3467               	retlw	103	;'g'
  6068  1881  3465               	retlw	101	;'e'
  6069  1882  340D               	retlw	13
  6070  1883  340A               	retlw	10
  6071  1884  3400               	retlw	0
  6072                           
  6073                           	psect	stringtext11
  6074  1885                     __pstringtext11:	
  6075  1885                     STR_10:	
  6076  1885  340D               	retlw	13
  6077  1886  340A               	retlw	10
  6078  1887  340D               	retlw	13
  6079  1888  340A               	retlw	10
  6080  1889  342D               	retlw	45	;'-'
  6081  188A  342D               	retlw	45	;'-'
  6082  188B  342D               	retlw	45	;'-'
  6083  188C  342D               	retlw	45	;'-'
  6084  188D  342D               	retlw	45	;'-'
  6085  188E  342D               	retlw	45	;'-'
  6086  188F  342D               	retlw	45	;'-'
  6087  1890  342D               	retlw	45	;'-'
  6088  1891  342D               	retlw	45	;'-'
  6089  1892  342D               	retlw	45	;'-'
  6090  1893  342D               	retlw	45	;'-'
  6091  1894  342D               	retlw	45	;'-'
  6092  1895  342D               	retlw	45	;'-'
  6093  1896  342D               	retlw	45	;'-'
  6094  1897  342D               	retlw	45	;'-'
  6095  1898  342D               	retlw	45	;'-'
  6096  1899  340D               	retlw	13
  6097  189A  340A               	retlw	10
  6098  189B  3400               	retlw	0
  6099                           
  6100                           	psect	stringtext12
  6101  189C                     __pstringtext12:	
  6102  189C                     STR_16:	
  6103  189C  3420               	retlw	32	;' '
  6104  189D  3420               	retlw	32	;' '
  6105  189E  344C               	retlw	76	;'L'
  6106  189F  343A               	retlw	58	;':'
  6107  18A0  3420               	retlw	32	;' '
  6108  18A1  3473               	retlw	115	;'s'
  6109  18A2  3465               	retlw	101	;'e'
  6110  18A3  3474               	retlw	116	;'t'
  6111  18A4  3420               	retlw	32	;' '
  6112  18A5  344C               	retlw	76	;'L'
  6113  18A6  344F               	retlw	79	;'O'
  6114  18A7  3457               	retlw	87	;'W'
  6115  18A8  3420               	retlw	32	;' '
  6116  18A9  3476               	retlw	118	;'v'
  6117  18AA  346F               	retlw	111	;'o'
  6118  18AB  346C               	retlw	108	;'l'
  6119  18AC  3474               	retlw	116	;'t'
  6120  18AD  3461               	retlw	97	;'a'
  6121  18AE  3467               	retlw	103	;'g'
  6122  18AF  3465               	retlw	101	;'e'
  6123  18B0  340D               	retlw	13
  6124  18B1  340A               	retlw	10
  6125  18B2  3400               	retlw	0
  6126                           
  6127                           	psect	stringtext13
  6128  18DF                     __pstringtext13:	
  6129  18DF                     STR_15:	
  6130  18DF  3441               	retlw	65	;'A'
  6131  18E0  3476               	retlw	118	;'v'
  6132  18E1  3461               	retlw	97	;'a'
  6133  18E2  3469               	retlw	105	;'i'
  6134  18E3  346C               	retlw	108	;'l'
  6135  18E4  3461               	retlw	97	;'a'
  6136  18E5  3462               	retlw	98	;'b'
  6137  18E6  346C               	retlw	108	;'l'
  6138  18E7  3465               	retlw	101	;'e'
  6139  18E8  3420               	retlw	32	;' '
  6140  18E9  3443               	retlw	67	;'C'
  6141  18EA  346F               	retlw	111	;'o'
  6142  18EB  346D               	retlw	109	;'m'
  6143  18EC  346D               	retlw	109	;'m'
  6144  18ED  3461               	retlw	97	;'a'
  6145  18EE  346E               	retlw	110	;'n'
  6146  18EF  3464               	retlw	100	;'d'
  6147  18F0  3473               	retlw	115	;'s'
  6148  18F1  343A               	retlw	58	;':'
  6149  18F2  340D               	retlw	13
  6150  18F3  340A               	retlw	10
  6151  18F4  3400               	retlw	0
  6152                           
  6153                           	psect	stringtext14
  6154  18F5                     __pstringtext14:	
  6155  18F5                     STR_18:	
  6156  18F5  3420               	retlw	32	;' '
  6157  18F6  3420               	retlw	32	;' '
  6158  18F7  3454               	retlw	84	;'T'
  6159  18F8  343A               	retlw	58	;':'
  6160  18F9  3420               	retlw	32	;' '
  6161  18FA  3473               	retlw	115	;'s'
  6162  18FB  3465               	retlw	101	;'e'
  6163  18FC  3474               	retlw	116	;'t'
  6164  18FD  3420               	retlw	32	;' '
  6165  18FE  3464               	retlw	100	;'d'
  6166  18FF  3465               	retlw	101	;'e'
  6167  1900  346C               	retlw	108	;'l'
  6168  1901  3461               	retlw	97	;'a'
  6169  1902  3479               	retlw	121	;'y'
  6170  1903  3420               	retlw	32	;' '
  6171  1904  3454               	retlw	84	;'T'
  6172  1905  3449               	retlw	73	;'I'
  6173  1906  344D               	retlw	77	;'M'
  6174  1907  3445               	retlw	69	;'E'
  6175  1908  340D               	retlw	13
  6176  1909  340A               	retlw	10
  6177  190A  3400               	retlw	0
  6178                           
  6179                           	psect	stringtext15
  6180  190B                     __pstringtext15:	
  6181  190B                     STR_11:	
  6182  190B  3420               	retlw	32	;' '
  6183  190C  3420               	retlw	32	;' '
  6184  190D  3448               	retlw	72	;'H'
  6185  190E  3465               	retlw	101	;'e'
  6186  190F  346C               	retlw	108	;'l'
  6187  1910  3470               	retlw	112	;'p'
  6188  1911  3420               	retlw	32	;' '
  6189  1912  3453               	retlw	83	;'S'
  6190  1913  3463               	retlw	99	;'c'
  6191  1914  3472               	retlw	114	;'r'
  6192  1915  3465               	retlw	101	;'e'
  6193  1916  3465               	retlw	101	;'e'
  6194  1917  346E               	retlw	110	;'n'
  6195  1918  340D               	retlw	13
  6196  1919  340A               	retlw	10
  6197  191A  340D               	retlw	13
  6198  191B  340A               	retlw	10
  6199  191C  3400               	retlw	0
  6200                           
  6201                           	psect	stringtext16
  6202  191D                     __pstringtext16:	
  6203  191D                     STR_12:	
  6204  191D  3453               	retlw	83	;'S'
  6205  191E  3479               	retlw	121	;'y'
  6206  191F  346E               	retlw	110	;'n'
  6207  1920  3474               	retlw	116	;'t'
  6208  1921  3461               	retlw	97	;'a'
  6209  1922  3478               	retlw	120	;'x'
  6210  1923  343A               	retlw	58	;':'
  6211  1924  3420               	retlw	32	;' '
  6212  1925  3443               	retlw	67	;'C'
  6213  1926  344E               	retlw	78	;'N'
  6214  1927  344E               	retlw	78	;'N'
  6215  1928  344E               	retlw	78	;'N'
  6216  1929  344E               	retlw	78	;'N'
  6217  192A  340D               	retlw	13
  6218  192B  340A               	retlw	10
  6219  192C  3400               	retlw	0
  6220                           
  6221                           	psect	stringtext17
  6222  192D                     __pstringtext17:	
  6223  192D                     STR_13:	
  6224  192D  3420               	retlw	32	;' '
  6225  192E  3420               	retlw	32	;' '
  6226  192F  3443               	retlw	67	;'C'
  6227  1930  343A               	retlw	58	;':'
  6228  1931  3420               	retlw	32	;' '
  6229  1932  3463               	retlw	99	;'c'
  6230  1933  346F               	retlw	111	;'o'
  6231  1934  346D               	retlw	109	;'m'
  6232  1935  346D               	retlw	109	;'m'
  6233  1936  3461               	retlw	97	;'a'
  6234  1937  346E               	retlw	110	;'n'
  6235  1938  3464               	retlw	100	;'d'
  6236  1939  340D               	retlw	13
  6237  193A  340A               	retlw	10
  6238  193B  3400               	retlw	0
  6239                           
  6240                           	psect	stringtext18
  6241  193C                     __pstringtext18:	
  6242  193C                     STR_2:	
  6243  193C  3420               	retlw	32	;' '
  6244  193D  3420               	retlw	32	;' '
  6245  193E  3448               	retlw	72	;'H'
  6246  193F  343A               	retlw	58	;':'
  6247  1940  3420               	retlw	32	;' '
  6248  1941  3400               	retlw	0
  6249                           
  6250                           	psect	stringtext19
  6251  1942                     __pstringtext19:	
  6252  1942                     STR_4:	
  6253  1942  3420               	retlw	32	;' '
  6254  1943  3420               	retlw	32	;' '
  6255  1944  344C               	retlw	76	;'L'
  6256  1945  343A               	retlw	58	;':'
  6257  1946  3420               	retlw	32	;' '
  6258  1947  3400               	retlw	0
  6259                           
  6260                           	psect	stringtext20
  6261  1948                     __pstringtext20:	
  6262  1948                     STR_6:	
  6263  1948  3420               	retlw	32	;' '
  6264  1949  3420               	retlw	32	;' '
  6265  194A  3454               	retlw	84	;'T'
  6266  194B  343A               	retlw	58	;':'
  6267  194C  3420               	retlw	32	;' '
  6268  194D  3400               	retlw	0
  6269                           
  6270                           	psect	stringtext21
  6271  194E                     __pstringtext21:	
  6272  194E                     STR_9:	
  6273  194E  344F               	retlw	79	;'O'
  6274  194F  344B               	retlw	75	;'K'
  6275  1950  340D               	retlw	13
  6276  1951  340A               	retlw	10
  6277  1952  3400               	retlw	0
  6278                           
  6279                           	psect	stringtext22
  6280  1953                     __pstringtext22:	
  6281  1953                     STR_1:	
  6282  1953  343E               	retlw	62	;'>'
  6283  1954  343E               	retlw	62	;'>'
  6284  1955  3420               	retlw	32	;' '
  6285  1956  3420               	retlw	32	;' '
  6286  1957  3400               	retlw	0
  6287                           
  6288                           	psect	stringtext23
  6289  0000                     __pstringtext23:	
  6290  181F                     
  6291                           ; #config settings
  6292  0000                     
  6293                           	psect	cinit
  6294  0036                     start_initialization:	
  6295  0036                     __initialization:	
  6296                           
  6297                           ; Initialize objects allocated to BANK0
  6298  0036  3180  2002  3180   	fcall	__pidataBANK0	;fetch initializer
  6299  0039  00DF               	movwf	__pdataBANK0& (0+127)
  6300  003A  3180  2003  3180   	fcall	__pidataBANK0+1	;fetch initializer
  6301  003D  00E0               	movwf	(__pdataBANK0+1)& (0+127)
  6302                           
  6303                           ; Initialize objects allocated to BANK1
  6304  003E  0021               	movlb	1	; select bank1
  6305  003F  3188  2073  3180   	fcall	__pidataBANK1	;fetch initializer
  6306  0042  00EE               	movwf	__pdataBANK1& (0+127)
  6307                           
  6308                           ; Initialize objects allocated to BANK2
  6309  0043  30A5               	movlw	low __pidataBANK2
  6310  0044  0084               	movwf	4
  6311  0045  3093               	movlw	(high __pidataBANK2)| (0+128)
  6312  0046  0085               	movwf	5
  6313  0047  3068               	movlw	low __pdataBANK2
  6314  0048  0086               	movwf	6
  6315  0049  3001               	movlw	high __pdataBANK2
  6316  004A  0087               	movwf	7
  6317  004B  3008               	movlw	8
  6318  004C  3193  235F  3180   	fcall	init_ram
  6319                           
  6320                           ; Clear objects allocated to BANK0
  6321  004F  3020               	movlw	low __pbssBANK0
  6322  0050  0084               	movwf	4
  6323  0051  3000               	movlw	high __pbssBANK0
  6324  0052  0085               	movwf	5
  6325  0053  3024               	movlw	36
  6326  0054  3193  2359  3180   	fcall	clear_ram0
  6327                           
  6328                           ; Clear objects allocated to BANK1
  6329  0057  30E4               	movlw	low __pbssBANK1
  6330  0058  0084               	movwf	4
  6331  0059  3000               	movlw	high __pbssBANK1
  6332  005A  0085               	movwf	5
  6333  005B  300A               	movlw	10
  6334  005C  3193  2359  3180   	fcall	clear_ram0
  6335                           
  6336                           ; Clear objects allocated to BANK2
  6337  005F  3020               	movlw	low __pbssBANK2
  6338  0060  0084               	movwf	4
  6339  0061  3001               	movlw	high __pbssBANK2
  6340  0062  0085               	movwf	5
  6341  0063  303A               	movlw	58
  6342  0064  3193  2359  3180   	fcall	clear_ram0
  6343                           
  6344                           ; Clear objects allocated to BANK3
  6345  0067  30A0               	movlw	low __pbssBANK3
  6346  0068  0084               	movwf	4
  6347  0069  3001               	movlw	high __pbssBANK3
  6348  006A  0085               	movwf	5
  6349  006B  301D               	movlw	29
  6350  006C  3193  2359         	fcall	clear_ram0
  6351  006E                     end_of_initialization:	
  6352                           ;End of C runtime variable initialization code
  6353                           
  6354  006E                     __end_of__initialization:	
  6355  006E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6356  006F  0020               	movlb	0
  6357  0070  3195  2D96         	ljmp	_main	;jump to C main() function
  6358                           
  6359                           	psect	bssBANK0
  6360  0020                     __pbssBANK0:	
  6361  0020                     _relay_reset_voltage:	
  6362  0020                     	ds	2
  6363  0022                     _current_duty:	
  6364  0022                     	ds	2
  6365  0024                     _target_duty:	
  6366  0024                     	ds	2
  6367  0026                     _pwm_duty:	
  6368  0026                     	ds	2
  6369  0028                     _local_timer:	
  6370  0028                     	ds	1
  6371  0029                     SolidStateRelay@st:	
  6372  0029                     	ds	1
  6373  002A                     __1000ms_counter:	
  6374  002A                     	ds	1
  6375  002B                     __100ms_counter:	
  6376  002B                     	ds	1
  6377  002C                     UartParser@tx_idx:	
  6378  002C                     	ds	1
  6379  002D                     UartParser@st:	
  6380  002D                     	ds	1
  6381  002E                     _isr_timer:	
  6382  002E                     	ds	1
  6383  002F                     UartParser@rx_idx:	
  6384  002F                     	ds	1
  6385  0030                     _system_counter:	
  6386  0030                     	ds	1
  6387  0031                     _chopper_active:	
  6388  0031                     	ds	1
  6389  0032                     _diff_positive:	
  6390  0032                     	ds	1
  6391  0033                     _tx_idx:	
  6392  0033                     	ds	1
  6393  0034                     _command_error:	
  6394  0034                     	ds	1
  6395  0035                     _command_pending:	
  6396  0035                     	ds	1
  6397  0036                     _rx_idx:	
  6398  0036                     	ds	1
  6399  0037                     _Commands:	
  6400  0037                     	ds	1
  6401  0038                     _eusartRxLastError:	
  6402  0038                     	ds	1
  6403  0039                     _eusartRxCount:	
  6404  0039                     	ds	1
  6405  003A                     _eusartRxTail:	
  6406  003A                     	ds	1
  6407  003B                     _eusartRxHead:	
  6408  003B                     	ds	1
  6409  003C                     _vdc:	
  6410  003C                     	ds	2
  6411  003E                     _vdc_critic:	
  6412  003E                     	ds	2
  6413  0040                     _vdc_max:	
  6414  0040                     	ds	2
  6415  0042                     _vdc_min:	
  6416  0042                     	ds	2
  6417                           
  6418                           	psect	dataBANK0
  6419  005F                     __pdataBANK0:	
  6420  005F                     _lock_isr:	
  6421  005F                     	ds	1
  6422  0060                     _init_required:	
  6423  0060                     	ds	1
  6424                           
  6425                           	psect	bssBANK1
  6426  00E4                     __pbssBANK1:	
  6427  00E4                     _vdc_prev:	
  6428  00E4                     	ds	2
  6429  00E6                     _ra_local_timer:	
  6430  00E6                     	ds	1
  6431  00E7                     _st_act:	
  6432  00E7                     	ds	1
  6433  00E8                     _system_minutes:	
  6434  00E8                     	ds	1
  6435  00E9                     _system_seconds:	
  6436  00E9                     	ds	1
  6437  00EA                     _st:	
  6438  00EA                     	ds	1
  6439  00EB                     _vcs_sub_st:	
  6440  00EB                     	ds	1
  6441  00EC                     _vcs_st:	
  6442  00EC                     	ds	1
  6443  00ED                     _tx_len:	
  6444  00ED                     	ds	1
  6445                           
  6446                           	psect	dataBANK1
  6447  00EE                     __pdataBANK1:	
  6448  00EE                     uart_task@none:	
  6449  00EE                     	ds	1
  6450                           
  6451                           	psect	bssBANK2
  6452  0120                     __pbssBANK2:	
  6453  0120                     UartParser@rx_buffer:	
  6454  0120                     	ds	32
  6455  0140                     _eusartRxStatusBuffer:	
  6456  0140                     	ds	8
  6457  0148                     _activation_counter:	
  6458  0148                     	ds	4
  6459  014C                     _prev_vdc:	
  6460  014C                     	ds	2
  6461  014E                     _reset_duration:	
  6462  014E                     	ds	2
  6463  0150                     _duty_count_down:	
  6464  0150                     	ds	2
  6465  0152                     _duty_count_up:	
  6466  0152                     	ds	2
  6467  0154                     _delta_duty:	
  6468  0154                     	ds	2
  6469  0156                     _diff_vdc:	
  6470  0156                     	ds	2
  6471  0158                     _tx_string:	
  6472  0158                     	ds	2
  6473                           
  6474                           	psect	dataBANK2
  6475  0168                     __pdataBANK2:	
  6476  0168                     _reset_duration_ms:	
  6477  0168                     	ds	2
  6478  016A                     _duty_count_down_max:	
  6479  016A                     	ds	2
  6480  016C                     _duty_pwm_dec:	
  6481  016C                     	ds	2
  6482  016E                     _duty_count_up_max:	
  6483  016E                     	ds	2
  6484                           
  6485                           	psect	bssBANK3
  6486  01A0                     __pbssBANK3:	
  6487  01A0                     _rx_buffer:	
  6488  01A0                     	ds	16
  6489  01B0                     _eusartRxBuffer:	
  6490  01B0                     	ds	8
  6491  01B8                     _num_buffer:	
  6492  01B8                     	ds	5
  6493                           
  6494                           	psect	inittext
  6495  135F                     init_ram:	
  6496  135F  00FE               	movwf	126
  6497  1360                     initloop:	
  6498  1360  0012               	moviw fsr0++
  6499  1361  001E               	movwi fsr1++
  6500  1362  0BFE               	decfsz	126,f
  6501  1363  2B60               	goto	initloop
  6502  1364  3400               	retlw	0
  6503                           
  6504                           	psect	clrtext
  6505  1359                     clear_ram0:	
  6506                           ;	Called with FSR0 containing the base address, and
  6507                           ;	WREG with the size to clear
  6508                           
  6509  1359  0064               	clrwdt	;clear the watchdog before getting into this loop
  6510  135A                     clrloop0:	
  6511  135A  0180               	clrf	0	;clear RAM location pointed to by FSR
  6512  135B  3101               	addfsr 0,1
  6513  135C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6514  135D  2B5A               	goto	clrloop0	;have we reached the end yet?
  6515  135E  3400               	retlw	0	;all done for this memory range, return
  6516                           
  6517                           	psect	cstackBANK3
  6518  01BD                     __pcstackBANK3:	
  6519  01BD                     uart_task@xor:	
  6520  01BD                     ApplicationInit@chopper_state:	
  6521                           ; 1 bytes @ 0x0
  6522                           
  6523                           
  6524                           ; 2 bytes @ 0x0
  6525  01BD                     	ds	1
  6526  01BE                     uart_task@xor_1517:	
  6527                           
  6528                           ; 1 bytes @ 0x1
  6529  01BE                     	ds	1
  6530  01BF                     ApplicationInit@invalid_param:	
  6531  01BF                     uart_task@val_1518:	
  6532                           ; 1 bytes @ 0x2
  6533                           
  6534                           
  6535                           ; 2 bytes @ 0x2
  6536  01BF                     	ds	1
  6537  01C0                     ApplicationInit@act_counter:	
  6538                           
  6539                           ; 4 bytes @ 0x3
  6540  01C0                     	ds	1
  6541  01C1                     uart_task@i:	
  6542                           
  6543                           ; 1 bytes @ 0x4
  6544  01C1                     	ds	1
  6545  01C2                     uart_task@i_1516:	
  6546                           
  6547                           ; 1 bytes @ 0x5
  6548  01C2                     	ds	1
  6549  01C3                     uart_task@idx:	
  6550                           
  6551                           ; 1 bytes @ 0x6
  6552  01C3                     	ds	1
  6553  01C4                     ApplicationInit@val:	
  6554  01C4                     uart_task@activation_counter:	
  6555                           ; 2 bytes @ 0x7
  6556                           
  6557                           
  6558                           ; 4 bytes @ 0x7
  6559  01C4                     	ds	4
  6560  01C8                     uart_task@val:	
  6561                           
  6562                           ; 2 bytes @ 0xB
  6563  01C8                     	ds	2
  6564  01CA                     uart_task@val_1511:	
  6565                           
  6566                           ; 2 bytes @ 0xD
  6567  01CA                     	ds	2
  6568                           
  6569                           	psect	cstackBANK1
  6570  00A0                     __pcstackBANK1:	
  6571  00A0                     save_to_flash@buff:	
  6572                           
  6573                           ; 64 bytes @ 0x0
  6574  00A0                     	ds	64
  6575  00E0                     save_to_flash@activation_counter:	
  6576                           
  6577                           ; 4 bytes @ 0x40
  6578  00E0                     	ds	4
  6579                           
  6580                           	psect	cstackCOMMON
  6581  0070                     __pcstackCOMMON:	
  6582  0070                     ?_EUSART_Receive_ISR:	
  6583  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  6584                           ; 1 bytes @ 0x0
  6585                           
  6586  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  6587                           ; 1 bytes @ 0x0
  6588                           
  6589  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  6590                           ; 1 bytes @ 0x0
  6591                           
  6592  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  6593                           ; 1 bytes @ 0x0
  6594                           
  6595  0070                     ?_EUSART_DefaultErrorHandler:	
  6596                           ; 1 bytes @ 0x0
  6597                           
  6598  0070                     ?_EUSART_RxDataHandler:	
  6599                           ; 1 bytes @ 0x0
  6600                           
  6601  0070                     ??_EUSART_RxDataHandler:	
  6602                           ; 1 bytes @ 0x0
  6603                           
  6604  0070                     ?_TMR2_DefaultInterruptHandler:	
  6605                           ; 1 bytes @ 0x0
  6606                           
  6607  0070                     ??_TMR2_DefaultInterruptHandler:	
  6608                           ; 1 bytes @ 0x0
  6609                           
  6610  0070                     ?_TMR2_CallBack:	
  6611                           ; 1 bytes @ 0x0
  6612                           
  6613  0070                     ?_ADC_DefaultInterruptHandler:	
  6614                           ; 1 bytes @ 0x0
  6615                           
  6616  0070                     ??_ADC_DefaultInterruptHandler:	
  6617                           ; 1 bytes @ 0x0
  6618                           
  6619  0070                     ?_PIN_MANAGER_Initialize:	
  6620                           ; 1 bytes @ 0x0
  6621                           
  6622  0070                     ?_OSCILLATOR_Initialize:	
  6623                           ; 1 bytes @ 0x0
  6624                           
  6625  0070                     ?_WDT_Initialize:	
  6626                           ; 1 bytes @ 0x0
  6627                           
  6628  0070                     ?_TMR4_Initialize:	
  6629                           ; 1 bytes @ 0x0
  6630                           
  6631  0070                     ?_TMR1_Initialize:	
  6632                           ; 1 bytes @ 0x0
  6633                           
  6634  0070                     ?_TMR1_ISR:	
  6635                           ; 1 bytes @ 0x0
  6636                           
  6637  0070                     ?_TMR1_DefaultInterruptHandler:	
  6638                           ; 1 bytes @ 0x0
  6639                           
  6640  0070                     ??_TMR1_DefaultInterruptHandler:	
  6641                           ; 1 bytes @ 0x0
  6642                           
  6643  0070                     ?_TMR1_CallBack:	
  6644                           ; 1 bytes @ 0x0
  6645                           
  6646  0070                     ?_ApplicationInit:	
  6647                           ; 1 bytes @ 0x0
  6648                           
  6649  0070                     ?_init_chopper:	
  6650                           ; 1 bytes @ 0x0
  6651                           
  6652  0070                     ?_init_relay_watchdog:	
  6653                           ; 1 bytes @ 0x0
  6654                           
  6655  0070                     ?_uart_start:	
  6656                           ; 1 bytes @ 0x0
  6657                           
  6658  0070                     ?_uart_task:	
  6659                           ; 1 bytes @ 0x0
  6660                           
  6661  0070                     ?_relay_watchdog_task:	
  6662                           ; 1 bytes @ 0x0
  6663                           
  6664  0070                     ?_relay_watchdog_record_activations_task:	
  6665                           ; 1 bytes @ 0x0
  6666                           
  6667  0070                     ?_TMR2_DutyControlHandler_ISR:	
  6668                           ; 1 bytes @ 0x0
  6669                           
  6670  0070                     ?_ADC_VoltageControlHandler_ISR:	
  6671                           ; 1 bytes @ 0x0
  6672                           
  6673  0070                     ?_start_relay_watchdog:	
  6674                           ; 1 bytes @ 0x0
  6675                           
  6676  0070                     ?_stop_relay_watchdog:	
  6677                           ; 1 bytes @ 0x0
  6678                           
  6679  0070                     ?_TMR1_SystemTimer_ISR:	
  6680                           ; 1 bytes @ 0x0
  6681                           
  6682  0070                     ??_TMR1_SystemTimer_ISR:	
  6683                           ; 1 bytes @ 0x0
  6684                           
  6685  0070                     ?_close_relay:	
  6686                           ; 1 bytes @ 0x0
  6687                           
  6688  0070                     ?_PWM3_Initialize:	
  6689                           ; 1 bytes @ 0x0
  6690                           
  6691  0070                     ?_PWM3_LoadDutyValue:	
  6692                           ; 1 bytes @ 0x0
  6693                           
  6694  0070                     ?_EUSART_Initialize:	
  6695                           ; 1 bytes @ 0x0
  6696                           
  6697  0070                     ?_TMR2_Initialize:	
  6698                           ; 1 bytes @ 0x0
  6699                           
  6700  0070                     ?_TMR2_StartTimer:	
  6701                           ; 1 bytes @ 0x0
  6702                           
  6703  0070                     ?_TMR2_ISR:	
  6704                           ; 1 bytes @ 0x0
  6705                           
  6706  0070                     ?_ADC_Initialize:	
  6707                           ; 1 bytes @ 0x0
  6708                           
  6709  0070                     ?_ADC_SelectChannel:	
  6710                           ; 1 bytes @ 0x0
  6711                           
  6712  0070                     ?_ADC_StartConversion:	
  6713                           ; 1 bytes @ 0x0
  6714                           
  6715  0070                     ?_ADC_ISR:	
  6716                           ; 1 bytes @ 0x0
  6717                           
  6718  0070                     ?_SYSTEM_Initialize:	
  6719                           ; 1 bytes @ 0x0
  6720                           
  6721  0070                     ?_INTERRUPT_InterruptManager:	
  6722                           ; 1 bytes @ 0x0
  6723                           
  6724  0070                     ?_TMR1_WriteTimer:	
  6725                           ; 1 bytes @ 0x0
  6726                           
  6727  0070                     ?_main:	
  6728                           ; 1 bytes @ 0x0
  6729                           
  6730  0070                     ?_LoadDutyValue:	
  6731                           ; 1 bytes @ 0x0
  6732                           
  6733  0070                     ?_start_chopper:	
  6734                           ; 1 bytes @ 0x0
  6735                           
  6736  0070                     ?_stop_chopper:	
  6737                           ; 1 bytes @ 0x0
  6738                           
  6739  0070                     ?_is_chopper_active:	
  6740                           ; 1 bytes @ 0x0
  6741                           
  6742  0070                     ?_save_to_flash:	
  6743                           ; 1 bytes @ 0x0
  6744                           
  6745  0070                     ?_EUSART_CommandHandler_ISR:	
  6746                           ; 1 bytes @ 0x0
  6747                           
  6748  0070                     ??_EUSART_CommandHandler_ISR:	
  6749                           ; 1 bytes @ 0x0
  6750                           
  6751  0070                     ?_restart_relay_watchdog:	
  6752                           ; 1 bytes @ 0x0
  6753                           
  6754  0070                     ?_open_relay:	
  6755                           ; 1 bytes @ 0x0
  6756                           
  6757  0070                     ?_ADC_GetConversionResult:	
  6758                           ; 1 bytes @ 0x0
  6759                           
  6760  0070                     ?___lmul:	
  6761                           ; 2 bytes @ 0x0
  6762                           
  6763  0070                     ?___lldiv:	
  6764                           ; 4 bytes @ 0x0
  6765                           
  6766  0070                     PWM3_LoadDutyValue@dutyValue:	
  6767                           ; 4 bytes @ 0x0
  6768                           
  6769  0070                     TMR1_WriteTimer@timerVal:	
  6770                           ; 2 bytes @ 0x0
  6771                           
  6772  0070                     LoadDutyValue@duty:	
  6773                           ; 2 bytes @ 0x0
  6774                           
  6775  0070                     ___lmul@multiplier:	
  6776                           ; 2 bytes @ 0x0
  6777                           
  6778  0070                     ___lldiv@divisor:	
  6779                           ; 4 bytes @ 0x0
  6780                           
  6781                           
  6782                           ; 4 bytes @ 0x0
  6783  0070                     	ds	1
  6784  0071                     ??_EUSART_Receive_ISR:	
  6785  0071                     ??_EUSART_DefaultErrorHandler:	
  6786                           ; 1 bytes @ 0x1
  6787                           
  6788  0071                     ??_TMR1_CallBack:	
  6789                           ; 1 bytes @ 0x1
  6790                           
  6791  0071                     EUSART_CommandHandler_ISR@rx_data:	
  6792                           ; 1 bytes @ 0x1
  6793                           
  6794                           
  6795                           ; 1 bytes @ 0x1
  6796  0071                     	ds	1
  6797  0072                     ??_TMR1_ISR:	
  6798  0072                     ??_PWM3_LoadDutyValue:	
  6799                           ; 1 bytes @ 0x2
  6800                           
  6801  0072                     ??_ADC_GetConversionResult:	
  6802                           ; 1 bytes @ 0x2
  6803                           
  6804  0072                     ??_TMR1_WriteTimer:	
  6805                           ; 1 bytes @ 0x2
  6806                           
  6807  0072                     ??_LoadDutyValue:	
  6808                           ; 1 bytes @ 0x2
  6809                           
  6810                           
  6811                           ; 1 bytes @ 0x2
  6812  0072                     	ds	2
  6813  0074                     ??_TMR2_DutyControlHandler_ISR:	
  6814  0074                     ___lmul@multiplicand:	
  6815                           ; 1 bytes @ 0x4
  6816                           
  6817  0074                     ___lldiv@dividend:	
  6818                           ; 4 bytes @ 0x4
  6819                           
  6820                           
  6821                           ; 4 bytes @ 0x4
  6822  0074                     	ds	2
  6823  0076                     ??_TMR2_CallBack:	
  6824  0076                     ??_TMR2_ISR:	
  6825                           ; 1 bytes @ 0x6
  6826                           
  6827                           
  6828                           ; 1 bytes @ 0x6
  6829  0076                     	ds	2
  6830  0078                     ??___lmul:	
  6831  0078                     ??___lldiv:	
  6832                           ; 1 bytes @ 0x8
  6833                           
  6834  0078                     ___lmul@product:	
  6835                           ; 1 bytes @ 0x8
  6836                           
  6837                           
  6838                           ; 4 bytes @ 0x8
  6839  0078                     	ds	1
  6840  0079                     ___lldiv@quotient:	
  6841                           
  6842                           ; 4 bytes @ 0x9
  6843  0079                     	ds	4
  6844  007D                     ___lldiv@counter:	
  6845                           
  6846                           ; 1 bytes @ 0xD
  6847  007D                     	ds	1
  6848  007E                     ??_ADC_ISR:	
  6849  007E                     ??_INTERRUPT_InterruptManager:	
  6850                           ; 1 bytes @ 0xE
  6851                           
  6852                           
  6853                           	psect	cstackBANK0
  6854  0044                     __pcstackBANK0:	
  6855                           ; 1 bytes @ 0xE
  6856                           
  6857  0044                     ??_ADC_VoltageControlHandler_ISR:	
  6858                           
  6859                           ; 1 bytes @ 0x0
  6860  0044                     	ds	4
  6861  0048                     ADC_VoltageControlHandler_ISR@force_inc:	
  6862                           
  6863                           ; 1 bytes @ 0x4
  6864  0048                     	ds	1
  6865  0049                     ADC_VoltageControlHandler_ISR@pwm:	
  6866                           
  6867                           ; 4 bytes @ 0x5
  6868  0049                     	ds	4
  6869  004D                     ?_EUSART_SetRxInterruptHandler:	
  6870  004D                     ?_EUSART_SetFramingErrorHandler:	
  6871                           ; 1 bytes @ 0x9
  6872                           
  6873  004D                     ?_EUSART_SetOverrunErrorHandler:	
  6874                           ; 1 bytes @ 0x9
  6875                           
  6876  004D                     ?_EUSART_SetErrorHandler:	
  6877                           ; 1 bytes @ 0x9
  6878                           
  6879  004D                     ?_FLASH_EraseBlock:	
  6880                           ; 1 bytes @ 0x9
  6881                           
  6882  004D                     ?_TMR2_SetInterruptHandler:	
  6883                           ; 1 bytes @ 0x9
  6884                           
  6885  004D                     ?_ADC_SetInterruptHandler:	
  6886                           ; 1 bytes @ 0x9
  6887                           
  6888  004D                     ??_PIN_MANAGER_Initialize:	
  6889                           ; 1 bytes @ 0x9
  6890                           
  6891  004D                     ??_OSCILLATOR_Initialize:	
  6892                           ; 1 bytes @ 0x9
  6893                           
  6894  004D                     ??_WDT_Initialize:	
  6895                           ; 1 bytes @ 0x9
  6896                           
  6897  004D                     ??_TMR4_Initialize:	
  6898                           ; 1 bytes @ 0x9
  6899                           
  6900  004D                     ?_TMR1_SetInterruptHandler:	
  6901                           ; 1 bytes @ 0x9
  6902                           
  6903  004D                     ??_init_relay_watchdog:	
  6904                           ; 1 bytes @ 0x9
  6905                           
  6906  004D                     ??_start_relay_watchdog:	
  6907                           ; 1 bytes @ 0x9
  6908                           
  6909  004D                     ??_stop_relay_watchdog:	
  6910                           ; 1 bytes @ 0x9
  6911                           
  6912  004D                     ?_set_relay_reset_voltage:	
  6913                           ; 1 bytes @ 0x9
  6914                           
  6915  004D                     ??_close_relay:	
  6916                           ; 1 bytes @ 0x9
  6917                           
  6918  004D                     ??_PWM3_Initialize:	
  6919                           ; 1 bytes @ 0x9
  6920                           
  6921  004D                     ??_TMR2_StartTimer:	
  6922                           ; 1 bytes @ 0x9
  6923                           
  6924  004D                     ??_ADC_SelectChannel:	
  6925                           ; 1 bytes @ 0x9
  6926                           
  6927  004D                     ??_ADC_StartConversion:	
  6928                           ; 1 bytes @ 0x9
  6929                           
  6930  004D                     ?_set_vdc_threshold:	
  6931                           ; 1 bytes @ 0x9
  6932                           
  6933  004D                     ??_stop_chopper:	
  6934                           ; 1 bytes @ 0x9
  6935                           
  6936  004D                     ??_is_chopper_active:	
  6937                           ; 1 bytes @ 0x9
  6938                           
  6939  004D                     ??_restart_relay_watchdog:	
  6940                           ; 1 bytes @ 0x9
  6941                           
  6942  004D                     ?_set_relay_activation_counter:	
  6943                           ; 1 bytes @ 0x9
  6944                           
  6945  004D                     ??_open_relay:	
  6946                           ; 1 bytes @ 0x9
  6947                           
  6948  004D                     ?_get_relay_reset_voltage:	
  6949                           ; 1 bytes @ 0x9
  6950                           
  6951  004D                     ?_get_reset_duration:	
  6952                           ; 2 bytes @ 0x9
  6953                           
  6954  004D                     ?_FLASH_ReadWord:	
  6955                           ; 2 bytes @ 0x9
  6956                           
  6957  004D                     ?_get_vdc_min:	
  6958                           ; 2 bytes @ 0x9
  6959                           
  6960  004D                     ?_get_vdc_max:	
  6961                           ; 2 bytes @ 0x9
  6962                           
  6963  004D                     ?_get_vdc_critic:	
  6964                           ; 2 bytes @ 0x9
  6965                           
  6966  004D                     ?_get_vdc:	
  6967                           ; 2 bytes @ 0x9
  6968                           
  6969  004D                     ?___wmul:	
  6970                           ; 2 bytes @ 0x9
  6971                           
  6972  004D                     ?___lwdiv:	
  6973                           ; 2 bytes @ 0x9
  6974                           
  6975  004D                     ?_get_relay_activation_counter:	
  6976                           ; 2 bytes @ 0x9
  6977                           
  6978  004D                     EUSART_SetFramingErrorHandler@interruptHandler:	
  6979                           ; 4 bytes @ 0x9
  6980                           
  6981  004D                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  6982                           ; 2 bytes @ 0x9
  6983                           
  6984  004D                     EUSART_SetErrorHandler@interruptHandler:	
  6985                           ; 2 bytes @ 0x9
  6986                           
  6987  004D                     EUSART_SetRxInterruptHandler@interruptHandler:	
  6988                           ; 2 bytes @ 0x9
  6989                           
  6990  004D                     FLASH_ReadWord@flashAddr:	
  6991                           ; 2 bytes @ 0x9
  6992                           
  6993  004D                     FLASH_EraseBlock@startAddr:	
  6994                           ; 2 bytes @ 0x9
  6995                           
  6996  004D                     TMR2_SetInterruptHandler@InterruptHandler:	
  6997                           ; 2 bytes @ 0x9
  6998                           
  6999  004D                     ADC_SetInterruptHandler@InterruptHandler:	
  7000                           ; 2 bytes @ 0x9
  7001                           
  7002  004D                     TMR1_SetInterruptHandler@InterruptHandler:	
  7003                           ; 2 bytes @ 0x9
  7004                           
  7005  004D                     set_vdc_threshold@v_val:	
  7006                           ; 2 bytes @ 0x9
  7007                           
  7008  004D                     set_relay_reset_voltage@relay_vthres:	
  7009                           ; 2 bytes @ 0x9
  7010                           
  7011  004D                     ___wmul@multiplier:	
  7012                           ; 2 bytes @ 0x9
  7013                           
  7014  004D                     ___lwdiv@divisor:	
  7015                           ; 2 bytes @ 0x9
  7016                           
  7017  004D                     set_relay_activation_counter@act_count:	
  7018                           ; 2 bytes @ 0x9
  7019                           
  7020                           
  7021                           ; 4 bytes @ 0x9
  7022  004D                     	ds	1
  7023  004E                     ADC_SelectChannel@channel:	
  7024                           
  7025                           ; 1 bytes @ 0xA
  7026  004E                     	ds	1
  7027  004F                     ??_EUSART_SetRxInterruptHandler:	
  7028  004F                     ??_EUSART_SetFramingErrorHandler:	
  7029                           ; 1 bytes @ 0xB
  7030                           
  7031  004F                     ??_EUSART_SetOverrunErrorHandler:	
  7032                           ; 1 bytes @ 0xB
  7033                           
  7034  004F                     ??_EUSART_SetErrorHandler:	
  7035                           ; 1 bytes @ 0xB
  7036                           
  7037  004F                     ??_FLASH_EraseBlock:	
  7038                           ; 1 bytes @ 0xB
  7039                           
  7040  004F                     ??_TMR2_SetInterruptHandler:	
  7041                           ; 1 bytes @ 0xB
  7042                           
  7043  004F                     ??_ADC_SetInterruptHandler:	
  7044                           ; 1 bytes @ 0xB
  7045                           
  7046  004F                     ??_TMR1_Initialize:	
  7047                           ; 1 bytes @ 0xB
  7048                           
  7049  004F                     ??_TMR1_SetInterruptHandler:	
  7050                           ; 1 bytes @ 0xB
  7051                           
  7052  004F                     ??_init_chopper:	
  7053                           ; 1 bytes @ 0xB
  7054                           
  7055  004F                     ??_uart_start:	
  7056                           ; 1 bytes @ 0xB
  7057                           
  7058  004F                     ??_get_relay_reset_voltage:	
  7059                           ; 1 bytes @ 0xB
  7060                           
  7061  004F                     ??_get_reset_duration:	
  7062                           ; 1 bytes @ 0xB
  7063                           
  7064  004F                     ??_set_relay_reset_voltage:	
  7065                           ; 1 bytes @ 0xB
  7066                           
  7067  004F                     ??_EUSART_Initialize:	
  7068                           ; 1 bytes @ 0xB
  7069                           
  7070  004F                     ??_FLASH_ReadWord:	
  7071                           ; 1 bytes @ 0xB
  7072                           
  7073  004F                     ??_TMR2_Initialize:	
  7074                           ; 1 bytes @ 0xB
  7075                           
  7076  004F                     ??_ADC_Initialize:	
  7077                           ; 1 bytes @ 0xB
  7078                           
  7079  004F                     ??_SYSTEM_Initialize:	
  7080                           ; 1 bytes @ 0xB
  7081                           
  7082  004F                     ??_get_vdc_min:	
  7083                           ; 1 bytes @ 0xB
  7084                           
  7085  004F                     ??_get_vdc_max:	
  7086                           ; 1 bytes @ 0xB
  7087                           
  7088  004F                     ??_get_vdc_critic:	
  7089                           ; 1 bytes @ 0xB
  7090                           
  7091  004F                     ??_get_vdc:	
  7092                           ; 1 bytes @ 0xB
  7093                           
  7094  004F                     FLASH_ReadWord@GIEBitValue:	
  7095                           ; 1 bytes @ 0xB
  7096                           
  7097  004F                     FLASH_EraseBlock@GIEBitValue:	
  7098                           ; 1 bytes @ 0xB
  7099                           
  7100  004F                     set_vdc_threshold@v_target:	
  7101                           ; 1 bytes @ 0xB
  7102                           
  7103  004F                     ___wmul@multiplicand:	
  7104                           ; 1 bytes @ 0xB
  7105                           
  7106  004F                     ___lwdiv@dividend:	
  7107                           ; 2 bytes @ 0xB
  7108                           
  7109                           
  7110                           ; 2 bytes @ 0xB
  7111  004F                     	ds	1
  7112  0050                     ?_FLASH_WriteBlock:	
  7113  0050                     ??_set_vdc_threshold:	
  7114                           ; 1 bytes @ 0xC
  7115                           
  7116  0050                     ??_start_chopper:	
  7117                           ; 1 bytes @ 0xC
  7118                           
  7119  0050                     ?_set_vdc_min:	
  7120                           ; 1 bytes @ 0xC
  7121                           
  7122  0050                     ?_set_vdc_max:	
  7123                           ; 1 bytes @ 0xC
  7124                           
  7125  0050                     ?_set_vdc_critic:	
  7126                           ; 1 bytes @ 0xC
  7127                           
  7128  0050                     FLASH_WriteBlock@writeAddr:	
  7129                           ; 1 bytes @ 0xC
  7130                           
  7131  0050                     set_vdc_min@vmin:	
  7132                           ; 2 bytes @ 0xC
  7133                           
  7134  0050                     set_vdc_max@vmax:	
  7135                           ; 2 bytes @ 0xC
  7136                           
  7137  0050                     set_vdc_critic@vc:	
  7138                           ; 2 bytes @ 0xC
  7139                           
  7140                           
  7141                           ; 2 bytes @ 0xC
  7142  0050                     	ds	1
  7143  0051                     ??_get_relay_activation_counter:	
  7144  0051                     ??_set_relay_activation_counter:	
  7145                           ; 1 bytes @ 0xD
  7146                           
  7147  0051                     ??___wmul:	
  7148                           ; 1 bytes @ 0xD
  7149                           
  7150  0051                     ??___lwdiv:	
  7151                           ; 1 bytes @ 0xD
  7152                           
  7153  0051                     ___wmul@product:	
  7154                           ; 1 bytes @ 0xD
  7155                           
  7156                           
  7157                           ; 2 bytes @ 0xD
  7158  0051                     	ds	1
  7159  0052                     ??_set_vdc_min:	
  7160  0052                     ??_set_vdc_max:	
  7161                           ; 1 bytes @ 0xE
  7162                           
  7163  0052                     ??_set_vdc_critic:	
  7164                           ; 1 bytes @ 0xE
  7165                           
  7166  0052                     FLASH_WriteBlock@flashWordArray:	
  7167                           ; 1 bytes @ 0xE
  7168                           
  7169  0052                     ___lwdiv@counter:	
  7170                           ; 1 bytes @ 0xE
  7171                           
  7172                           
  7173                           ; 1 bytes @ 0xE
  7174  0052                     	ds	1
  7175  0053                     ??_FLASH_WriteBlock:	
  7176  0053                     ?_get_vdc_speed:	
  7177                           ; 1 bytes @ 0xF
  7178                           
  7179  0053                     ___lwdiv@quotient:	
  7180                           ; 2 bytes @ 0xF
  7181                           
  7182                           
  7183                           ; 2 bytes @ 0xF
  7184  0053                     	ds	2
  7185  0055                     ??_get_vdc_speed:	
  7186  0055                     ?_set_reset_duration:	
  7187                           ; 1 bytes @ 0x11
  7188                           
  7189  0055                     ?_set_vdc_speed:	
  7190                           ; 1 bytes @ 0x11
  7191                           
  7192  0055                     set_vdc_speed@msDelay:	
  7193                           ; 1 bytes @ 0x11
  7194                           
  7195  0055                     set_reset_duration@reset_dur_ms:	
  7196                           ; 2 bytes @ 0x11
  7197                           
  7198                           
  7199                           ; 2 bytes @ 0x11
  7200  0055                     	ds	1
  7201  0056                     FLASH_WriteBlock@blockStartAddr:	
  7202                           
  7203                           ; 2 bytes @ 0x12
  7204  0056                     	ds	1
  7205  0057                     ??_relay_watchdog_task:	
  7206  0057                     ??_set_reset_duration:	
  7207                           ; 1 bytes @ 0x13
  7208                           
  7209  0057                     ??_set_vdc_speed:	
  7210                           ; 1 bytes @ 0x13
  7211                           
  7212                           
  7213                           ; 1 bytes @ 0x13
  7214  0057                     	ds	1
  7215  0058                     FLASH_WriteBlock@GIEBitValue:	
  7216                           
  7217                           ; 1 bytes @ 0x14
  7218  0058                     	ds	1
  7219  0059                     FLASH_WriteBlock@i:	
  7220                           
  7221                           ; 1 bytes @ 0x15
  7222  0059                     	ds	1
  7223  005A                     ??_save_to_flash:	
  7224                           
  7225                           ; 1 bytes @ 0x16
  7226  005A                     	ds	1
  7227  005B                     ??_ApplicationInit:	
  7228  005B                     ??_uart_task:	
  7229                           ; 1 bytes @ 0x17
  7230                           
  7231  005B                     ??_relay_watchdog_record_activations_task:	
  7232                           ; 1 bytes @ 0x17
  7233                           
  7234                           
  7235                           ; 1 bytes @ 0x17
  7236  005B                     	ds	4
  7237  005F                     ??_main:	
  7238                           
  7239                           	psect	maintext
  7240  1596                     __pmaintext:	
  7241                           ; 1 bytes @ 0x1B
  7242 ;;
  7243 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  7244 ;;
  7245 ;; *************** function _main *****************
  7246 ;; Defined at:
  7247 ;;		line 54 in file "main.c"
  7248 ;; Parameters:    Size  Location     Type
  7249 ;;		None
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;		None
  7252 ;; Return value:  Size  Location     Type
  7253 ;;                  1    wreg      void 
  7254 ;; Registers used:
  7255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7256 ;; Tracked objects:
  7257 ;;		On entry : B1F/0
  7258 ;;		On exit  : 0/0
  7259 ;;		Unchanged: 0/0
  7260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7265 ;;Total ram usage:        0 bytes
  7266 ;; Hardware stack levels required when called:    9
  7267 ;; This function calls:
  7268 ;;		_ApplicationInit
  7269 ;;		_SYSTEM_Initialize
  7270 ;;		_init_chopper
  7271 ;;		_init_relay_watchdog
  7272 ;;		_relay_watchdog_record_activations_task
  7273 ;;		_relay_watchdog_task
  7274 ;;		_uart_start
  7275 ;;		_uart_task
  7276 ;; This function is called by:
  7277 ;;		Startup code after reset
  7278 ;; This function uses a non-reentrant model
  7279 ;;
  7280                           
  7281                           
  7282                           ;psect for function _main
  7283  1596                     _main:	
  7284                           
  7285                           ;main.c: 57:     SYSTEM_Initialize();
  7286                           
  7287                           ;incstack = 0
  7288                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7289  1596  3195  255F  3195   	fcall	_SYSTEM_Initialize
  7290                           
  7291                           ;main.c: 60:     (INTCONbits.GIE = 1);
  7292  1599  178B               	bsf	11,7	;volatile
  7293                           
  7294                           ;main.c: 62:     (INTCONbits.PEIE = 1);
  7295  159A  170B               	bsf	11,6	;volatile
  7296                           
  7297                           ;main.c: 64:     ApplicationInit();
  7298  159B  318B  2381  3195   	fcall	_ApplicationInit
  7299                           
  7300                           ;main.c: 66:     init_chopper();
  7301  159E  3196  2659  3195   	fcall	_init_chopper
  7302                           
  7303                           ;main.c: 67:     init_relay_watchdog();
  7304  15A1  3188  2072  3195   	fcall	_init_relay_watchdog
  7305                           
  7306                           ;main.c: 69:     uart_start();
  7307  15A4  3194  24CA  3195   	fcall	_uart_start
  7308  15A7                     l4713:	
  7309                           
  7310                           ;main.c: 71:     {;main.c: 72:         uart_task();
  7311  15A7  318D  2518  3195   	fcall	_uart_task
  7312                           
  7313                           ;main.c: 73:         relay_watchdog_task();
  7314  15AA  3189  21CA  3195   	fcall	_relay_watchdog_task
  7315                           
  7316                           ;main.c: 74:         relay_watchdog_record_activations_task();
  7317  15AD  3197  277B  3195   	fcall	_relay_watchdog_record_activations_task
  7318  15B0  0064               	clrwdt	;# 
  7319  15B1  2DA7               	goto	l4713
  7320  15B2                     __end_of_main:	
  7321                           
  7322                           	psect	text1
  7323  0D18                     __ptext1:	
  7324 ;; *************** function _uart_task *****************
  7325 ;; Defined at:
  7326 ;;		line 61 in file "UartParser.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;		None
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;  idx             1    6[BANK3 ] unsigned char 
  7331 ;;  activation_c    4    7[BANK3 ] unsigned long 
  7332 ;;  val             2    2[BANK3 ] unsigned short 
  7333 ;;  val             2   13[BANK3 ] unsigned short 
  7334 ;;  i               1    5[BANK3 ] unsigned char 
  7335 ;;  xor             1    1[BANK3 ] unsigned char 
  7336 ;;  val             2   11[BANK3 ] unsigned short 
  7337 ;;  i               1    4[BANK3 ] unsigned char 
  7338 ;;  xor             1    0[BANK3 ] unsigned char 
  7339 ;; Return value:  Size  Location     Type
  7340 ;;                  1    wreg      void 
  7341 ;; Registers used:
  7342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7343 ;; Tracked objects:
  7344 ;;		On entry : 0/0
  7345 ;;		On exit  : 1C/0
  7346 ;;		Unchanged: 0/0
  7347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7349 ;;      Locals:         0       0       0       0      15       0       0       0       0       0       0       0       
      +0       0
  7350 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7351 ;;      Totals:         0       4       0       0      15       0       0       0       0       0       0       0       
      +0       0
  7352 ;;Total ram usage:       19 bytes
  7353 ;; Hardware stack levels used:    1
  7354 ;; Hardware stack levels required when called:    8
  7355 ;; This function calls:
  7356 ;;		_get_relay_activation_counter
  7357 ;;		_get_relay_reset_voltage
  7358 ;;		_get_reset_duration
  7359 ;;		_get_vdc
  7360 ;;		_get_vdc_critic
  7361 ;;		_get_vdc_max
  7362 ;;		_get_vdc_min
  7363 ;;		_get_vdc_speed
  7364 ;;		_is_chopper_active
  7365 ;;		_save_to_flash
  7366 ;;		_set_relay_reset_voltage
  7367 ;;		_set_reset_duration
  7368 ;;		_set_vdc_critic
  7369 ;;		_set_vdc_max
  7370 ;;		_set_vdc_min
  7371 ;;		_set_vdc_speed
  7372 ;;		_start_chopper
  7373 ;;		_stop_chopper
  7374 ;; This function is called by:
  7375 ;;		_main
  7376 ;; This function uses a non-reentrant model
  7377 ;;
  7378                           
  7379                           
  7380                           ;psect for function _uart_task
  7381  0D18                     _uart_task:	
  7382                           
  7383                           ;UartParser.c: 63:     if( st == SHUTDOWN )
  7384                           
  7385                           ;incstack = 0
  7386                           ; Regs used in _uart_task: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7387  0D18  0020               	movlb	0	; select bank0
  7388  0D19  082D               	movf	UartParser@st,w
  7389  0D1A  1903               	btfsc	3,2
  7390  0D1B  0008               	return
  7391                           
  7392                           ;UartParser.c: 65:     if( st == INIT )
  7393  0D1C  032D               	decf	UartParser@st,w
  7394  0D1D  1D03               	btfss	3,2
  7395  0D1E  2D2A               	goto	l4399
  7396                           
  7397                           ;UartParser.c: 66:     {;UartParser.c: 67:         isr_timer = ((uint8_t)((uint8_t)~syst
      +                          em_counter)+((uint8_t)1));
  7398  0D1F  0330               	decf	_system_counter,w
  7399  0D20  3AFF               	xorlw	255
  7400  0D21  00DB               	movwf	??_uart_task
  7401  0D22  085B               	movf	??_uart_task,w
  7402  0D23  00AE               	movwf	_isr_timer
  7403                           
  7404                           ;UartParser.c: 68:         lock_isr = 0;
  7405  0D24  01DF               	clrf	_lock_isr
  7406                           
  7407                           ;UartParser.c: 69:         st = WAIT_IDLE;
  7408  0D25  3002               	movlw	2
  7409  0D26  00DB               	movwf	??_uart_task
  7410  0D27  085B               	movf	??_uart_task,w
  7411  0D28  00AD               	movwf	UartParser@st
  7412  0D29  0008               	return
  7413  0D2A                     l4399:	
  7414                           
  7415                           ;UartParser.c: 72:     if( st == WAIT_IDLE )
  7416  0D2A  3002               	movlw	2
  7417  0D2B  062D               	xorwf	UartParser@st,w
  7418  0D2C  1D03               	btfss	3,2
  7419  0D2D  2D3B               	goto	l4411
  7420                           
  7421                           ;UartParser.c: 73:     {;UartParser.c: 74:         if( ((uint8_t)(system_counter + isr_t
      +                          imer) >= ((uint8_t)3)) == 0 )
  7422  0D2E  082E               	movf	_isr_timer,w
  7423  0D2F  0730               	addwf	_system_counter,w
  7424  0D30  00DB               	movwf	??_uart_task
  7425  0D31  3003               	movlw	3
  7426  0D32  025B               	subwf	??_uart_task,w
  7427  0D33  1C03               	btfss	3,0
  7428  0D34  0008               	return
  7429                           
  7430                           ;UartParser.c: 76:         rx_idx = 0;
  7431  0D35  01AF               	clrf	UartParser@rx_idx
  7432                           
  7433                           ;UartParser.c: 77:         st = READ_FRAME;
  7434  0D36  3003               	movlw	3
  7435  0D37  00DB               	movwf	??_uart_task
  7436  0D38  085B               	movf	??_uart_task,w
  7437  0D39  00AD               	movwf	UartParser@st
  7438  0D3A  0008               	return
  7439  0D3B                     l4411:	
  7440                           
  7441                           ;UartParser.c: 80:     if( st == READ_FRAME )
  7442  0D3B  3003               	movlw	3
  7443  0D3C  062D               	xorwf	UartParser@st,w
  7444  0D3D  1D03               	btfss	3,2
  7445  0D3E  2D8E               	goto	l4449
  7446                           
  7447                           ;UartParser.c: 81:     {;UartParser.c: 82:         if( rx_idx == 0 )
  7448  0D3F  082F               	movf	UartParser@rx_idx,w
  7449  0D40  1903               	btfsc	3,2
  7450  0D41  0008               	return
  7451                           
  7452                           ;UartParser.c: 84:         if( ((uint8_t)(system_counter + isr_timer) >= ((uint8_t)3)) =
      +                          = 0 )
  7453  0D42  082E               	movf	_isr_timer,w
  7454  0D43  0730               	addwf	_system_counter,w
  7455  0D44  00DB               	movwf	??_uart_task
  7456  0D45  3003               	movlw	3
  7457  0D46  025B               	subwf	??_uart_task,w
  7458  0D47  1C03               	btfss	3,0
  7459  0D48  0008               	return
  7460                           
  7461                           ;UartParser.c: 87:         lock_isr = 1;
  7462  0D49  01DF               	clrf	_lock_isr
  7463  0D4A  0ADF               	incf	_lock_isr,f
  7464                           
  7465                           ;UartParser.c: 89:         uint8_t i;;UartParser.c: 90:         uint8_t xor = rx_buffer[
      +                          0];
  7466  0D4B  0022               	movlb	2	; select bank2
  7467  0D4C  0820               	movf	UartParser@rx_buffer^(0+256),w
  7468  0D4D  0020               	movlb	0	; select bank0
  7469  0D4E  00DB               	movwf	??_uart_task
  7470  0D4F  085B               	movf	??_uart_task,w
  7471  0D50  0023               	movlb	3	; select bank3
  7472  0D51  00BD               	movwf	uart_task@xor^(0+384)
  7473                           
  7474                           ;UartParser.c: 91:         for( i=1 ; i<rx_idx ; i++ )
  7475  0D52  01C1               	clrf	uart_task@i^(0+384)
  7476  0D53  0AC1               	incf	uart_task@i^(0+384),f
  7477  0D54                     l4429:	
  7478  0D54  0020               	movlb	0	; select bank0
  7479  0D55  082F               	movf	UartParser@rx_idx,w
  7480  0D56  0023               	movlb	3	; select bank3
  7481  0D57  0241               	subwf	uart_task@i^(0+384),w
  7482  0D58  1803               	btfsc	3,0
  7483  0D59  2D6C               	goto	l4431
  7484                           
  7485                           ;UartParser.c: 92:             xor ^= rx_buffer[i];
  7486  0D5A  0841               	movf	uart_task@i^(0+384),w
  7487  0D5B  3E20               	addlw	(low (UartParser@rx_buffer| (0+256)))& (0+255)
  7488  0D5C  0086               	movwf	6
  7489  0D5D  3001               	movlw	1	; select bank2/3
  7490  0D5E  0087               	movwf	7
  7491  0D5F  0801               	movf	1,w
  7492  0D60  0020               	movlb	0	; select bank0
  7493  0D61  00DB               	movwf	??_uart_task
  7494  0D62  085B               	movf	??_uart_task,w
  7495  0D63  0023               	movlb	3	; select bank3
  7496  0D64  06BD               	xorwf	uart_task@xor^(0+384),f
  7497  0D65  3001               	movlw	1
  7498  0D66  0020               	movlb	0	; select bank0
  7499  0D67  00DB               	movwf	??_uart_task
  7500  0D68  085B               	movf	??_uart_task,w
  7501  0D69  0023               	movlb	3	; select bank3
  7502  0D6A  07C1               	addwf	uart_task@i^(0+384),f
  7503  0D6B  2D54               	goto	l4429
  7504  0D6C                     l4431:	
  7505                           
  7506                           ;UartParser.c: 93:         if( xor != 0 ||
  7507  0D6C  083D               	movf	uart_task@xor^(0+384),w
  7508  0D6D  1D03               	btfss	3,2
  7509  0D6E  2D85               	goto	l4443
  7510  0D6F  30AA               	movlw	170
  7511  0D70  0022               	movlb	2	; select bank2
  7512  0D71  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7513  0D72  1903               	btfsc	3,2
  7514  0D73  2D7C               	goto	l4439
  7515  0D74  3055               	movlw	85
  7516  0D75  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7517  0D76  1903               	btfsc	3,2
  7518  0D77  2D7C               	goto	l4439
  7519  0D78  30A5               	movlw	165
  7520  0D79  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7521  0D7A  1D03               	btfss	3,2
  7522  0D7B  2D85               	goto	l4443
  7523  0D7C                     l4439:	
  7524  0D7C  300F               	movlw	15
  7525  0D7D  0020               	movlb	0	; select bank0
  7526  0D7E  062F               	xorwf	UartParser@rx_idx,w
  7527  0D7F  1903               	btfsc	3,2
  7528  0D80  2D89               	goto	l4445
  7529  0D81  3002               	movlw	2
  7530  0D82  062F               	xorwf	UartParser@rx_idx,w
  7531  0D83  1903               	btfsc	3,2
  7532  0D84  2D89               	goto	l4445
  7533  0D85                     l4443:	
  7534                           
  7535                           ;UartParser.c: 98:         {;UartParser.c: 99:             rx_idx = 0;
  7536  0D85  0020               	movlb	0	; select bank0
  7537  0D86  01AF               	clrf	UartParser@rx_idx
  7538                           
  7539                           ;UartParser.c: 100:             lock_isr = 0;
  7540  0D87  01DF               	clrf	_lock_isr
  7541                           
  7542                           ;UartParser.c: 101:         }
  7543  0D88  0008               	return
  7544  0D89                     l4445:	
  7545                           
  7546                           ;UartParser.c: 103:             st = PARSE_FRAME;
  7547  0D89  3004               	movlw	4
  7548  0D8A  00DB               	movwf	??_uart_task
  7549  0D8B  085B               	movf	??_uart_task,w
  7550  0D8C  00AD               	movwf	UartParser@st
  7551  0D8D  0008               	return
  7552  0D8E                     l4449:	
  7553                           
  7554                           ;UartParser.c: 106:     if( st == PARSE_FRAME )
  7555  0D8E  3004               	movlw	4
  7556  0D8F  062D               	xorwf	UartParser@st,w
  7557  0D90  1D03               	btfss	3,2
  7558  0D91  2FE6               	goto	l4597
  7559                           
  7560                           ;UartParser.c: 107:     {;UartParser.c: 108:         if( rx_buffer[0] == SET_PARAMS )
  7561  0D92  30AA               	movlw	170
  7562  0D93  0022               	movlb	2	; select bank2
  7563  0D94  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7564  0D95  1D03               	btfss	3,2
  7565  0D96  2D9D               	goto	l990
  7566                           
  7567                           ;UartParser.c: 109:         {;UartParser.c: 110:             static uint8_t none = 2;;Ua
      +                          rtParser.c: 111:             none++;
  7568  0D97  3001               	movlw	1
  7569  0D98  0020               	movlb	0	; select bank0
  7570  0D99  00DB               	movwf	??_uart_task
  7571  0D9A  085B               	movf	??_uart_task,w
  7572  0D9B  0021               	movlb	1	; select bank1
  7573  0D9C  07EE               	addwf	uart_task@none^(0+128),f
  7574  0D9D                     l990:	
  7575                           ;UartParser.c: 112:         }
  7576                           
  7577                           
  7578                           ;UartParser.c: 113:         if( rx_buffer[0] == SET_PARAMS && rx_idx == 15 )
  7579  0D9D  30AA               	movlw	170
  7580  0D9E  0022               	movlb	2	; select bank2
  7581  0D9F  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7582  0DA0  1D03               	btfss	3,2
  7583  0DA1  2EAE               	goto	l4501
  7584  0DA2  300F               	movlw	15
  7585  0DA3  0020               	movlb	0	; select bank0
  7586  0DA4  062F               	xorwf	UartParser@rx_idx,w
  7587  0DA5  1D03               	btfss	3,2
  7588  0DA6  2EAE               	goto	l4501
  7589                           
  7590                           ;UartParser.c: 114:         {;UartParser.c: 115:             uint16_t val;;UartParser.c:
      +                           116:             val = rx_buffer[1];
  7591  0DA7  0022               	movlb	2	; select bank2
  7592  0DA8  0821               	movf	(UartParser@rx_buffer^(0+256)+1),w
  7593  0DA9  0020               	movlb	0	; select bank0
  7594  0DAA  00DB               	movwf	??_uart_task
  7595  0DAB  01DC               	clrf	??_uart_task+1
  7596  0DAC  085B               	movf	??_uart_task,w
  7597  0DAD  0023               	movlb	3	; select bank3
  7598  0DAE  00C8               	movwf	uart_task@val^(0+384)
  7599  0DAF  0020               	movlb	0	; select bank0
  7600  0DB0  085C               	movf	??_uart_task+1,w
  7601  0DB1  0023               	movlb	3	; select bank3
  7602  0DB2  00C9               	movwf	(uart_task@val+1)^(0+384)
  7603                           
  7604                           ;UartParser.c: 117:             val = val<<8 | rx_buffer[2];
  7605  0DB3  0022               	movlb	2	; select bank2
  7606  0DB4  0822               	movf	(UartParser@rx_buffer^(0+256)+2),w
  7607  0DB5  0020               	movlb	0	; select bank0
  7608  0DB6  00DB               	movwf	??_uart_task
  7609  0DB7  01DC               	clrf	??_uart_task+1
  7610  0DB8  0023               	movlb	3	; select bank3
  7611  0DB9  0848               	movf	uart_task@val^(0+384),w
  7612  0DBA  0020               	movlb	0	; select bank0
  7613  0DBB  00DE               	movwf	??_uart_task+3
  7614  0DBC  01DD               	clrf	??_uart_task+2
  7615  0DBD  085B               	movf	??_uart_task,w
  7616  0DBE  045D               	iorwf	??_uart_task+2,w
  7617  0DBF  0023               	movlb	3	; select bank3
  7618  0DC0  00C8               	movwf	uart_task@val^(0+384)
  7619  0DC1  0020               	movlb	0	; select bank0
  7620  0DC2  085C               	movf	??_uart_task+1,w
  7621  0DC3  045E               	iorwf	??_uart_task+3,w
  7622  0DC4  0023               	movlb	3	; select bank3
  7623  0DC5  00C9               	movwf	(uart_task@val+1)^(0+384)
  7624                           
  7625                           ;UartParser.c: 118:             set_vdc_min(val);
  7626  0DC6  0849               	movf	(uart_task@val+1)^(0+384),w
  7627  0DC7  0020               	movlb	0	; select bank0
  7628  0DC8  00D1               	movwf	set_vdc_min@vmin+1
  7629  0DC9  0023               	movlb	3	; select bank3
  7630  0DCA  0848               	movf	uart_task@val^(0+384),w
  7631  0DCB  0020               	movlb	0	; select bank0
  7632  0DCC  00D0               	movwf	set_vdc_min@vmin
  7633  0DCD  3193  23FF  318D   	fcall	_set_vdc_min
  7634                           
  7635                           ;UartParser.c: 119:             val = rx_buffer[3];
  7636  0DD0  0022               	movlb	2	; select bank2
  7637  0DD1  0823               	movf	(UartParser@rx_buffer^(0+256)+3),w
  7638  0DD2  0020               	movlb	0	; select bank0
  7639  0DD3  00DB               	movwf	??_uart_task
  7640  0DD4  01DC               	clrf	??_uart_task+1
  7641  0DD5  085B               	movf	??_uart_task,w
  7642  0DD6  0023               	movlb	3	; select bank3
  7643  0DD7  00C8               	movwf	uart_task@val^(0+384)
  7644  0DD8  0020               	movlb	0	; select bank0
  7645  0DD9  085C               	movf	??_uart_task+1,w
  7646  0DDA  0023               	movlb	3	; select bank3
  7647  0DDB  00C9               	movwf	(uart_task@val+1)^(0+384)
  7648                           
  7649                           ;UartParser.c: 120:             val = val<<8 | rx_buffer[4];
  7650  0DDC  0022               	movlb	2	; select bank2
  7651  0DDD  0824               	movf	(UartParser@rx_buffer^(0+256)+4),w
  7652  0DDE  0020               	movlb	0	; select bank0
  7653  0DDF  00DB               	movwf	??_uart_task
  7654  0DE0  01DC               	clrf	??_uart_task+1
  7655  0DE1  0023               	movlb	3	; select bank3
  7656  0DE2  0848               	movf	uart_task@val^(0+384),w
  7657  0DE3  0020               	movlb	0	; select bank0
  7658  0DE4  00DE               	movwf	??_uart_task+3
  7659  0DE5  01DD               	clrf	??_uart_task+2
  7660  0DE6  085B               	movf	??_uart_task,w
  7661  0DE7  045D               	iorwf	??_uart_task+2,w
  7662  0DE8  0023               	movlb	3	; select bank3
  7663  0DE9  00C8               	movwf	uart_task@val^(0+384)
  7664  0DEA  0020               	movlb	0	; select bank0
  7665  0DEB  085C               	movf	??_uart_task+1,w
  7666  0DEC  045E               	iorwf	??_uart_task+3,w
  7667  0DED  0023               	movlb	3	; select bank3
  7668  0DEE  00C9               	movwf	(uart_task@val+1)^(0+384)
  7669                           
  7670                           ;UartParser.c: 121:             set_vdc_max(val);
  7671  0DEF  0849               	movf	(uart_task@val+1)^(0+384),w
  7672  0DF0  0020               	movlb	0	; select bank0
  7673  0DF1  00D1               	movwf	set_vdc_max@vmax+1
  7674  0DF2  0023               	movlb	3	; select bank3
  7675  0DF3  0848               	movf	uart_task@val^(0+384),w
  7676  0DF4  0020               	movlb	0	; select bank0
  7677  0DF5  00D0               	movwf	set_vdc_max@vmax
  7678  0DF6  3193  23F4  318D   	fcall	_set_vdc_max
  7679                           
  7680                           ;UartParser.c: 122:             val = rx_buffer[5];
  7681  0DF9  0022               	movlb	2	; select bank2
  7682  0DFA  0825               	movf	(UartParser@rx_buffer^(0+256)+5),w
  7683  0DFB  0020               	movlb	0	; select bank0
  7684  0DFC  00DB               	movwf	??_uart_task
  7685  0DFD  01DC               	clrf	??_uart_task+1
  7686  0DFE  085B               	movf	??_uart_task,w
  7687  0DFF  0023               	movlb	3	; select bank3
  7688  0E00  00C8               	movwf	uart_task@val^(0+384)
  7689  0E01  0020               	movlb	0	; select bank0
  7690  0E02  085C               	movf	??_uart_task+1,w
  7691  0E03  0023               	movlb	3	; select bank3
  7692  0E04  00C9               	movwf	(uart_task@val+1)^(0+384)
  7693                           
  7694                           ;UartParser.c: 123:             val = val<<8 | rx_buffer[6];
  7695  0E05  0022               	movlb	2	; select bank2
  7696  0E06  0826               	movf	(UartParser@rx_buffer^(0+256)+6),w
  7697  0E07  0020               	movlb	0	; select bank0
  7698  0E08  00DB               	movwf	??_uart_task
  7699  0E09  01DC               	clrf	??_uart_task+1
  7700  0E0A  0023               	movlb	3	; select bank3
  7701  0E0B  0848               	movf	uart_task@val^(0+384),w
  7702  0E0C  0020               	movlb	0	; select bank0
  7703  0E0D  00DE               	movwf	??_uart_task+3
  7704  0E0E  01DD               	clrf	??_uart_task+2
  7705  0E0F  085B               	movf	??_uart_task,w
  7706  0E10  045D               	iorwf	??_uart_task+2,w
  7707  0E11  0023               	movlb	3	; select bank3
  7708  0E12  00C8               	movwf	uart_task@val^(0+384)
  7709  0E13  0020               	movlb	0	; select bank0
  7710  0E14  085C               	movf	??_uart_task+1,w
  7711  0E15  045E               	iorwf	??_uart_task+3,w
  7712  0E16  0023               	movlb	3	; select bank3
  7713  0E17  00C9               	movwf	(uart_task@val+1)^(0+384)
  7714                           
  7715                           ;UartParser.c: 124:             set_vdc_critic(val);
  7716  0E18  0849               	movf	(uart_task@val+1)^(0+384),w
  7717  0E19  0020               	movlb	0	; select bank0
  7718  0E1A  00D1               	movwf	set_vdc_critic@vc+1
  7719  0E1B  0023               	movlb	3	; select bank3
  7720  0E1C  0848               	movf	uart_task@val^(0+384),w
  7721  0E1D  0020               	movlb	0	; select bank0
  7722  0E1E  00D0               	movwf	set_vdc_critic@vc
  7723  0E1F  3193  23E9  318D   	fcall	_set_vdc_critic
  7724                           
  7725                           ;UartParser.c: 125:             val = rx_buffer[7];
  7726  0E22  0022               	movlb	2	; select bank2
  7727  0E23  0827               	movf	(UartParser@rx_buffer^(0+256)+7),w
  7728  0E24  0020               	movlb	0	; select bank0
  7729  0E25  00DB               	movwf	??_uart_task
  7730  0E26  01DC               	clrf	??_uart_task+1
  7731  0E27  085B               	movf	??_uart_task,w
  7732  0E28  0023               	movlb	3	; select bank3
  7733  0E29  00C8               	movwf	uart_task@val^(0+384)
  7734  0E2A  0020               	movlb	0	; select bank0
  7735  0E2B  085C               	movf	??_uart_task+1,w
  7736  0E2C  0023               	movlb	3	; select bank3
  7737  0E2D  00C9               	movwf	(uart_task@val+1)^(0+384)
  7738                           
  7739                           ;UartParser.c: 126:             val = val<<8 | rx_buffer[8];
  7740  0E2E  0022               	movlb	2	; select bank2
  7741  0E2F  0828               	movf	(UartParser@rx_buffer^(0+256)+8),w
  7742  0E30  0020               	movlb	0	; select bank0
  7743  0E31  00DB               	movwf	??_uart_task
  7744  0E32  01DC               	clrf	??_uart_task+1
  7745  0E33  0023               	movlb	3	; select bank3
  7746  0E34  0848               	movf	uart_task@val^(0+384),w
  7747  0E35  0020               	movlb	0	; select bank0
  7748  0E36  00DE               	movwf	??_uart_task+3
  7749  0E37  01DD               	clrf	??_uart_task+2
  7750  0E38  085B               	movf	??_uart_task,w
  7751  0E39  045D               	iorwf	??_uart_task+2,w
  7752  0E3A  0023               	movlb	3	; select bank3
  7753  0E3B  00C8               	movwf	uart_task@val^(0+384)
  7754  0E3C  0020               	movlb	0	; select bank0
  7755  0E3D  085C               	movf	??_uart_task+1,w
  7756  0E3E  045E               	iorwf	??_uart_task+3,w
  7757  0E3F  0023               	movlb	3	; select bank3
  7758  0E40  00C9               	movwf	(uart_task@val+1)^(0+384)
  7759                           
  7760                           ;UartParser.c: 127:             set_vdc_speed(val);
  7761  0E41  0849               	movf	(uart_task@val+1)^(0+384),w
  7762  0E42  0020               	movlb	0	; select bank0
  7763  0E43  00D6               	movwf	set_vdc_speed@msDelay+1
  7764  0E44  0023               	movlb	3	; select bank3
  7765  0E45  0848               	movf	uart_task@val^(0+384),w
  7766  0E46  0020               	movlb	0	; select bank0
  7767  0E47  00D5               	movwf	set_vdc_speed@msDelay
  7768  0E48  3196  2633  318D   	fcall	_set_vdc_speed
  7769                           
  7770                           ;UartParser.c: 129:             val = rx_buffer[9];
  7771  0E4B  0022               	movlb	2	; select bank2
  7772  0E4C  0829               	movf	(UartParser@rx_buffer^(0+256)+9),w
  7773  0E4D  0020               	movlb	0	; select bank0
  7774  0E4E  00DB               	movwf	??_uart_task
  7775  0E4F  01DC               	clrf	??_uart_task+1
  7776  0E50  085B               	movf	??_uart_task,w
  7777  0E51  0023               	movlb	3	; select bank3
  7778  0E52  00C8               	movwf	uart_task@val^(0+384)
  7779  0E53  0020               	movlb	0	; select bank0
  7780  0E54  085C               	movf	??_uart_task+1,w
  7781  0E55  0023               	movlb	3	; select bank3
  7782  0E56  00C9               	movwf	(uart_task@val+1)^(0+384)
  7783                           
  7784                           ;UartParser.c: 130:             val = val<<8 | rx_buffer[10];
  7785  0E57  0022               	movlb	2	; select bank2
  7786  0E58  082A               	movf	(UartParser@rx_buffer^(0+256)+10),w
  7787  0E59  0020               	movlb	0	; select bank0
  7788  0E5A  00DB               	movwf	??_uart_task
  7789  0E5B  01DC               	clrf	??_uart_task+1
  7790  0E5C  0023               	movlb	3	; select bank3
  7791  0E5D  0848               	movf	uart_task@val^(0+384),w
  7792  0E5E  0020               	movlb	0	; select bank0
  7793  0E5F  00DE               	movwf	??_uart_task+3
  7794  0E60  01DD               	clrf	??_uart_task+2
  7795  0E61  085B               	movf	??_uart_task,w
  7796  0E62  045D               	iorwf	??_uart_task+2,w
  7797  0E63  0023               	movlb	3	; select bank3
  7798  0E64  00C8               	movwf	uart_task@val^(0+384)
  7799  0E65  0020               	movlb	0	; select bank0
  7800  0E66  085C               	movf	??_uart_task+1,w
  7801  0E67  045E               	iorwf	??_uart_task+3,w
  7802  0E68  0023               	movlb	3	; select bank3
  7803  0E69  00C9               	movwf	(uart_task@val+1)^(0+384)
  7804                           
  7805                           ;UartParser.c: 131:             set_relay_reset_voltage(val);
  7806  0E6A  0849               	movf	(uart_task@val+1)^(0+384),w
  7807  0E6B  0020               	movlb	0	; select bank0
  7808  0E6C  00CE               	movwf	set_relay_reset_voltage@relay_vthres+1
  7809  0E6D  0023               	movlb	3	; select bank3
  7810  0E6E  0848               	movf	uart_task@val^(0+384),w
  7811  0E6F  0020               	movlb	0	; select bank0
  7812  0E70  00CD               	movwf	set_relay_reset_voltage@relay_vthres
  7813  0E71  3194  24F8  318D   	fcall	_set_relay_reset_voltage
  7814                           
  7815                           ;UartParser.c: 132:             val = rx_buffer[11];
  7816  0E74  0022               	movlb	2	; select bank2
  7817  0E75  082B               	movf	(UartParser@rx_buffer^(0+256)+11),w
  7818  0E76  0020               	movlb	0	; select bank0
  7819  0E77  00DB               	movwf	??_uart_task
  7820  0E78  01DC               	clrf	??_uart_task+1
  7821  0E79  085B               	movf	??_uart_task,w
  7822  0E7A  0023               	movlb	3	; select bank3
  7823  0E7B  00C8               	movwf	uart_task@val^(0+384)
  7824  0E7C  0020               	movlb	0	; select bank0
  7825  0E7D  085C               	movf	??_uart_task+1,w
  7826  0E7E  0023               	movlb	3	; select bank3
  7827  0E7F  00C9               	movwf	(uart_task@val+1)^(0+384)
  7828                           
  7829                           ;UartParser.c: 133:             val = val<<8 | rx_buffer[12];
  7830  0E80  0022               	movlb	2	; select bank2
  7831  0E81  082C               	movf	(UartParser@rx_buffer^(0+256)+12),w
  7832  0E82  0020               	movlb	0	; select bank0
  7833  0E83  00DB               	movwf	??_uart_task
  7834  0E84  01DC               	clrf	??_uart_task+1
  7835  0E85  0023               	movlb	3	; select bank3
  7836  0E86  0848               	movf	uart_task@val^(0+384),w
  7837  0E87  0020               	movlb	0	; select bank0
  7838  0E88  00DE               	movwf	??_uart_task+3
  7839  0E89  01DD               	clrf	??_uart_task+2
  7840  0E8A  085B               	movf	??_uart_task,w
  7841  0E8B  045D               	iorwf	??_uart_task+2,w
  7842  0E8C  0023               	movlb	3	; select bank3
  7843  0E8D  00C8               	movwf	uart_task@val^(0+384)
  7844  0E8E  0020               	movlb	0	; select bank0
  7845  0E8F  085C               	movf	??_uart_task+1,w
  7846  0E90  045E               	iorwf	??_uart_task+3,w
  7847  0E91  0023               	movlb	3	; select bank3
  7848  0E92  00C9               	movwf	(uart_task@val+1)^(0+384)
  7849                           
  7850                           ;UartParser.c: 134:             set_reset_duration(val);
  7851  0E93  0849               	movf	(uart_task@val+1)^(0+384),w
  7852  0E94  0020               	movlb	0	; select bank0
  7853  0E95  00D6               	movwf	set_reset_duration@reset_dur_ms+1
  7854  0E96  0023               	movlb	3	; select bank3
  7855  0E97  0848               	movf	uart_task@val^(0+384),w
  7856  0E98  0020               	movlb	0	; select bank0
  7857  0E99  00D5               	movwf	set_reset_duration@reset_dur_ms
  7858  0E9A  3196  26DB  318D   	fcall	_set_reset_duration
  7859                           
  7860                           ;UartParser.c: 136:             if( rx_buffer[13] == 0 )
  7861  0E9D  0022               	movlb	2	; select bank2
  7862  0E9E  082D               	movf	(UartParser@rx_buffer^(0+256)+13),w
  7863  0E9F  1D03               	btfss	3,2
  7864  0EA0  2EA5               	goto	l4491
  7865                           
  7866                           ;UartParser.c: 137:                 stop_chopper();
  7867  0EA1  3194  242F  318D   	fcall	_stop_chopper
  7868  0EA4  2EA8               	goto	l4493
  7869  0EA5                     l4491:	
  7870                           
  7871                           ;UartParser.c: 139:                 start_chopper();
  7872  0EA5  3195  2510  318D   	fcall	_start_chopper
  7873  0EA8                     l4493:	
  7874                           
  7875                           ;UartParser.c: 140:             save_to_flash();
  7876  0EA8  3189  2160         	fcall	_save_to_flash
  7877  0EAA                     l4495:	
  7878                           
  7879                           ;UartParser.c: 141:             st = INIT;
  7880  0EAA  0020               	movlb	0	; select bank0
  7881  0EAB  01AD               	clrf	UartParser@st
  7882  0EAC  0AAD               	incf	UartParser@st,f
  7883  0EAD  0008               	return
  7884  0EAE                     l4501:	
  7885                           
  7886                           ;UartParser.c: 145:         {;UartParser.c: 146:             if( rx_buffer[0] == GET_PAR
      +                          AMS && rx_idx == 2 )
  7887  0EAE  3055               	movlw	85
  7888  0EAF  0022               	movlb	2	; select bank2
  7889  0EB0  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7890  0EB1  1D03               	btfss	3,2
  7891  0EB2  2F77               	goto	l4559
  7892  0EB3  3002               	movlw	2
  7893  0EB4  0020               	movlb	0	; select bank0
  7894  0EB5  062F               	xorwf	UartParser@rx_idx,w
  7895  0EB6  1D03               	btfss	3,2
  7896  0EB7  2F77               	goto	l4559
  7897                           
  7898                           ;UartParser.c: 147:             {;UartParser.c: 148:                 uint16_t val;;UartP
      +                          arser.c: 149:                 val = get_vdc_min();
  7899  0EB8  3193  233C  318D   	fcall	_get_vdc_min
  7900  0EBB  084E               	movf	?_get_vdc_min+1,w
  7901  0EBC  0023               	movlb	3	; select bank3
  7902  0EBD  00CB               	movwf	(uart_task@val_1511+1)^(0+384)
  7903  0EBE  0020               	movlb	0	; select bank0
  7904  0EBF  084D               	movf	?_get_vdc_min,w
  7905  0EC0  0023               	movlb	3	; select bank3
  7906  0EC1  00CA               	movwf	uart_task@val_1511^(0+384)
  7907                           
  7908                           ;UartParser.c: 150:                 rx_buffer[1] = (val>>8) & 0xFF;
  7909  0EC2  084B               	movf	(uart_task@val_1511^(0+384)+1),w
  7910  0EC3  0020               	movlb	0	; select bank0
  7911  0EC4  00DB               	movwf	??_uart_task
  7912  0EC5  085B               	movf	??_uart_task,w
  7913  0EC6  0022               	movlb	2	; select bank2
  7914  0EC7  00A1               	movwf	(UartParser@rx_buffer^(0+256)+1)
  7915                           
  7916                           ;UartParser.c: 151:                 rx_buffer[2] = val & 0xFF;
  7917  0EC8  0023               	movlb	3	; select bank3
  7918  0EC9  084A               	movf	uart_task@val_1511^(0+384),w
  7919  0ECA  0020               	movlb	0	; select bank0
  7920  0ECB  00DB               	movwf	??_uart_task
  7921  0ECC  085B               	movf	??_uart_task,w
  7922  0ECD  0022               	movlb	2	; select bank2
  7923  0ECE  00A2               	movwf	(UartParser@rx_buffer^(0+256)+2)
  7924                           
  7925                           ;UartParser.c: 152:                 val = get_vdc_max();
  7926  0ECF  3193  234D  318D   	fcall	_get_vdc_max
  7927  0ED2  084E               	movf	?_get_vdc_max+1,w
  7928  0ED3  0023               	movlb	3	; select bank3
  7929  0ED4  00CB               	movwf	(uart_task@val_1511+1)^(0+384)
  7930  0ED5  0020               	movlb	0	; select bank0
  7931  0ED6  084D               	movf	?_get_vdc_max,w
  7932  0ED7  0023               	movlb	3	; select bank3
  7933  0ED8  00CA               	movwf	uart_task@val_1511^(0+384)
  7934                           
  7935                           ;UartParser.c: 153:                 rx_buffer[3] = (val>>8) & 0xFF;
  7936  0ED9  084B               	movf	(uart_task@val_1511^(0+384)+1),w
  7937  0EDA  0020               	movlb	0	; select bank0
  7938  0EDB  00DB               	movwf	??_uart_task
  7939  0EDC  085B               	movf	??_uart_task,w
  7940  0EDD  0022               	movlb	2	; select bank2
  7941  0EDE  00A3               	movwf	(UartParser@rx_buffer^(0+256)+3)
  7942                           
  7943                           ;UartParser.c: 154:                 rx_buffer[4] = val & 0xFF;
  7944  0EDF  0023               	movlb	3	; select bank3
  7945  0EE0  084A               	movf	uart_task@val_1511^(0+384),w
  7946  0EE1  0020               	movlb	0	; select bank0
  7947  0EE2  00DB               	movwf	??_uart_task
  7948  0EE3  085B               	movf	??_uart_task,w
  7949  0EE4  0022               	movlb	2	; select bank2
  7950  0EE5  00A4               	movwf	(UartParser@rx_buffer^(0+256)+4)
  7951                           
  7952                           ;UartParser.c: 155:                 val = get_vdc_critic();
  7953  0EE6  3193  2347  318D   	fcall	_get_vdc_critic
  7954  0EE9  084E               	movf	?_get_vdc_critic+1,w
  7955  0EEA  0023               	movlb	3	; select bank3
  7956  0EEB  00CB               	movwf	(uart_task@val_1511+1)^(0+384)
  7957  0EEC  0020               	movlb	0	; select bank0
  7958  0EED  084D               	movf	?_get_vdc_critic,w
  7959  0EEE  0023               	movlb	3	; select bank3
  7960  0EEF  00CA               	movwf	uart_task@val_1511^(0+384)
  7961                           
  7962                           ;UartParser.c: 156:                 rx_buffer[5] = (val>>8) & 0xFF;
  7963  0EF0  084B               	movf	(uart_task@val_1511^(0+384)+1),w
  7964  0EF1  0020               	movlb	0	; select bank0
  7965  0EF2  00DB               	movwf	??_uart_task
  7966  0EF3  085B               	movf	??_uart_task,w
  7967  0EF4  0022               	movlb	2	; select bank2
  7968  0EF5  00A5               	movwf	(UartParser@rx_buffer^(0+256)+5)
  7969                           
  7970                           ;UartParser.c: 157:                 rx_buffer[6] = val & 0xFF;
  7971  0EF6  0023               	movlb	3	; select bank3
  7972  0EF7  084A               	movf	uart_task@val_1511^(0+384),w
  7973  0EF8  0020               	movlb	0	; select bank0
  7974  0EF9  00DB               	movwf	??_uart_task
  7975  0EFA  085B               	movf	??_uart_task,w
  7976  0EFB  0022               	movlb	2	; select bank2
  7977  0EFC  00A6               	movwf	(UartParser@rx_buffer^(0+256)+6)
  7978                           
  7979                           ;UartParser.c: 158:                 val = get_vdc_speed();
  7980  0EFD  3194  249F  318D   	fcall	_get_vdc_speed
  7981  0F00  0854               	movf	?_get_vdc_speed+1,w
  7982  0F01  0023               	movlb	3	; select bank3
  7983  0F02  00CB               	movwf	(uart_task@val_1511+1)^(0+384)
  7984  0F03  0020               	movlb	0	; select bank0
  7985  0F04  0853               	movf	?_get_vdc_speed,w
  7986  0F05  0023               	movlb	3	; select bank3
  7987  0F06  00CA               	movwf	uart_task@val_1511^(0+384)
  7988                           
  7989                           ;UartParser.c: 159:                 rx_buffer[7] = (val>>8) & 0xFF;
  7990  0F07  084B               	movf	(uart_task@val_1511^(0+384)+1),w
  7991  0F08  0020               	movlb	0	; select bank0
  7992  0F09  00DB               	movwf	??_uart_task
  7993  0F0A  085B               	movf	??_uart_task,w
  7994  0F0B  0022               	movlb	2	; select bank2
  7995  0F0C  00A7               	movwf	(UartParser@rx_buffer^(0+256)+7)
  7996                           
  7997                           ;UartParser.c: 160:                 rx_buffer[8] = val & 0xFF;
  7998  0F0D  0023               	movlb	3	; select bank3
  7999  0F0E  084A               	movf	uart_task@val_1511^(0+384),w
  8000  0F0F  0020               	movlb	0	; select bank0
  8001  0F10  00DB               	movwf	??_uart_task
  8002  0F11  085B               	movf	??_uart_task,w
  8003  0F12  0022               	movlb	2	; select bank2
  8004  0F13  00A8               	movwf	(UartParser@rx_buffer^(0+256)+8)
  8005                           
  8006                           ;UartParser.c: 162:                 val = get_relay_reset_voltage();
  8007  0F14  3193  2341  318D   	fcall	_get_relay_reset_voltage
  8008  0F17  084E               	movf	?_get_relay_reset_voltage+1,w
  8009  0F18  0023               	movlb	3	; select bank3
  8010  0F19  00CB               	movwf	(uart_task@val_1511+1)^(0+384)
  8011  0F1A  0020               	movlb	0	; select bank0
  8012  0F1B  084D               	movf	?_get_relay_reset_voltage,w
  8013  0F1C  0023               	movlb	3	; select bank3
  8014  0F1D  00CA               	movwf	uart_task@val_1511^(0+384)
  8015                           
  8016                           ;UartParser.c: 163:                 rx_buffer[9] = (val>>8) & 0xFF;
  8017  0F1E  084B               	movf	(uart_task@val_1511^(0+384)+1),w
  8018  0F1F  0020               	movlb	0	; select bank0
  8019  0F20  00DB               	movwf	??_uart_task
  8020  0F21  085B               	movf	??_uart_task,w
  8021  0F22  0022               	movlb	2	; select bank2
  8022  0F23  00A9               	movwf	(UartParser@rx_buffer^(0+256)+9)
  8023                           
  8024                           ;UartParser.c: 164:                 rx_buffer[10] = val & 0xFF;
  8025  0F24  0023               	movlb	3	; select bank3
  8026  0F25  084A               	movf	uart_task@val_1511^(0+384),w
  8027  0F26  0020               	movlb	0	; select bank0
  8028  0F27  00DB               	movwf	??_uart_task
  8029  0F28  085B               	movf	??_uart_task,w
  8030  0F29  0022               	movlb	2	; select bank2
  8031  0F2A  00AA               	movwf	(UartParser@rx_buffer^(0+256)+10)
  8032                           
  8033                           ;UartParser.c: 165:                 val = get_reset_duration();
  8034  0F2B  3193  23AD  318D   	fcall	_get_reset_duration
  8035  0F2E  084E               	movf	?_get_reset_duration+1,w
  8036  0F2F  0023               	movlb	3	; select bank3
  8037  0F30  00CB               	movwf	(uart_task@val_1511+1)^(0+384)
  8038  0F31  0020               	movlb	0	; select bank0
  8039  0F32  084D               	movf	?_get_reset_duration,w
  8040  0F33  0023               	movlb	3	; select bank3
  8041  0F34  00CA               	movwf	uart_task@val_1511^(0+384)
  8042                           
  8043                           ;UartParser.c: 166:                 rx_buffer[11] = (val>>8) & 0xFF;
  8044  0F35  084B               	movf	(uart_task@val_1511^(0+384)+1),w
  8045  0F36  0020               	movlb	0	; select bank0
  8046  0F37  00DB               	movwf	??_uart_task
  8047  0F38  085B               	movf	??_uart_task,w
  8048  0F39  0022               	movlb	2	; select bank2
  8049  0F3A  00AB               	movwf	(UartParser@rx_buffer^(0+256)+11)
  8050                           
  8051                           ;UartParser.c: 167:                 rx_buffer[12] = val & 0xFF;
  8052  0F3B  0023               	movlb	3	; select bank3
  8053  0F3C  084A               	movf	uart_task@val_1511^(0+384),w
  8054  0F3D  0020               	movlb	0	; select bank0
  8055  0F3E  00DB               	movwf	??_uart_task
  8056  0F3F  085B               	movf	??_uart_task,w
  8057  0F40  0022               	movlb	2	; select bank2
  8058  0F41  00AC               	movwf	(UartParser@rx_buffer^(0+256)+12)
  8059                           
  8060                           ;UartParser.c: 169:                 rx_buffer[13] = is_chopper_active();
  8061  0F42  3193  231E  318D   	fcall	_is_chopper_active
  8062  0F45  00DB               	movwf	??_uart_task
  8063  0F46  085B               	movf	??_uart_task,w
  8064  0F47  0022               	movlb	2	; select bank2
  8065  0F48  00AD               	movwf	(UartParser@rx_buffer^(0+256)+13)
  8066                           
  8067                           ;UartParser.c: 170:                 uint8_t i;;UartParser.c: 171:                 uint8_
      +                          t xor = rx_buffer[0];
  8068  0F49  0820               	movf	UartParser@rx_buffer^(0+256),w
  8069  0F4A  0020               	movlb	0	; select bank0
  8070  0F4B  00DB               	movwf	??_uart_task
  8071  0F4C  085B               	movf	??_uart_task,w
  8072  0F4D  0023               	movlb	3	; select bank3
  8073  0F4E  00BE               	movwf	uart_task@xor_1517^(0+384)
  8074                           
  8075                           ;UartParser.c: 172:                 for( i=1 ; i<14 ; i++ )
  8076  0F4F  01C2               	clrf	uart_task@i_1516^(0+384)
  8077  0F50  0AC2               	incf	uart_task@i_1516^(0+384),f
  8078  0F51                     l4547:	
  8079                           
  8080                           ;UartParser.c: 173:                     xor ^= rx_buffer[i];
  8081  0F51  0842               	movf	uart_task@i_1516^(0+384),w
  8082  0F52  3E20               	addlw	(low (UartParser@rx_buffer| (0+256)))& (0+255)
  8083  0F53  0086               	movwf	6
  8084  0F54  3001               	movlw	1	; select bank2/3
  8085  0F55  0087               	movwf	7
  8086  0F56  0801               	movf	1,w
  8087  0F57  0020               	movlb	0	; select bank0
  8088  0F58  00DB               	movwf	??_uart_task
  8089  0F59  085B               	movf	??_uart_task,w
  8090  0F5A  0023               	movlb	3	; select bank3
  8091  0F5B  06BE               	xorwf	uart_task@xor_1517^(0+384),f
  8092  0F5C  3001               	movlw	1
  8093  0F5D  0020               	movlb	0	; select bank0
  8094  0F5E  00DB               	movwf	??_uart_task
  8095  0F5F  085B               	movf	??_uart_task,w
  8096  0F60  0023               	movlb	3	; select bank3
  8097  0F61  07C2               	addwf	uart_task@i_1516^(0+384),f
  8098  0F62  300E               	movlw	14
  8099  0F63  0242               	subwf	uart_task@i_1516^(0+384),w
  8100  0F64  1C03               	skipc
  8101  0F65  2F51               	goto	l4547
  8102                           
  8103                           ;UartParser.c: 174:                 rx_buffer[14] = xor;
  8104  0F66  083E               	movf	uart_task@xor_1517^(0+384),w
  8105  0F67  0020               	movlb	0	; select bank0
  8106  0F68  00DB               	movwf	??_uart_task
  8107  0F69  085B               	movf	??_uart_task,w
  8108  0F6A  0022               	movlb	2	; select bank2
  8109  0F6B  00AE               	movwf	(UartParser@rx_buffer^(0+256)+14)
  8110                           
  8111                           ;UartParser.c: 175:                 rx_idx = 15;
  8112  0F6C  300F               	movlw	15
  8113  0F6D                     L1:	
  8114  0F6D  0020               	movlb	0	; select bank0
  8115  0F6E  00DB               	movwf	??_uart_task
  8116  0F6F  085B               	movf	??_uart_task,w
  8117  0F70  00AF               	movwf	UartParser@rx_idx
  8118                           
  8119                           ;UartParser.c: 176:                 tx_idx = 0;
  8120  0F71  01AC               	clrf	UartParser@tx_idx
  8121                           
  8122                           ;UartParser.c: 177:                 st = SEND_RESPONSE;
  8123  0F72  3005               	movlw	5
  8124  0F73  00DB               	movwf	??_uart_task
  8125  0F74  085B               	movf	??_uart_task,w
  8126  0F75  00AD               	movwf	UartParser@st
  8127                           
  8128                           ;UartParser.c: 178:             }
  8129  0F76  0008               	return
  8130  0F77                     l4559:	
  8131                           
  8132                           ;UartParser.c: 180:             {;UartParser.c: 181:                 if( rx_buffer[0] ==
      +                           GET_VDC && rx_idx == 2 )
  8133  0F77  30A5               	movlw	165
  8134  0F78  0022               	movlb	2	; select bank2
  8135  0F79  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  8136  0F7A  1D03               	btfss	3,2
  8137  0F7B  2EAA               	goto	l4495
  8138  0F7C  3002               	movlw	2
  8139  0F7D  0020               	movlb	0	; select bank0
  8140  0F7E  062F               	xorwf	UartParser@rx_idx,w
  8141  0F7F  1D03               	btfss	3,2
  8142  0F80  2EAA               	goto	l4495
  8143                           
  8144                           ;UartParser.c: 182:                 {;UartParser.c: 183:                     uint16_t va
      +                          l;;UartParser.c: 184:                     val = get_vdc();
  8145  0F81  3193  2337  318D   	fcall	_get_vdc
  8146  0F84  084E               	movf	?_get_vdc+1,w
  8147  0F85  0023               	movlb	3	; select bank3
  8148  0F86  00C0               	movwf	(uart_task@val_1518+1)^(0+384)
  8149  0F87  0020               	movlb	0	; select bank0
  8150  0F88  084D               	movf	?_get_vdc,w
  8151  0F89  0023               	movlb	3	; select bank3
  8152  0F8A  00BF               	movwf	uart_task@val_1518^(0+384)
  8153                           
  8154                           ;UartParser.c: 185:                     rx_buffer[1] = (val>>8) & 0xFF;
  8155  0F8B  0840               	movf	(uart_task@val_1518^(0+384)+1),w
  8156  0F8C  0020               	movlb	0	; select bank0
  8157  0F8D  00DB               	movwf	??_uart_task
  8158  0F8E  085B               	movf	??_uart_task,w
  8159  0F8F  0022               	movlb	2	; select bank2
  8160  0F90  00A1               	movwf	(UartParser@rx_buffer^(0+256)+1)
  8161                           
  8162                           ;UartParser.c: 186:                     rx_buffer[2] = val & 0xFF;
  8163  0F91  0023               	movlb	3	; select bank3
  8164  0F92  083F               	movf	uart_task@val_1518^(0+384),w
  8165  0F93  0020               	movlb	0	; select bank0
  8166  0F94  00DB               	movwf	??_uart_task
  8167  0F95  085B               	movf	??_uart_task,w
  8168  0F96  0022               	movlb	2	; select bank2
  8169  0F97  00A2               	movwf	(UartParser@rx_buffer^(0+256)+2)
  8170                           
  8171                           ;UartParser.c: 187:                     uint32_t activation_counter = get_relay_activati
      +                          on_counter();
  8172  0F98  3194  246B  318D   	fcall	_get_relay_activation_counter
  8173  0F9B  0850               	movf	?_get_relay_activation_counter+3,w
  8174  0F9C  0023               	movlb	3	; select bank3
  8175  0F9D  00C7               	movwf	(uart_task@activation_counter+3)^(0+384)
  8176  0F9E  0020               	movlb	0	; select bank0
  8177  0F9F  084F               	movf	?_get_relay_activation_counter+2,w
  8178  0FA0  0023               	movlb	3	; select bank3
  8179  0FA1  00C6               	movwf	(uart_task@activation_counter+2)^(0+384)
  8180  0FA2  0020               	movlb	0	; select bank0
  8181  0FA3  084E               	movf	?_get_relay_activation_counter+1,w
  8182  0FA4  0023               	movlb	3	; select bank3
  8183  0FA5  00C5               	movwf	(uart_task@activation_counter+1)^(0+384)
  8184  0FA6  0020               	movlb	0	; select bank0
  8185  0FA7  084D               	movf	?_get_relay_activation_counter,w
  8186  0FA8  0023               	movlb	3	; select bank3
  8187  0FA9  00C4               	movwf	uart_task@activation_counter^(0+384)
  8188                           
  8189                           ;UartParser.c: 188:                     rx_buffer[3] = (activation_counter >> 24) & 0xFF
      +                          ;
  8190  0FAA  0847               	movf	(uart_task@activation_counter^(0+384)+3),w
  8191  0FAB  0020               	movlb	0	; select bank0
  8192  0FAC  00DB               	movwf	??_uart_task
  8193  0FAD  085B               	movf	??_uart_task,w
  8194  0FAE  0022               	movlb	2	; select bank2
  8195  0FAF  00A3               	movwf	(UartParser@rx_buffer^(0+256)+3)
  8196                           
  8197                           ;UartParser.c: 189:                     rx_buffer[4] = (activation_counter >> 16) & 0xFF
      +                          ;
  8198  0FB0  0023               	movlb	3	; select bank3
  8199  0FB1  0846               	movf	(uart_task@activation_counter^(0+384)+2),w
  8200  0FB2  0020               	movlb	0	; select bank0
  8201  0FB3  00DB               	movwf	??_uart_task
  8202  0FB4  085B               	movf	??_uart_task,w
  8203  0FB5  0022               	movlb	2	; select bank2
  8204  0FB6  00A4               	movwf	(UartParser@rx_buffer^(0+256)+4)
  8205                           
  8206                           ;UartParser.c: 190:                     rx_buffer[5] = (activation_counter >> 8) & 0xFF;
  8207  0FB7  0023               	movlb	3	; select bank3
  8208  0FB8  0845               	movf	(uart_task@activation_counter^(0+384)+1),w
  8209  0FB9  0020               	movlb	0	; select bank0
  8210  0FBA  00DB               	movwf	??_uart_task
  8211  0FBB  085B               	movf	??_uart_task,w
  8212  0FBC  0022               	movlb	2	; select bank2
  8213  0FBD  00A5               	movwf	(UartParser@rx_buffer^(0+256)+5)
  8214                           
  8215                           ;UartParser.c: 191:                     rx_buffer[6] = activation_counter & 0xFF;
  8216  0FBE  0023               	movlb	3	; select bank3
  8217  0FBF  0844               	movf	uart_task@activation_counter^(0+384),w
  8218  0FC0  0020               	movlb	0	; select bank0
  8219  0FC1  00DB               	movwf	??_uart_task
  8220  0FC2  085B               	movf	??_uart_task,w
  8221  0FC3  0022               	movlb	2	; select bank2
  8222  0FC4  00A6               	movwf	(UartParser@rx_buffer^(0+256)+6)
  8223                           
  8224                           ;UartParser.c: 192:                     rx_buffer[7] = rx_buffer[0];
  8225  0FC5  0820               	movf	UartParser@rx_buffer^(0+256),w
  8226  0FC6  0020               	movlb	0	; select bank0
  8227  0FC7  00DB               	movwf	??_uart_task
  8228  0FC8  085B               	movf	??_uart_task,w
  8229  0FC9  0022               	movlb	2	; select bank2
  8230  0FCA  00A7               	movwf	(UartParser@rx_buffer^(0+256)+7)
  8231                           
  8232                           ;UartParser.c: 193:                     for( uint8_t idx=1 ; idx<7 ; idx++ )
  8233  0FCB  0023               	movlb	3	; select bank3
  8234  0FCC  01C3               	clrf	uart_task@idx^(0+384)
  8235  0FCD  0AC3               	incf	uart_task@idx^(0+384),f
  8236  0FCE                     l4581:	
  8237  0FCE  3007               	movlw	7
  8238  0FCF  0243               	subwf	uart_task@idx^(0+384),w
  8239  0FD0  1803               	btfsc	3,0
  8240  0FD1  2FE4               	goto	l4591
  8241                           
  8242                           ;UartParser.c: 194:                         rx_buffer[7] ^= rx_buffer[idx];
  8243  0FD2  0843               	movf	uart_task@idx^(0+384),w
  8244  0FD3  3E20               	addlw	(low (UartParser@rx_buffer| (0+256)))& (0+255)
  8245  0FD4  0086               	movwf	6
  8246  0FD5  3001               	movlw	1	; select bank2/3
  8247  0FD6  0087               	movwf	7
  8248  0FD7  0801               	movf	1,w
  8249  0FD8  0020               	movlb	0	; select bank0
  8250  0FD9  00DB               	movwf	??_uart_task
  8251  0FDA  085B               	movf	??_uart_task,w
  8252  0FDB  0022               	movlb	2	; select bank2
  8253  0FDC  06A7               	xorwf	(UartParser@rx_buffer^(0+256)+7),f
  8254  0FDD  3001               	movlw	1
  8255  0FDE  0020               	movlb	0	; select bank0
  8256  0FDF  00DB               	movwf	??_uart_task
  8257  0FE0  085B               	movf	??_uart_task,w
  8258  0FE1  0023               	movlb	3	; select bank3
  8259  0FE2  07C3               	addwf	uart_task@idx^(0+384),f
  8260  0FE3  2FCE               	goto	l4581
  8261  0FE4                     l4591:	
  8262                           
  8263                           ;UartParser.c: 195:                     rx_idx = 8;
  8264  0FE4  3008               	movlw	8
  8265  0FE5  2F6D               	goto	L1
  8266  0FE6                     l4597:	
  8267                           
  8268                           ;UartParser.c: 206:     if( st == SEND_RESPONSE )
  8269  0FE6  3005               	movlw	5
  8270  0FE7  062D               	xorwf	UartParser@st,w
  8271  0FE8  1D03               	btfss	3,2
  8272  0FE9  0008               	return
  8273                           
  8274                           ;UartParser.c: 207:     {;UartParser.c: 208:         if( TX1STAbits.TRMT == 0 )
  8275  0FEA  0023               	movlb	3	; select bank3
  8276  0FEB  1C9E               	btfss	30,1	;volatile
  8277  0FEC  0008               	return
  8278                           
  8279                           ;UartParser.c: 210:         if( tx_idx < rx_idx )
  8280  0FED  0020               	movlb	0	; select bank0
  8281  0FEE  082F               	movf	UartParser@rx_idx,w
  8282  0FEF  022C               	subwf	UartParser@tx_idx,w
  8283  0FF0  1803               	skipnc
  8284  0FF1  2EAA               	goto	l4495
  8285                           
  8286                           ;UartParser.c: 211:             TX1REG = rx_buffer[tx_idx++];
  8287  0FF2  082C               	movf	UartParser@tx_idx,w
  8288  0FF3  3E20               	addlw	(low (UartParser@rx_buffer| (0+256)))& (0+255)
  8289  0FF4  0086               	movwf	6
  8290  0FF5  3001               	movlw	1	; select bank2/3
  8291  0FF6  0087               	movwf	7
  8292  0FF7  0801               	movf	1,w
  8293  0FF8  0023               	movlb	3	; select bank3
  8294  0FF9  009A               	movwf	26	;volatile
  8295  0FFA  3001               	movlw	1
  8296  0FFB  0020               	movlb	0	; select bank0
  8297  0FFC  00DB               	movwf	??_uart_task
  8298  0FFD  085B               	movf	??_uart_task,w
  8299  0FFE  07AC               	addwf	UartParser@tx_idx,f
  8300  0FFF  0008               	return
  8301  1000                     __end_of_uart_task:	
  8302                           
  8303                           	psect	text2
  8304  142F                     __ptext2:	
  8305 ;; *************** function _stop_chopper *****************
  8306 ;; Defined at:
  8307 ;;		line 243 in file "vcontrol.c"
  8308 ;; Parameters:    Size  Location     Type
  8309 ;;		None
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;		None
  8312 ;; Return value:  Size  Location     Type
  8313 ;;                  1    wreg      void 
  8314 ;; Registers used:
  8315 ;;		wreg, status,2, status,0, pclath, cstack
  8316 ;; Tracked objects:
  8317 ;;		On entry : 1F/2
  8318 ;;		On exit  : 1F/0
  8319 ;;		Unchanged: 0/0
  8320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;Total ram usage:        0 bytes
  8326 ;; Hardware stack levels used:    1
  8327 ;; Hardware stack levels required when called:    7
  8328 ;; This function calls:
  8329 ;;		_stop_relay_watchdog
  8330 ;; This function is called by:
  8331 ;;		_uart_task
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           
  8336                           ;psect for function _stop_chopper
  8337  142F                     _stop_chopper:	
  8338                           
  8339                           ;vcontrol.c: 245:     if( chopper_active == 0 )
  8340                           
  8341                           ;incstack = 0
  8342                           ; Regs used in _stop_chopper: [wreg+status,2+status,0+pclath+cstack]
  8343  142F  0020               	movlb	0	; select bank0
  8344  1430  0831               	movf	_chopper_active,w
  8345  1431  1903               	btfsc	3,2
  8346  1432  0008               	return
  8347                           
  8348                           ;vcontrol.c: 248:     stop_relay_watchdog();
  8349  1433  3193  2353         	fcall	_stop_relay_watchdog
  8350                           
  8351                           ;vcontrol.c: 250:     TRISAbits.TRISA5 = 1;
  8352  1435  0021               	movlb	1	; select bank1
  8353  1436  168C               	bsf	12,5	;volatile
  8354                           
  8355                           ;vcontrol.c: 251:     TRISAbits.TRISA4 = 1;
  8356  1437  160C               	bsf	12,4	;volatile
  8357                           
  8358                           ;vcontrol.c: 252:     target_duty = 0;
  8359  1438  0020               	movlb	0	; select bank0
  8360  1439  01A4               	clrf	_target_duty
  8361  143A  01A5               	clrf	_target_duty+1
  8362                           
  8363                           ;vcontrol.c: 253:     chopper_active = 0;
  8364  143B  01B1               	clrf	_chopper_active
  8365  143C  0008               	return
  8366  143D                     __end_of_stop_chopper:	
  8367                           
  8368                           	psect	text3
  8369  1353                     __ptext3:	
  8370 ;; *************** function _stop_relay_watchdog *****************
  8371 ;; Defined at:
  8372 ;;		line 47 in file "SolidStateRelay.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;		None
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;		None
  8377 ;; Return value:  Size  Location     Type
  8378 ;;                  1    wreg      void 
  8379 ;; Registers used:
  8380 ;;		status,2, status,0, pclath, cstack
  8381 ;; Tracked objects:
  8382 ;;		On entry : 1F/0
  8383 ;;		On exit  : 1F/2
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8390 ;;Total ram usage:        0 bytes
  8391 ;; Hardware stack levels used:    1
  8392 ;; Hardware stack levels required when called:    6
  8393 ;; This function calls:
  8394 ;;		_close_relay
  8395 ;; This function is called by:
  8396 ;;		_stop_chopper
  8397 ;; This function uses a non-reentrant model
  8398 ;;
  8399                           
  8400                           
  8401                           ;psect for function _stop_relay_watchdog
  8402  1353                     _stop_relay_watchdog:	
  8403                           
  8404                           ;SolidStateRelay.c: 49:     st = SHUTDOWN;
  8405                           
  8406                           ;incstack = 0
  8407                           ; Regs used in _stop_relay_watchdog: [status,2+status,0+pclath+cstack]
  8408  1353  01A9               	clrf	SolidStateRelay@st
  8409                           
  8410                           ;SolidStateRelay.c: 50:     st_act = RA_SHUTDOWN;
  8411  1354  0021               	movlb	1	; select bank1
  8412  1355  01E7               	clrf	_st_act^(0+128)
  8413                           
  8414                           ;SolidStateRelay.c: 51:     close_relay();
  8415  1356  3193  2318         	fcall	_close_relay
  8416  1358  0008               	return
  8417  1359                     __end_of_stop_relay_watchdog:	
  8418                           
  8419                           	psect	text4
  8420  131E                     __ptext4:	
  8421 ;; *************** function _is_chopper_active *****************
  8422 ;; Defined at:
  8423 ;;		line 257 in file "vcontrol.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;		None
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;		None
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  1    wreg      _Bool 
  8430 ;; Registers used:
  8431 ;;		wreg
  8432 ;; Tracked objects:
  8433 ;;		On entry : 1F/2
  8434 ;;		On exit  : 1F/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8441 ;;Total ram usage:        0 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:    5
  8444 ;; This function calls:
  8445 ;;		Nothing
  8446 ;; This function is called by:
  8447 ;;		_uart_task
  8448 ;; This function uses a non-reentrant model
  8449 ;;
  8450                           
  8451                           
  8452                           ;psect for function _is_chopper_active
  8453  131E                     _is_chopper_active:	
  8454                           
  8455                           ;vcontrol.c: 259:     return chopper_active;
  8456                           
  8457                           ;incstack = 0
  8458                           ; Regs used in _is_chopper_active: [wreg]
  8459  131E  0020               	movlb	0	; select bank0
  8460  131F  0831               	movf	_chopper_active,w
  8461  1320  0008               	return
  8462  1321                     __end_of_is_chopper_active:	
  8463                           
  8464                           	psect	text5
  8465  133C                     __ptext5:	
  8466 ;; *************** function _get_vdc_min *****************
  8467 ;; Defined at:
  8468 ;;		line 307 in file "vcontrol.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;		None
  8471 ;; Auto vars:     Size  Location     Type
  8472 ;;		None
  8473 ;; Return value:  Size  Location     Type
  8474 ;;                  2    9[BANK0 ] unsigned short 
  8475 ;; Registers used:
  8476 ;;		wreg
  8477 ;; Tracked objects:
  8478 ;;		On entry : 1F/0
  8479 ;;		On exit  : 1F/0
  8480 ;;		Unchanged: 0/0
  8481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8482 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8485 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8486 ;;Total ram usage:        2 bytes
  8487 ;; Hardware stack levels used:    1
  8488 ;; Hardware stack levels required when called:    5
  8489 ;; This function calls:
  8490 ;;		Nothing
  8491 ;; This function is called by:
  8492 ;;		_uart_task
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           
  8497                           ;psect for function _get_vdc_min
  8498  133C                     _get_vdc_min:	
  8499                           
  8500                           ;vcontrol.c: 309:     return vdc_min;
  8501                           
  8502                           ;incstack = 0
  8503                           ; Regs used in _get_vdc_min: [wreg]
  8504  133C  0843               	movf	_vdc_min+1,w
  8505  133D  00CE               	movwf	?_get_vdc_min+1
  8506  133E  0842               	movf	_vdc_min,w
  8507  133F  00CD               	movwf	?_get_vdc_min
  8508  1340  0008               	return
  8509  1341                     __end_of_get_vdc_min:	
  8510                           
  8511                           	psect	text6
  8512  134D                     __ptext6:	
  8513 ;; *************** function _get_vdc_max *****************
  8514 ;; Defined at:
  8515 ;;		line 312 in file "vcontrol.c"
  8516 ;; Parameters:    Size  Location     Type
  8517 ;;		None
  8518 ;; Auto vars:     Size  Location     Type
  8519 ;;		None
  8520 ;; Return value:  Size  Location     Type
  8521 ;;                  2    9[BANK0 ] unsigned short 
  8522 ;; Registers used:
  8523 ;;		wreg
  8524 ;; Tracked objects:
  8525 ;;		On entry : 1F/2
  8526 ;;		On exit  : 1F/0
  8527 ;;		Unchanged: 0/0
  8528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8529 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;Total ram usage:        2 bytes
  8534 ;; Hardware stack levels used:    1
  8535 ;; Hardware stack levels required when called:    5
  8536 ;; This function calls:
  8537 ;;		Nothing
  8538 ;; This function is called by:
  8539 ;;		_uart_task
  8540 ;; This function uses a non-reentrant model
  8541 ;;
  8542                           
  8543                           
  8544                           ;psect for function _get_vdc_max
  8545  134D                     _get_vdc_max:	
  8546                           
  8547                           ;vcontrol.c: 314:     return vdc_max;
  8548                           
  8549                           ;incstack = 0
  8550                           ; Regs used in _get_vdc_max: [wreg]
  8551  134D  0020               	movlb	0	; select bank0
  8552  134E  0841               	movf	_vdc_max+1,w
  8553  134F  00CE               	movwf	?_get_vdc_max+1
  8554  1350  0840               	movf	_vdc_max,w
  8555  1351  00CD               	movwf	?_get_vdc_max
  8556  1352  0008               	return
  8557  1353                     __end_of_get_vdc_max:	
  8558                           
  8559                           	psect	text7
  8560  1347                     __ptext7:	
  8561 ;; *************** function _get_vdc_critic *****************
  8562 ;; Defined at:
  8563 ;;		line 317 in file "vcontrol.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;		None
  8566 ;; Auto vars:     Size  Location     Type
  8567 ;;		None
  8568 ;; Return value:  Size  Location     Type
  8569 ;;                  2    9[BANK0 ] unsigned short 
  8570 ;; Registers used:
  8571 ;;		wreg
  8572 ;; Tracked objects:
  8573 ;;		On entry : 1F/2
  8574 ;;		On exit  : 1F/0
  8575 ;;		Unchanged: 0/0
  8576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8577 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8580 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;Total ram usage:        2 bytes
  8582 ;; Hardware stack levels used:    1
  8583 ;; Hardware stack levels required when called:    5
  8584 ;; This function calls:
  8585 ;;		Nothing
  8586 ;; This function is called by:
  8587 ;;		_uart_task
  8588 ;; This function uses a non-reentrant model
  8589 ;;
  8590                           
  8591                           
  8592                           ;psect for function _get_vdc_critic
  8593  1347                     _get_vdc_critic:	
  8594                           
  8595                           ;vcontrol.c: 319:     return vdc_critic;
  8596                           
  8597                           ;incstack = 0
  8598                           ; Regs used in _get_vdc_critic: [wreg]
  8599  1347  0020               	movlb	0	; select bank0
  8600  1348  083F               	movf	_vdc_critic+1,w
  8601  1349  00CE               	movwf	?_get_vdc_critic+1
  8602  134A  083E               	movf	_vdc_critic,w
  8603  134B  00CD               	movwf	?_get_vdc_critic
  8604  134C  0008               	return
  8605  134D                     __end_of_get_vdc_critic:	
  8606                           
  8607                           	psect	text8
  8608  14CA                     __ptext8:	
  8609 ;; *************** function _uart_start *****************
  8610 ;; Defined at:
  8611 ;;		line 44 in file "UartParser.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;		None
  8614 ;; Auto vars:     Size  Location     Type
  8615 ;;		None
  8616 ;; Return value:  Size  Location     Type
  8617 ;;                  1    wreg      void 
  8618 ;; Registers used:
  8619 ;;		wreg, status,2, status,0, pclath, cstack
  8620 ;; Tracked objects:
  8621 ;;		On entry : 1D/0
  8622 ;;		On exit  : 1F/0
  8623 ;;		Unchanged: 0/0
  8624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;Total ram usage:        0 bytes
  8630 ;; Hardware stack levels used:    1
  8631 ;; Hardware stack levels required when called:    6
  8632 ;; This function calls:
  8633 ;;		_EUSART_SetRxInterruptHandler
  8634 ;;		_TMR1_SetInterruptHandler
  8635 ;; This function is called by:
  8636 ;;		_main
  8637 ;; This function uses a non-reentrant model
  8638 ;;
  8639                           
  8640                           
  8641                           ;psect for function _uart_start
  8642  14CA                     _uart_start:	
  8643                           
  8644                           ;UartParser.c: 46:     if( st == SHUTDOWN )
  8645                           
  8646                           ;incstack = 0
  8647                           ; Regs used in _uart_start: [wreg+status,2+status,0+pclath+cstack]
  8648  14CA  0020               	movlb	0	; select bank0
  8649  14CB  082D               	movf	UartParser@st,w
  8650  14CC  1D03               	btfss	3,2
  8651  14CD  0008               	return
  8652                           
  8653                           ;UartParser.c: 47:     {;UartParser.c: 48:         TMR1_SetInterruptHandler(TMR1_SystemT
      +                          imer_ISR);
  8654  14CE  3010               	movlw	low _TMR1_SystemTimer_ISR
  8655  14CF  00CD               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  8656  14D0  3016               	movlw	high _TMR1_SystemTimer_ISR
  8657  14D1  00CE               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  8658  14D2  3193  239D  3194   	fcall	_TMR1_SetInterruptHandler
  8659                           
  8660                           ;UartParser.c: 49:         EUSART_SetRxInterruptHandler(EUSART_CommandHandler_ISR);
  8661  14D5  30F0               	movlw	low _EUSART_CommandHandler_ISR
  8662  14D6  0020               	movlb	0	; select bank0
  8663  14D7  00CD               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  8664  14D8  3015               	movlw	high _EUSART_CommandHandler_ISR
  8665  14D9  00CE               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  8666  14DA  3193  238D         	fcall	_EUSART_SetRxInterruptHandler
  8667                           
  8668                           ;UartParser.c: 50:         st = INIT;
  8669  14DC  0020               	movlb	0	; select bank0
  8670  14DD  01AD               	clrf	UartParser@st
  8671  14DE  0AAD               	incf	UartParser@st,f
  8672  14DF  0008               	return
  8673  14E0                     __end_of_uart_start:	
  8674                           
  8675                           	psect	text9
  8676  09CA                     __ptext9:	
  8677 ;; *************** function _relay_watchdog_task *****************
  8678 ;; Defined at:
  8679 ;;		line 131 in file "SolidStateRelay.c"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;		None
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;		None
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  1    wreg      void 
  8686 ;; Registers used:
  8687 ;;		wreg, status,2, status,0, pclath, cstack
  8688 ;; Tracked objects:
  8689 ;;		On entry : 1C/0
  8690 ;;		On exit  : 1F/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8695 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8696 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8697 ;;Total ram usage:        1 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    7
  8700 ;; This function calls:
  8701 ;;		_close_relay
  8702 ;;		_get_vdc
  8703 ;;		_open_relay
  8704 ;;		_set_reset_duration
  8705 ;; This function is called by:
  8706 ;;		_main
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           
  8711                           ;psect for function _relay_watchdog_task
  8712  09CA                     _relay_watchdog_task:	
  8713                           
  8714                           ;SolidStateRelay.c: 133:     if( st == SHUTDOWN )
  8715                           
  8716                           ;incstack = 0
  8717                           ; Regs used in _relay_watchdog_task: [wreg+status,2+status,0+pclath+cstack]
  8718  09CA  0020               	movlb	0	; select bank0
  8719  09CB  0829               	movf	SolidStateRelay@st,w
  8720  09CC  1903               	btfsc	3,2
  8721  09CD  0008               	return
  8722                           
  8723                           ;SolidStateRelay.c: 135:     if( st == INIT )
  8724  09CE  0329               	decf	SolidStateRelay@st,w
  8725  09CF  1D03               	btfss	3,2
  8726  09D0  29E8               	goto	l4623
  8727                           
  8728                           ;SolidStateRelay.c: 136:     {;SolidStateRelay.c: 138:         if( reset_duration_ms == 
      +                          0xFFFF )
  8729  09D1  0022               	movlb	2	; select bank2
  8730  09D2  0A68               	incf	_reset_duration_ms^(0+256),w
  8731  09D3  1D03               	skipz
  8732  09D4  29E0               	goto	l4619
  8733  09D5  0A69               	incf	(_reset_duration_ms+1)^(0+256),w
  8734  09D6  1D03               	btfss	3,2
  8735  09D7  29E0               	goto	l4619
  8736                           
  8737                           ;SolidStateRelay.c: 139:         {;SolidStateRelay.c: 140:             set_reset_duratio
      +                          n(1000);
  8738  09D8  30E8               	movlw	232
  8739  09D9  0020               	movlb	0	; select bank0
  8740  09DA  00D5               	movwf	set_reset_duration@reset_dur_ms
  8741  09DB  3003               	movlw	3
  8742  09DC  00D6               	movwf	set_reset_duration@reset_dur_ms+1
  8743  09DD  3196  26DB  3189   	fcall	_set_reset_duration
  8744  09E0                     l4619:	
  8745                           
  8746                           ;SolidStateRelay.c: 142:         close_relay();
  8747  09E0  3193  2318         	fcall	_close_relay
  8748                           
  8749                           ;SolidStateRelay.c: 143:         st = WAIT_VOLTAGE_RISE;
  8750  09E2  3002               	movlw	2
  8751  09E3  0020               	movlb	0	; select bank0
  8752  09E4  00D7               	movwf	??_relay_watchdog_task
  8753  09E5  0857               	movf	??_relay_watchdog_task,w
  8754  09E6  00A9               	movwf	SolidStateRelay@st
  8755  09E7  0008               	return
  8756  09E8                     l4623:	
  8757                           
  8758                           ;SolidStateRelay.c: 146:     if( st == WAIT_VOLTAGE_RISE )
  8759  09E8  3002               	movlw	2
  8760  09E9  0629               	xorwf	SolidStateRelay@st,w
  8761  09EA  1D03               	btfss	3,2
  8762  09EB  29FC               	goto	l4633
  8763                           
  8764                           ;SolidStateRelay.c: 147:     {;SolidStateRelay.c: 149:         if( get_vdc() <= relay_re
      +                          set_voltage )
  8765  09EC  3193  2337  3189   	fcall	_get_vdc
  8766  09EF  084E               	movf	?_get_vdc+1,w
  8767  09F0  0221               	subwf	_relay_reset_voltage+1,w
  8768  09F1  1D03               	skipz
  8769  09F2  29F5               	goto	u3425
  8770  09F3  084D               	movf	?_get_vdc,w
  8771  09F4  0220               	subwf	_relay_reset_voltage,w
  8772  09F5                     u3425:	
  8773  09F5  1803               	btfsc	3,0
  8774  09F6  0008               	return
  8775                           
  8776                           ;SolidStateRelay.c: 154:         st = WAIT_VOLTAGE_FALL;
  8777  09F7  3003               	movlw	3
  8778  09F8  00D7               	movwf	??_relay_watchdog_task
  8779  09F9  0857               	movf	??_relay_watchdog_task,w
  8780  09FA  00A9               	movwf	SolidStateRelay@st
  8781  09FB  0008               	return
  8782  09FC                     l4633:	
  8783                           
  8784                           ;SolidStateRelay.c: 157:     if( st == WAIT_VOLTAGE_FALL )
  8785  09FC  3003               	movlw	3
  8786  09FD  0629               	xorwf	SolidStateRelay@st,w
  8787  09FE  1D03               	btfss	3,2
  8788  09FF  2A20               	goto	l4649
  8789                           
  8790                           ;SolidStateRelay.c: 158:     {;SolidStateRelay.c: 160:         if( get_vdc() >= relay_re
      +                          set_voltage )
  8791  0A00  3193  2337  3189   	fcall	_get_vdc
  8792  0A03  0821               	movf	_relay_reset_voltage+1,w
  8793  0A04  024E               	subwf	?_get_vdc+1,w
  8794  0A05  1D03               	skipz
  8795  0A06  2A09               	goto	u3445
  8796  0A07  0820               	movf	_relay_reset_voltage,w
  8797  0A08  024D               	subwf	?_get_vdc,w
  8798  0A09                     u3445:	
  8799  0A09  1803               	btfsc	3,0
  8800  0A0A  0008               	return
  8801                           
  8802                           ;SolidStateRelay.c: 164:         open_relay();
  8803  0A0B  3193  231B         	fcall	_open_relay
  8804                           
  8805                           ;SolidStateRelay.c: 165:         activation_counter++;
  8806  0A0D  3001               	movlw	1
  8807  0A0E  07C8               	addwf	_activation_counter^(0+256),f
  8808  0A0F  3000               	movlw	0
  8809  0A10  3DC9               	addwfc	(_activation_counter+1)^(0+256),f
  8810  0A11  3000               	movlw	0
  8811  0A12  3DCA               	addwfc	(_activation_counter+2)^(0+256),f
  8812  0A13  3000               	movlw	0
  8813  0A14  3DCB               	addwfc	(_activation_counter+3)^(0+256),f
  8814                           
  8815                           ;SolidStateRelay.c: 166:         local_timer = ((uint8_t)((uint8_t)~system_counter)+((ui
      +                          nt8_t)1));
  8816  0A15  0020               	movlb	0	; select bank0
  8817  0A16  0330               	decf	_system_counter,w
  8818  0A17  3AFF               	xorlw	255
  8819  0A18  00D7               	movwf	??_relay_watchdog_task
  8820  0A19  0857               	movf	??_relay_watchdog_task,w
  8821  0A1A  00A8               	movwf	_local_timer
  8822                           
  8823                           ;SolidStateRelay.c: 167:         st = WAIT_RESET_DURATION;
  8824  0A1B  3004               	movlw	4
  8825  0A1C  00D7               	movwf	??_relay_watchdog_task
  8826  0A1D  0857               	movf	??_relay_watchdog_task,w
  8827  0A1E  00A9               	movwf	SolidStateRelay@st
  8828  0A1F  0008               	return
  8829  0A20                     l4649:	
  8830                           
  8831                           ;SolidStateRelay.c: 170:     if( st == WAIT_RESET_DURATION )
  8832  0A20  3004               	movlw	4
  8833  0A21  0629               	xorwf	SolidStateRelay@st,w
  8834  0A22  1D03               	btfss	3,2
  8835  0A23  2A3A               	goto	l4663
  8836                           
  8837                           ;SolidStateRelay.c: 171:     {;SolidStateRelay.c: 173:         if( !((uint8_t)(system_co
      +                          unter + local_timer) >= ((uint8_t)reset_duration_ms)) )
  8838  0A24  0828               	movf	_local_timer,w
  8839  0A25  0730               	addwf	_system_counter,w
  8840  0A26  00D7               	movwf	??_relay_watchdog_task
  8841  0A27  0022               	movlb	2	; select bank2
  8842  0A28  0868               	movf	_reset_duration_ms^(0+256),w
  8843  0A29  0020               	movlb	0	; select bank0
  8844  0A2A  0257               	subwf	??_relay_watchdog_task,w
  8845  0A2B  1C03               	btfss	3,0
  8846  0A2C  0008               	return
  8847                           
  8848                           ;SolidStateRelay.c: 177:         close_relay();
  8849  0A2D  3193  2318         	fcall	_close_relay
  8850                           
  8851                           ;SolidStateRelay.c: 179:         local_timer = ((uint8_t)((uint8_t)~system_counter)+((ui
      +                          nt8_t)1));
  8852  0A2F  0020               	movlb	0	; select bank0
  8853  0A30  0330               	decf	_system_counter,w
  8854  0A31  3AFF               	xorlw	255
  8855  0A32  00D7               	movwf	??_relay_watchdog_task
  8856  0A33  0857               	movf	??_relay_watchdog_task,w
  8857  0A34  00A8               	movwf	_local_timer
  8858                           
  8859                           ;SolidStateRelay.c: 180:         st = WAIT_BEFORE_REPEAT;
  8860  0A35  3005               	movlw	5
  8861  0A36  00D7               	movwf	??_relay_watchdog_task
  8862  0A37  0857               	movf	??_relay_watchdog_task,w
  8863  0A38  00A9               	movwf	SolidStateRelay@st
  8864  0A39  0008               	return
  8865  0A3A                     l4663:	
  8866                           
  8867                           ;SolidStateRelay.c: 183:     if( st == WAIT_BEFORE_REPEAT )
  8868  0A3A  3005               	movlw	5
  8869  0A3B  0629               	xorwf	SolidStateRelay@st,w
  8870  0A3C  1D03               	btfss	3,2
  8871  0A3D  0008               	return
  8872                           
  8873                           ;SolidStateRelay.c: 184:     {;SolidStateRelay.c: 186:         if( !((uint8_t)(system_co
      +                          unter + local_timer) >= ((uint8_t)50)) )
  8874  0A3E  0828               	movf	_local_timer,w
  8875  0A3F  0730               	addwf	_system_counter,w
  8876  0A40  00D7               	movwf	??_relay_watchdog_task
  8877  0A41  3032               	movlw	50
  8878  0A42  0257               	subwf	??_relay_watchdog_task,w
  8879  0A43  1C03               	btfss	3,0
  8880  0A44  0008               	return
  8881                           
  8882                           ;SolidStateRelay.c: 188:         st = WAIT_VOLTAGE_RISE;
  8883  0A45  3002               	movlw	2
  8884  0A46  00D7               	movwf	??_relay_watchdog_task
  8885  0A47  0857               	movf	??_relay_watchdog_task,w
  8886  0A48  00A9               	movwf	SolidStateRelay@st
  8887  0A49  0008               	return
  8888  0A4A                     __end_of_relay_watchdog_task:	
  8889                           
  8890                           	psect	text10
  8891  131B                     __ptext10:	
  8892 ;; *************** function _open_relay *****************
  8893 ;; Defined at:
  8894 ;;		line 121 in file "SolidStateRelay.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;		None
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;		None
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  1    wreg      void 
  8901 ;; Registers used:
  8902 ;;		None
  8903 ;; Tracked objects:
  8904 ;;		On entry : 1F/0
  8905 ;;		On exit  : 1F/2
  8906 ;;		Unchanged: 0/0
  8907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;Total ram usage:        0 bytes
  8913 ;; Hardware stack levels used:    1
  8914 ;; Hardware stack levels required when called:    5
  8915 ;; This function calls:
  8916 ;;		Nothing
  8917 ;; This function is called by:
  8918 ;;		_relay_watchdog_task
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           
  8923                           ;psect for function _open_relay
  8924  131B                     _open_relay:	
  8925                           
  8926                           ;incstack = 0
  8927                           ; Regs used in _open_relay: []
  8928                           ;SolidStateRelay.c: 123:     do { LATCbits.LATC5 = 1; } while(0);
  8929  131B  0022               	movlb	2	; select bank2
  8930  131C  168E               	bsf	14,5	;volatile
  8931  131D  0008               	return
  8932  131E                     __end_of_open_relay:	
  8933                           
  8934                           	psect	text11
  8935  1337                     __ptext11:	
  8936 ;; *************** function _get_vdc *****************
  8937 ;; Defined at:
  8938 ;;		line 328 in file "vcontrol.c"
  8939 ;; Parameters:    Size  Location     Type
  8940 ;;		None
  8941 ;; Auto vars:     Size  Location     Type
  8942 ;;		None
  8943 ;; Return value:  Size  Location     Type
  8944 ;;                  2    9[BANK0 ] unsigned short 
  8945 ;; Registers used:
  8946 ;;		wreg
  8947 ;; Tracked objects:
  8948 ;;		On entry : 1F/0
  8949 ;;		On exit  : 1F/0
  8950 ;;		Unchanged: 0/0
  8951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8952 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8955 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;Total ram usage:        2 bytes
  8957 ;; Hardware stack levels used:    1
  8958 ;; Hardware stack levels required when called:    5
  8959 ;; This function calls:
  8960 ;;		Nothing
  8961 ;; This function is called by:
  8962 ;;		_uart_task
  8963 ;;		_relay_watchdog_task
  8964 ;; This function uses a non-reentrant model
  8965 ;;
  8966                           
  8967                           
  8968                           ;psect for function _get_vdc
  8969  1337                     _get_vdc:	
  8970                           
  8971                           ;vcontrol.c: 330:     return vdc;
  8972                           
  8973                           ;incstack = 0
  8974                           ; Regs used in _get_vdc: [wreg]
  8975  1337  083D               	movf	_vdc+1,w
  8976  1338  00CE               	movwf	?_get_vdc+1
  8977  1339  083C               	movf	_vdc,w
  8978  133A  00CD               	movwf	?_get_vdc
  8979  133B  0008               	return
  8980  133C                     __end_of_get_vdc:	
  8981                           
  8982                           	psect	text12
  8983  1318                     __ptext12:	
  8984 ;; *************** function _close_relay *****************
  8985 ;; Defined at:
  8986 ;;		line 126 in file "SolidStateRelay.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;		None
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;		None
  8991 ;; Return value:  Size  Location     Type
  8992 ;;                  1    wreg      void 
  8993 ;; Registers used:
  8994 ;;		None
  8995 ;; Tracked objects:
  8996 ;;		On entry : 1C/1
  8997 ;;		On exit  : 1F/2
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;Total ram usage:        0 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; Hardware stack levels required when called:    5
  9007 ;; This function calls:
  9008 ;;		Nothing
  9009 ;; This function is called by:
  9010 ;;		_stop_relay_watchdog
  9011 ;;		_relay_watchdog_task
  9012 ;; This function uses a non-reentrant model
  9013 ;;
  9014                           
  9015                           
  9016                           ;psect for function _close_relay
  9017  1318                     _close_relay:	
  9018                           
  9019                           ;incstack = 0
  9020                           ; Regs used in _close_relay: []
  9021                           ;SolidStateRelay.c: 128:     do { LATCbits.LATC5 = 0; } while(0);
  9022  1318  0022               	movlb	2	; select bank2
  9023  1319  128E               	bcf	14,5	;volatile
  9024  131A  0008               	return
  9025  131B                     __end_of_close_relay:	
  9026                           
  9027                           	psect	text13
  9028  177B                     __ptext13:	
  9029 ;; *************** function _relay_watchdog_record_activations_task *****************
  9030 ;; Defined at:
  9031 ;;		line 195 in file "SolidStateRelay.c"
  9032 ;; Parameters:    Size  Location     Type
  9033 ;;		None
  9034 ;; Auto vars:     Size  Location     Type
  9035 ;;		None
  9036 ;; Return value:  Size  Location     Type
  9037 ;;                  1    wreg      void 
  9038 ;; Registers used:
  9039 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9040 ;; Tracked objects:
  9041 ;;		On entry : 1F/0
  9042 ;;		On exit  : 1E/0
  9043 ;;		Unchanged: 0/0
  9044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9048 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9049 ;;Total ram usage:        1 bytes
  9050 ;; Hardware stack levels used:    1
  9051 ;; Hardware stack levels required when called:    8
  9052 ;; This function calls:
  9053 ;;		_save_to_flash
  9054 ;; This function is called by:
  9055 ;;		_main
  9056 ;; This function uses a non-reentrant model
  9057 ;;
  9058                           
  9059                           
  9060                           ;psect for function _relay_watchdog_record_activations_task
  9061  177B                     _relay_watchdog_record_activations_task:	
  9062                           
  9063                           ;SolidStateRelay.c: 197:     if( st_act == RA_SHUTDOWN )
  9064                           
  9065                           ;incstack = 0
  9066                           ; Regs used in _relay_watchdog_record_activations_task: [wreg+fsr1l+fsr1h+status,2+statu
      +                          s,0+pclath+cstack]
  9067  177B  0021               	movlb	1	; select bank1
  9068  177C  0867               	movf	_st_act^(0+128),w
  9069  177D  1903               	btfsc	3,2
  9070  177E  0008               	return
  9071                           
  9072                           ;SolidStateRelay.c: 199:     if( st_act == RA_INIT )
  9073  177F  0367               	decf	_st_act^(0+128),w
  9074  1780  1D03               	btfss	3,2
  9075  1781  2F90               	goto	l4685
  9076                           
  9077                           ;SolidStateRelay.c: 200:     {;SolidStateRelay.c: 202:         ra_local_timer = ((uint8_
      +                          t)((uint8_t)~system_minutes)+((uint8_t)1));
  9078  1782  0368               	decf	_system_minutes^(0+128),w
  9079  1783  3AFF               	xorlw	255
  9080  1784  0020               	movlb	0	; select bank0
  9081  1785  00DB               	movwf	??_relay_watchdog_record_activations_task
  9082  1786  085B               	movf	??_relay_watchdog_record_activations_task,w
  9083  1787  0021               	movlb	1	; select bank1
  9084  1788  00E6               	movwf	_ra_local_timer^(0+128)
  9085                           
  9086                           ;SolidStateRelay.c: 203:         st_act = RA_WAIT_INTERVAL;
  9087  1789  3002               	movlw	2
  9088  178A  0020               	movlb	0	; select bank0
  9089  178B  00DB               	movwf	??_relay_watchdog_record_activations_task
  9090  178C  085B               	movf	??_relay_watchdog_record_activations_task,w
  9091  178D  0021               	movlb	1	; select bank1
  9092  178E  00E7               	movwf	_st_act^(0+128)
  9093  178F  0008               	return
  9094  1790                     l4685:	
  9095                           
  9096                           ;SolidStateRelay.c: 206:     if( st_act == RA_WAIT_INTERVAL )
  9097  1790  3002               	movlw	2
  9098  1791  0667               	xorwf	_st_act^(0+128),w
  9099  1792  1D03               	btfss	3,2
  9100  1793  0008               	return
  9101                           
  9102                           ;SolidStateRelay.c: 207:     {;SolidStateRelay.c: 209:         if( !((uint8_t)(system_mi
      +                          nutes + ra_local_timer) >= ((uint8_t)60)) )
  9103  1794  0866               	movf	_ra_local_timer^(0+128),w
  9104  1795  0768               	addwf	_system_minutes^(0+128),w
  9105  1796  0020               	movlb	0	; select bank0
  9106  1797  00DB               	movwf	??_relay_watchdog_record_activations_task
  9107  1798  303C               	movlw	60
  9108  1799  025B               	subwf	??_relay_watchdog_record_activations_task,w
  9109  179A  1C03               	btfss	3,0
  9110  179B  0008               	return
  9111                           
  9112                           ;SolidStateRelay.c: 213:         ra_local_timer = ((uint8_t)((uint8_t)~system_minutes)+(
      +                          (uint8_t)1));
  9113  179C  0021               	movlb	1	; select bank1
  9114  179D  0368               	decf	_system_minutes^(0+128),w
  9115  179E  3AFF               	xorlw	255
  9116  179F  0020               	movlb	0	; select bank0
  9117  17A0  00DB               	movwf	??_relay_watchdog_record_activations_task
  9118  17A1  085B               	movf	??_relay_watchdog_record_activations_task,w
  9119  17A2  0021               	movlb	1	; select bank1
  9120  17A3  00E6               	movwf	_ra_local_timer^(0+128)
  9121                           
  9122                           ;SolidStateRelay.c: 219:         if( activation_counter == 0x3FFF3FFF )
  9123  17A4  0022               	movlb	2	; select bank2
  9124  17A5  0A48               	incf	_activation_counter^(0+256),w
  9125  17A6  303F               	movlw	63
  9126  17A7  1903               	skipnz
  9127  17A8  0649               	xorwf	(_activation_counter+1)^(0+256),w
  9128  17A9  1D03               	skipz
  9129  17AA  2FB9               	goto	l4695
  9130  17AB  0A4A               	incf	(_activation_counter+2)^(0+256),w
  9131  17AC  303F               	movlw	63
  9132  17AD  1903               	skipnz
  9133  17AE  064B               	xorwf	(_activation_counter+3)^(0+256),w
  9134  17AF  1D03               	btfss	3,2
  9135  17B0  2FB9               	goto	l4695
  9136                           
  9137                           ;SolidStateRelay.c: 220:             activation_counter++;
  9138  17B1  3001               	movlw	1
  9139  17B2  07C8               	addwf	_activation_counter^(0+256),f
  9140  17B3  3000               	movlw	0
  9141  17B4  3DC9               	addwfc	(_activation_counter+1)^(0+256),f
  9142  17B5  3000               	movlw	0
  9143  17B6  3DCA               	addwfc	(_activation_counter+2)^(0+256),f
  9144  17B7  3000               	movlw	0
  9145  17B8  3DCB               	addwfc	(_activation_counter+3)^(0+256),f
  9146  17B9                     l4695:	
  9147                           
  9148                           ;SolidStateRelay.c: 221:         save_to_flash();
  9149  17B9  3189  2160         	fcall	_save_to_flash
  9150  17BB  0008               	return
  9151  17BC                     __end_of_relay_watchdog_record_activations_task:	
  9152                           
  9153                           	psect	text14
  9154  0872                     __ptext14:	
  9155 ;; *************** function _init_relay_watchdog *****************
  9156 ;; Defined at:
  9157 ;;		line 33 in file "SolidStateRelay.c"
  9158 ;; Parameters:    Size  Location     Type
  9159 ;;		None
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;		None
  9162 ;; Return value:  Size  Location     Type
  9163 ;;                  1    wreg      void 
  9164 ;; Registers used:
  9165 ;;		None
  9166 ;; Tracked objects:
  9167 ;;		On entry : 1D/0
  9168 ;;		On exit  : 1D/0
  9169 ;;		Unchanged: 1D/0
  9170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9175 ;;Total ram usage:        0 bytes
  9176 ;; Hardware stack levels used:    1
  9177 ;; Hardware stack levels required when called:    5
  9178 ;; This function calls:
  9179 ;;		Nothing
  9180 ;; This function is called by:
  9181 ;;		_main
  9182 ;; This function uses a non-reentrant model
  9183 ;;
  9184                           
  9185                           
  9186                           ;psect for function _init_relay_watchdog
  9187  0872                     _init_relay_watchdog:	
  9188                           
  9189                           ;incstack = 0
  9190                           ; Regs used in _init_relay_watchdog: []
  9191  0872  0008               	return
  9192  0873                     __end_of_init_relay_watchdog:	
  9193                           
  9194                           	psect	text15
  9195  155F                     __ptext15:	
  9196 ;; *************** function _SYSTEM_Initialize *****************
  9197 ;; Defined at:
  9198 ;;		line 50 in file "mcc_generated_files/mcc.c"
  9199 ;; Parameters:    Size  Location     Type
  9200 ;;		None
  9201 ;; Auto vars:     Size  Location     Type
  9202 ;;		None
  9203 ;; Return value:  Size  Location     Type
  9204 ;;                  1    wreg      void 
  9205 ;; Registers used:
  9206 ;;		wreg, status,2, status,0, pclath, cstack
  9207 ;; Tracked objects:
  9208 ;;		On entry : B1F/0
  9209 ;;		On exit  : 1F/1
  9210 ;;		Unchanged: 0/0
  9211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;Total ram usage:        0 bytes
  9217 ;; Hardware stack levels used:    1
  9218 ;; Hardware stack levels required when called:    7
  9219 ;; This function calls:
  9220 ;;		_ADC_Initialize
  9221 ;;		_EUSART_Initialize
  9222 ;;		_OSCILLATOR_Initialize
  9223 ;;		_PIN_MANAGER_Initialize
  9224 ;;		_PWM3_Initialize
  9225 ;;		_TMR1_Initialize
  9226 ;;		_TMR2_Initialize
  9227 ;;		_TMR4_Initialize
  9228 ;;		_WDT_Initialize
  9229 ;; This function is called by:
  9230 ;;		_main
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234                           
  9235                           ;psect for function _SYSTEM_Initialize
  9236  155F                     _SYSTEM_Initialize:	
  9237                           
  9238                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  9239                           
  9240                           ;incstack = 0
  9241                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9242  155F  3196  2680  3195   	fcall	_PIN_MANAGER_Initialize
  9243                           
  9244                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  9245  1562  3193  2395  3195   	fcall	_OSCILLATOR_Initialize
  9246                           
  9247                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  9248  1565  3193  2329  3195   	fcall	_WDT_Initialize
  9249                           
  9250                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  9251  1568  3194  247C  3195   	fcall	_ADC_Initialize
  9252                           
  9253                           ;mcc_generated_files/mcc.c: 57:     TMR4_Initialize();
  9254  156B  3193  23C9  3195   	fcall	_TMR4_Initialize
  9255                           
  9256                           ;mcc_generated_files/mcc.c: 58:     PWM3_Initialize();
  9257  156E  3194  2422  3195   	fcall	_PWM3_Initialize
  9258                           
  9259                           ;mcc_generated_files/mcc.c: 59:     TMR2_Initialize();
  9260  1571  3194  248D  3195   	fcall	_TMR2_Initialize
  9261                           
  9262                           ;mcc_generated_files/mcc.c: 60:     TMR1_Initialize();
  9263  1574  3195  252A  3195   	fcall	_TMR1_Initialize
  9264                           
  9265                           ;mcc_generated_files/mcc.c: 61:     EUSART_Initialize();
  9266  1577  3197  270E         	fcall	_EUSART_Initialize
  9267  1579  0008               	return
  9268  157A                     __end_of_SYSTEM_Initialize:	
  9269                           
  9270                           	psect	text16
  9271  1329                     __ptext16:	
  9272 ;; *************** function _WDT_Initialize *****************
  9273 ;; Defined at:
  9274 ;;		line 76 in file "mcc_generated_files/mcc.c"
  9275 ;; Parameters:    Size  Location     Type
  9276 ;;		None
  9277 ;; Auto vars:     Size  Location     Type
  9278 ;;		None
  9279 ;; Return value:  Size  Location     Type
  9280 ;;                  1    wreg      void 
  9281 ;; Registers used:
  9282 ;;		wreg
  9283 ;; Tracked objects:
  9284 ;;		On entry : B1F/2
  9285 ;;		On exit  : B1F/1
  9286 ;;		Unchanged: B00/0
  9287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9292 ;;Total ram usage:        0 bytes
  9293 ;; Hardware stack levels used:    1
  9294 ;; Hardware stack levels required when called:    5
  9295 ;; This function calls:
  9296 ;;		Nothing
  9297 ;; This function is called by:
  9298 ;;		_SYSTEM_Initialize
  9299 ;; This function uses a non-reentrant model
  9300 ;;
  9301                           
  9302                           
  9303                           ;psect for function _WDT_Initialize
  9304  1329                     _WDT_Initialize:	
  9305                           
  9306                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x16;
  9307                           
  9308                           ;incstack = 0
  9309                           ; Regs used in _WDT_Initialize: [wreg]
  9310  1329  3016               	movlw	22
  9311  132A  0021               	movlb	1	; select bank1
  9312  132B  0097               	movwf	23	;volatile
  9313  132C  0008               	return
  9314  132D                     __end_of_WDT_Initialize:	
  9315                           
  9316                           	psect	text17
  9317  13C9                     __ptext17:	
  9318 ;; *************** function _TMR4_Initialize *****************
  9319 ;; Defined at:
  9320 ;;		line 62 in file "mcc_generated_files/tmr4.c"
  9321 ;; Parameters:    Size  Location     Type
  9322 ;;		None
  9323 ;; Auto vars:     Size  Location     Type
  9324 ;;		None
  9325 ;; Return value:  Size  Location     Type
  9326 ;;                  1    wreg      void 
  9327 ;; Registers used:
  9328 ;;		wreg, status,2
  9329 ;; Tracked objects:
  9330 ;;		On entry : 1F/2
  9331 ;;		On exit  : 1F/8
  9332 ;;		Unchanged: 0/0
  9333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9338 ;;Total ram usage:        0 bytes
  9339 ;; Hardware stack levels used:    1
  9340 ;; Hardware stack levels required when called:    5
  9341 ;; This function calls:
  9342 ;;		Nothing
  9343 ;; This function is called by:
  9344 ;;		_SYSTEM_Initialize
  9345 ;; This function uses a non-reentrant model
  9346 ;;
  9347                           
  9348                           
  9349                           ;psect for function _TMR4_Initialize
  9350  13C9                     _TMR4_Initialize:	
  9351                           
  9352                           ;mcc_generated_files/tmr4.c: 67:     PR4 = 0xC7;
  9353                           
  9354                           ;incstack = 0
  9355                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
  9356  13C9  30C7               	movlw	199
  9357  13CA  0028               	movlb	8	; select bank8
  9358  13CB  0096               	movwf	22	;volatile
  9359                           
  9360                           ;mcc_generated_files/tmr4.c: 70:     TMR4 = 0x00;
  9361  13CC  0195               	clrf	21	;volatile
  9362                           
  9363                           ;mcc_generated_files/tmr4.c: 73:     PIR2bits.TMR4IF = 0;
  9364  13CD  0020               	movlb	0	; select bank0
  9365  13CE  1092               	bcf	18,1	;volatile
  9366                           
  9367                           ;mcc_generated_files/tmr4.c: 76:     T4CON = 0x05;
  9368  13CF  3005               	movlw	5
  9369  13D0  0028               	movlb	8	; select bank8
  9370  13D1  0097               	movwf	23	;volatile
  9371  13D2  0008               	return
  9372  13D3                     __end_of_TMR4_Initialize:	
  9373                           
  9374                           	psect	text18
  9375  148D                     __ptext18:	
  9376 ;; *************** function _TMR2_Initialize *****************
  9377 ;; Defined at:
  9378 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  9379 ;; Parameters:    Size  Location     Type
  9380 ;;		None
  9381 ;; Auto vars:     Size  Location     Type
  9382 ;;		None
  9383 ;; Return value:  Size  Location     Type
  9384 ;;                  1    wreg      void 
  9385 ;; Registers used:
  9386 ;;		wreg, status,2, status,0, pclath, cstack
  9387 ;; Tracked objects:
  9388 ;;		On entry : 1F/5
  9389 ;;		On exit  : 1F/0
  9390 ;;		Unchanged: 0/0
  9391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9396 ;;Total ram usage:        0 bytes
  9397 ;; Hardware stack levels used:    1
  9398 ;; Hardware stack levels required when called:    6
  9399 ;; This function calls:
  9400 ;;		_TMR2_SetInterruptHandler
  9401 ;; This function is called by:
  9402 ;;		_SYSTEM_Initialize
  9403 ;; This function uses a non-reentrant model
  9404 ;;
  9405                           
  9406                           
  9407                           ;psect for function _TMR2_Initialize
  9408  148D                     _TMR2_Initialize:	
  9409                           
  9410                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x3E;
  9411                           
  9412                           ;incstack = 0
  9413                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9414  148D  303E               	movlw	62
  9415  148E  0020               	movlb	0	; select bank0
  9416  148F  009B               	movwf	27	;volatile
  9417                           
  9418                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  9419  1490  019A               	clrf	26	;volatile
  9420                           
  9421                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  9422  1491  1091               	bcf	17,1	;volatile
  9423                           
  9424                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  9425  1492  0021               	movlb	1	; select bank1
  9426  1493  1491               	bsf	17,1	;volatile
  9427                           
  9428                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  9429  1494  300E               	movlw	low _TMR2_DefaultInterruptHandler
  9430  1495  0020               	movlb	0	; select bank0
  9431  1496  00CD               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  9432  1497  3013               	movlw	high _TMR2_DefaultInterruptHandler
  9433  1498  00CE               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  9434  1499  3193  236D         	fcall	_TMR2_SetInterruptHandler
  9435                           
  9436                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x07;
  9437  149B  3007               	movlw	7
  9438  149C  0020               	movlb	0	; select bank0
  9439  149D  009C               	movwf	28	;volatile
  9440  149E  0008               	return
  9441  149F                     __end_of_TMR2_Initialize:	
  9442                           
  9443                           	psect	text19
  9444  152A                     __ptext19:	
  9445 ;; *************** function _TMR1_Initialize *****************
  9446 ;; Defined at:
  9447 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;		None
  9450 ;; Auto vars:     Size  Location     Type
  9451 ;;		None
  9452 ;; Return value:  Size  Location     Type
  9453 ;;                  1    wreg      void 
  9454 ;; Registers used:
  9455 ;;		wreg, status,2, status,0, pclath, cstack
  9456 ;; Tracked objects:
  9457 ;;		On entry : 1F/0
  9458 ;;		On exit  : 1F/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;Total ram usage:        0 bytes
  9466 ;; Hardware stack levels used:    1
  9467 ;; Hardware stack levels required when called:    6
  9468 ;; This function calls:
  9469 ;;		_TMR1_SetInterruptHandler
  9470 ;; This function is called by:
  9471 ;;		_SYSTEM_Initialize
  9472 ;; This function uses a non-reentrant model
  9473 ;;
  9474                           
  9475                           
  9476                           ;psect for function _TMR1_Initialize
  9477  152A                     _TMR1_Initialize:	
  9478                           
  9479                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  9480                           
  9481                           ;incstack = 0
  9482                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9483  152A  0199               	clrf	25	;volatile
  9484                           
  9485                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x3C;
  9486  152B  303C               	movlw	60
  9487  152C  0097               	movwf	23	;volatile
  9488                           
  9489                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xB0;
  9490  152D  30B0               	movlw	176
  9491  152E  0096               	movwf	22	;volatile
  9492                           
  9493                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  9494  152F  1011               	bcf	17,0	;volatile
  9495                           
  9496                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  9497  1530  0817               	movf	23,w	;volatile
  9498  1531  0022               	movlb	2	; select bank2
  9499  1532  00DD               	movwf	(_timer1ReloadVal+1)^(0+256)	;volatile
  9500  1533  0020               	movlb	0	; select bank0
  9501  1534  0816               	movf	22,w	;volatile
  9502  1535  0022               	movlb	2	; select bank2
  9503  1536  00DC               	movwf	_timer1ReloadVal^(0+256)	;volatile
  9504                           
  9505                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  9506  1537  0021               	movlb	1	; select bank1
  9507  1538  1411               	bsf	17,0	;volatile
  9508                           
  9509                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  9510  1539  300D               	movlw	low _TMR1_DefaultInterruptHandler
  9511  153A  0020               	movlb	0	; select bank0
  9512  153B  00CD               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9513  153C  3013               	movlw	high _TMR1_DefaultInterruptHandler
  9514  153D  00CE               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9515  153E  3193  239D         	fcall	_TMR1_SetInterruptHandler
  9516                           
  9517                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x31;
  9518  1540  3031               	movlw	49
  9519  1541  0020               	movlb	0	; select bank0
  9520  1542  0098               	movwf	24	;volatile
  9521  1543  0008               	return
  9522  1544                     __end_of_TMR1_Initialize:	
  9523                           
  9524                           	psect	text20
  9525  139D                     __ptext20:	
  9526 ;; *************** function _TMR1_SetInterruptHandler *****************
  9527 ;; Defined at:
  9528 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  9529 ;; Parameters:    Size  Location     Type
  9530 ;;  InterruptHan    2    9[BANK0 ] PTR FTN()void 
  9531 ;;		 -> TMR1_SystemTimer_ISR(1), TMR1_DefaultInterruptHandler(1), 
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;		None
  9534 ;; Return value:  Size  Location     Type
  9535 ;;                  1    wreg      void 
  9536 ;; Registers used:
  9537 ;;		wreg
  9538 ;; Tracked objects:
  9539 ;;		On entry : 1F/0
  9540 ;;		On exit  : 1F/2
  9541 ;;		Unchanged: 0/0
  9542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9543 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;Total ram usage:        2 bytes
  9548 ;; Hardware stack levels used:    1
  9549 ;; Hardware stack levels required when called:    5
  9550 ;; This function calls:
  9551 ;;		Nothing
  9552 ;; This function is called by:
  9553 ;;		_TMR1_Initialize
  9554 ;;		_uart_start
  9555 ;; This function uses a non-reentrant model
  9556 ;;
  9557                           
  9558                           
  9559                           ;psect for function _TMR1_SetInterruptHandler
  9560  139D                     _TMR1_SetInterruptHandler:	
  9561                           
  9562                           ;mcc_generated_files/tmr1.c: 179:     TMR1_InterruptHandler = InterruptHandler;
  9563                           
  9564                           ;incstack = 0
  9565                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  9566  139D  084E               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  9567  139E  0022               	movlb	2	; select bank2
  9568  139F  00DB               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
  9569  13A0  0020               	movlb	0	; select bank0
  9570  13A1  084D               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  9571  13A2  0022               	movlb	2	; select bank2
  9572  13A3  00DA               	movwf	_TMR1_InterruptHandler^(0+256)
  9573  13A4  0008               	return
  9574  13A5                     __end_of_TMR1_SetInterruptHandler:	
  9575                           
  9576                           	psect	text21
  9577  1422                     __ptext21:	
  9578 ;; *************** function _PWM3_Initialize *****************
  9579 ;; Defined at:
  9580 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  9581 ;; Parameters:    Size  Location     Type
  9582 ;;		None
  9583 ;; Auto vars:     Size  Location     Type
  9584 ;;		None
  9585 ;; Return value:  Size  Location     Type
  9586 ;;                  1    wreg      void 
  9587 ;; Registers used:
  9588 ;;		wreg, status,2, status,0
  9589 ;; Tracked objects:
  9590 ;;		On entry : 1F/8
  9591 ;;		On exit  : 1F/5
  9592 ;;		Unchanged: 0/0
  9593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;Total ram usage:        0 bytes
  9599 ;; Hardware stack levels used:    1
  9600 ;; Hardware stack levels required when called:    5
  9601 ;; This function calls:
  9602 ;;		Nothing
  9603 ;; This function is called by:
  9604 ;;		_SYSTEM_Initialize
  9605 ;; This function uses a non-reentrant model
  9606 ;;
  9607                           
  9608                           
  9609                           ;psect for function _PWM3_Initialize
  9610  1422                     _PWM3_Initialize:	
  9611                           
  9612                           ;mcc_generated_files/pwm3.c: 62:     PWM3CON = 0x80;
  9613                           
  9614                           ;incstack = 0
  9615                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  9616  1422  3080               	movlw	128
  9617  1423  002C               	movlb	12	; select bank12
  9618  1424  0099               	movwf	25	;volatile
  9619                           
  9620                           ;mcc_generated_files/pwm3.c: 65:     PWM3DCH = 0xBD;
  9621  1425  30BD               	movlw	189
  9622  1426  0098               	movwf	24	;volatile
  9623                           
  9624                           ;mcc_generated_files/pwm3.c: 68:     PWM3DCL = 0xC0;
  9625  1427  30C0               	movlw	192
  9626  1428  0097               	movwf	23	;volatile
  9627                           
  9628                           ;mcc_generated_files/pwm3.c: 71:     CCPTMRSbits.P3TSEL = 1;
  9629  1429  0025               	movlb	5	; select bank5
  9630  142A  081E               	movf	30,w	;volatile
  9631  142B  39CF               	andlw	-49
  9632  142C  3810               	iorlw	16
  9633  142D  009E               	movwf	30	;volatile
  9634  142E  0008               	return
  9635  142F                     __end_of_PWM3_Initialize:	
  9636                           
  9637                           	psect	text22
  9638  1680                     __ptext22:	
  9639 ;; *************** function _PIN_MANAGER_Initialize *****************
  9640 ;; Defined at:
  9641 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  9642 ;; Parameters:    Size  Location     Type
  9643 ;;		None
  9644 ;; Auto vars:     Size  Location     Type
  9645 ;;		None
  9646 ;; Return value:  Size  Location     Type
  9647 ;;                  1    wreg      void 
  9648 ;; Registers used:
  9649 ;;		wreg, status,2
  9650 ;; Tracked objects:
  9651 ;;		On entry : B1F/0
  9652 ;;		On exit  : B1F/1D
  9653 ;;		Unchanged: B00/0
  9654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;Total ram usage:        0 bytes
  9660 ;; Hardware stack levels used:    1
  9661 ;; Hardware stack levels required when called:    5
  9662 ;; This function calls:
  9663 ;;		Nothing
  9664 ;; This function is called by:
  9665 ;;		_SYSTEM_Initialize
  9666 ;; This function uses a non-reentrant model
  9667 ;;
  9668                           
  9669                           
  9670                           ;psect for function _PIN_MANAGER_Initialize
  9671  1680                     _PIN_MANAGER_Initialize:	
  9672                           
  9673                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  9674                           
  9675                           ;incstack = 0
  9676                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  9677  1680  0022               	movlb	2	; select bank2
  9678  1681  018C               	clrf	12	;volatile
  9679                           
  9680                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x01;
  9681  1682  3001               	movlw	1
  9682  1683  008E               	movwf	14	;volatile
  9683                           
  9684                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x07;
  9685  1684  3007               	movlw	7
  9686  1685  0021               	movlb	1	; select bank1
  9687  1686  008C               	movwf	12	;volatile
  9688                           
  9689                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x18;
  9690  1687  3018               	movlw	24
  9691  1688  008E               	movwf	14	;volatile
  9692                           
  9693                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x18;
  9694  1689  3018               	movlw	24
  9695  168A  0023               	movlb	3	; select bank3
  9696  168B  008E               	movwf	14	;volatile
  9697                           
  9698                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x03;
  9699  168C  3003               	movlw	3
  9700  168D  008C               	movwf	12	;volatile
  9701                           
  9702                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
  9703  168E  0024               	movlb	4	; select bank4
  9704  168F  018C               	clrf	12	;volatile
  9705                           
  9706                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
  9707  1690  018E               	clrf	14	;volatile
  9708                           
  9709                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 1;
  9710  1691  0021               	movlb	1	; select bank1
  9711  1692  1795               	bsf	21,7	;volatile
  9712                           
  9713                           ;mcc_generated_files/pin_manager.c: 85:     ODCONA = 0x00;
  9714  1693  0025               	movlb	5	; select bank5
  9715  1694  018C               	clrf	12	;volatile
  9716                           
  9717                           ;mcc_generated_files/pin_manager.c: 86:     ODCONC = 0x00;
  9718  1695  018E               	clrf	14	;volatile
  9719                           
  9720                           ;mcc_generated_files/pin_manager.c: 91:     SLRCONA = 0x37;
  9721  1696  3037               	movlw	55
  9722  1697  0026               	movlb	6	; select bank6
  9723  1698  008C               	movwf	12	;volatile
  9724                           
  9725                           ;mcc_generated_files/pin_manager.c: 92:     SLRCONC = 0x3F;
  9726  1699  303F               	movlw	63
  9727  169A  008E               	movwf	14	;volatile
  9728                           
  9729                           ;mcc_generated_files/pin_manager.c: 97:     INLVLA = 0x3F;
  9730  169B  303F               	movlw	63
  9731  169C  0027               	movlb	7	; select bank7
  9732  169D  008C               	movwf	12	;volatile
  9733                           
  9734                           ;mcc_generated_files/pin_manager.c: 98:     INLVLC = 0x3F;
  9735  169E  303F               	movlw	63
  9736  169F  008E               	movwf	14	;volatile
  9737                           
  9738                           ;mcc_generated_files/pin_manager.c: 107:     RC0PPS = 0x14;
  9739  16A0  3014               	movlw	20
  9740  16A1  003D               	movlb	29	; select bank29
  9741  16A2  00A0               	movwf	32	;volatile
  9742                           
  9743                           ;mcc_generated_files/pin_manager.c: 108:     RXPPS = 0x02;
  9744  16A3  3002               	movlw	2
  9745  16A4  003C               	movlb	28	; select bank28
  9746  16A5  00A4               	movwf	36	;volatile
  9747                           
  9748                           ;mcc_generated_files/pin_manager.c: 109:     RC1PPS = 0x0E;
  9749  16A6  300E               	movlw	14
  9750  16A7  003D               	movlb	29	; select bank29
  9751  16A8  00A1               	movwf	33	;volatile
  9752                           
  9753                           ;mcc_generated_files/pin_manager.c: 110:     RC2PPS = 0x0E;
  9754  16A9  300E               	movlw	14
  9755  16AA  00A2               	movwf	34	;volatile
  9756  16AB  0008               	return
  9757  16AC                     __end_of_PIN_MANAGER_Initialize:	
  9758                           
  9759                           	psect	text23
  9760  1395                     __ptext23:	
  9761 ;; *************** function _OSCILLATOR_Initialize *****************
  9762 ;; Defined at:
  9763 ;;		line 64 in file "mcc_generated_files/mcc.c"
  9764 ;; Parameters:    Size  Location     Type
  9765 ;;		None
  9766 ;; Auto vars:     Size  Location     Type
  9767 ;;		None
  9768 ;; Return value:  Size  Location     Type
  9769 ;;                  1    wreg      void 
  9770 ;; Registers used:
  9771 ;;		wreg, status,2
  9772 ;; Tracked objects:
  9773 ;;		On entry : B1F/1D
  9774 ;;		On exit  : B1F/2
  9775 ;;		Unchanged: B00/0
  9776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;Total ram usage:        0 bytes
  9782 ;; Hardware stack levels used:    1
  9783 ;; Hardware stack levels required when called:    5
  9784 ;; This function calls:
  9785 ;;		Nothing
  9786 ;; This function is called by:
  9787 ;;		_SYSTEM_Initialize
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           
  9792                           ;psect for function _OSCILLATOR_Initialize
  9793  1395                     _OSCILLATOR_Initialize:	
  9794                           
  9795                           ;mcc_generated_files/mcc.c: 67:     OSCCON = 0x7A;
  9796                           
  9797                           ;incstack = 0
  9798                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9799  1395  307A               	movlw	122
  9800  1396  0021               	movlb	1	; select bank1
  9801  1397  0099               	movwf	25	;volatile
  9802                           
  9803                           ;mcc_generated_files/mcc.c: 69:     OSCSTAT = 0x00;
  9804  1398  019A               	clrf	26	;volatile
  9805                           
  9806                           ;mcc_generated_files/mcc.c: 71:     OSCTUNE = 0x00;
  9807  1399  0198               	clrf	24	;volatile
  9808                           
  9809                           ;mcc_generated_files/mcc.c: 73:     BORCON = 0x00;
  9810  139A  0022               	movlb	2	; select bank2
  9811  139B  0196               	clrf	22	;volatile
  9812  139C  0008               	return
  9813  139D                     __end_of_OSCILLATOR_Initialize:	
  9814                           
  9815                           	psect	text24
  9816  170E                     __ptext24:	
  9817 ;; *************** function _EUSART_Initialize *****************
  9818 ;; Defined at:
  9819 ;;		line 83 in file "mcc_generated_files/eusart.c"
  9820 ;; Parameters:    Size  Location     Type
  9821 ;;		None
  9822 ;; Auto vars:     Size  Location     Type
  9823 ;;		None
  9824 ;; Return value:  Size  Location     Type
  9825 ;;                  1    wreg      void 
  9826 ;; Registers used:
  9827 ;;		wreg, status,2, status,0, pclath, cstack
  9828 ;; Tracked objects:
  9829 ;;		On entry : 1F/0
  9830 ;;		On exit  : 1F/1
  9831 ;;		Unchanged: 0/0
  9832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;Total ram usage:        0 bytes
  9838 ;; Hardware stack levels used:    1
  9839 ;; Hardware stack levels required when called:    6
  9840 ;; This function calls:
  9841 ;;		_EUSART_SetErrorHandler
  9842 ;;		_EUSART_SetFramingErrorHandler
  9843 ;;		_EUSART_SetOverrunErrorHandler
  9844 ;;		_EUSART_SetRxInterruptHandler
  9845 ;; This function is called by:
  9846 ;;		_SYSTEM_Initialize
  9847 ;; This function uses a non-reentrant model
  9848 ;;
  9849                           
  9850                           
  9851                           ;psect for function _EUSART_Initialize
  9852  170E                     _EUSART_Initialize:	
  9853                           
  9854                           ;mcc_generated_files/eusart.c: 86:     PIE1bits.RCIE = 0;
  9855                           
  9856                           ;incstack = 0
  9857                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9858  170E  0021               	movlb	1	; select bank1
  9859  170F  1291               	bcf	17,5	;volatile
  9860                           
  9861                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  9862  1710  3041               	movlw	low _EUSART_Receive_ISR
  9863  1711  0020               	movlb	0	; select bank0
  9864  1712  00CD               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  9865  1713  3017               	movlw	high _EUSART_Receive_ISR
  9866  1714  00CE               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  9867  1715  3193  238D  3197   	fcall	_EUSART_SetRxInterruptHandler
  9868                           
  9869                           ;mcc_generated_files/eusart.c: 91:     BAUD1CON = 0x08;
  9870  1718  3008               	movlw	8
  9871  1719  0023               	movlb	3	; select bank3
  9872  171A  009F               	movwf	31	;volatile
  9873                           
  9874                           ;mcc_generated_files/eusart.c: 94:     RC1STA = 0x90;
  9875  171B  3090               	movlw	144
  9876  171C  009D               	movwf	29	;volatile
  9877                           
  9878                           ;mcc_generated_files/eusart.c: 97:     TX1STA = 0x24;
  9879  171D  3024               	movlw	36
  9880  171E  009E               	movwf	30	;volatile
  9881                           
  9882                           ;mcc_generated_files/eusart.c: 100:     SP1BRGL = 0x22;
  9883  171F  3022               	movlw	34
  9884  1720  009B               	movwf	27	;volatile
  9885                           
  9886                           ;mcc_generated_files/eusart.c: 103:     SP1BRGH = 0x00;
  9887  1721  019C               	clrf	28	;volatile
  9888                           
  9889                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  9890  1722  300C               	movlw	low _EUSART_DefaultFramingErrorHandler
  9891  1723  0020               	movlb	0	; select bank0
  9892  1724  00CD               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  9893  1725  3013               	movlw	high _EUSART_DefaultFramingErrorHandler
  9894  1726  00CE               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  9895  1727  3193  237D  3197   	fcall	_EUSART_SetFramingErrorHandler
  9896                           
  9897                           ;mcc_generated_files/eusart.c: 107:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  9898  172A  3021               	movlw	low _EUSART_DefaultOverrunErrorHandler
  9899  172B  0020               	movlb	0	; select bank0
  9900  172C  00CD               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  9901  172D  3013               	movlw	high _EUSART_DefaultOverrunErrorHandler
  9902  172E  00CE               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  9903  172F  3193  2385  3197   	fcall	_EUSART_SetOverrunErrorHandler
  9904                           
  9905                           ;mcc_generated_files/eusart.c: 108:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  9906  1732  300F               	movlw	low _EUSART_DefaultErrorHandler
  9907  1733  0020               	movlb	0	; select bank0
  9908  1734  00CD               	movwf	EUSART_SetErrorHandler@interruptHandler
  9909  1735  3013               	movlw	high _EUSART_DefaultErrorHandler
  9910  1736  00CE               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  9911  1737  3193  2375         	fcall	_EUSART_SetErrorHandler
  9912                           
  9913                           ;mcc_generated_files/eusart.c: 110:     eusartRxLastError.status = 0;
  9914  1739  0020               	movlb	0	; select bank0
  9915  173A  01B8               	clrf	_eusartRxLastError	;volatile
  9916                           
  9917                           ;mcc_generated_files/eusart.c: 113:     eusartRxHead = 0;
  9918  173B  01BB               	clrf	_eusartRxHead	;volatile
  9919                           
  9920                           ;mcc_generated_files/eusart.c: 114:     eusartRxTail = 0;
  9921  173C  01BA               	clrf	_eusartRxTail	;volatile
  9922                           
  9923                           ;mcc_generated_files/eusart.c: 115:     eusartRxCount = 0;
  9924  173D  01B9               	clrf	_eusartRxCount	;volatile
  9925                           
  9926                           ;mcc_generated_files/eusart.c: 118:     PIE1bits.RCIE = 1;
  9927  173E  0021               	movlb	1	; select bank1
  9928  173F  1691               	bsf	17,5	;volatile
  9929  1740  0008               	return
  9930  1741                     __end_of_EUSART_Initialize:	
  9931                           
  9932                           	psect	text25
  9933  138D                     __ptext25:	
  9934 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  9935 ;; Defined at:
  9936 ;;		line 236 in file "mcc_generated_files/eusart.c"
  9937 ;; Parameters:    Size  Location     Type
  9938 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
  9939 ;;		 -> EUSART_CommandHandler_ISR(1), EUSART_Receive_ISR(1), 
  9940 ;; Auto vars:     Size  Location     Type
  9941 ;;		None
  9942 ;; Return value:  Size  Location     Type
  9943 ;;                  1    wreg      void 
  9944 ;; Registers used:
  9945 ;;		wreg
  9946 ;; Tracked objects:
  9947 ;;		On entry : 1F/0
  9948 ;;		On exit  : 1F/2
  9949 ;;		Unchanged: 0/0
  9950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9951 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9954 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9955 ;;Total ram usage:        2 bytes
  9956 ;; Hardware stack levels used:    1
  9957 ;; Hardware stack levels required when called:    5
  9958 ;; This function calls:
  9959 ;;		Nothing
  9960 ;; This function is called by:
  9961 ;;		_EUSART_Initialize
  9962 ;;		_uart_start
  9963 ;; This function uses a non-reentrant model
  9964 ;;
  9965                           
  9966                           
  9967                           ;psect for function _EUSART_SetRxInterruptHandler
  9968  138D                     _EUSART_SetRxInterruptHandler:	
  9969                           
  9970                           ;mcc_generated_files/eusart.c: 237:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  9971                           
  9972                           ;incstack = 0
  9973                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  9974  138D  084E               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  9975  138E  0022               	movlb	2	; select bank2
  9976  138F  00E7               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
  9977  1390  0020               	movlb	0	; select bank0
  9978  1391  084D               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  9979  1392  0022               	movlb	2	; select bank2
  9980  1393  00E6               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
  9981  1394  0008               	return
  9982  1395                     __end_of_EUSART_SetRxInterruptHandler:	
  9983                           
  9984                           	psect	text26
  9985  1385                     __ptext26:	
  9986 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  9987 ;; Defined at:
  9988 ;;		line 227 in file "mcc_generated_files/eusart.c"
  9989 ;; Parameters:    Size  Location     Type
  9990 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
  9991 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  9992 ;; Auto vars:     Size  Location     Type
  9993 ;;		None
  9994 ;; Return value:  Size  Location     Type
  9995 ;;                  1    wreg      void 
  9996 ;; Registers used:
  9997 ;;		wreg
  9998 ;; Tracked objects:
  9999 ;;		On entry : 1F/0
 10000 ;;		On exit  : 1F/2
 10001 ;;		Unchanged: 0/0
 10002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10003 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10006 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10007 ;;Total ram usage:        2 bytes
 10008 ;; Hardware stack levels used:    1
 10009 ;; Hardware stack levels required when called:    5
 10010 ;; This function calls:
 10011 ;;		Nothing
 10012 ;; This function is called by:
 10013 ;;		_EUSART_Initialize
 10014 ;; This function uses a non-reentrant model
 10015 ;;
 10016                           
 10017                           
 10018                           ;psect for function _EUSART_SetOverrunErrorHandler
 10019  1385                     _EUSART_SetOverrunErrorHandler:	
 10020                           
 10021                           ;mcc_generated_files/eusart.c: 228:     EUSART_OverrunErrorHandler = interruptHandler;
 10022                           
 10023                           ;incstack = 0
 10024                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 10025  1385  084E               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 10026  1386  0022               	movlb	2	; select bank2
 10027  1387  00E3               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
 10028  1388  0020               	movlb	0	; select bank0
 10029  1389  084D               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 10030  138A  0022               	movlb	2	; select bank2
 10031  138B  00E2               	movwf	_EUSART_OverrunErrorHandler^(0+256)
 10032  138C  0008               	return
 10033  138D                     __end_of_EUSART_SetOverrunErrorHandler:	
 10034                           
 10035                           	psect	text27
 10036  137D                     __ptext27:	
 10037 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 10038 ;; Defined at:
 10039 ;;		line 223 in file "mcc_generated_files/eusart.c"
 10040 ;; Parameters:    Size  Location     Type
 10041 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
 10042 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 10043 ;; Auto vars:     Size  Location     Type
 10044 ;;		None
 10045 ;; Return value:  Size  Location     Type
 10046 ;;                  1    wreg      void 
 10047 ;; Registers used:
 10048 ;;		wreg
 10049 ;; Tracked objects:
 10050 ;;		On entry : 1F/0
 10051 ;;		On exit  : 1F/2
 10052 ;;		Unchanged: 0/0
 10053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10054 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;Total ram usage:        2 bytes
 10059 ;; Hardware stack levels used:    1
 10060 ;; Hardware stack levels required when called:    5
 10061 ;; This function calls:
 10062 ;;		Nothing
 10063 ;; This function is called by:
 10064 ;;		_EUSART_Initialize
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           
 10069                           ;psect for function _EUSART_SetFramingErrorHandler
 10070  137D                     _EUSART_SetFramingErrorHandler:	
 10071                           
 10072                           ;mcc_generated_files/eusart.c: 224:     EUSART_FramingErrorHandler = interruptHandler;
 10073                           
 10074                           ;incstack = 0
 10075                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 10076  137D  084E               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 10077  137E  0022               	movlb	2	; select bank2
 10078  137F  00E5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
 10079  1380  0020               	movlb	0	; select bank0
 10080  1381  084D               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 10081  1382  0022               	movlb	2	; select bank2
 10082  1383  00E4               	movwf	_EUSART_FramingErrorHandler^(0+256)
 10083  1384  0008               	return
 10084  1385                     __end_of_EUSART_SetFramingErrorHandler:	
 10085                           
 10086                           	psect	text28
 10087  1375                     __ptext28:	
 10088 ;; *************** function _EUSART_SetErrorHandler *****************
 10089 ;; Defined at:
 10090 ;;		line 231 in file "mcc_generated_files/eusart.c"
 10091 ;; Parameters:    Size  Location     Type
 10092 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
 10093 ;;		 -> EUSART_DefaultErrorHandler(1), 
 10094 ;; Auto vars:     Size  Location     Type
 10095 ;;		None
 10096 ;; Return value:  Size  Location     Type
 10097 ;;                  1    wreg      void 
 10098 ;; Registers used:
 10099 ;;		wreg
 10100 ;; Tracked objects:
 10101 ;;		On entry : 1F/0
 10102 ;;		On exit  : 1F/3
 10103 ;;		Unchanged: 0/0
 10104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10105 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10108 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;Total ram usage:        2 bytes
 10110 ;; Hardware stack levels used:    1
 10111 ;; Hardware stack levels required when called:    5
 10112 ;; This function calls:
 10113 ;;		Nothing
 10114 ;; This function is called by:
 10115 ;;		_EUSART_Initialize
 10116 ;; This function uses a non-reentrant model
 10117 ;;
 10118                           
 10119                           
 10120                           ;psect for function _EUSART_SetErrorHandler
 10121  1375                     _EUSART_SetErrorHandler:	
 10122                           
 10123                           ;mcc_generated_files/eusart.c: 232:     EUSART_ErrorHandler = interruptHandler;
 10124                           
 10125                           ;incstack = 0
 10126                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 10127  1375  084E               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 10128  1376  0023               	movlb	3	; select bank3
 10129  1377  00CD               	movwf	(_EUSART_ErrorHandler+1)^(0+384)
 10130  1378  0020               	movlb	0	; select bank0
 10131  1379  084D               	movf	EUSART_SetErrorHandler@interruptHandler,w
 10132  137A  0023               	movlb	3	; select bank3
 10133  137B  00CC               	movwf	_EUSART_ErrorHandler^(0+384)
 10134  137C  0008               	return
 10135  137D                     __end_of_EUSART_SetErrorHandler:	
 10136                           
 10137                           	psect	text29
 10138  147C                     __ptext29:	
 10139 ;; *************** function _ADC_Initialize *****************
 10140 ;; Defined at:
 10141 ;;		line 67 in file "mcc_generated_files/adc.c"
 10142 ;; Parameters:    Size  Location     Type
 10143 ;;		None
 10144 ;; Auto vars:     Size  Location     Type
 10145 ;;		None
 10146 ;; Return value:  Size  Location     Type
 10147 ;;                  1    wreg      void 
 10148 ;; Registers used:
 10149 ;;		wreg, status,2, status,0, pclath, cstack
 10150 ;; Tracked objects:
 10151 ;;		On entry : B1F/1
 10152 ;;		On exit  : 1F/2
 10153 ;;		Unchanged: 0/0
 10154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;Total ram usage:        0 bytes
 10160 ;; Hardware stack levels used:    1
 10161 ;; Hardware stack levels required when called:    6
 10162 ;; This function calls:
 10163 ;;		_ADC_SetInterruptHandler
 10164 ;; This function is called by:
 10165 ;;		_SYSTEM_Initialize
 10166 ;; This function uses a non-reentrant model
 10167 ;;
 10168                           
 10169                           
 10170                           ;psect for function _ADC_Initialize
 10171  147C                     _ADC_Initialize:	
 10172                           
 10173                           ;mcc_generated_files/adc.c: 72:     ADCON0 = 0x01;
 10174                           
 10175                           ;incstack = 0
 10176                           ; Regs used in _ADC_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10177  147C  3001               	movlw	1
 10178  147D  009D               	movwf	29	;volatile
 10179                           
 10180                           ;mcc_generated_files/adc.c: 75:     ADCON1 = 0xE0;
 10181  147E  30E0               	movlw	224
 10182  147F  009E               	movwf	30	;volatile
 10183                           
 10184                           ;mcc_generated_files/adc.c: 78:     ADCON2 = 0x50;
 10185  1480  3050               	movlw	80
 10186  1481  009F               	movwf	31	;volatile
 10187                           
 10188                           ;mcc_generated_files/adc.c: 81:     ADRESL = 0x00;
 10189  1482  019B               	clrf	27	;volatile
 10190                           
 10191                           ;mcc_generated_files/adc.c: 84:     ADRESH = 0x00;
 10192  1483  019C               	clrf	28	;volatile
 10193                           
 10194                           ;mcc_generated_files/adc.c: 87:     PIE1bits.ADIE = 1;
 10195  1484  1711               	bsf	17,6	;volatile
 10196                           
 10197                           ;mcc_generated_files/adc.c: 90:     ADC_SetInterruptHandler(ADC_DefaultInterruptHandler)
      +                          ;
 10198  1485  300B               	movlw	low _ADC_DefaultInterruptHandler
 10199  1486  0020               	movlb	0	; select bank0
 10200  1487  00CD               	movwf	ADC_SetInterruptHandler@InterruptHandler
 10201  1488  3013               	movlw	high _ADC_DefaultInterruptHandler
 10202  1489  00CE               	movwf	ADC_SetInterruptHandler@InterruptHandler+1
 10203  148A  3193  2365         	fcall	_ADC_SetInterruptHandler
 10204  148C  0008               	return
 10205  148D                     __end_of_ADC_Initialize:	
 10206                           
 10207                           	psect	text30
 10208  0B81                     __ptext30:	
 10209 ;; *************** function _ApplicationInit *****************
 10210 ;; Defined at:
 10211 ;;		line 13 in file "GlobalSystem.c"
 10212 ;; Parameters:    Size  Location     Type
 10213 ;;		None
 10214 ;; Auto vars:     Size  Location     Type
 10215 ;;  act_counter     4    3[BANK3 ] unsigned long 
 10216 ;;  val             2    7[BANK3 ] unsigned short 
 10217 ;;  chopper_stat    2    0[BANK3 ] unsigned short 
 10218 ;;  invalid_para    1    2[BANK3 ] _Bool 
 10219 ;; Return value:  Size  Location     Type
 10220 ;;                  1    wreg      void 
 10221 ;; Registers used:
 10222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10223 ;; Tracked objects:
 10224 ;;		On entry : 1F/1
 10225 ;;		On exit  : 1D/0
 10226 ;;		Unchanged: 0/0
 10227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10229 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
 10230 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10231 ;;      Totals:         0       4       0       0       9       0       0       0       0       0       0       0       
      +0       0
 10232 ;;Total ram usage:       13 bytes
 10233 ;; Hardware stack levels used:    1
 10234 ;; Hardware stack levels required when called:    8
 10235 ;; This function calls:
 10236 ;;		_FLASH_ReadWord
 10237 ;;		_save_to_flash
 10238 ;;		_set_relay_activation_counter
 10239 ;;		_set_relay_reset_voltage
 10240 ;;		_set_reset_duration
 10241 ;;		_set_vdc_critic
 10242 ;;		_set_vdc_max
 10243 ;;		_set_vdc_min
 10244 ;;		_set_vdc_speed
 10245 ;;		_start_chopper
 10246 ;; This function is called by:
 10247 ;;		_main
 10248 ;; This function uses a non-reentrant model
 10249 ;;
 10250                           
 10251                           
 10252                           ;psect for function _ApplicationInit
 10253  0B81                     _ApplicationInit:	
 10254                           
 10255                           ;GlobalSystem.c: 15:     _Bool invalid_param = 0;
 10256                           
 10257                           ;incstack = 0
 10258                           ; Regs used in _ApplicationInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10259  0B81  0023               	movlb	3	; select bank3
 10260  0B82  01BF               	clrf	ApplicationInit@invalid_param^(0+384)
 10261                           
 10262                           ;GlobalSystem.c: 16:     uint16_t chopper_state = FLASH_ReadWord(0x1F00);
 10263  0B83  3000               	movlw	0
 10264  0B84  0020               	movlb	0	; select bank0
 10265  0B85  00CD               	movwf	FLASH_ReadWord@flashAddr
 10266  0B86  301F               	movlw	31
 10267  0B87  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10268  0B88  3195  25B2  318B   	fcall	_FLASH_ReadWord
 10269  0B8B  084E               	movf	?_FLASH_ReadWord+1,w
 10270  0B8C  0023               	movlb	3	; select bank3
 10271  0B8D  00BE               	movwf	(ApplicationInit@chopper_state+1)^(0+384)
 10272  0B8E  0020               	movlb	0	; select bank0
 10273  0B8F  084D               	movf	?_FLASH_ReadWord,w
 10274  0B90  0023               	movlb	3	; select bank3
 10275  0B91  00BD               	movwf	ApplicationInit@chopper_state^(0+384)
 10276                           
 10277                           ;GlobalSystem.c: 17:     uint16_t val = FLASH_ReadWord(0x1F00 +1);
 10278  0B92  3001               	movlw	1
 10279  0B93  0020               	movlb	0	; select bank0
 10280  0B94  00CD               	movwf	FLASH_ReadWord@flashAddr
 10281  0B95  301F               	movlw	31
 10282  0B96  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10283  0B97  3195  25B2  318B   	fcall	_FLASH_ReadWord
 10284  0B9A  084E               	movf	?_FLASH_ReadWord+1,w
 10285  0B9B  0023               	movlb	3	; select bank3
 10286  0B9C  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10287  0B9D  0020               	movlb	0	; select bank0
 10288  0B9E  084D               	movf	?_FLASH_ReadWord,w
 10289  0B9F  0023               	movlb	3	; select bank3
 10290  0BA0  00C4               	movwf	ApplicationInit@val^(0+384)
 10291                           
 10292                           ;GlobalSystem.c: 18:     if( val <= 800 )
 10293  0BA1  3003               	movlw	3
 10294  0BA2  0245               	subwf	(ApplicationInit@val+1)^(0+384),w
 10295  0BA3  3021               	movlw	33
 10296  0BA4  1903               	skipnz
 10297  0BA5  0244               	subwf	ApplicationInit@val^(0+384),w
 10298  0BA6  1803               	skipnc
 10299  0BA7  2BB3               	goto	l1152
 10300                           
 10301                           ;GlobalSystem.c: 19:         set_vdc_min(val);
 10302  0BA8  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10303  0BA9  0020               	movlb	0	; select bank0
 10304  0BAA  00D1               	movwf	set_vdc_min@vmin+1
 10305  0BAB  0023               	movlb	3	; select bank3
 10306  0BAC  0844               	movf	ApplicationInit@val^(0+384),w
 10307  0BAD  0020               	movlb	0	; select bank0
 10308  0BAE  00D0               	movwf	set_vdc_min@vmin
 10309  0BAF  3193  23FF  318B   	fcall	_set_vdc_min
 10310  0BB2  2BB5               	goto	l4317
 10311  0BB3                     l1152:	
 10312                           ;GlobalSystem.c: 20:     else
 10313                           
 10314                           
 10315                           ;GlobalSystem.c: 21:         invalid_param = 1;
 10316  0BB3  01BF               	clrf	ApplicationInit@invalid_param^(0+384)
 10317  0BB4  0ABF               	incf	ApplicationInit@invalid_param^(0+384),f
 10318  0BB5                     l4317:	
 10319                           
 10320                           ;GlobalSystem.c: 23:     val = FLASH_ReadWord(0x1F00 +2);
 10321  0BB5  3002               	movlw	2
 10322  0BB6  0020               	movlb	0	; select bank0
 10323  0BB7  00CD               	movwf	FLASH_ReadWord@flashAddr
 10324  0BB8  301F               	movlw	31
 10325  0BB9  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10326  0BBA  3195  25B2  318B   	fcall	_FLASH_ReadWord
 10327  0BBD  084E               	movf	?_FLASH_ReadWord+1,w
 10328  0BBE  0023               	movlb	3	; select bank3
 10329  0BBF  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10330  0BC0  0020               	movlb	0	; select bank0
 10331  0BC1  084D               	movf	?_FLASH_ReadWord,w
 10332  0BC2  0023               	movlb	3	; select bank3
 10333  0BC3  00C4               	movwf	ApplicationInit@val^(0+384)
 10334                           
 10335                           ;GlobalSystem.c: 24:     if( val <= 800 )
 10336  0BC4  3003               	movlw	3
 10337  0BC5  0245               	subwf	(ApplicationInit@val+1)^(0+384),w
 10338  0BC6  3021               	movlw	33
 10339  0BC7  1903               	skipnz
 10340  0BC8  0244               	subwf	ApplicationInit@val^(0+384),w
 10341  0BC9  1803               	skipnc
 10342  0BCA  2BD6               	goto	l1154
 10343                           
 10344                           ;GlobalSystem.c: 25:         set_vdc_max(val);
 10345  0BCB  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10346  0BCC  0020               	movlb	0	; select bank0
 10347  0BCD  00D1               	movwf	set_vdc_max@vmax+1
 10348  0BCE  0023               	movlb	3	; select bank3
 10349  0BCF  0844               	movf	ApplicationInit@val^(0+384),w
 10350  0BD0  0020               	movlb	0	; select bank0
 10351  0BD1  00D0               	movwf	set_vdc_max@vmax
 10352  0BD2  3193  23F4  318B   	fcall	_set_vdc_max
 10353  0BD5  2BD8               	goto	l4323
 10354  0BD6                     l1154:	
 10355                           ;GlobalSystem.c: 26:     else
 10356                           
 10357                           
 10358                           ;GlobalSystem.c: 27:         invalid_param = 1;
 10359  0BD6  01BF               	clrf	ApplicationInit@invalid_param^(0+384)
 10360  0BD7  0ABF               	incf	ApplicationInit@invalid_param^(0+384),f
 10361  0BD8                     l4323:	
 10362                           
 10363                           ;GlobalSystem.c: 29:     val = FLASH_ReadWord(0x1F00 +3);
 10364  0BD8  3003               	movlw	3
 10365  0BD9  0020               	movlb	0	; select bank0
 10366  0BDA  00CD               	movwf	FLASH_ReadWord@flashAddr
 10367  0BDB  301F               	movlw	31
 10368  0BDC  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10369  0BDD  3195  25B2  318B   	fcall	_FLASH_ReadWord
 10370  0BE0  084E               	movf	?_FLASH_ReadWord+1,w
 10371  0BE1  0023               	movlb	3	; select bank3
 10372  0BE2  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10373  0BE3  0020               	movlb	0	; select bank0
 10374  0BE4  084D               	movf	?_FLASH_ReadWord,w
 10375  0BE5  0023               	movlb	3	; select bank3
 10376  0BE6  00C4               	movwf	ApplicationInit@val^(0+384)
 10377                           
 10378                           ;GlobalSystem.c: 30:     if( val <= 800 )
 10379  0BE7  3003               	movlw	3
 10380  0BE8  0245               	subwf	(ApplicationInit@val+1)^(0+384),w
 10381  0BE9  3021               	movlw	33
 10382  0BEA  1903               	skipnz
 10383  0BEB  0244               	subwf	ApplicationInit@val^(0+384),w
 10384  0BEC  1803               	skipnc
 10385  0BED  2BF9               	goto	l1156
 10386                           
 10387                           ;GlobalSystem.c: 31:         set_vdc_critic(val);
 10388  0BEE  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10389  0BEF  0020               	movlb	0	; select bank0
 10390  0BF0  00D1               	movwf	set_vdc_critic@vc+1
 10391  0BF1  0023               	movlb	3	; select bank3
 10392  0BF2  0844               	movf	ApplicationInit@val^(0+384),w
 10393  0BF3  0020               	movlb	0	; select bank0
 10394  0BF4  00D0               	movwf	set_vdc_critic@vc
 10395  0BF5  3193  23E9  318B   	fcall	_set_vdc_critic
 10396  0BF8  2BFB               	goto	l4329
 10397  0BF9                     l1156:	
 10398                           ;GlobalSystem.c: 32:     else
 10399                           
 10400                           
 10401                           ;GlobalSystem.c: 33:         invalid_param = 1;
 10402  0BF9  01BF               	clrf	ApplicationInit@invalid_param^(0+384)
 10403  0BFA  0ABF               	incf	ApplicationInit@invalid_param^(0+384),f
 10404  0BFB                     l4329:	
 10405                           
 10406                           ;GlobalSystem.c: 35:     val = FLASH_ReadWord(0x1F00 +4);
 10407  0BFB  3004               	movlw	4
 10408  0BFC  0020               	movlb	0	; select bank0
 10409  0BFD  00CD               	movwf	FLASH_ReadWord@flashAddr
 10410  0BFE  301F               	movlw	31
 10411  0BFF  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10412  0C00  3195  25B2  318B   	fcall	_FLASH_ReadWord
 10413  0C03  084E               	movf	?_FLASH_ReadWord+1,w
 10414  0C04  0023               	movlb	3	; select bank3
 10415  0C05  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10416  0C06  0020               	movlb	0	; select bank0
 10417  0C07  084D               	movf	?_FLASH_ReadWord,w
 10418  0C08  0023               	movlb	3	; select bank3
 10419  0C09  00C4               	movwf	ApplicationInit@val^(0+384)
 10420                           
 10421                           ;GlobalSystem.c: 36:     if( val <= 10000 )
 10422  0C0A  3027               	movlw	39
 10423  0C0B  0245               	subwf	(ApplicationInit@val+1)^(0+384),w
 10424  0C0C  3011               	movlw	17
 10425  0C0D  1903               	skipnz
 10426  0C0E  0244               	subwf	ApplicationInit@val^(0+384),w
 10427  0C0F  1803               	skipnc
 10428  0C10  2C1C               	goto	l1158
 10429                           
 10430                           ;GlobalSystem.c: 37:         set_vdc_speed(val);
 10431  0C11  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10432  0C12  0020               	movlb	0	; select bank0
 10433  0C13  00D6               	movwf	set_vdc_speed@msDelay+1
 10434  0C14  0023               	movlb	3	; select bank3
 10435  0C15  0844               	movf	ApplicationInit@val^(0+384),w
 10436  0C16  0020               	movlb	0	; select bank0
 10437  0C17  00D5               	movwf	set_vdc_speed@msDelay
 10438  0C18  3196  2633  318B   	fcall	_set_vdc_speed
 10439  0C1B  2C1E               	goto	l4335
 10440  0C1C                     l1158:	
 10441                           ;GlobalSystem.c: 38:     else
 10442                           
 10443                           
 10444                           ;GlobalSystem.c: 39:         invalid_param = 1;
 10445  0C1C  01BF               	clrf	ApplicationInit@invalid_param^(0+384)
 10446  0C1D  0ABF               	incf	ApplicationInit@invalid_param^(0+384),f
 10447  0C1E                     l4335:	
 10448                           
 10449                           ;GlobalSystem.c: 41:     val = FLASH_ReadWord(0x1F00 +5);
 10450  0C1E  3005               	movlw	5
 10451  0C1F  0020               	movlb	0	; select bank0
 10452  0C20  00CD               	movwf	FLASH_ReadWord@flashAddr
 10453  0C21  301F               	movlw	31
 10454  0C22  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10455  0C23  3195  25B2  318B   	fcall	_FLASH_ReadWord
 10456  0C26  084E               	movf	?_FLASH_ReadWord+1,w
 10457  0C27  0023               	movlb	3	; select bank3
 10458  0C28  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10459  0C29  0020               	movlb	0	; select bank0
 10460  0C2A  084D               	movf	?_FLASH_ReadWord,w
 10461  0C2B  0023               	movlb	3	; select bank3
 10462  0C2C  00C4               	movwf	ApplicationInit@val^(0+384)
 10463                           
 10464                           ;GlobalSystem.c: 42:     if( val <= 800 )
 10465  0C2D  3003               	movlw	3
 10466  0C2E  0245               	subwf	(ApplicationInit@val+1)^(0+384),w
 10467  0C2F  3021               	movlw	33
 10468  0C30  1903               	skipnz
 10469  0C31  0244               	subwf	ApplicationInit@val^(0+384),w
 10470  0C32  1803               	skipnc
 10471  0C33  2C3F               	goto	l1160
 10472                           
 10473                           ;GlobalSystem.c: 43:         set_relay_reset_voltage(val);
 10474  0C34  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10475  0C35  0020               	movlb	0	; select bank0
 10476  0C36  00CE               	movwf	set_relay_reset_voltage@relay_vthres+1
 10477  0C37  0023               	movlb	3	; select bank3
 10478  0C38  0844               	movf	ApplicationInit@val^(0+384),w
 10479  0C39  0020               	movlb	0	; select bank0
 10480  0C3A  00CD               	movwf	set_relay_reset_voltage@relay_vthres
 10481  0C3B  3194  24F8  318B   	fcall	_set_relay_reset_voltage
 10482  0C3E  2C41               	goto	l4341
 10483  0C3F                     l1160:	
 10484                           ;GlobalSystem.c: 44:     else
 10485                           
 10486                           
 10487                           ;GlobalSystem.c: 45:         invalid_param = 1;
 10488  0C3F  01BF               	clrf	ApplicationInit@invalid_param^(0+384)
 10489  0C40  0ABF               	incf	ApplicationInit@invalid_param^(0+384),f
 10490  0C41                     l4341:	
 10491                           
 10492                           ;GlobalSystem.c: 47:     val = FLASH_ReadWord(0x1F00 +6);
 10493  0C41  3006               	movlw	6
 10494  0C42  0020               	movlb	0	; select bank0
 10495  0C43  00CD               	movwf	FLASH_ReadWord@flashAddr
 10496  0C44  301F               	movlw	31
 10497  0C45  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10498  0C46  3195  25B2  318B   	fcall	_FLASH_ReadWord
 10499  0C49  084E               	movf	?_FLASH_ReadWord+1,w
 10500  0C4A  0023               	movlb	3	; select bank3
 10501  0C4B  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10502  0C4C  0020               	movlb	0	; select bank0
 10503  0C4D  084D               	movf	?_FLASH_ReadWord,w
 10504  0C4E  0023               	movlb	3	; select bank3
 10505  0C4F  00C4               	movwf	ApplicationInit@val^(0+384)
 10506                           
 10507                           ;GlobalSystem.c: 48:     if( val <= 10000 )
 10508  0C50  3027               	movlw	39
 10509  0C51  0245               	subwf	(ApplicationInit@val+1)^(0+384),w
 10510  0C52  3011               	movlw	17
 10511  0C53  1903               	skipnz
 10512  0C54  0244               	subwf	ApplicationInit@val^(0+384),w
 10513  0C55  1803               	skipnc
 10514  0C56  2C62               	goto	l1162
 10515                           
 10516                           ;GlobalSystem.c: 49:         set_reset_duration(val);
 10517  0C57  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10518  0C58  0020               	movlb	0	; select bank0
 10519  0C59  00D6               	movwf	set_reset_duration@reset_dur_ms+1
 10520  0C5A  0023               	movlb	3	; select bank3
 10521  0C5B  0844               	movf	ApplicationInit@val^(0+384),w
 10522  0C5C  0020               	movlb	0	; select bank0
 10523  0C5D  00D5               	movwf	set_reset_duration@reset_dur_ms
 10524  0C5E  3196  26DB  318B   	fcall	_set_reset_duration
 10525  0C61  2C64               	goto	l4347
 10526  0C62                     l1162:	
 10527                           ;GlobalSystem.c: 50:     else
 10528                           
 10529                           
 10530                           ;GlobalSystem.c: 51:         invalid_param = 1;
 10531  0C62  01BF               	clrf	ApplicationInit@invalid_param^(0+384)
 10532  0C63  0ABF               	incf	ApplicationInit@invalid_param^(0+384),f
 10533  0C64                     l4347:	
 10534                           
 10535                           ;GlobalSystem.c: 53:     if( invalid_param == 0 )
 10536  0C64  0023               	movlb	3	; select bank3
 10537  0C65  083F               	movf	ApplicationInit@invalid_param^(0+384),w
 10538  0C66  1D03               	btfss	3,2
 10539  0C67  2C81               	goto	l4357
 10540                           
 10541                           ;GlobalSystem.c: 54:     {;GlobalSystem.c: 57:         if( chopper_state == 0x0ABC || ch
      +                          opper_state == 0x0CBA )
 10542  0C68  30BC               	movlw	188
 10543  0C69  063D               	xorwf	ApplicationInit@chopper_state^(0+384),w
 10544  0C6A  300A               	movlw	10
 10545  0C6B  1903               	skipnz
 10546  0C6C  063E               	xorwf	(ApplicationInit@chopper_state+1)^(0+384),w
 10547  0C6D  1903               	btfsc	3,2
 10548  0C6E  2C76               	goto	l4353
 10549  0C6F  30BA               	movlw	186
 10550  0C70  063D               	xorwf	ApplicationInit@chopper_state^(0+384),w
 10551  0C71  300C               	movlw	12
 10552  0C72  1903               	skipnz
 10553  0C73  063E               	xorwf	(ApplicationInit@chopper_state+1)^(0+384),w
 10554  0C74  1D03               	btfss	3,2
 10555  0C75  2CA8               	goto	l4365
 10556  0C76                     l4353:	
 10557                           
 10558                           ;GlobalSystem.c: 58:         {;GlobalSystem.c: 59:             if( chopper_state == 0x0A
      +                          BC )
 10559  0C76  30BC               	movlw	188
 10560  0C77  063D               	xorwf	ApplicationInit@chopper_state^(0+384),w
 10561  0C78  300A               	movlw	10
 10562  0C79  1903               	skipnz
 10563  0C7A  063E               	xorwf	(ApplicationInit@chopper_state+1)^(0+384),w
 10564  0C7B  1D03               	btfss	3,2
 10565  0C7C  2CA8               	goto	l4365
 10566                           
 10567                           ;GlobalSystem.c: 60:                 start_chopper();
 10568  0C7D  3195  2510  318B   	fcall	_start_chopper
 10569                           
 10570                           ;GlobalSystem.c: 62:         else
 10571  0C80  2CA8               	goto	l4365
 10572  0C81                     l4357:	
 10573                           
 10574                           ;GlobalSystem.c: 66:     {;GlobalSystem.c: 69:         set_vdc_min(0);
 10575  0C81  3000               	movlw	0
 10576  0C82  0020               	movlb	0	; select bank0
 10577  0C83  00D0               	movwf	set_vdc_min@vmin
 10578  0C84  00D1               	movwf	set_vdc_min@vmin+1
 10579  0C85  3193  23FF  318B   	fcall	_set_vdc_min
 10580                           
 10581                           ;GlobalSystem.c: 70:         set_vdc_max(0);
 10582  0C88  3000               	movlw	0
 10583  0C89  00D0               	movwf	set_vdc_max@vmax
 10584  0C8A  00D1               	movwf	set_vdc_max@vmax+1
 10585  0C8B  3193  23F4  318B   	fcall	_set_vdc_max
 10586                           
 10587                           ;GlobalSystem.c: 71:         set_vdc_critic(0);
 10588  0C8E  3000               	movlw	0
 10589  0C8F  00D0               	movwf	set_vdc_critic@vc
 10590  0C90  00D1               	movwf	set_vdc_critic@vc+1
 10591  0C91  3193  23E9  318B   	fcall	_set_vdc_critic
 10592                           
 10593                           ;GlobalSystem.c: 72:         set_vdc_speed(0);
 10594  0C94  3000               	movlw	0
 10595  0C95  00D5               	movwf	set_vdc_speed@msDelay
 10596  0C96  00D6               	movwf	set_vdc_speed@msDelay+1
 10597  0C97  3196  2633  318B   	fcall	_set_vdc_speed
 10598                           
 10599                           ;GlobalSystem.c: 73:         set_relay_reset_voltage(0);
 10600  0C9A  3000               	movlw	0
 10601  0C9B  0020               	movlb	0	; select bank0
 10602  0C9C  00CD               	movwf	set_relay_reset_voltage@relay_vthres
 10603  0C9D  00CE               	movwf	set_relay_reset_voltage@relay_vthres+1
 10604  0C9E  3194  24F8  318B   	fcall	_set_relay_reset_voltage
 10605                           
 10606                           ;GlobalSystem.c: 74:         set_reset_duration(0);
 10607  0CA1  3000               	movlw	0
 10608  0CA2  0020               	movlb	0	; select bank0
 10609  0CA3  00D5               	movwf	set_reset_duration@reset_dur_ms
 10610  0CA4  00D6               	movwf	set_reset_duration@reset_dur_ms+1
 10611  0CA5  3196  26DB  318B   	fcall	_set_reset_duration
 10612  0CA8                     l4365:	
 10613                           
 10614                           ;GlobalSystem.c: 76:     val = FLASH_ReadWord(0x1F00 +7);
 10615  0CA8  3007               	movlw	7
 10616  0CA9  0020               	movlb	0	; select bank0
 10617  0CAA  00CD               	movwf	FLASH_ReadWord@flashAddr
 10618  0CAB  301F               	movlw	31
 10619  0CAC  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10620  0CAD  3195  25B2  318B   	fcall	_FLASH_ReadWord
 10621  0CB0  084E               	movf	?_FLASH_ReadWord+1,w
 10622  0CB1  0023               	movlb	3	; select bank3
 10623  0CB2  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10624  0CB3  0020               	movlb	0	; select bank0
 10625  0CB4  084D               	movf	?_FLASH_ReadWord,w
 10626  0CB5  0023               	movlb	3	; select bank3
 10627  0CB6  00C4               	movwf	ApplicationInit@val^(0+384)
 10628                           
 10629                           ;GlobalSystem.c: 77:     uint32_t act_counter = val;
 10630  0CB7  0844               	movf	ApplicationInit@val^(0+384),w
 10631  0CB8  00C0               	movwf	ApplicationInit@act_counter^(0+384)
 10632  0CB9  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10633  0CBA  00C1               	movwf	(ApplicationInit@act_counter^(0+384)+1)
 10634  0CBB  01C2               	clrf	(ApplicationInit@act_counter^(0+384)+2)
 10635  0CBC  01C3               	clrf	(ApplicationInit@act_counter^(0+384)+3)
 10636                           
 10637                           ;GlobalSystem.c: 78:     act_counter <<= 16;
 10638  0CBD  3010               	movlw	16
 10639  0CBE                     u3085:	
 10640  0CBE  35C0               	lslf	ApplicationInit@act_counter^(0+384),f
 10641  0CBF  0DC1               	rlf	(ApplicationInit@act_counter+1)^(0+384),f
 10642  0CC0  0DC2               	rlf	(ApplicationInit@act_counter+2)^(0+384),f
 10643  0CC1  0DC3               	rlf	(ApplicationInit@act_counter+3)^(0+384),f
 10644  0CC2  0B89               	decfsz	9,f
 10645  0CC3  2CBE               	goto	u3085
 10646                           
 10647                           ;GlobalSystem.c: 79:     val = FLASH_ReadWord(0x1F00 +8);
 10648  0CC4  3008               	movlw	8
 10649  0CC5  0020               	movlb	0	; select bank0
 10650  0CC6  00CD               	movwf	FLASH_ReadWord@flashAddr
 10651  0CC7  301F               	movlw	31
 10652  0CC8  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10653  0CC9  3195  25B2  318B   	fcall	_FLASH_ReadWord
 10654  0CCC  084E               	movf	?_FLASH_ReadWord+1,w
 10655  0CCD  0023               	movlb	3	; select bank3
 10656  0CCE  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10657  0CCF  0020               	movlb	0	; select bank0
 10658  0CD0  084D               	movf	?_FLASH_ReadWord,w
 10659  0CD1  0023               	movlb	3	; select bank3
 10660  0CD2  00C4               	movwf	ApplicationInit@val^(0+384)
 10661                           
 10662                           ;GlobalSystem.c: 80:     act_counter |= val;
 10663  0CD3  0844               	movf	ApplicationInit@val^(0+384),w
 10664  0CD4  0020               	movlb	0	; select bank0
 10665  0CD5  00DB               	movwf	??_ApplicationInit
 10666  0CD6  0023               	movlb	3	; select bank3
 10667  0CD7  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10668  0CD8  0020               	movlb	0	; select bank0
 10669  0CD9  00DC               	movwf	??_ApplicationInit+1
 10670  0CDA  01DD               	clrf	??_ApplicationInit+2
 10671  0CDB  01DE               	clrf	??_ApplicationInit+3
 10672  0CDC  085B               	movf	??_ApplicationInit,w
 10673  0CDD  0023               	movlb	3	; select bank3
 10674  0CDE  04C0               	iorwf	ApplicationInit@act_counter^(0+384),f
 10675  0CDF  0020               	movlb	0	; select bank0
 10676  0CE0  085C               	movf	??_ApplicationInit+1,w
 10677  0CE1  0023               	movlb	3	; select bank3
 10678  0CE2  04C1               	iorwf	(ApplicationInit@act_counter+1)^(0+384),f
 10679  0CE3  0020               	movlb	0	; select bank0
 10680  0CE4  085D               	movf	??_ApplicationInit+2,w
 10681  0CE5  0023               	movlb	3	; select bank3
 10682  0CE6  04C2               	iorwf	(ApplicationInit@act_counter+2)^(0+384),f
 10683  0CE7  0020               	movlb	0	; select bank0
 10684  0CE8  085E               	movf	??_ApplicationInit+3,w
 10685  0CE9  0023               	movlb	3	; select bank3
 10686  0CEA  04C3               	iorwf	(ApplicationInit@act_counter+3)^(0+384),f
 10687                           
 10688                           ;GlobalSystem.c: 81:     if( act_counter == 0x3FFF3FFF )
 10689  0CEB  0A40               	incf	ApplicationInit@act_counter^(0+384),w
 10690  0CEC  303F               	movlw	63
 10691  0CED  1903               	skipnz
 10692  0CEE  0641               	xorwf	(ApplicationInit@act_counter+1)^(0+384),w
 10693  0CEF  1D03               	skipz
 10694  0CF0  2D06               	goto	l4383
 10695  0CF1  0A42               	incf	(ApplicationInit@act_counter+2)^(0+384),w
 10696  0CF2  303F               	movlw	63
 10697  0CF3  1903               	skipnz
 10698  0CF4  0643               	xorwf	(ApplicationInit@act_counter+3)^(0+384),w
 10699  0CF5  1D03               	btfss	3,2
 10700  0CF6  2D06               	goto	l4383
 10701                           
 10702                           ;GlobalSystem.c: 84:         set_relay_activation_counter(act_counter);
 10703  0CF7  3000               	movlw	0
 10704  0CF8  0020               	movlb	0	; select bank0
 10705  0CF9  00D0               	movwf	set_relay_activation_counter@act_count+3
 10706  0CFA  3000               	movlw	0
 10707  0CFB  00CF               	movwf	set_relay_activation_counter@act_count+2
 10708  0CFC  3000               	movlw	0
 10709  0CFD  00CE               	movwf	set_relay_activation_counter@act_count+1
 10710  0CFE  3000               	movlw	0
 10711  0CFF  00CD               	movwf	set_relay_activation_counter@act_count
 10712  0D00  3194  245B  318B   	fcall	_set_relay_activation_counter
 10713                           
 10714                           ;GlobalSystem.c: 85:         save_to_flash();
 10715  0D03  3189  2160         	fcall	_save_to_flash
 10716                           
 10717                           ;GlobalSystem.c: 86:     }
 10718  0D05  0008               	return
 10719  0D06                     l4383:	
 10720                           
 10721                           ;GlobalSystem.c: 88:         set_relay_activation_counter(act_counter);
 10722  0D06  0843               	movf	(ApplicationInit@act_counter+3)^(0+384),w
 10723  0D07  0020               	movlb	0	; select bank0
 10724  0D08  00D0               	movwf	set_relay_activation_counter@act_count+3
 10725  0D09  0023               	movlb	3	; select bank3
 10726  0D0A  0842               	movf	(ApplicationInit@act_counter+2)^(0+384),w
 10727  0D0B  0020               	movlb	0	; select bank0
 10728  0D0C  00CF               	movwf	set_relay_activation_counter@act_count+2
 10729  0D0D  0023               	movlb	3	; select bank3
 10730  0D0E  0841               	movf	(ApplicationInit@act_counter+1)^(0+384),w
 10731  0D0F  0020               	movlb	0	; select bank0
 10732  0D10  00CE               	movwf	set_relay_activation_counter@act_count+1
 10733  0D11  0023               	movlb	3	; select bank3
 10734  0D12  0840               	movf	ApplicationInit@act_counter^(0+384),w
 10735  0D13  0020               	movlb	0	; select bank0
 10736  0D14  00CD               	movwf	set_relay_activation_counter@act_count
 10737  0D15  3194  245B         	fcall	_set_relay_activation_counter
 10738  0D17  0008               	return
 10739  0D18                     __end_of_ApplicationInit:	
 10740                           
 10741                           	psect	text31
 10742  1510                     __ptext31:	
 10743 ;; *************** function _start_chopper *****************
 10744 ;; Defined at:
 10745 ;;		line 224 in file "vcontrol.c"
 10746 ;; Parameters:    Size  Location     Type
 10747 ;;		None
 10748 ;; Auto vars:     Size  Location     Type
 10749 ;;		None
 10750 ;; Return value:  Size  Location     Type
 10751 ;;                  1    wreg      void 
 10752 ;; Registers used:
 10753 ;;		wreg, status,2, status,0, pclath, cstack
 10754 ;; Tracked objects:
 10755 ;;		On entry : 1E/2
 10756 ;;		On exit  : 1F/0
 10757 ;;		Unchanged: 0/0
 10758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10763 ;;Total ram usage:        0 bytes
 10764 ;; Hardware stack levels used:    1
 10765 ;; Hardware stack levels required when called:    7
 10766 ;; This function calls:
 10767 ;;		_init_chopper
 10768 ;;		_start_relay_watchdog
 10769 ;; This function is called by:
 10770 ;;		_uart_task
 10771 ;;		_ApplicationInit
 10772 ;; This function uses a non-reentrant model
 10773 ;;
 10774                           
 10775                           
 10776                           ;psect for function _start_chopper
 10777  1510                     _start_chopper:	
 10778                           
 10779                           ;vcontrol.c: 226:     if( chopper_active == 1 )
 10780                           
 10781                           ;incstack = 0
 10782                           ; Regs used in _start_chopper: [wreg+status,2+status,0+pclath+cstack]
 10783  1510  0020               	movlb	0	; select bank0
 10784  1511  0331               	decf	_chopper_active,w
 10785  1512  1903               	btfsc	3,2
 10786  1513  0008               	return
 10787                           
 10788                           ;vcontrol.c: 229:     start_relay_watchdog();
 10789  1514  3193  23B6  3195   	fcall	_start_relay_watchdog
 10790                           
 10791                           ;vcontrol.c: 231:     TRISAbits.TRISA5 = 0;
 10792  1517  0021               	movlb	1	; select bank1
 10793  1518  128C               	bcf	12,5	;volatile
 10794                           
 10795                           ;vcontrol.c: 232:     TRISAbits.TRISA4 = 0;
 10796  1519  120C               	bcf	12,4	;volatile
 10797                           
 10798                           ;vcontrol.c: 233:     pwm_duty = 0;
 10799  151A  0020               	movlb	0	; select bank0
 10800  151B  01A6               	clrf	_pwm_duty
 10801  151C  01A7               	clrf	_pwm_duty+1
 10802                           
 10803                           ;vcontrol.c: 234:     current_duty = 0;
 10804  151D  01A2               	clrf	_current_duty
 10805  151E  01A3               	clrf	_current_duty+1
 10806                           
 10807                           ;vcontrol.c: 235:     target_duty = 0;
 10808  151F  01A4               	clrf	_target_duty
 10809  1520  01A5               	clrf	_target_duty+1
 10810                           
 10811                           ;vcontrol.c: 237:     if( init_required == 1 )
 10812  1521  0360               	decf	_init_required,w
 10813  1522  1D03               	btfss	3,2
 10814  1523  2D26               	goto	l4205
 10815                           
 10816                           ;vcontrol.c: 238:         init_chopper();
 10817  1524  3196  2659         	fcall	_init_chopper
 10818  1526                     l4205:	
 10819                           
 10820                           ;vcontrol.c: 240:     chopper_active = 1;
 10821  1526  0020               	movlb	0	; select bank0
 10822  1527  01B1               	clrf	_chopper_active
 10823  1528  0AB1               	incf	_chopper_active,f
 10824  1529  0008               	return
 10825  152A                     __end_of_start_chopper:	
 10826                           
 10827                           	psect	text32
 10828  13B6                     __ptext32:	
 10829 ;; *************** function _start_relay_watchdog *****************
 10830 ;; Defined at:
 10831 ;;		line 38 in file "SolidStateRelay.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;		None
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;		None
 10836 ;; Return value:  Size  Location     Type
 10837 ;;                  1    wreg      void 
 10838 ;; Registers used:
 10839 ;;		wreg, status,2, status,0
 10840 ;; Tracked objects:
 10841 ;;		On entry : 1F/0
 10842 ;;		On exit  : 1E/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;Total ram usage:        0 bytes
 10850 ;; Hardware stack levels used:    1
 10851 ;; Hardware stack levels required when called:    5
 10852 ;; This function calls:
 10853 ;;		Nothing
 10854 ;; This function is called by:
 10855 ;;		_start_chopper
 10856 ;; This function uses a non-reentrant model
 10857 ;;
 10858                           
 10859                           
 10860                           ;psect for function _start_relay_watchdog
 10861  13B6                     _start_relay_watchdog:	
 10862                           
 10863                           ;SolidStateRelay.c: 40:     if( st == SHUTDOWN )
 10864                           
 10865                           ;incstack = 0
 10866                           ; Regs used in _start_relay_watchdog: [wreg+status,2+status,0]
 10867  13B6  0829               	movf	SolidStateRelay@st,w
 10868  13B7  1D03               	btfss	3,2
 10869  13B8  0008               	return
 10870                           
 10871                           ;SolidStateRelay.c: 41:     {;SolidStateRelay.c: 42:         st = INIT;
 10872  13B9  01A9               	clrf	SolidStateRelay@st
 10873  13BA  0AA9               	incf	SolidStateRelay@st,f
 10874                           
 10875                           ;SolidStateRelay.c: 43:         st_act = RA_INIT;
 10876  13BB  0021               	movlb	1	; select bank1
 10877  13BC  01E7               	clrf	_st_act^(0+128)
 10878  13BD  0AE7               	incf	_st_act^(0+128),f
 10879  13BE  0008               	return
 10880  13BF                     __end_of_start_relay_watchdog:	
 10881                           
 10882                           	psect	text33
 10883  1659                     __ptext33:	
 10884 ;; *************** function _init_chopper *****************
 10885 ;; Defined at:
 10886 ;;		line 210 in file "vcontrol.c"
 10887 ;; Parameters:    Size  Location     Type
 10888 ;;		None
 10889 ;; Auto vars:     Size  Location     Type
 10890 ;;		None
 10891 ;; Return value:  Size  Location     Type
 10892 ;;                  1    wreg      void 
 10893 ;; Registers used:
 10894 ;;		wreg, status,2, status,0, pclath, cstack
 10895 ;; Tracked objects:
 10896 ;;		On entry : 1D/0
 10897 ;;		On exit  : 1D/0
 10898 ;;		Unchanged: 0/0
 10899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10904 ;;Total ram usage:        1 bytes
 10905 ;; Hardware stack levels used:    1
 10906 ;; Hardware stack levels required when called:    6
 10907 ;; This function calls:
 10908 ;;		_ADC_SelectChannel
 10909 ;;		_ADC_SetInterruptHandler
 10910 ;;		_ADC_StartConversion
 10911 ;;		_TMR2_SetInterruptHandler
 10912 ;;		_TMR2_StartTimer
 10913 ;; This function is called by:
 10914 ;;		_main
 10915 ;;		_start_chopper
 10916 ;; This function uses a non-reentrant model
 10917 ;;
 10918                           
 10919                           
 10920                           ;psect for function _init_chopper
 10921  1659                     _init_chopper:	
 10922                           
 10923                           ;vcontrol.c: 212:     if( init_required == 0 )
 10924                           
 10925                           ;incstack = 0
 10926                           ; Regs used in _init_chopper: [wreg+status,2+status,0+pclath+cstack]
 10927  1659  0020               	movlb	0	; select bank0
 10928  165A  0860               	movf	_init_required,w
 10929  165B  1903               	btfsc	3,2
 10930  165C  0008               	return
 10931                           
 10932                           ;vcontrol.c: 214:     init_required = 0;
 10933  165D  01E0               	clrf	_init_required
 10934                           
 10935                           ;vcontrol.c: 215:     ADC_SelectChannel(V_BUSDC);
 10936  165E  3007               	movlw	7
 10937  165F  3194  244C  3196   	fcall	_ADC_SelectChannel
 10938                           
 10939                           ;vcontrol.c: 216:     _delay((unsigned long)((1)*(16000000/4000.0)));
 10940  1662  3006               	movlw	6
 10941  1663  0020               	movlb	0	; select bank0
 10942  1664  00CF               	movwf	??_init_chopper
 10943  1665  3030               	movlw	48
 10944  1666                     u3547:	
 10945  1666  0B89               	decfsz	9,f
 10946  1667  2E66               	goto	u3547
 10947  1668  0BCF               	decfsz	??_init_chopper,f
 10948  1669  2E66               	goto	u3547
 10949  166A  0000               	nop
 10950                           
 10951                           ;vcontrol.c: 217:     ADC_StartConversion();
 10952  166B  3193  2312  3196   	fcall	_ADC_StartConversion
 10953                           
 10954                           ;vcontrol.c: 218:     TMR2_StartTimer();
 10955  166E  3193  2315  3196   	fcall	_TMR2_StartTimer
 10956                           
 10957                           ;vcontrol.c: 220:     TMR2_SetInterruptHandler(TMR2_DutyControlHandler_ISR);
 10958  1671  30BC               	movlw	low _TMR2_DutyControlHandler_ISR
 10959  1672  00CD               	movwf	TMR2_SetInterruptHandler@InterruptHandler
 10960  1673  3017               	movlw	high _TMR2_DutyControlHandler_ISR
 10961  1674  00CE               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
 10962  1675  3193  236D  3196   	fcall	_TMR2_SetInterruptHandler
 10963                           
 10964                           ;vcontrol.c: 221:     ADC_SetInterruptHandler(ADC_VoltageControlHandler_ISR);
 10965  1678  304A               	movlw	low _ADC_VoltageControlHandler_ISR
 10966  1679  0020               	movlb	0	; select bank0
 10967  167A  00CD               	movwf	ADC_SetInterruptHandler@InterruptHandler
 10968  167B  300A               	movlw	high _ADC_VoltageControlHandler_ISR
 10969  167C  00CE               	movwf	ADC_SetInterruptHandler@InterruptHandler+1
 10970  167D  3193  2365         	fcall	_ADC_SetInterruptHandler
 10971  167F  0008               	return
 10972  1680                     __end_of_init_chopper:	
 10973                           
 10974                           	psect	text34
 10975  1315                     __ptext34:	
 10976 ;; *************** function _TMR2_StartTimer *****************
 10977 ;; Defined at:
 10978 ;;		line 87 in file "mcc_generated_files/tmr2.c"
 10979 ;; Parameters:    Size  Location     Type
 10980 ;;		None
 10981 ;; Auto vars:     Size  Location     Type
 10982 ;;		None
 10983 ;; Return value:  Size  Location     Type
 10984 ;;                  1    wreg      void 
 10985 ;; Registers used:
 10986 ;;		None
 10987 ;; Tracked objects:
 10988 ;;		On entry : 1F/1
 10989 ;;		On exit  : 1F/0
 10990 ;;		Unchanged: 0/0
 10991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10996 ;;Total ram usage:        0 bytes
 10997 ;; Hardware stack levels used:    1
 10998 ;; Hardware stack levels required when called:    5
 10999 ;; This function calls:
 11000 ;;		Nothing
 11001 ;; This function is called by:
 11002 ;;		_init_chopper
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           
 11007                           ;psect for function _TMR2_StartTimer
 11008  1315                     _TMR2_StartTimer:	
 11009                           
 11010                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
 11011                           
 11012                           ;incstack = 0
 11013                           ; Regs used in _TMR2_StartTimer: []
 11014  1315  0020               	movlb	0	; select bank0
 11015  1316  151C               	bsf	28,2	;volatile
 11016  1317  0008               	return
 11017  1318                     __end_of_TMR2_StartTimer:	
 11018                           
 11019                           	psect	text35
 11020  136D                     __ptext35:	
 11021 ;; *************** function _TMR2_SetInterruptHandler *****************
 11022 ;; Defined at:
 11023 ;;		line 140 in file "mcc_generated_files/tmr2.c"
 11024 ;; Parameters:    Size  Location     Type
 11025 ;;  InterruptHan    2    9[BANK0 ] PTR FTN()void 
 11026 ;;		 -> TMR2_DutyControlHandler_ISR(1), TMR2_DefaultInterruptHandler(1), 
 11027 ;; Auto vars:     Size  Location     Type
 11028 ;;		None
 11029 ;; Return value:  Size  Location     Type
 11030 ;;                  1    wreg      void 
 11031 ;; Registers used:
 11032 ;;		wreg
 11033 ;; Tracked objects:
 11034 ;;		On entry : 1F/0
 11035 ;;		On exit  : 1F/2
 11036 ;;		Unchanged: 0/0
 11037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11038 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11041 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;Total ram usage:        2 bytes
 11043 ;; Hardware stack levels used:    1
 11044 ;; Hardware stack levels required when called:    5
 11045 ;; This function calls:
 11046 ;;		Nothing
 11047 ;; This function is called by:
 11048 ;;		_TMR2_Initialize
 11049 ;;		_init_chopper
 11050 ;; This function uses a non-reentrant model
 11051 ;;
 11052                           
 11053                           
 11054                           ;psect for function _TMR2_SetInterruptHandler
 11055  136D                     _TMR2_SetInterruptHandler:	
 11056                           
 11057                           ;mcc_generated_files/tmr2.c: 141:     TMR2_InterruptHandler = InterruptHandler;
 11058                           
 11059                           ;incstack = 0
 11060                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
 11061  136D  084E               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
 11062  136E  0022               	movlb	2	; select bank2
 11063  136F  00E1               	movwf	(_TMR2_InterruptHandler+1)^(0+256)
 11064  1370  0020               	movlb	0	; select bank0
 11065  1371  084D               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
 11066  1372  0022               	movlb	2	; select bank2
 11067  1373  00E0               	movwf	_TMR2_InterruptHandler^(0+256)
 11068  1374  0008               	return
 11069  1375                     __end_of_TMR2_SetInterruptHandler:	
 11070                           
 11071                           	psect	text36
 11072  1312                     __ptext36:	
 11073 ;; *************** function _ADC_StartConversion *****************
 11074 ;; Defined at:
 11075 ;;		line 101 in file "mcc_generated_files/adc.c"
 11076 ;; Parameters:    Size  Location     Type
 11077 ;;		None
 11078 ;; Auto vars:     Size  Location     Type
 11079 ;;		None
 11080 ;; Return value:  Size  Location     Type
 11081 ;;                  1    wreg      void 
 11082 ;; Registers used:
 11083 ;;		None
 11084 ;; Tracked objects:
 11085 ;;		On entry : 0/1
 11086 ;;		On exit  : 1F/1
 11087 ;;		Unchanged: 0/0
 11088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;Total ram usage:        0 bytes
 11094 ;; Hardware stack levels used:    1
 11095 ;; Hardware stack levels required when called:    5
 11096 ;; This function calls:
 11097 ;;		Nothing
 11098 ;; This function is called by:
 11099 ;;		_init_chopper
 11100 ;; This function uses a non-reentrant model
 11101 ;;
 11102                           
 11103                           
 11104                           ;psect for function _ADC_StartConversion
 11105  1312                     _ADC_StartConversion:	
 11106                           
 11107                           ;mcc_generated_files/adc.c: 104:     ADCON0bits.GO_nDONE = 1;
 11108                           
 11109                           ;incstack = 0
 11110                           ; Regs used in _ADC_StartConversion: []
 11111  1312  0021               	movlb	1	; select bank1
 11112  1313  149D               	bsf	29,1	;volatile
 11113  1314  0008               	return
 11114  1315                     __end_of_ADC_StartConversion:	
 11115                           
 11116                           	psect	text37
 11117  1365                     __ptext37:	
 11118 ;; *************** function _ADC_SetInterruptHandler *****************
 11119 ;; Defined at:
 11120 ;;		line 160 in file "mcc_generated_files/adc.c"
 11121 ;; Parameters:    Size  Location     Type
 11122 ;;  InterruptHan    2    9[BANK0 ] PTR FTN()void 
 11123 ;;		 -> ADC_VoltageControlHandler_ISR(1), ADC_DefaultInterruptHandler(1), 
 11124 ;; Auto vars:     Size  Location     Type
 11125 ;;		None
 11126 ;; Return value:  Size  Location     Type
 11127 ;;                  1    wreg      void 
 11128 ;; Registers used:
 11129 ;;		wreg
 11130 ;; Tracked objects:
 11131 ;;		On entry : 1F/0
 11132 ;;		On exit  : 1F/2
 11133 ;;		Unchanged: 0/0
 11134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11135 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11139 ;;Total ram usage:        2 bytes
 11140 ;; Hardware stack levels used:    1
 11141 ;; Hardware stack levels required when called:    5
 11142 ;; This function calls:
 11143 ;;		Nothing
 11144 ;; This function is called by:
 11145 ;;		_ADC_Initialize
 11146 ;;		_init_chopper
 11147 ;; This function uses a non-reentrant model
 11148 ;;
 11149                           
 11150                           
 11151                           ;psect for function _ADC_SetInterruptHandler
 11152  1365                     _ADC_SetInterruptHandler:	
 11153                           
 11154                           ;mcc_generated_files/adc.c: 161:     ADC_InterruptHandler = InterruptHandler;
 11155                           
 11156                           ;incstack = 0
 11157                           ; Regs used in _ADC_SetInterruptHandler: [wreg]
 11158  1365  084E               	movf	ADC_SetInterruptHandler@InterruptHandler+1,w
 11159  1366  0022               	movlb	2	; select bank2
 11160  1367  00DF               	movwf	(_ADC_InterruptHandler+1)^(0+256)
 11161  1368  0020               	movlb	0	; select bank0
 11162  1369  084D               	movf	ADC_SetInterruptHandler@InterruptHandler,w
 11163  136A  0022               	movlb	2	; select bank2
 11164  136B  00DE               	movwf	_ADC_InterruptHandler^(0+256)
 11165  136C  0008               	return
 11166  136D                     __end_of_ADC_SetInterruptHandler:	
 11167                           
 11168                           	psect	text38
 11169  144C                     __ptext38:	
 11170 ;; *************** function _ADC_SelectChannel *****************
 11171 ;; Defined at:
 11172 ;;		line 93 in file "mcc_generated_files/adc.c"
 11173 ;; Parameters:    Size  Location     Type
 11174 ;;  channel         1    wreg     enum E4137
 11175 ;; Auto vars:     Size  Location     Type
 11176 ;;  channel         1   10[BANK0 ] enum E4137
 11177 ;; Return value:  Size  Location     Type
 11178 ;;                  1    wreg      void 
 11179 ;; Registers used:
 11180 ;;		wreg, status,2, status,0
 11181 ;; Tracked objects:
 11182 ;;		On entry : 1F/0
 11183 ;;		On exit  : 1F/1
 11184 ;;		Unchanged: 0/0
 11185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11187 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11189 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11190 ;;Total ram usage:        2 bytes
 11191 ;; Hardware stack levels used:    1
 11192 ;; Hardware stack levels required when called:    5
 11193 ;; This function calls:
 11194 ;;		Nothing
 11195 ;; This function is called by:
 11196 ;;		_init_chopper
 11197 ;; This function uses a non-reentrant model
 11198 ;;
 11199                           
 11200                           
 11201                           ;psect for function _ADC_SelectChannel
 11202  144C                     _ADC_SelectChannel:	
 11203                           
 11204                           ;incstack = 0
 11205                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
 11206                           ;ADC_SelectChannel@channel stored from wreg
 11207  144C  00CE               	movwf	ADC_SelectChannel@channel
 11208                           
 11209                           ;mcc_generated_files/adc.c: 93: void ADC_SelectChannel(adc_channel_t channel);mcc_genera
      +                          ted_files/adc.c: 94: {;mcc_generated_files/adc.c: 96:     ADCON0bits.CHS = channel;
 11210  144D  084E               	movf	ADC_SelectChannel@channel,w
 11211  144E  00CD               	movwf	??_ADC_SelectChannel
 11212  144F  0DCD               	rlf	??_ADC_SelectChannel,f
 11213  1450  0DCD               	rlf	??_ADC_SelectChannel,f
 11214  1451  0021               	movlb	1	; select bank1
 11215  1452  081D               	movf	29,w	;volatile
 11216  1453  0020               	movlb	0	; select bank0
 11217  1454  064D               	xorwf	??_ADC_SelectChannel,w
 11218  1455  3983               	andlw	-125
 11219  1456  064D               	xorwf	??_ADC_SelectChannel,w
 11220  1457  0021               	movlb	1	; select bank1
 11221  1458  009D               	movwf	29	;volatile
 11222                           
 11223                           ;mcc_generated_files/adc.c: 98:     ADCON0bits.ADON = 1;
 11224  1459  141D               	bsf	29,0	;volatile
 11225  145A  0008               	return
 11226  145B                     __end_of_ADC_SelectChannel:	
 11227                           
 11228                           	psect	text39
 11229  1633                     __ptext39:	
 11230 ;; *************** function _set_vdc_speed *****************
 11231 ;; Defined at:
 11232 ;;		line 277 in file "vcontrol.c"
 11233 ;; Parameters:    Size  Location     Type
 11234 ;;  msDelay         2   17[BANK0 ] unsigned short 
 11235 ;; Auto vars:     Size  Location     Type
 11236 ;;		None
 11237 ;; Return value:  Size  Location     Type
 11238 ;;                  1    wreg      void 
 11239 ;; Registers used:
 11240 ;;		wreg, status,2, status,0, pclath, cstack
 11241 ;; Tracked objects:
 11242 ;;		On entry : 1F/0
 11243 ;;		On exit  : 1D/0
 11244 ;;		Unchanged: 0/0
 11245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11246 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11249 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;Total ram usage:        2 bytes
 11251 ;; Hardware stack levels used:    1
 11252 ;; Hardware stack levels required when called:    6
 11253 ;; This function calls:
 11254 ;;		___lwdiv
 11255 ;; This function is called by:
 11256 ;;		_uart_task
 11257 ;;		_ApplicationInit
 11258 ;; This function uses a non-reentrant model
 11259 ;;
 11260                           
 11261                           
 11262                           ;psect for function _set_vdc_speed
 11263  1633                     _set_vdc_speed:	
 11264                           
 11265                           ;vcontrol.c: 277: void set_vdc_speed(uint16_t msDelay);vcontrol.c: 278: {;vcontrol.c: 27
      +                          9:     if( msDelay == 0xFFFF )
 11266                           
 11267                           ;incstack = 0
 11268                           ; Regs used in _set_vdc_speed: [wreg+status,2+status,0+pclath+cstack]
 11269  1633  0A55               	incf	set_vdc_speed@msDelay,w
 11270  1634  1903               	btfsc	3,2
 11271  1635  0A56               	incf	set_vdc_speed@msDelay+1,w
 11272  1636  1903               	btfsc	3,2
 11273  1637  0008               	return
 11274                           
 11275                           ;vcontrol.c: 281:     if( msDelay > 25500 )
 11276  1638  3063               	movlw	99
 11277  1639  0256               	subwf	set_vdc_speed@msDelay+1,w
 11278  163A  309D               	movlw	157
 11279  163B  1903               	skipnz
 11280  163C  0255               	subwf	set_vdc_speed@msDelay,w
 11281  163D  1C03               	skipc
 11282  163E  2E44               	goto	l4239
 11283                           
 11284                           ;vcontrol.c: 282:         duty_count_up_max = 255;
 11285  163F  30FF               	movlw	255
 11286  1640  0022               	movlb	2	; select bank2
 11287  1641  00EE               	movwf	_duty_count_up_max^(0+256)
 11288  1642  3000               	movlw	0
 11289  1643  00EF               	movwf	(_duty_count_up_max^(0+256)+1)
 11290  1644                     l4239:	
 11291                           
 11292                           ;vcontrol.c: 283:     duty_count_up_max = msDelay/100 - 1;
 11293  1644  3064               	movlw	100
 11294  1645  0020               	movlb	0	; select bank0
 11295  1646  00CD               	movwf	___lwdiv@divisor
 11296  1647  3000               	movlw	0
 11297  1648  00CE               	movwf	___lwdiv@divisor+1
 11298  1649  0856               	movf	set_vdc_speed@msDelay+1,w
 11299  164A  00D0               	movwf	___lwdiv@dividend+1
 11300  164B  0855               	movf	set_vdc_speed@msDelay,w
 11301  164C  00CF               	movwf	___lwdiv@dividend
 11302  164D  3188  2074         	fcall	___lwdiv
 11303  164F  084D               	movf	?___lwdiv,w
 11304  1650  3EFF               	addlw	255
 11305  1651  0022               	movlb	2	; select bank2
 11306  1652  00EE               	movwf	_duty_count_up_max^(0+256)
 11307  1653  30FF               	movlw	255
 11308  1654  0020               	movlb	0	; select bank0
 11309  1655  3D4E               	addwfc	?___lwdiv+1,w
 11310  1656  0022               	movlb	2	; select bank2
 11311  1657  00EF               	movwf	(_duty_count_up_max+1)^(0+256)
 11312  1658  0008               	return
 11313  1659                     __end_of_set_vdc_speed:	
 11314                           
 11315                           	psect	text40
 11316  13FF                     __ptext40:	
 11317 ;; *************** function _set_vdc_min *****************
 11318 ;; Defined at:
 11319 ;;		line 262 in file "vcontrol.c"
 11320 ;; Parameters:    Size  Location     Type
 11321 ;;  vmin            2   12[BANK0 ] unsigned short 
 11322 ;; Auto vars:     Size  Location     Type
 11323 ;;		None
 11324 ;; Return value:  Size  Location     Type
 11325 ;;                  1    wreg      void 
 11326 ;; Registers used:
 11327 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11328 ;; Tracked objects:
 11329 ;;		On entry : 1F/0
 11330 ;;		On exit  : 1F/0
 11331 ;;		Unchanged: 0/0
 11332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11333 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11336 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11337 ;;Total ram usage:        3 bytes
 11338 ;; Hardware stack levels used:    1
 11339 ;; Hardware stack levels required when called:    6
 11340 ;; This function calls:
 11341 ;;		_set_vdc_threshold
 11342 ;; This function is called by:
 11343 ;;		_uart_task
 11344 ;;		_ApplicationInit
 11345 ;; This function uses a non-reentrant model
 11346 ;;
 11347                           
 11348                           
 11349                           ;psect for function _set_vdc_min
 11350  13FF                     _set_vdc_min:	
 11351                           
 11352                           ;vcontrol.c: 262: void set_vdc_min(uint16_t vmin);vcontrol.c: 263: {;vcontrol.c: 264:   
      +                            set_vdc_threshold(vmin,&vdc_min);
 11353                           
 11354                           ;incstack = 0
 11355                           ; Regs used in _set_vdc_min: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11356  13FF  0851               	movf	set_vdc_min@vmin+1,w
 11357  1400  00CE               	movwf	set_vdc_threshold@v_val+1
 11358  1401  0850               	movf	set_vdc_min@vmin,w
 11359  1402  00CD               	movwf	set_vdc_threshold@v_val
 11360  1403  3042               	movlw	(low (_vdc_min| 0))& (0+255)
 11361  1404  00D2               	movwf	??_set_vdc_min
 11362  1405  0852               	movf	??_set_vdc_min,w
 11363  1406  00CF               	movwf	set_vdc_threshold@v_target
 11364  1407  3195  257A         	fcall	_set_vdc_threshold
 11365  1409  0008               	return
 11366  140A                     __end_of_set_vdc_min:	
 11367                           
 11368                           	psect	text41
 11369  13F4                     __ptext41:	
 11370 ;; *************** function _set_vdc_max *****************
 11371 ;; Defined at:
 11372 ;;		line 267 in file "vcontrol.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;  vmax            2   12[BANK0 ] unsigned short 
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;		None
 11377 ;; Return value:  Size  Location     Type
 11378 ;;                  1    wreg      void 
 11379 ;; Registers used:
 11380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11381 ;; Tracked objects:
 11382 ;;		On entry : 1F/0
 11383 ;;		On exit  : 1F/0
 11384 ;;		Unchanged: 0/0
 11385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11386 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11388 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11389 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;Total ram usage:        3 bytes
 11391 ;; Hardware stack levels used:    1
 11392 ;; Hardware stack levels required when called:    6
 11393 ;; This function calls:
 11394 ;;		_set_vdc_threshold
 11395 ;; This function is called by:
 11396 ;;		_uart_task
 11397 ;;		_ApplicationInit
 11398 ;; This function uses a non-reentrant model
 11399 ;;
 11400                           
 11401                           
 11402                           ;psect for function _set_vdc_max
 11403  13F4                     _set_vdc_max:	
 11404                           
 11405                           ;vcontrol.c: 267: void set_vdc_max(uint16_t vmax);vcontrol.c: 268: {;vcontrol.c: 269:   
      +                            set_vdc_threshold(vmax,&vdc_max);
 11406                           
 11407                           ;incstack = 0
 11408                           ; Regs used in _set_vdc_max: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11409  13F4  0851               	movf	set_vdc_max@vmax+1,w
 11410  13F5  00CE               	movwf	set_vdc_threshold@v_val+1
 11411  13F6  0850               	movf	set_vdc_max@vmax,w
 11412  13F7  00CD               	movwf	set_vdc_threshold@v_val
 11413  13F8  3040               	movlw	(low (_vdc_max| 0))& (0+255)
 11414  13F9  00D2               	movwf	??_set_vdc_max
 11415  13FA  0852               	movf	??_set_vdc_max,w
 11416  13FB  00CF               	movwf	set_vdc_threshold@v_target
 11417  13FC  3195  257A         	fcall	_set_vdc_threshold
 11418  13FE  0008               	return
 11419  13FF                     __end_of_set_vdc_max:	
 11420                           
 11421                           	psect	text42
 11422  13E9                     __ptext42:	
 11423 ;; *************** function _set_vdc_critic *****************
 11424 ;; Defined at:
 11425 ;;		line 272 in file "vcontrol.c"
 11426 ;; Parameters:    Size  Location     Type
 11427 ;;  vc              2   12[BANK0 ] unsigned short 
 11428 ;; Auto vars:     Size  Location     Type
 11429 ;;		None
 11430 ;; Return value:  Size  Location     Type
 11431 ;;                  1    wreg      void 
 11432 ;; Registers used:
 11433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11434 ;; Tracked objects:
 11435 ;;		On entry : 1F/0
 11436 ;;		On exit  : 1F/0
 11437 ;;		Unchanged: 0/0
 11438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11439 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11441 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11442 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;Total ram usage:        3 bytes
 11444 ;; Hardware stack levels used:    1
 11445 ;; Hardware stack levels required when called:    6
 11446 ;; This function calls:
 11447 ;;		_set_vdc_threshold
 11448 ;; This function is called by:
 11449 ;;		_uart_task
 11450 ;;		_ApplicationInit
 11451 ;; This function uses a non-reentrant model
 11452 ;;
 11453                           
 11454                           
 11455                           ;psect for function _set_vdc_critic
 11456  13E9                     _set_vdc_critic:	
 11457                           
 11458                           ;vcontrol.c: 272: void set_vdc_critic(uint16_t vc);vcontrol.c: 273: {;vcontrol.c: 274:  
      +                             set_vdc_threshold(vc,&vdc_critic);
 11459                           
 11460                           ;incstack = 0
 11461                           ; Regs used in _set_vdc_critic: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11462  13E9  0851               	movf	set_vdc_critic@vc+1,w
 11463  13EA  00CE               	movwf	set_vdc_threshold@v_val+1
 11464  13EB  0850               	movf	set_vdc_critic@vc,w
 11465  13EC  00CD               	movwf	set_vdc_threshold@v_val
 11466  13ED  303E               	movlw	(low (_vdc_critic| 0))& (0+255)
 11467  13EE  00D2               	movwf	??_set_vdc_critic
 11468  13EF  0852               	movf	??_set_vdc_critic,w
 11469  13F0  00CF               	movwf	set_vdc_threshold@v_target
 11470  13F1  3195  257A         	fcall	_set_vdc_threshold
 11471  13F3  0008               	return
 11472  13F4                     __end_of_set_vdc_critic:	
 11473                           
 11474                           	psect	text43
 11475  157A                     __ptext43:	
 11476 ;; *************** function _set_vdc_threshold *****************
 11477 ;; Defined at:
 11478 ;;		line 195 in file "vcontrol.c"
 11479 ;; Parameters:    Size  Location     Type
 11480 ;;  v_val           2    9[BANK0 ] unsigned short 
 11481 ;;  v_target        1   11[BANK0 ] PTR unsigned short 
 11482 ;;		 -> vdc_critic(2), vdc_max(2), vdc_min(2), 
 11483 ;; Auto vars:     Size  Location     Type
 11484 ;;		None
 11485 ;; Return value:  Size  Location     Type
 11486 ;;                  1    wreg      void 
 11487 ;; Registers used:
 11488 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11489 ;; Tracked objects:
 11490 ;;		On entry : 1F/0
 11491 ;;		On exit  : 1F/0
 11492 ;;		Unchanged: 0/0
 11493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11494 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;Total ram usage:        3 bytes
 11499 ;; Hardware stack levels used:    1
 11500 ;; Hardware stack levels required when called:    5
 11501 ;; This function calls:
 11502 ;;		Nothing
 11503 ;; This function is called by:
 11504 ;;		_set_vdc_min
 11505 ;;		_set_vdc_max
 11506 ;;		_set_vdc_critic
 11507 ;; This function uses a non-reentrant model
 11508 ;;
 11509                           
 11510                           
 11511                           ;psect for function _set_vdc_threshold
 11512  157A                     _set_vdc_threshold:	
 11513                           
 11514                           ;vcontrol.c: 195: static void set_vdc_threshold(uint16_t v_val,uint16_t *v_target);vcont
      +                          rol.c: 196: {;vcontrol.c: 197:     if( v_val == 0xFFFF )
 11515                           
 11516                           ;incstack = 0
 11517                           ; Regs used in _set_vdc_threshold: [wreg+fsr1l+fsr1h+status,2+status,0]
 11518  157A  0A4D               	incf	set_vdc_threshold@v_val,w
 11519  157B  1903               	btfsc	3,2
 11520  157C  0A4E               	incf	set_vdc_threshold@v_val+1,w
 11521  157D  1903               	btfsc	3,2
 11522  157E  0008               	return
 11523                           
 11524                           ;vcontrol.c: 199:     if( v_val >= 800 )
 11525  157F  3003               	movlw	3
 11526  1580  024E               	subwf	set_vdc_threshold@v_val+1,w
 11527  1581  3020               	movlw	32
 11528  1582  1903               	skipnz
 11529  1583  024D               	subwf	set_vdc_threshold@v_val,w
 11530  1584  1C03               	skipc
 11531  1585  2D8E               	goto	l4085
 11532                           
 11533                           ;vcontrol.c: 200:         *v_target = 800;
 11534  1586  084F               	movf	set_vdc_threshold@v_target,w
 11535  1587  0086               	movwf	6
 11536  1588  0187               	clrf	7
 11537  1589  3020               	movlw	32
 11538  158A  3FC0               	movwi [0]fsr1
 11539  158B  3003               	movlw	3
 11540  158C  3FC1               	movwi [1]fsr1
 11541  158D  0008               	return
 11542  158E                     l4085:	
 11543                           
 11544                           ;vcontrol.c: 202:         *v_target = v_val;
 11545  158E  084F               	movf	set_vdc_threshold@v_target,w
 11546  158F  0086               	movwf	6
 11547  1590  0187               	clrf	7
 11548  1591  084D               	movf	set_vdc_threshold@v_val,w
 11549  1592  3FC0               	movwi [0]fsr1
 11550  1593  084E               	movf	set_vdc_threshold@v_val+1,w
 11551  1594  3FC1               	movwi [1]fsr1
 11552  1595  0008               	return
 11553  1596                     __end_of_set_vdc_threshold:	
 11554                           
 11555                           	psect	text44
 11556  16DB                     __ptext44:	
 11557 ;; *************** function _set_reset_duration *****************
 11558 ;; Defined at:
 11559 ;;		line 80 in file "SolidStateRelay.c"
 11560 ;; Parameters:    Size  Location     Type
 11561 ;;  reset_dur_ms    2   17[BANK0 ] unsigned short 
 11562 ;; Auto vars:     Size  Location     Type
 11563 ;;		None
 11564 ;; Return value:  Size  Location     Type
 11565 ;;                  1    wreg      void 
 11566 ;; Registers used:
 11567 ;;		wreg, status,2, status,0, pclath, cstack
 11568 ;; Tracked objects:
 11569 ;;		On entry : 1F/0
 11570 ;;		On exit  : 1E/0
 11571 ;;		Unchanged: 0/0
 11572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11573 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;Total ram usage:        2 bytes
 11578 ;; Hardware stack levels used:    1
 11579 ;; Hardware stack levels required when called:    6
 11580 ;; This function calls:
 11581 ;;		___lwdiv
 11582 ;;		_restart_relay_watchdog
 11583 ;; This function is called by:
 11584 ;;		_uart_task
 11585 ;;		_relay_watchdog_task
 11586 ;;		_ApplicationInit
 11587 ;; This function uses a non-reentrant model
 11588 ;;
 11589                           
 11590                           
 11591                           ;psect for function _set_reset_duration
 11592  16DB                     _set_reset_duration:	
 11593                           
 11594                           ;SolidStateRelay.c: 80: void set_reset_duration(uint16_t reset_dur_ms);SolidStateRelay.c
      +                          : 81: {;SolidStateRelay.c: 82:     if( reset_dur_ms == 0xFFFF )
 11595                           
 11596                           ;incstack = 0
 11597                           ; Regs used in _set_reset_duration: [wreg+status,2+status,0+pclath+cstack]
 11598  16DB  0A55               	incf	set_reset_duration@reset_dur_ms,w
 11599  16DC  1903               	btfsc	3,2
 11600  16DD  0A56               	incf	set_reset_duration@reset_dur_ms+1,w
 11601  16DE  1903               	btfsc	3,2
 11602  16DF  0008               	return
 11603                           
 11604                           ;SolidStateRelay.c: 84:     if( reset_dur_ms > 25500 )
 11605  16E0  3063               	movlw	99
 11606  16E1  0256               	subwf	set_reset_duration@reset_dur_ms+1,w
 11607  16E2  309D               	movlw	157
 11608  16E3  1903               	skipnz
 11609  16E4  0255               	subwf	set_reset_duration@reset_dur_ms,w
 11610  16E5  1C03               	skipc
 11611  16E6  2EED               	goto	l4297
 11612                           
 11613                           ;SolidStateRelay.c: 85:         reset_duration = 25500;
 11614  16E7  309C               	movlw	156
 11615  16E8  0022               	movlb	2	; select bank2
 11616  16E9  00CE               	movwf	_reset_duration^(0+256)
 11617  16EA  3063               	movlw	99
 11618  16EB  00CF               	movwf	(_reset_duration^(0+256)+1)
 11619  16EC  2EF4               	goto	l4299
 11620  16ED                     l4297:	
 11621                           
 11622                           ;SolidStateRelay.c: 87:         reset_duration = reset_dur_ms;
 11623  16ED  0856               	movf	set_reset_duration@reset_dur_ms+1,w
 11624  16EE  0022               	movlb	2	; select bank2
 11625  16EF  00CF               	movwf	(_reset_duration+1)^(0+256)
 11626  16F0  0020               	movlb	0	; select bank0
 11627  16F1  0855               	movf	set_reset_duration@reset_dur_ms,w
 11628  16F2  0022               	movlb	2	; select bank2
 11629  16F3  00CE               	movwf	_reset_duration^(0+256)
 11630  16F4                     l4299:	
 11631                           
 11632                           ;SolidStateRelay.c: 91:     reset_duration_ms = reset_duration/100;
 11633  16F4  3064               	movlw	100
 11634  16F5  0020               	movlb	0	; select bank0
 11635  16F6  00CD               	movwf	___lwdiv@divisor
 11636  16F7  3000               	movlw	0
 11637  16F8  00CE               	movwf	___lwdiv@divisor+1
 11638  16F9  0022               	movlb	2	; select bank2
 11639  16FA  084F               	movf	(_reset_duration+1)^(0+256),w
 11640  16FB  0020               	movlb	0	; select bank0
 11641  16FC  00D0               	movwf	___lwdiv@dividend+1
 11642  16FD  0022               	movlb	2	; select bank2
 11643  16FE  084E               	movf	_reset_duration^(0+256),w
 11644  16FF  0020               	movlb	0	; select bank0
 11645  1700  00CF               	movwf	___lwdiv@dividend
 11646  1701  3188  2074  3196   	fcall	___lwdiv
 11647  1704  084E               	movf	?___lwdiv+1,w
 11648  1705  0022               	movlb	2	; select bank2
 11649  1706  00E9               	movwf	(_reset_duration_ms+1)^(0+256)
 11650  1707  0020               	movlb	0	; select bank0
 11651  1708  084D               	movf	?___lwdiv,w
 11652  1709  0022               	movlb	2	; select bank2
 11653  170A  00E8               	movwf	_reset_duration_ms^(0+256)
 11654                           
 11655                           ;SolidStateRelay.c: 93:     restart_relay_watchdog();
 11656  170B  3193  23BF         	fcall	_restart_relay_watchdog
 11657  170D  0008               	return
 11658  170E                     __end_of_set_reset_duration:	
 11659                           
 11660                           	psect	text45
 11661  0874                     __ptext45:	
 11662 ;; *************** function ___lwdiv *****************
 11663 ;; Defined at:
 11664 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwdiv.c"
 11665 ;; Parameters:    Size  Location     Type
 11666 ;;  divisor         2    9[BANK0 ] unsigned int 
 11667 ;;  dividend        2   11[BANK0 ] unsigned int 
 11668 ;; Auto vars:     Size  Location     Type
 11669 ;;  quotient        2   15[BANK0 ] unsigned int 
 11670 ;;  counter         1   14[BANK0 ] unsigned char 
 11671 ;; Return value:  Size  Location     Type
 11672 ;;                  2    9[BANK0 ] unsigned int 
 11673 ;; Registers used:
 11674 ;;		wreg, status,2, status,0
 11675 ;; Tracked objects:
 11676 ;;		On entry : 1F/0
 11677 ;;		On exit  : 1F/0
 11678 ;;		Unchanged: 0/0
 11679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11680 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11681 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11683 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11684 ;;Total ram usage:        8 bytes
 11685 ;; Hardware stack levels used:    1
 11686 ;; Hardware stack levels required when called:    5
 11687 ;; This function calls:
 11688 ;;		Nothing
 11689 ;; This function is called by:
 11690 ;;		_set_vdc_speed
 11691 ;;		_set_reset_duration
 11692 ;; This function uses a non-reentrant model
 11693 ;;
 11694                           
 11695                           
 11696                           ;psect for function ___lwdiv
 11697  0874                     ___lwdiv:	
 11698                           
 11699                           ;incstack = 0
 11700                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11701  0874  01D3               	clrf	___lwdiv@quotient
 11702  0875  01D4               	clrf	___lwdiv@quotient+1
 11703  0876  084D               	movf	___lwdiv@divisor,w
 11704  0877  044E               	iorwf	___lwdiv@divisor+1,w
 11705  0878  1903               	btfsc	3,2
 11706  0879  28A3               	goto	l4137
 11707  087A  01D2               	clrf	___lwdiv@counter
 11708  087B  0AD2               	incf	___lwdiv@counter,f
 11709  087C                     l4125:	
 11710  087C  1BCE               	btfsc	___lwdiv@divisor+1,7
 11711  087D  2888               	goto	l4127
 11712  087E  3001               	movlw	1
 11713  087F                     u2825:	
 11714  087F  35CD               	lslf	___lwdiv@divisor,f
 11715  0880  0DCE               	rlf	___lwdiv@divisor+1,f
 11716  0881  0B89               	decfsz	9,f
 11717  0882  287F               	goto	u2825
 11718  0883  3001               	movlw	1
 11719  0884  00D1               	movwf	??___lwdiv
 11720  0885  0851               	movf	??___lwdiv,w
 11721  0886  07D2               	addwf	___lwdiv@counter,f
 11722  0887  287C               	goto	l4125
 11723  0888                     l4127:	
 11724  0888  3001               	movlw	1
 11725  0889                     u2845:	
 11726  0889  35D3               	lslf	___lwdiv@quotient,f
 11727  088A  0DD4               	rlf	___lwdiv@quotient+1,f
 11728  088B  0B89               	decfsz	9,f
 11729  088C  2889               	goto	u2845
 11730  088D  084E               	movf	___lwdiv@divisor+1,w
 11731  088E  0250               	subwf	___lwdiv@dividend+1,w
 11732  088F  1D03               	skipz
 11733  0890  2893               	goto	u2855
 11734  0891  084D               	movf	___lwdiv@divisor,w
 11735  0892  024F               	subwf	___lwdiv@dividend,w
 11736  0893                     u2855:	
 11737  0893  1C03               	skipc
 11738  0894  289A               	goto	l4133
 11739  0895  084D               	movf	___lwdiv@divisor,w
 11740  0896  02CF               	subwf	___lwdiv@dividend,f
 11741  0897  084E               	movf	___lwdiv@divisor+1,w
 11742  0898  3BD0               	subwfb	___lwdiv@dividend+1,f
 11743  0899  1453               	bsf	___lwdiv@quotient,0
 11744  089A                     l4133:	
 11745  089A  3001               	movlw	1
 11746  089B                     u2865:	
 11747  089B  36CE               	lsrf	___lwdiv@divisor+1,f
 11748  089C  0CCD               	rrf	___lwdiv@divisor,f
 11749  089D  0B89               	decfsz	9,f
 11750  089E  289B               	goto	u2865
 11751  089F  3001               	movlw	1
 11752  08A0  02D2               	subwf	___lwdiv@counter,f
 11753  08A1  1D03               	btfss	3,2
 11754  08A2  2888               	goto	l4127
 11755  08A3                     l4137:	
 11756  08A3  0854               	movf	___lwdiv@quotient+1,w
 11757  08A4  00CE               	movwf	?___lwdiv+1
 11758  08A5  0853               	movf	___lwdiv@quotient,w
 11759  08A6  00CD               	movwf	?___lwdiv
 11760  08A7  0008               	return
 11761  08A8                     __end_of___lwdiv:	
 11762                           
 11763                           	psect	text46
 11764  14F8                     __ptext46:	
 11765 ;; *************** function _set_relay_reset_voltage *****************
 11766 ;; Defined at:
 11767 ;;		line 68 in file "SolidStateRelay.c"
 11768 ;; Parameters:    Size  Location     Type
 11769 ;;  relay_vthres    2    9[BANK0 ] unsigned short 
 11770 ;; Auto vars:     Size  Location     Type
 11771 ;;		None
 11772 ;; Return value:  Size  Location     Type
 11773 ;;                  1    wreg      void 
 11774 ;; Registers used:
 11775 ;;		wreg, status,2, status,0, pclath, cstack
 11776 ;; Tracked objects:
 11777 ;;		On entry : 1F/0
 11778 ;;		On exit  : 1E/0
 11779 ;;		Unchanged: 0/0
 11780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11781 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11784 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11785 ;;Total ram usage:        2 bytes
 11786 ;; Hardware stack levels used:    1
 11787 ;; Hardware stack levels required when called:    6
 11788 ;; This function calls:
 11789 ;;		_restart_relay_watchdog
 11790 ;; This function is called by:
 11791 ;;		_uart_task
 11792 ;;		_ApplicationInit
 11793 ;; This function uses a non-reentrant model
 11794 ;;
 11795                           
 11796                           
 11797                           ;psect for function _set_relay_reset_voltage
 11798  14F8                     _set_relay_reset_voltage:	
 11799                           
 11800                           ;SolidStateRelay.c: 68: void set_relay_reset_voltage(uint16_t relay_vthres);SolidStateRe
      +                          lay.c: 69: {;SolidStateRelay.c: 70:     if( relay_vthres == 0xFFFF )
 11801                           
 11802                           ;incstack = 0
 11803                           ; Regs used in _set_relay_reset_voltage: [wreg+status,2+status,0+pclath+cstack]
 11804  14F8  0A4D               	incf	set_relay_reset_voltage@relay_vthres,w
 11805  14F9  1903               	btfsc	3,2
 11806  14FA  0A4E               	incf	set_relay_reset_voltage@relay_vthres+1,w
 11807  14FB  1903               	btfsc	3,2
 11808  14FC  0008               	return
 11809                           
 11810                           ;SolidStateRelay.c: 72:     if( relay_vthres > 800 )
 11811  14FD  3003               	movlw	3
 11812  14FE  024E               	subwf	set_relay_reset_voltage@relay_vthres+1,w
 11813  14FF  3021               	movlw	33
 11814  1500  1903               	skipnz
 11815  1501  024D               	subwf	set_relay_reset_voltage@relay_vthres,w
 11816  1502  1C03               	skipc
 11817  1503  2D09               	goto	l4285
 11818                           
 11819                           ;SolidStateRelay.c: 73:         relay_reset_voltage = 800;
 11820  1504  3020               	movlw	32
 11821  1505  00A0               	movwf	_relay_reset_voltage
 11822  1506  3003               	movlw	3
 11823  1507  00A1               	movwf	_relay_reset_voltage+1
 11824  1508  2D0D               	goto	l4287
 11825  1509                     l4285:	
 11826                           
 11827                           ;SolidStateRelay.c: 75:         relay_reset_voltage = relay_vthres;
 11828  1509  084E               	movf	set_relay_reset_voltage@relay_vthres+1,w
 11829  150A  00A1               	movwf	_relay_reset_voltage+1
 11830  150B  084D               	movf	set_relay_reset_voltage@relay_vthres,w
 11831  150C  00A0               	movwf	_relay_reset_voltage
 11832  150D                     l4287:	
 11833                           
 11834                           ;SolidStateRelay.c: 77:     restart_relay_watchdog();
 11835  150D  3193  23BF         	fcall	_restart_relay_watchdog
 11836  150F  0008               	return
 11837  1510                     __end_of_set_relay_reset_voltage:	
 11838                           
 11839                           	psect	text47
 11840  13BF                     __ptext47:	
 11841 ;; *************** function _restart_relay_watchdog *****************
 11842 ;; Defined at:
 11843 ;;		line 59 in file "SolidStateRelay.c"
 11844 ;; Parameters:    Size  Location     Type
 11845 ;;		None
 11846 ;; Auto vars:     Size  Location     Type
 11847 ;;		None
 11848 ;; Return value:  Size  Location     Type
 11849 ;;                  1    wreg      void 
 11850 ;; Registers used:
 11851 ;;		wreg, status,2, status,0
 11852 ;; Tracked objects:
 11853 ;;		On entry : 1D/2
 11854 ;;		On exit  : 1E/0
 11855 ;;		Unchanged: 0/0
 11856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11861 ;;Total ram usage:        0 bytes
 11862 ;; Hardware stack levels used:    1
 11863 ;; Hardware stack levels required when called:    5
 11864 ;; This function calls:
 11865 ;;		Nothing
 11866 ;; This function is called by:
 11867 ;;		_set_relay_reset_voltage
 11868 ;;		_set_reset_duration
 11869 ;; This function uses a non-reentrant model
 11870 ;;
 11871                           
 11872                           
 11873                           ;psect for function _restart_relay_watchdog
 11874  13BF                     _restart_relay_watchdog:	
 11875                           
 11876                           ;SolidStateRelay.c: 61:     if( st != SHUTDOWN )
 11877                           
 11878                           ;incstack = 0
 11879                           ; Regs used in _restart_relay_watchdog: [wreg+status,2+status,0]
 11880  13BF  0020               	movlb	0	; select bank0
 11881  13C0  0829               	movf	SolidStateRelay@st,w
 11882  13C1  1903               	btfsc	3,2
 11883  13C2  0008               	return
 11884                           
 11885                           ;SolidStateRelay.c: 62:     {;SolidStateRelay.c: 63:         st = INIT;
 11886  13C3  01A9               	clrf	SolidStateRelay@st
 11887  13C4  0AA9               	incf	SolidStateRelay@st,f
 11888                           
 11889                           ;SolidStateRelay.c: 64:         st_act = RA_INIT;
 11890  13C5  0021               	movlb	1	; select bank1
 11891  13C6  01E7               	clrf	_st_act^(0+128)
 11892  13C7  0AE7               	incf	_st_act^(0+128),f
 11893  13C8  0008               	return
 11894  13C9                     __end_of_restart_relay_watchdog:	
 11895                           
 11896                           	psect	text48
 11897  145B                     __ptext48:	
 11898 ;; *************** function _set_relay_activation_counter *****************
 11899 ;; Defined at:
 11900 ;;		line 116 in file "SolidStateRelay.c"
 11901 ;; Parameters:    Size  Location     Type
 11902 ;;  act_count       4    9[BANK0 ] unsigned long 
 11903 ;; Auto vars:     Size  Location     Type
 11904 ;;		None
 11905 ;; Return value:  Size  Location     Type
 11906 ;;                  1    wreg      void 
 11907 ;; Registers used:
 11908 ;;		wreg
 11909 ;; Tracked objects:
 11910 ;;		On entry : 1F/0
 11911 ;;		On exit  : 1F/2
 11912 ;;		Unchanged: 0/0
 11913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11914 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;Total ram usage:        4 bytes
 11919 ;; Hardware stack levels used:    1
 11920 ;; Hardware stack levels required when called:    5
 11921 ;; This function calls:
 11922 ;;		Nothing
 11923 ;; This function is called by:
 11924 ;;		_ApplicationInit
 11925 ;; This function uses a non-reentrant model
 11926 ;;
 11927                           
 11928                           
 11929                           ;psect for function _set_relay_activation_counter
 11930  145B                     _set_relay_activation_counter:	
 11931                           
 11932                           ;SolidStateRelay.c: 116: void set_relay_activation_counter(uint32_t act_count);SolidStat
      +                          eRelay.c: 117: {;SolidStateRelay.c: 118:     activation_counter = act_count;
 11933                           
 11934                           ;incstack = 0
 11935                           ; Regs used in _set_relay_activation_counter: [wreg]
 11936  145B  0850               	movf	set_relay_activation_counter@act_count+3,w
 11937  145C  0022               	movlb	2	; select bank2
 11938  145D  00CB               	movwf	(_activation_counter+3)^(0+256)
 11939  145E  0020               	movlb	0	; select bank0
 11940  145F  084F               	movf	set_relay_activation_counter@act_count+2,w
 11941  1460  0022               	movlb	2	; select bank2
 11942  1461  00CA               	movwf	(_activation_counter+2)^(0+256)
 11943  1462  0020               	movlb	0	; select bank0
 11944  1463  084E               	movf	set_relay_activation_counter@act_count+1,w
 11945  1464  0022               	movlb	2	; select bank2
 11946  1465  00C9               	movwf	(_activation_counter+1)^(0+256)
 11947  1466  0020               	movlb	0	; select bank0
 11948  1467  084D               	movf	set_relay_activation_counter@act_count,w
 11949  1468  0022               	movlb	2	; select bank2
 11950  1469  00C8               	movwf	_activation_counter^(0+256)
 11951  146A  0008               	return
 11952  146B                     __end_of_set_relay_activation_counter:	
 11953                           
 11954                           	psect	text49
 11955  0960                     __ptext49:	
 11956 ;; *************** function _save_to_flash *****************
 11957 ;; Defined at:
 11958 ;;		line 286 in file "vcontrol.c"
 11959 ;; Parameters:    Size  Location     Type
 11960 ;;		None
 11961 ;; Auto vars:     Size  Location     Type
 11962 ;;  buff           64    0[BANK1 ] unsigned short [32]
 11963 ;;  activation_c    4   64[BANK1 ] unsigned long 
 11964 ;; Return value:  Size  Location     Type
 11965 ;;                  1    wreg      void 
 11966 ;; Registers used:
 11967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11968 ;; Tracked objects:
 11969 ;;		On entry : 1D/0
 11970 ;;		On exit  : 1F/0
 11971 ;;		Unchanged: 0/0
 11972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11974 ;;      Locals:         0       0      68       0       0       0       0       0       0       0       0       0       
      +0       0
 11975 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11976 ;;      Totals:         0       1      68       0       0       0       0       0       0       0       0       0       
      +0       0
 11977 ;;Total ram usage:       69 bytes
 11978 ;; Hardware stack levels used:    1
 11979 ;; Hardware stack levels required when called:    7
 11980 ;; This function calls:
 11981 ;;		_FLASH_WriteBlock
 11982 ;;		_get_relay_activation_counter
 11983 ;;		_get_relay_reset_voltage
 11984 ;;		_get_reset_duration
 11985 ;;		_get_vdc_speed
 11986 ;; This function is called by:
 11987 ;;		_uart_task
 11988 ;;		_relay_watchdog_record_activations_task
 11989 ;;		_ApplicationInit
 11990 ;; This function uses a non-reentrant model
 11991 ;;
 11992                           
 11993                           
 11994                           ;psect for function _save_to_flash
 11995  0960                     _save_to_flash:	
 11996                           
 11997                           ;vcontrol.c: 288:     uint16_t buff[32];;vcontrol.c: 289:     if( chopper_active == 1 )
 11998                           
 11999                           ;incstack = 0
 12000                           ; Regs used in _save_to_flash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12001  0960  0020               	movlb	0	; select bank0
 12002  0961  0331               	decf	_chopper_active,w
 12003  0962  1D03               	btfss	3,2
 12004  0963  2969               	goto	l4245
 12005                           
 12006                           ;vcontrol.c: 290:         buff[0] = 0x0ABC;
 12007  0964  30BC               	movlw	188
 12008  0965  0021               	movlb	1	; select bank1
 12009  0966  00A0               	movwf	save_to_flash@buff^(0+128)
 12010  0967  300A               	movlw	10
 12011  0968  296D               	goto	L2
 12012  0969                     l4245:	
 12013                           
 12014                           ;vcontrol.c: 292:         buff[0] = 0x0CBA;
 12015  0969  30BA               	movlw	186
 12016  096A  0021               	movlb	1	; select bank1
 12017  096B  00A0               	movwf	save_to_flash@buff^(0+128)
 12018  096C  300C               	movlw	12
 12019  096D                     L2:	
 12020  096D  00A1               	movwf	(save_to_flash@buff^(0+128)+1)
 12021                           
 12022                           ;vcontrol.c: 293:     buff[1] = vdc_min;
 12023  096E  0020               	movlb	0	; select bank0
 12024  096F  0843               	movf	_vdc_min+1,w
 12025  0970  0021               	movlb	1	; select bank1
 12026  0971  00A3               	movwf	((save_to_flash@buff+1)^(0+128)+2)
 12027  0972  0020               	movlb	0	; select bank0
 12028  0973  0842               	movf	_vdc_min,w
 12029  0974  0021               	movlb	1	; select bank1
 12030  0975  00A2               	movwf	(save_to_flash@buff^(0+128)+2)
 12031                           
 12032                           ;vcontrol.c: 294:     buff[2] = vdc_max;
 12033  0976  0020               	movlb	0	; select bank0
 12034  0977  0841               	movf	_vdc_max+1,w
 12035  0978  0021               	movlb	1	; select bank1
 12036  0979  00A5               	movwf	((save_to_flash@buff+1)^(0+128)+4)
 12037  097A  0020               	movlb	0	; select bank0
 12038  097B  0840               	movf	_vdc_max,w
 12039  097C  0021               	movlb	1	; select bank1
 12040  097D  00A4               	movwf	(save_to_flash@buff^(0+128)+4)
 12041                           
 12042                           ;vcontrol.c: 295:     buff[3] = vdc_critic;
 12043  097E  0020               	movlb	0	; select bank0
 12044  097F  083F               	movf	_vdc_critic+1,w
 12045  0980  0021               	movlb	1	; select bank1
 12046  0981  00A7               	movwf	((save_to_flash@buff+1)^(0+128)+6)
 12047  0982  0020               	movlb	0	; select bank0
 12048  0983  083E               	movf	_vdc_critic,w
 12049  0984  0021               	movlb	1	; select bank1
 12050  0985  00A6               	movwf	(save_to_flash@buff^(0+128)+6)
 12051                           
 12052                           ;vcontrol.c: 296:     buff[4] = get_vdc_speed();
 12053  0986  3194  249F  3189   	fcall	_get_vdc_speed
 12054  0989  0854               	movf	?_get_vdc_speed+1,w
 12055  098A  0021               	movlb	1	; select bank1
 12056  098B  00A9               	movwf	((save_to_flash@buff+1)^(0+128)+8)
 12057  098C  0020               	movlb	0	; select bank0
 12058  098D  0853               	movf	?_get_vdc_speed,w
 12059  098E  0021               	movlb	1	; select bank1
 12060  098F  00A8               	movwf	(save_to_flash@buff^(0+128)+8)
 12061                           
 12062                           ;vcontrol.c: 297:     buff[5] = get_relay_reset_voltage();
 12063  0990  3193  2341  3189   	fcall	_get_relay_reset_voltage
 12064  0993  084E               	movf	?_get_relay_reset_voltage+1,w
 12065  0994  0021               	movlb	1	; select bank1
 12066  0995  00AB               	movwf	((save_to_flash@buff+1)^(0+128)+10)
 12067  0996  0020               	movlb	0	; select bank0
 12068  0997  084D               	movf	?_get_relay_reset_voltage,w
 12069  0998  0021               	movlb	1	; select bank1
 12070  0999  00AA               	movwf	(save_to_flash@buff^(0+128)+10)
 12071                           
 12072                           ;vcontrol.c: 298:     buff[6] = get_reset_duration();
 12073  099A  3193  23AD  3189   	fcall	_get_reset_duration
 12074  099D  084E               	movf	?_get_reset_duration+1,w
 12075  099E  0021               	movlb	1	; select bank1
 12076  099F  00AD               	movwf	((save_to_flash@buff+1)^(0+128)+12)
 12077  09A0  0020               	movlb	0	; select bank0
 12078  09A1  084D               	movf	?_get_reset_duration,w
 12079  09A2  0021               	movlb	1	; select bank1
 12080  09A3  00AC               	movwf	(save_to_flash@buff^(0+128)+12)
 12081                           
 12082                           ;vcontrol.c: 300:     uint32_t activation_counter = get_relay_activation_counter();
 12083  09A4  3194  246B  3189   	fcall	_get_relay_activation_counter
 12084  09A7  0850               	movf	?_get_relay_activation_counter+3,w
 12085  09A8  0021               	movlb	1	; select bank1
 12086  09A9  00E3               	movwf	(save_to_flash@activation_counter+3)^(0+128)
 12087  09AA  0020               	movlb	0	; select bank0
 12088  09AB  084F               	movf	?_get_relay_activation_counter+2,w
 12089  09AC  0021               	movlb	1	; select bank1
 12090  09AD  00E2               	movwf	(save_to_flash@activation_counter+2)^(0+128)
 12091  09AE  0020               	movlb	0	; select bank0
 12092  09AF  084E               	movf	?_get_relay_activation_counter+1,w
 12093  09B0  0021               	movlb	1	; select bank1
 12094  09B1  00E1               	movwf	(save_to_flash@activation_counter+1)^(0+128)
 12095  09B2  0020               	movlb	0	; select bank0
 12096  09B3  084D               	movf	?_get_relay_activation_counter,w
 12097  09B4  0021               	movlb	1	; select bank1
 12098  09B5  00E0               	movwf	save_to_flash@activation_counter^(0+128)
 12099                           
 12100                           ;vcontrol.c: 301:     buff[7] = (activation_counter>>16) & 0xFFFF;
 12101  09B6  0863               	movf	((save_to_flash@activation_counter+1)^(0+128)+2),w
 12102  09B7  00AF               	movwf	((save_to_flash@buff+1)^(0+128)+14)
 12103  09B8  0862               	movf	(save_to_flash@activation_counter^(0+128)+2),w
 12104  09B9  00AE               	movwf	(save_to_flash@buff^(0+128)+14)
 12105                           
 12106                           ;vcontrol.c: 302:     buff[8] = activation_counter & 0xFFFF;
 12107  09BA  0861               	movf	(save_to_flash@activation_counter+1)^(0+128),w
 12108  09BB  00B1               	movwf	((save_to_flash@buff+1)^(0+128)+16)
 12109  09BC  0860               	movf	save_to_flash@activation_counter^(0+128),w
 12110  09BD  00B0               	movwf	(save_to_flash@buff^(0+128)+16)
 12111                           
 12112                           ;vcontrol.c: 304:     FLASH_WriteBlock(0x1F00,buff);
 12113  09BE  3000               	movlw	0
 12114  09BF  0020               	movlb	0	; select bank0
 12115  09C0  00D0               	movwf	FLASH_WriteBlock@writeAddr
 12116  09C1  301F               	movlw	31
 12117  09C2  00D1               	movwf	FLASH_WriteBlock@writeAddr+1
 12118  09C3  30A0               	movlw	(low (save_to_flash@buff| 0))& (0+255)
 12119  09C4  00DA               	movwf	??_save_to_flash
 12120  09C5  085A               	movf	??_save_to_flash,w
 12121  09C6  00D2               	movwf	FLASH_WriteBlock@flashWordArray
 12122  09C7  3188  20FA         	fcall	_FLASH_WriteBlock
 12123  09C9  0008               	return
 12124  09CA                     __end_of_save_to_flash:	
 12125                           
 12126                           	psect	text50
 12127  149F                     __ptext50:	
 12128 ;; *************** function _get_vdc_speed *****************
 12129 ;; Defined at:
 12130 ;;		line 322 in file "vcontrol.c"
 12131 ;; Parameters:    Size  Location     Type
 12132 ;;		None
 12133 ;; Auto vars:     Size  Location     Type
 12134 ;;		None
 12135 ;; Return value:  Size  Location     Type
 12136 ;;                  2   15[BANK0 ] unsigned short 
 12137 ;; Registers used:
 12138 ;;		wreg, status,2, status,0, pclath, cstack
 12139 ;; Tracked objects:
 12140 ;;		On entry : 1C/2
 12141 ;;		On exit  : 1F/0
 12142 ;;		Unchanged: 0/0
 12143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12144 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;Total ram usage:        2 bytes
 12149 ;; Hardware stack levels used:    1
 12150 ;; Hardware stack levels required when called:    6
 12151 ;; This function calls:
 12152 ;;		___wmul
 12153 ;; This function is called by:
 12154 ;;		_save_to_flash
 12155 ;;		_uart_task
 12156 ;; This function uses a non-reentrant model
 12157 ;;
 12158                           
 12159                           
 12160                           ;psect for function _get_vdc_speed
 12161  149F                     _get_vdc_speed:	
 12162                           
 12163                           ;vcontrol.c: 325:     return (duty_count_up_max + 1)*100;
 12164                           
 12165                           ;incstack = 0
 12166                           ; Regs used in _get_vdc_speed: [wreg+status,2+status,0+pclath+cstack]
 12167  149F  0022               	movlb	2	; select bank2
 12168  14A0  086E               	movf	_duty_count_up_max^(0+256),w
 12169  14A1  3E01               	addlw	1
 12170  14A2  0020               	movlb	0	; select bank0
 12171  14A3  00CD               	movwf	___wmul@multiplier
 12172  14A4  3000               	movlw	0
 12173  14A5  0022               	movlb	2	; select bank2
 12174  14A6  3D6F               	addwfc	(_duty_count_up_max+1)^(0+256),w
 12175  14A7  0020               	movlb	0	; select bank0
 12176  14A8  00CE               	movwf	___wmul@multiplier+1
 12177  14A9  3064               	movlw	100
 12178  14AA  00CF               	movwf	___wmul@multiplicand
 12179  14AB  3000               	movlw	0
 12180  14AC  00D0               	movwf	___wmul@multiplicand+1
 12181  14AD  3195  2544         	fcall	___wmul
 12182  14AF  084E               	movf	?___wmul+1,w
 12183  14B0  00D4               	movwf	?_get_vdc_speed+1
 12184  14B1  084D               	movf	?___wmul,w
 12185  14B2  00D3               	movwf	?_get_vdc_speed
 12186  14B3  0008               	return
 12187  14B4                     __end_of_get_vdc_speed:	
 12188                           
 12189                           	psect	text51
 12190  1544                     __ptext51:	
 12191 ;; *************** function ___wmul *****************
 12192 ;; Defined at:
 12193 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
 12194 ;; Parameters:    Size  Location     Type
 12195 ;;  multiplier      2    9[BANK0 ] unsigned int 
 12196 ;;  multiplicand    2   11[BANK0 ] unsigned int 
 12197 ;; Auto vars:     Size  Location     Type
 12198 ;;  product         2   13[BANK0 ] unsigned int 
 12199 ;; Return value:  Size  Location     Type
 12200 ;;                  2    9[BANK0 ] unsigned int 
 12201 ;; Registers used:
 12202 ;;		wreg, status,2, status,0
 12203 ;; Tracked objects:
 12204 ;;		On entry : 1F/0
 12205 ;;		On exit  : 1F/0
 12206 ;;		Unchanged: 0/0
 12207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12208 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12209 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12212 ;;Total ram usage:        6 bytes
 12213 ;; Hardware stack levels used:    1
 12214 ;; Hardware stack levels required when called:    5
 12215 ;; This function calls:
 12216 ;;		Nothing
 12217 ;; This function is called by:
 12218 ;;		_get_vdc_speed
 12219 ;; This function uses a non-reentrant model
 12220 ;;
 12221                           
 12222                           
 12223                           ;psect for function ___wmul
 12224  1544                     ___wmul:	
 12225                           
 12226                           ;incstack = 0
 12227                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12228  1544  01D1               	clrf	___wmul@product
 12229  1545  01D2               	clrf	___wmul@product+1
 12230  1546                     l3999:	
 12231  1546  1C4D               	btfss	___wmul@multiplier,0
 12232  1547  2D4C               	goto	l1241
 12233  1548  084F               	movf	___wmul@multiplicand,w
 12234  1549  07D1               	addwf	___wmul@product,f
 12235  154A  0850               	movf	___wmul@multiplicand+1,w
 12236  154B  3DD2               	addwfc	___wmul@product+1,f
 12237  154C                     l1241:	
 12238  154C  3001               	movlw	1
 12239  154D                     u2705:	
 12240  154D  35CF               	lslf	___wmul@multiplicand,f
 12241  154E  0DD0               	rlf	___wmul@multiplicand+1,f
 12242  154F  0B89               	decfsz	9,f
 12243  1550  2D4D               	goto	u2705
 12244  1551  3001               	movlw	1
 12245  1552                     u2715:	
 12246  1552  36CE               	lsrf	___wmul@multiplier+1,f
 12247  1553  0CCD               	rrf	___wmul@multiplier,f
 12248  1554  0B89               	decfsz	9,f
 12249  1555  2D52               	goto	u2715
 12250  1556  084D               	movf	___wmul@multiplier,w
 12251  1557  044E               	iorwf	___wmul@multiplier+1,w
 12252  1558  1D03               	btfss	3,2
 12253  1559  2D46               	goto	l3999
 12254  155A  0852               	movf	___wmul@product+1,w
 12255  155B  00CE               	movwf	?___wmul+1
 12256  155C  0851               	movf	___wmul@product,w
 12257  155D  00CD               	movwf	?___wmul
 12258  155E  0008               	return
 12259  155F                     __end_of___wmul:	
 12260                           
 12261                           	psect	text52
 12262  13AD                     __ptext52:	
 12263 ;; *************** function _get_reset_duration *****************
 12264 ;; Defined at:
 12265 ;;		line 101 in file "SolidStateRelay.c"
 12266 ;; Parameters:    Size  Location     Type
 12267 ;;		None
 12268 ;; Auto vars:     Size  Location     Type
 12269 ;;		None
 12270 ;; Return value:  Size  Location     Type
 12271 ;;                  2    9[BANK0 ] unsigned short 
 12272 ;; Registers used:
 12273 ;;		wreg
 12274 ;; Tracked objects:
 12275 ;;		On entry : 1C/2
 12276 ;;		On exit  : 1F/0
 12277 ;;		Unchanged: 0/0
 12278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12279 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12282 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12283 ;;Total ram usage:        2 bytes
 12284 ;; Hardware stack levels used:    1
 12285 ;; Hardware stack levels required when called:    5
 12286 ;; This function calls:
 12287 ;;		Nothing
 12288 ;; This function is called by:
 12289 ;;		_save_to_flash
 12290 ;;		_uart_task
 12291 ;; This function uses a non-reentrant model
 12292 ;;
 12293                           
 12294                           
 12295                           ;psect for function _get_reset_duration
 12296  13AD                     _get_reset_duration:	
 12297                           
 12298                           ;SolidStateRelay.c: 103:     return reset_duration;
 12299                           
 12300                           ;incstack = 0
 12301                           ; Regs used in _get_reset_duration: [wreg]
 12302  13AD  0022               	movlb	2	; select bank2
 12303  13AE  084F               	movf	(_reset_duration+1)^(0+256),w
 12304  13AF  0020               	movlb	0	; select bank0
 12305  13B0  00CE               	movwf	?_get_reset_duration+1
 12306  13B1  0022               	movlb	2	; select bank2
 12307  13B2  084E               	movf	_reset_duration^(0+256),w
 12308  13B3  0020               	movlb	0	; select bank0
 12309  13B4  00CD               	movwf	?_get_reset_duration
 12310  13B5  0008               	return
 12311  13B6                     __end_of_get_reset_duration:	
 12312                           
 12313                           	psect	text53
 12314  1341                     __ptext53:	
 12315 ;; *************** function _get_relay_reset_voltage *****************
 12316 ;; Defined at:
 12317 ;;		line 96 in file "SolidStateRelay.c"
 12318 ;; Parameters:    Size  Location     Type
 12319 ;;		None
 12320 ;; Auto vars:     Size  Location     Type
 12321 ;;		None
 12322 ;; Return value:  Size  Location     Type
 12323 ;;                  2    9[BANK0 ] unsigned short 
 12324 ;; Registers used:
 12325 ;;		wreg
 12326 ;; Tracked objects:
 12327 ;;		On entry : 1C/2
 12328 ;;		On exit  : 1F/0
 12329 ;;		Unchanged: 0/0
 12330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12331 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12334 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12335 ;;Total ram usage:        2 bytes
 12336 ;; Hardware stack levels used:    1
 12337 ;; Hardware stack levels required when called:    5
 12338 ;; This function calls:
 12339 ;;		Nothing
 12340 ;; This function is called by:
 12341 ;;		_save_to_flash
 12342 ;;		_uart_task
 12343 ;; This function uses a non-reentrant model
 12344 ;;
 12345                           
 12346                           
 12347                           ;psect for function _get_relay_reset_voltage
 12348  1341                     _get_relay_reset_voltage:	
 12349                           
 12350                           ;SolidStateRelay.c: 98:     return relay_reset_voltage;
 12351                           
 12352                           ;incstack = 0
 12353                           ; Regs used in _get_relay_reset_voltage: [wreg]
 12354  1341  0020               	movlb	0	; select bank0
 12355  1342  0821               	movf	_relay_reset_voltage+1,w
 12356  1343  00CE               	movwf	?_get_relay_reset_voltage+1
 12357  1344  0820               	movf	_relay_reset_voltage,w
 12358  1345  00CD               	movwf	?_get_relay_reset_voltage
 12359  1346  0008               	return
 12360  1347                     __end_of_get_relay_reset_voltage:	
 12361                           
 12362                           	psect	text54
 12363  146B                     __ptext54:	
 12364 ;; *************** function _get_relay_activation_counter *****************
 12365 ;; Defined at:
 12366 ;;		line 111 in file "SolidStateRelay.c"
 12367 ;; Parameters:    Size  Location     Type
 12368 ;;		None
 12369 ;; Auto vars:     Size  Location     Type
 12370 ;;		None
 12371 ;; Return value:  Size  Location     Type
 12372 ;;                  4    9[BANK0 ] unsigned long 
 12373 ;; Registers used:
 12374 ;;		wreg
 12375 ;; Tracked objects:
 12376 ;;		On entry : 1C/2
 12377 ;;		On exit  : 1F/0
 12378 ;;		Unchanged: 0/0
 12379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12383 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12384 ;;Total ram usage:        4 bytes
 12385 ;; Hardware stack levels used:    1
 12386 ;; Hardware stack levels required when called:    5
 12387 ;; This function calls:
 12388 ;;		Nothing
 12389 ;; This function is called by:
 12390 ;;		_save_to_flash
 12391 ;;		_uart_task
 12392 ;; This function uses a non-reentrant model
 12393 ;;
 12394                           
 12395                           
 12396                           ;psect for function _get_relay_activation_counter
 12397  146B                     _get_relay_activation_counter:	
 12398                           
 12399                           ;SolidStateRelay.c: 113:     return activation_counter;
 12400                           
 12401                           ;incstack = 0
 12402                           ; Regs used in _get_relay_activation_counter: [wreg]
 12403  146B  0022               	movlb	2	; select bank2
 12404  146C  084B               	movf	(_activation_counter+3)^(0+256),w
 12405  146D  0020               	movlb	0	; select bank0
 12406  146E  00D0               	movwf	?_get_relay_activation_counter+3
 12407  146F  0022               	movlb	2	; select bank2
 12408  1470  084A               	movf	(_activation_counter+2)^(0+256),w
 12409  1471  0020               	movlb	0	; select bank0
 12410  1472  00CF               	movwf	?_get_relay_activation_counter+2
 12411  1473  0022               	movlb	2	; select bank2
 12412  1474  0849               	movf	(_activation_counter+1)^(0+256),w
 12413  1475  0020               	movlb	0	; select bank0
 12414  1476  00CE               	movwf	?_get_relay_activation_counter+1
 12415  1477  0022               	movlb	2	; select bank2
 12416  1478  0848               	movf	_activation_counter^(0+256),w
 12417  1479  0020               	movlb	0	; select bank0
 12418  147A  00CD               	movwf	?_get_relay_activation_counter
 12419  147B  0008               	return
 12420  147C                     __end_of_get_relay_activation_counter:	
 12421                           
 12422                           	psect	text55
 12423  08FA                     __ptext55:	
 12424 ;; *************** function _FLASH_WriteBlock *****************
 12425 ;; Defined at:
 12426 ;;		line 95 in file "mcc_generated_files/memory.c"
 12427 ;; Parameters:    Size  Location     Type
 12428 ;;  writeAddr       2   12[BANK0 ] unsigned short 
 12429 ;;  flashWordArr    1   14[BANK0 ] PTR unsigned short 
 12430 ;;		 -> save_to_flash@buff(64), 
 12431 ;; Auto vars:     Size  Location     Type
 12432 ;;  blockStartAd    2   18[BANK0 ] unsigned short 
 12433 ;;  i               1   21[BANK0 ] unsigned char 
 12434 ;;  GIEBitValue     1   20[BANK0 ] unsigned char 
 12435 ;; Return value:  Size  Location     Type
 12436 ;;                  1    wreg      char 
 12437 ;; Registers used:
 12438 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12439 ;; Tracked objects:
 12440 ;;		On entry : 1F/0
 12441 ;;		On exit  : 1F/0
 12442 ;;		Unchanged: 0/0
 12443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12444 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12445 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12446 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12447 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12448 ;;Total ram usage:       10 bytes
 12449 ;; Hardware stack levels used:    1
 12450 ;; Hardware stack levels required when called:    6
 12451 ;; This function calls:
 12452 ;;		_FLASH_EraseBlock
 12453 ;; This function is called by:
 12454 ;;		_save_to_flash
 12455 ;; This function uses a non-reentrant model
 12456 ;;
 12457                           
 12458                           
 12459                           ;psect for function _FLASH_WriteBlock
 12460  08FA                     _FLASH_WriteBlock:	
 12461                           
 12462                           ;mcc_generated_files/memory.c: 95: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 96: {;mcc_generated_files/memory.c: 97:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x2000 -1) ^ (32 -1)));
 12463                           
 12464                           ;incstack = 0
 12465                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12466  08FA  30E0               	movlw	224
 12467  08FB  0550               	andwf	FLASH_WriteBlock@writeAddr,w
 12468  08FC  00D6               	movwf	FLASH_WriteBlock@blockStartAddr
 12469  08FD  301F               	movlw	31
 12470  08FE  0551               	andwf	FLASH_WriteBlock@writeAddr+1,w
 12471  08FF  00D7               	movwf	FLASH_WriteBlock@blockStartAddr+1
 12472                           
 12473                           ;mcc_generated_files/memory.c: 98:     uint8_t GIEBitValue = INTCONbits.GIE;
 12474  0900  3000               	movlw	0
 12475  0901  1B8B               	btfsc	11,7	;volatile
 12476  0902  3001               	movlw	1
 12477  0903  00D8               	movwf	FLASH_WriteBlock@GIEBitValue
 12478                           
 12479                           ;mcc_generated_files/memory.c: 99:     uint8_t i;;mcc_generated_files/memory.c: 102:    
      +                           if( writeAddr != blockStartAddr )
 12480  0904  0857               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 12481  0905  0651               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 12482  0906  1D03               	skipz
 12483  0907  290A               	goto	u2735
 12484  0908  0856               	movf	FLASH_WriteBlock@blockStartAddr,w
 12485  0909  0650               	xorwf	FLASH_WriteBlock@writeAddr,w
 12486  090A                     u2735:	
 12487  090A  1D03               	btfss	3,2
 12488  090B  0008               	return
 12489                           
 12490                           ;mcc_generated_files/memory.c: 107:     INTCONbits.GIE = 0;
 12491                           
 12492                           ;mcc_generated_files/memory.c: 105:     }
 12493  090C  138B               	bcf	11,7	;volatile
 12494                           
 12495                           ;mcc_generated_files/memory.c: 110:     FLASH_EraseBlock(writeAddr);
 12496  090D  0851               	movf	FLASH_WriteBlock@writeAddr+1,w
 12497  090E  00CE               	movwf	FLASH_EraseBlock@startAddr+1
 12498  090F  0850               	movf	FLASH_WriteBlock@writeAddr,w
 12499  0910  00CD               	movwf	FLASH_EraseBlock@startAddr
 12500  0911  3195  25D1  3188   	fcall	_FLASH_EraseBlock
 12501                           
 12502                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.CFGS = 0;
 12503  0914  0023               	movlb	3	; select bank3
 12504  0915  1315               	bcf	21,6	;volatile
 12505                           
 12506                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.WREN = 1;
 12507  0916  1515               	bsf	21,2	;volatile
 12508                           
 12509                           ;mcc_generated_files/memory.c: 115:     PMCON1bits.LWLO = 1;
 12510  0917  1695               	bsf	21,5	;volatile
 12511                           
 12512                           ;mcc_generated_files/memory.c: 117:     for (i=0; i<32; i++)
 12513  0918  0020               	movlb	0	; select bank0
 12514  0919  01D9               	clrf	FLASH_WriteBlock@i
 12515  091A                     l4033:	
 12516                           
 12517                           ;mcc_generated_files/memory.c: 118:     {;mcc_generated_files/memory.c: 120:         PMA
      +                          DRL = (writeAddr & 0xFF);
 12518  091A  0850               	movf	FLASH_WriteBlock@writeAddr,w
 12519  091B  0023               	movlb	3	; select bank3
 12520  091C  0091               	movwf	17	;volatile
 12521                           
 12522                           ;mcc_generated_files/memory.c: 122:         PMADRH = ((writeAddr & 0xFF00) >> 8);
 12523  091D  0020               	movlb	0	; select bank0
 12524  091E  0851               	movf	FLASH_WriteBlock@writeAddr+1,w
 12525  091F  0023               	movlb	3	; select bank3
 12526  0920  0092               	movwf	18	;volatile
 12527                           
 12528                           ;mcc_generated_files/memory.c: 125:         PMDATL = flashWordArray[i];
 12529  0921  0020               	movlb	0	; select bank0
 12530  0922  3559               	lslf	FLASH_WriteBlock@i,w
 12531  0923  0752               	addwf	FLASH_WriteBlock@flashWordArray,w
 12532  0924  00D3               	movwf	??_FLASH_WriteBlock
 12533  0925  0853               	movf	??_FLASH_WriteBlock,w
 12534  0926  0086               	movwf	6
 12535  0927  0187               	clrf	7
 12536  0928  0801               	movf	1,w
 12537  0929  0023               	movlb	3	; select bank3
 12538  092A  0093               	movwf	19	;volatile
 12539                           
 12540                           ;mcc_generated_files/memory.c: 126:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
 12541  092B  0020               	movlb	0	; select bank0
 12542  092C  3559               	lslf	FLASH_WriteBlock@i,w
 12543  092D  0752               	addwf	FLASH_WriteBlock@flashWordArray,w
 12544  092E  00D3               	movwf	??_FLASH_WriteBlock
 12545  092F  0853               	movf	??_FLASH_WriteBlock,w
 12546  0930  0086               	movwf	6
 12547  0931  0187               	clrf	7
 12548  0932  3F40               	moviw [0]fsr1
 12549  0933  00D4               	movwf	??_FLASH_WriteBlock+1
 12550  0934  3F41               	moviw [1]fsr1
 12551  0935  00D5               	movwf	??_FLASH_WriteBlock+2
 12552  0936  0855               	movf	??_FLASH_WriteBlock+2,w
 12553  0937  0023               	movlb	3	; select bank3
 12554  0938  0094               	movwf	20	;volatile
 12555                           
 12556                           ;mcc_generated_files/memory.c: 128:         if(i == (32 -1))
 12557  0939  301F               	movlw	31
 12558  093A  0020               	movlb	0	; select bank0
 12559  093B  0659               	xorwf	FLASH_WriteBlock@i,w
 12560  093C  1D03               	btfss	3,2
 12561  093D  2940               	goto	l4043
 12562                           
 12563                           ;mcc_generated_files/memory.c: 129:         {;mcc_generated_files/memory.c: 131:        
      +                               PMCON1bits.LWLO = 0;
 12564  093E  0023               	movlb	3	; select bank3
 12565  093F  1295               	bcf	21,5	;volatile
 12566  0940                     l4043:	
 12567                           
 12568                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0x55;
 12569  0940  3055               	movlw	85
 12570  0941  0023               	movlb	3	; select bank3
 12571  0942  0096               	movwf	22	;volsfr
 12572                           
 12573                           ;mcc_generated_files/memory.c: 135:         PMCON2 = 0xAA;
 12574  0943  30AA               	movlw	170
 12575  0944  0096               	movwf	22	;volsfr
 12576                           
 12577                           ;mcc_generated_files/memory.c: 136:         PMCON1bits.WR = 1;
 12578  0945  1495               	bsf	21,1	;volatile
 12579                           
 12580                           ;mcc_generated_files/memory.c: 137:         __nop();
 12581  0946  0000               	nop
 12582                           
 12583                           ;mcc_generated_files/memory.c: 138:         __nop();
 12584  0947  0000               	nop
 12585                           
 12586                           ;mcc_generated_files/memory.c: 140:  writeAddr++;
 12587  0948  3001               	movlw	1
 12588  0949  0020               	movlb	0	; select bank0
 12589  094A  07D0               	addwf	FLASH_WriteBlock@writeAddr,f
 12590  094B  3000               	movlw	0
 12591  094C  3DD1               	addwfc	FLASH_WriteBlock@writeAddr+1,f
 12592  094D  0064               	clrwdt	;# 
 12593                           
 12594                           ;mcc_generated_files/memory.c: 142:     }
 12595  094E  3001               	movlw	1
 12596  094F  0020               	movlb	0	; select bank0
 12597  0950  00D3               	movwf	??_FLASH_WriteBlock
 12598  0951  0853               	movf	??_FLASH_WriteBlock,w
 12599  0952  07D9               	addwf	FLASH_WriteBlock@i,f
 12600  0953  3020               	movlw	32
 12601  0954  0259               	subwf	FLASH_WriteBlock@i,w
 12602  0955  1C03               	skipc
 12603  0956  291A               	goto	l4033
 12604                           
 12605                           ;mcc_generated_files/memory.c: 144:     PMCON1bits.WREN = 0;
 12606  0957  0023               	movlb	3	; select bank3
 12607  0958  1115               	bcf	21,2	;volatile
 12608                           
 12609                           ;mcc_generated_files/memory.c: 145:     INTCONbits.GIE = GIEBitValue;
 12610  0959  0020               	movlb	0	; select bank0
 12611  095A  0C58               	rrf	FLASH_WriteBlock@GIEBitValue,w
 12612  095B  1C03               	skipc
 12613  095C  138B               	bcf	11,7	;volatile
 12614  095D  1803               	skipnc
 12615  095E  178B               	bsf	11,7	;volatile
 12616  095F  0008               	return
 12617  0960                     __end_of_FLASH_WriteBlock:	
 12618                           
 12619                           	psect	text56
 12620  15D1                     __ptext56:	
 12621 ;; *************** function _FLASH_EraseBlock *****************
 12622 ;; Defined at:
 12623 ;;		line 150 in file "mcc_generated_files/memory.c"
 12624 ;; Parameters:    Size  Location     Type
 12625 ;;  startAddr       2    9[BANK0 ] unsigned short 
 12626 ;; Auto vars:     Size  Location     Type
 12627 ;;  GIEBitValue     1   11[BANK0 ] unsigned char 
 12628 ;; Return value:  Size  Location     Type
 12629 ;;                  1    wreg      void 
 12630 ;; Registers used:
 12631 ;;		wreg, status,2, status,0
 12632 ;; Tracked objects:
 12633 ;;		On entry : 1F/0
 12634 ;;		On exit  : 1F/0
 12635 ;;		Unchanged: 0/0
 12636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12637 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12640 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12641 ;;Total ram usage:        3 bytes
 12642 ;; Hardware stack levels used:    1
 12643 ;; Hardware stack levels required when called:    5
 12644 ;; This function calls:
 12645 ;;		Nothing
 12646 ;; This function is called by:
 12647 ;;		_FLASH_WriteBlock
 12648 ;; This function uses a non-reentrant model
 12649 ;;
 12650                           
 12651                           
 12652                           ;psect for function _FLASH_EraseBlock
 12653  15D1                     _FLASH_EraseBlock:	
 12654                           
 12655                           ;mcc_generated_files/memory.c: 150: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 151: {;mcc_generated_files/memory.c: 152:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
 12656                           
 12657                           ;incstack = 0
 12658                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 12659  15D1  3000               	movlw	0
 12660  15D2  1B8B               	btfsc	11,7	;volatile
 12661  15D3  3001               	movlw	1
 12662  15D4  00CF               	movwf	FLASH_EraseBlock@GIEBitValue
 12663                           
 12664                           ;mcc_generated_files/memory.c: 155:     INTCONbits.GIE = 0;
 12665  15D5  138B               	bcf	11,7	;volatile
 12666                           
 12667                           ;mcc_generated_files/memory.c: 157:     PMADRL = (startAddr & 0xFF);
 12668  15D6  084D               	movf	FLASH_EraseBlock@startAddr,w
 12669  15D7  0023               	movlb	3	; select bank3
 12670  15D8  0091               	movwf	17	;volatile
 12671                           
 12672                           ;mcc_generated_files/memory.c: 159:     PMADRH = ((startAddr & 0xFF00) >> 8);
 12673  15D9  0020               	movlb	0	; select bank0
 12674  15DA  084E               	movf	FLASH_EraseBlock@startAddr+1,w
 12675  15DB  0023               	movlb	3	; select bank3
 12676  15DC  0092               	movwf	18	;volatile
 12677                           
 12678                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.CFGS = 0;
 12679  15DD  1315               	bcf	21,6	;volatile
 12680                           
 12681                           ;mcc_generated_files/memory.c: 163:     PMCON1bits.FREE = 1;
 12682  15DE  1615               	bsf	21,4	;volatile
 12683                           
 12684                           ;mcc_generated_files/memory.c: 164:     PMCON1bits.WREN = 1;
 12685  15DF  1515               	bsf	21,2	;volatile
 12686                           
 12687                           ;mcc_generated_files/memory.c: 167:     PMCON2 = 0x55;
 12688  15E0  3055               	movlw	85
 12689  15E1  0096               	movwf	22	;volsfr
 12690                           
 12691                           ;mcc_generated_files/memory.c: 168:     PMCON2 = 0xAA;
 12692  15E2  30AA               	movlw	170
 12693  15E3  0096               	movwf	22	;volsfr
 12694                           
 12695                           ;mcc_generated_files/memory.c: 169:     PMCON1bits.WR = 1;
 12696  15E4  1495               	bsf	21,1	;volatile
 12697                           
 12698                           ;mcc_generated_files/memory.c: 170:     __nop();
 12699  15E5  0000               	nop
 12700                           
 12701                           ;mcc_generated_files/memory.c: 171:     __nop();
 12702  15E6  0000               	nop
 12703                           
 12704                           ;mcc_generated_files/memory.c: 173:     PMCON1bits.WREN = 0;
 12705  15E7  0023               	movlb	3	; select bank3
 12706  15E8  1115               	bcf	21,2	;volatile
 12707                           
 12708                           ;mcc_generated_files/memory.c: 174:     INTCONbits.GIE = GIEBitValue;
 12709  15E9  0020               	movlb	0	; select bank0
 12710  15EA  0C4F               	rrf	FLASH_EraseBlock@GIEBitValue,w
 12711  15EB  1C03               	skipc
 12712  15EC  138B               	bcf	11,7	;volatile
 12713  15ED  1803               	skipnc
 12714  15EE  178B               	bsf	11,7	;volatile
 12715  15EF  0008               	return
 12716  15F0                     __end_of_FLASH_EraseBlock:	
 12717                           
 12718                           	psect	text57
 12719  15B2                     __ptext57:	
 12720 ;; *************** function _FLASH_ReadWord *****************
 12721 ;; Defined at:
 12722 ;;		line 58 in file "mcc_generated_files/memory.c"
 12723 ;; Parameters:    Size  Location     Type
 12724 ;;  flashAddr       2    9[BANK0 ] unsigned short 
 12725 ;; Auto vars:     Size  Location     Type
 12726 ;;  GIEBitValue     1   11[BANK0 ] unsigned char 
 12727 ;; Return value:  Size  Location     Type
 12728 ;;                  2    9[BANK0 ] unsigned short 
 12729 ;; Registers used:
 12730 ;;		wreg, status,2, status,0
 12731 ;; Tracked objects:
 12732 ;;		On entry : 1F/0
 12733 ;;		On exit  : 1F/0
 12734 ;;		Unchanged: 0/0
 12735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12736 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;Total ram usage:        3 bytes
 12741 ;; Hardware stack levels used:    1
 12742 ;; Hardware stack levels required when called:    5
 12743 ;; This function calls:
 12744 ;;		Nothing
 12745 ;; This function is called by:
 12746 ;;		_ApplicationInit
 12747 ;; This function uses a non-reentrant model
 12748 ;;
 12749                           
 12750                           
 12751                           ;psect for function _FLASH_ReadWord
 12752  15B2                     _FLASH_ReadWord:	
 12753                           
 12754                           ;mcc_generated_files/memory.c: 58: uint16_t FLASH_ReadWord(uint16_t flashAddr);mcc_gener
      +                          ated_files/memory.c: 59: {;mcc_generated_files/memory.c: 60:     uint8_t GIEBitValue = I
      +                          NTCONbits.GIE;
 12755                           
 12756                           ;incstack = 0
 12757                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12758  15B2  3000               	movlw	0
 12759  15B3  1B8B               	btfsc	11,7	;volatile
 12760  15B4  3001               	movlw	1
 12761  15B5  00CF               	movwf	FLASH_ReadWord@GIEBitValue
 12762                           
 12763                           ;mcc_generated_files/memory.c: 62:     INTCONbits.GIE = 0;
 12764  15B6  138B               	bcf	11,7	;volatile
 12765                           
 12766                           ;mcc_generated_files/memory.c: 63:     PMADRL = (flashAddr & 0x00FF);
 12767  15B7  084D               	movf	FLASH_ReadWord@flashAddr,w
 12768  15B8  0023               	movlb	3	; select bank3
 12769  15B9  0091               	movwf	17	;volatile
 12770                           
 12771                           ;mcc_generated_files/memory.c: 64:     PMADRH = ((flashAddr & 0xFF00) >> 8);
 12772  15BA  0020               	movlb	0	; select bank0
 12773  15BB  084E               	movf	FLASH_ReadWord@flashAddr+1,w
 12774  15BC  0023               	movlb	3	; select bank3
 12775  15BD  0092               	movwf	18	;volatile
 12776                           
 12777                           ;mcc_generated_files/memory.c: 66:     PMCON1bits.CFGS = 0;
 12778  15BE  1315               	bcf	21,6	;volatile
 12779                           
 12780                           ;mcc_generated_files/memory.c: 67:     PMCON1bits.RD = 1;
 12781  15BF  1415               	bsf	21,0	;volatile
 12782                           
 12783                           ;mcc_generated_files/memory.c: 68:     __nop();
 12784  15C0  0000               	nop
 12785                           
 12786                           ;mcc_generated_files/memory.c: 69:     __nop();
 12787  15C1  0000               	nop
 12788                           
 12789                           ;mcc_generated_files/memory.c: 70:     INTCONbits.GIE = GIEBitValue;
 12790  15C2  0020               	movlb	0	; select bank0
 12791  15C3  0C4F               	rrf	FLASH_ReadWord@GIEBitValue,w
 12792  15C4  1C03               	skipc
 12793  15C5  138B               	bcf	11,7	;volatile
 12794  15C6  1803               	skipnc
 12795  15C7  178B               	bsf	11,7	;volatile
 12796                           
 12797                           ;mcc_generated_files/memory.c: 72:     return ((uint16_t)((PMDATH << 8) | PMDATL));
 12798  15C8  0023               	movlb	3	; select bank3
 12799  15C9  0814               	movf	20,w	;volatile
 12800  15CA  0020               	movlb	0	; select bank0
 12801  15CB  00CE               	movwf	?_FLASH_ReadWord+1
 12802  15CC  0023               	movlb	3	; select bank3
 12803  15CD  0813               	movf	19,w	;volatile
 12804  15CE  0020               	movlb	0	; select bank0
 12805  15CF  00CD               	movwf	?_FLASH_ReadWord
 12806  15D0  0008               	return
 12807  15D1                     __end_of_FLASH_ReadWord:	
 12808                           
 12809                           	psect	intentry
 12810  0004                     __pintentry:	
 12811 ;; *************** function _INTERRUPT_InterruptManager *****************
 12812 ;; Defined at:
 12813 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12814 ;; Parameters:    Size  Location     Type
 12815 ;;		None
 12816 ;; Auto vars:     Size  Location     Type
 12817 ;;		None
 12818 ;; Return value:  Size  Location     Type
 12819 ;;                  1    wreg      void 
 12820 ;; Registers used:
 12821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12822 ;; Tracked objects:
 12823 ;;		On entry : 0/0
 12824 ;;		On exit  : 0/0
 12825 ;;		Unchanged: 0/0
 12826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12831 ;;Total ram usage:        0 bytes
 12832 ;; Hardware stack levels used:    1
 12833 ;; Hardware stack levels required when called:    4
 12834 ;; This function calls:
 12835 ;;		Absolute function
 12836 ;;		_ADC_ISR
 12837 ;;		_EUSART_CommandHandler_ISR
 12838 ;;		_EUSART_Receive_ISR
 12839 ;;		_TMR1_ISR
 12840 ;;		_TMR2_ISR
 12841 ;; This function is called by:
 12842 ;;		Interrupt level 1
 12843 ;; This function uses a non-reentrant model
 12844 ;;
 12845                           
 12846  0004                     _INTERRUPT_InterruptManager:	
 12847                           
 12848                           ;incstack = 0
 12849  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12850                           
 12851                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12852  0005  3180               	pagesel	$
 12853  0006  0064               	clrwdt	;# 
 12854                           
 12855                           ;mcc_generated_files/interrupt_manager.c: 56:     if(INTCONbits.PEIE == 1)
 12856  0007  1F0B               	btfss	11,6	;volatile
 12857  0008  2832               	goto	i1l393
 12858                           
 12859                           ;mcc_generated_files/interrupt_manager.c: 57:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 58:         if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 12860  0009  0021               	movlb	1	; select bank1
 12861  000A  1F11               	btfss	17,6	;volatile
 12862  000B  2813               	goto	i1l384
 12863  000C  0020               	movlb	0	; select bank0
 12864  000D  1F11               	btfss	17,6	;volatile
 12865  000E  2813               	goto	i1l384
 12866                           
 12867                           ;mcc_generated_files/interrupt_manager.c: 59:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 60:             ADC_ISR();
 12868  000F  3194  240A  3180   	fcall	_ADC_ISR
 12869                           
 12870                           ;mcc_generated_files/interrupt_manager.c: 61:         }
 12871  0012  2832               	goto	i1l393
 12872  0013                     i1l384:	
 12873                           ;mcc_generated_files/interrupt_manager.c: 62:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 12874                           
 12875  0013  0021               	movlb	1	; select bank1
 12876  0014  1E91               	btfss	17,5	;volatile
 12877  0015  2820               	goto	i1l386
 12878  0016  0020               	movlb	0	; select bank0
 12879  0017  1E91               	btfss	17,5	;volatile
 12880  0018  2820               	goto	i1l386
 12881                           
 12882                           ;mcc_generated_files/interrupt_manager.c: 63:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 64:             EUSART_RxDefaultInterruptHandler();
 12883  0019  0022               	movlb	2	; select bank2
 12884  001A  0867               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
 12885  001B  008A               	movwf	10
 12886  001C  0866               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
 12887  001D  000A               	callw
 12888  001E  3180               	pagesel	$
 12889                           
 12890                           ;mcc_generated_files/interrupt_manager.c: 65:         }
 12891  001F  2832               	goto	i1l393
 12892  0020                     i1l386:	
 12893                           ;mcc_generated_files/interrupt_manager.c: 66:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
 12894                           
 12895  0020  0021               	movlb	1	; select bank1
 12896  0021  1C91               	btfss	17,1	;volatile
 12897  0022  282A               	goto	i1l388
 12898  0023  0020               	movlb	0	; select bank0
 12899  0024  1C91               	btfss	17,1	;volatile
 12900  0025  282A               	goto	i1l388
 12901                           
 12902                           ;mcc_generated_files/interrupt_manager.c: 67:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 68:             TMR2_ISR();
 12903  0026  3193  2325  3180   	fcall	_TMR2_ISR
 12904                           
 12905                           ;mcc_generated_files/interrupt_manager.c: 69:         }
 12906  0029  2832               	goto	i1l393
 12907  002A                     i1l388:	
 12908                           ;mcc_generated_files/interrupt_manager.c: 70:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
 12909                           
 12910  002A  0021               	movlb	1	; select bank1
 12911  002B  1C11               	btfss	17,0	;volatile
 12912  002C  2832               	goto	i1l393
 12913  002D  0020               	movlb	0	; select bank0
 12914  002E  1C11               	btfss	17,0	;volatile
 12915  002F  2832               	goto	i1l393
 12916                           
 12917                           ;mcc_generated_files/interrupt_manager.c: 71:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 72:             TMR1_ISR();
 12918  0030  3194  2416         	fcall	_TMR1_ISR
 12919  0032                     i1l393:	
 12920                           ;mcc_generated_files/interrupt_manager.c: 73:         }
 12921                           
 12922  0032  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12923  0033  0009               	retfie
 12924  0034                     __end_of_INTERRUPT_InterruptManager:	
 12925                           
 12926                           	psect	text59
 12927  1325                     __ptext59:	
 12928 ;; *************** function _TMR2_ISR *****************
 12929 ;; Defined at:
 12930 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 12931 ;; Parameters:    Size  Location     Type
 12932 ;;		None
 12933 ;; Auto vars:     Size  Location     Type
 12934 ;;		None
 12935 ;; Return value:  Size  Location     Type
 12936 ;;                  1    wreg      void 
 12937 ;; Registers used:
 12938 ;;		wreg, status,2, status,0, pclath, cstack
 12939 ;; Tracked objects:
 12940 ;;		On entry : 1F/0
 12941 ;;		On exit  : 0/0
 12942 ;;		Unchanged: 0/0
 12943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12948 ;;Total ram usage:        0 bytes
 12949 ;; Hardware stack levels used:    1
 12950 ;; Hardware stack levels required when called:    3
 12951 ;; This function calls:
 12952 ;;		_TMR2_CallBack
 12953 ;; This function is called by:
 12954 ;;		_INTERRUPT_InterruptManager
 12955 ;; This function uses a non-reentrant model
 12956 ;;
 12957                           
 12958                           
 12959                           ;psect for function _TMR2_ISR
 12960  1325                     _TMR2_ISR:	
 12961                           
 12962                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 12963                           
 12964                           ;incstack = 0
 12965                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 12966  1325  1091               	bcf	17,1	;volatile
 12967                           
 12968                           ;mcc_generated_files/tmr2.c: 127:     TMR2_CallBack();
 12969  1326  3193  23DE         	fcall	_TMR2_CallBack
 12970  1328  0008               	return
 12971  1329                     __end_of_TMR2_ISR:	
 12972                           
 12973                           	psect	text60
 12974  13DE                     __ptext60:	
 12975 ;; *************** function _TMR2_CallBack *****************
 12976 ;; Defined at:
 12977 ;;		line 130 in file "mcc_generated_files/tmr2.c"
 12978 ;; Parameters:    Size  Location     Type
 12979 ;;		None
 12980 ;; Auto vars:     Size  Location     Type
 12981 ;;		None
 12982 ;; Return value:  Size  Location     Type
 12983 ;;                  1    wreg      void 
 12984 ;; Registers used:
 12985 ;;		wreg, status,2, status,0, pclath, cstack
 12986 ;; Tracked objects:
 12987 ;;		On entry : 1F/0
 12988 ;;		On exit  : 0/0
 12989 ;;		Unchanged: 0/0
 12990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12995 ;;Total ram usage:        0 bytes
 12996 ;; Hardware stack levels used:    1
 12997 ;; Hardware stack levels required when called:    2
 12998 ;; This function calls:
 12999 ;;		Absolute function
 13000 ;;		_TMR2_DefaultInterruptHandler
 13001 ;;		_TMR2_DutyControlHandler_ISR
 13002 ;; This function is called by:
 13003 ;;		_TMR2_ISR
 13004 ;; This function uses a non-reentrant model
 13005 ;;
 13006                           
 13007                           
 13008                           ;psect for function _TMR2_CallBack
 13009  13DE                     _TMR2_CallBack:	
 13010                           
 13011                           ;mcc_generated_files/tmr2.c: 134:     if(TMR2_InterruptHandler)
 13012                           
 13013                           ;incstack = 0
 13014                           ; Regs used in _TMR2_CallBack: [wreg+status,2+status,0+pclath+cstack]
 13015  13DE  0022               	movlb	2	; select bank2
 13016  13DF  0860               	movf	_TMR2_InterruptHandler^(0+256),w
 13017  13E0  0461               	iorwf	(_TMR2_InterruptHandler+1)^(0+256),w
 13018  13E1  1903               	btfsc	3,2
 13019  13E2  0008               	return
 13020                           
 13021                           ;mcc_generated_files/tmr2.c: 135:     {;mcc_generated_files/tmr2.c: 136:         TMR2_In
      +                          terruptHandler();
 13022  13E3  0861               	movf	(_TMR2_InterruptHandler+1)^(0+256),w
 13023  13E4  008A               	movwf	10
 13024  13E5  0860               	movf	_TMR2_InterruptHandler^(0+256),w
 13025  13E6  000A               	callw
 13026  13E7  3193               	pagesel	$
 13027  13E8  0008               	return
 13028  13E9                     __end_of_TMR2_CallBack:	
 13029                           
 13030                           	psect	text61
 13031  130E                     __ptext61:	
 13032 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 13033 ;; Defined at:
 13034 ;;		line 144 in file "mcc_generated_files/tmr2.c"
 13035 ;; Parameters:    Size  Location     Type
 13036 ;;		None
 13037 ;; Auto vars:     Size  Location     Type
 13038 ;;		None
 13039 ;; Return value:  Size  Location     Type
 13040 ;;                  1    wreg      void 
 13041 ;; Registers used:
 13042 ;;		None
 13043 ;; Tracked objects:
 13044 ;;		On entry : 1F/2
 13045 ;;		On exit  : 1F/2
 13046 ;;		Unchanged: 1F/0
 13047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13052 ;;Total ram usage:        0 bytes
 13053 ;; Hardware stack levels used:    1
 13054 ;; This function calls:
 13055 ;;		Nothing
 13056 ;; This function is called by:
 13057 ;;		_TMR2_Initialize
 13058 ;;		_TMR2_CallBack
 13059 ;; This function uses a non-reentrant model
 13060 ;;
 13061                           
 13062                           
 13063                           ;psect for function _TMR2_DefaultInterruptHandler
 13064  130E                     _TMR2_DefaultInterruptHandler:	
 13065                           
 13066                           ;incstack = 0
 13067                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 13068  130E  0008               	return
 13069  130F                     __end_of_TMR2_DefaultInterruptHandler:	
 13070                           
 13071                           	psect	text62
 13072  17BC                     __ptext62:	
 13073 ;; *************** function _TMR2_DutyControlHandler_ISR *****************
 13074 ;; Defined at:
 13075 ;;		line 430 in file "vcontrol.c"
 13076 ;; Parameters:    Size  Location     Type
 13077 ;;		None
 13078 ;; Auto vars:     Size  Location     Type
 13079 ;;		None
 13080 ;; Return value:  Size  Location     Type
 13081 ;;                  1    wreg      void 
 13082 ;; Registers used:
 13083 ;;		wreg, status,2, status,0, pclath, cstack
 13084 ;; Tracked objects:
 13085 ;;		On entry : 1F/2
 13086 ;;		On exit  : 1F/C
 13087 ;;		Unchanged: 0/0
 13088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13091 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13092 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13093 ;;Total ram usage:        2 bytes
 13094 ;; Hardware stack levels used:    1
 13095 ;; Hardware stack levels required when called:    1
 13096 ;; This function calls:
 13097 ;;		_PWM3_LoadDutyValue
 13098 ;; This function is called by:
 13099 ;;		_init_chopper
 13100 ;;		_TMR2_CallBack
 13101 ;; This function uses a non-reentrant model
 13102 ;;
 13103                           
 13104                           
 13105                           ;psect for function _TMR2_DutyControlHandler_ISR
 13106  17BC                     _TMR2_DutyControlHandler_ISR:	
 13107                           
 13108                           ;vcontrol.c: 432:     if( current_duty > target_duty )
 13109                           
 13110                           ;incstack = 0
 13111                           ; Regs used in _TMR2_DutyControlHandler_ISR: [wreg+status,2+status,0+pclath+cstack]
 13112  17BC  0020               	movlb	0	; select bank0
 13113  17BD  0823               	movf	_current_duty+1,w
 13114  17BE  0225               	subwf	_target_duty+1,w
 13115  17BF  1D03               	skipz
 13116  17C0  2FC3               	goto	u146_25
 13117  17C1  0822               	movf	_current_duty,w
 13118  17C2  0224               	subwf	_target_duty,w
 13119  17C3                     u146_25:	
 13120  17C3  1803               	skipnc
 13121  17C4  2FDB               	goto	i1l885
 13122                           
 13123                           ;vcontrol.c: 433:     {;vcontrol.c: 434:         if( current_duty - target_duty > duty_i
      +                          nc )
 13124  17C5  0824               	movf	_target_duty,w
 13125  17C6  0222               	subwf	_current_duty,w
 13126  17C7  00F4               	movwf	??_TMR2_DutyControlHandler_ISR
 13127  17C8  0825               	movf	_target_duty+1,w
 13128  17C9  3B23               	subwfb	_current_duty+1,w
 13129  17CA  00F5               	movwf	??_TMR2_DutyControlHandler_ISR+1
 13130  17CB  3000               	movlw	0
 13131  17CC  0275               	subwf	??_TMR2_DutyControlHandler_ISR+1,w
 13132  17CD  3009               	movlw	9
 13133  17CE  1903               	skipnz
 13134  17CF  0274               	subwf	??_TMR2_DutyControlHandler_ISR,w
 13135  17D0  1C03               	skipc
 13136  17D1  2FD7               	goto	i1l3015
 13137                           
 13138                           ;vcontrol.c: 435:             current_duty -= duty_inc;
 13139  17D2  3008               	movlw	8
 13140  17D3  02A2               	subwf	_current_duty,f
 13141  17D4  3000               	movlw	0
 13142  17D5  3BA3               	subwfb	_current_duty+1,f
 13143  17D6  2FDB               	goto	i1l885
 13144  17D7                     i1l3015:	
 13145                           
 13146                           ;vcontrol.c: 437:             current_duty = target_duty;
 13147  17D7  0825               	movf	_target_duty+1,w
 13148  17D8  00A3               	movwf	_current_duty+1
 13149  17D9  0824               	movf	_target_duty,w
 13150  17DA  00A2               	movwf	_current_duty
 13151  17DB                     i1l885:	
 13152                           ;vcontrol.c: 438:     }
 13153                           
 13154                           
 13155                           ;vcontrol.c: 439:     if( current_duty < target_duty )
 13156  17DB  0825               	movf	_target_duty+1,w
 13157  17DC  0223               	subwf	_current_duty+1,w
 13158  17DD  1D03               	skipz
 13159  17DE  2FE1               	goto	u148_25
 13160  17DF  0824               	movf	_target_duty,w
 13161  17E0  0222               	subwf	_current_duty,w
 13162  17E1                     u148_25:	
 13163  17E1  1803               	skipnc
 13164  17E2  2FF9               	goto	i1l3023
 13165                           
 13166                           ;vcontrol.c: 440:     {;vcontrol.c: 441:         if( target_duty - current_duty > duty_i
      +                          nc )
 13167  17E3  0822               	movf	_current_duty,w
 13168  17E4  0224               	subwf	_target_duty,w
 13169  17E5  00F4               	movwf	??_TMR2_DutyControlHandler_ISR
 13170  17E6  0823               	movf	_current_duty+1,w
 13171  17E7  3B25               	subwfb	_target_duty+1,w
 13172  17E8  00F5               	movwf	??_TMR2_DutyControlHandler_ISR+1
 13173  17E9  3000               	movlw	0
 13174  17EA  0275               	subwf	??_TMR2_DutyControlHandler_ISR+1,w
 13175  17EB  3009               	movlw	9
 13176  17EC  1903               	skipnz
 13177  17ED  0274               	subwf	??_TMR2_DutyControlHandler_ISR,w
 13178  17EE  1C03               	skipc
 13179  17EF  2FF5               	goto	i1l3021
 13180                           
 13181                           ;vcontrol.c: 443:             current_duty += duty_inc;
 13182  17F0  3008               	movlw	8
 13183  17F1  07A2               	addwf	_current_duty,f
 13184  17F2  3000               	movlw	0
 13185  17F3  3DA3               	addwfc	_current_duty+1,f
 13186  17F4  2FF9               	goto	i1l3023
 13187  17F5                     i1l3021:	
 13188                           
 13189                           ;vcontrol.c: 445:             current_duty = target_duty;
 13190  17F5  0825               	movf	_target_duty+1,w
 13191  17F6  00A3               	movwf	_current_duty+1
 13192  17F7  0824               	movf	_target_duty,w
 13193  17F8  00A2               	movwf	_current_duty
 13194  17F9                     i1l3023:	
 13195                           
 13196                           ;vcontrol.c: 447:     PWM3_LoadDutyValue(current_duty);
 13197  17F9  0823               	movf	_current_duty+1,w
 13198  17FA  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 13199  17FB  0822               	movf	_current_duty,w
 13200  17FC  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
 13201  17FD  3194  24B4         	fcall	_PWM3_LoadDutyValue
 13202  17FF  0008               	return
 13203  1800                     __end_of_TMR2_DutyControlHandler_ISR:	
 13204                           
 13205                           	psect	text63
 13206  1416                     __ptext63:	
 13207 ;; *************** function _TMR1_ISR *****************
 13208 ;; Defined at:
 13209 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 13210 ;; Parameters:    Size  Location     Type
 13211 ;;		None
 13212 ;; Auto vars:     Size  Location     Type
 13213 ;;		None
 13214 ;; Return value:  Size  Location     Type
 13215 ;;                  1    wreg      void 
 13216 ;; Registers used:
 13217 ;;		wreg, status,2, status,0, pclath, cstack
 13218 ;; Tracked objects:
 13219 ;;		On entry : 1F/0
 13220 ;;		On exit  : 0/0
 13221 ;;		Unchanged: 0/0
 13222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13227 ;;Total ram usage:        0 bytes
 13228 ;; Hardware stack levels used:    1
 13229 ;; Hardware stack levels required when called:    2
 13230 ;; This function calls:
 13231 ;;		_TMR1_CallBack
 13232 ;;		_TMR1_WriteTimer
 13233 ;; This function is called by:
 13234 ;;		_INTERRUPT_InterruptManager
 13235 ;; This function uses a non-reentrant model
 13236 ;;
 13237                           
 13238                           
 13239                           ;psect for function _TMR1_ISR
 13240  1416                     _TMR1_ISR:	
 13241                           
 13242                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
 13243                           
 13244                           ;incstack = 0
 13245                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 13246  1416  1011               	bcf	17,0	;volatile
 13247                           
 13248                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
 13249  1417  0022               	movlb	2	; select bank2
 13250  1418  085D               	movf	(_timer1ReloadVal+1)^(0+256),w	;volatile
 13251  1419  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 13252  141A  085C               	movf	_timer1ReloadVal^(0+256),w	;volatile
 13253  141B  00F0               	movwf	TMR1_WriteTimer@timerVal
 13254  141C  3194  243D  3194   	fcall	_TMR1_WriteTimer
 13255                           
 13256                           ;mcc_generated_files/tmr1.c: 166:     TMR1_CallBack();
 13257  141F  3193  23D3         	fcall	_TMR1_CallBack
 13258  1421  0008               	return
 13259  1422                     __end_of_TMR1_ISR:	
 13260                           
 13261                           	psect	text64
 13262  143D                     __ptext64:	
 13263 ;; *************** function _TMR1_WriteTimer *****************
 13264 ;; Defined at:
 13265 ;;		line 120 in file "mcc_generated_files/tmr1.c"
 13266 ;; Parameters:    Size  Location     Type
 13267 ;;  timerVal        2    0[COMMON] unsigned short 
 13268 ;; Auto vars:     Size  Location     Type
 13269 ;;		None
 13270 ;; Return value:  Size  Location     Type
 13271 ;;                  1    wreg      void 
 13272 ;; Registers used:
 13273 ;;		wreg
 13274 ;; Tracked objects:
 13275 ;;		On entry : 1F/2
 13276 ;;		On exit  : 1F/0
 13277 ;;		Unchanged: 0/0
 13278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13279 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13282 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13283 ;;Total ram usage:        2 bytes
 13284 ;; Hardware stack levels used:    1
 13285 ;; This function calls:
 13286 ;;		Nothing
 13287 ;; This function is called by:
 13288 ;;		_TMR1_ISR
 13289 ;; This function uses a non-reentrant model
 13290 ;;
 13291                           
 13292                           
 13293                           ;psect for function _TMR1_WriteTimer
 13294  143D                     _TMR1_WriteTimer:	
 13295                           
 13296                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
 13297                           
 13298                           ;incstack = 0
 13299                           ; Regs used in _TMR1_WriteTimer: [wreg]
 13300  143D  0020               	movlb	0	; select bank0
 13301  143E  1D18               	btfss	24,2	;volatile
 13302  143F  2C47               	goto	i1l3265
 13303                           
 13304                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
 13305  1440  1018               	bcf	24,0	;volatile
 13306                           
 13307                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
 13308  1441  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 13309  1442  0097               	movwf	23	;volatile
 13310                           
 13311                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
 13312  1443  0870               	movf	TMR1_WriteTimer@timerVal,w
 13313  1444  0096               	movwf	22	;volatile
 13314                           
 13315                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
 13316  1445  1418               	bsf	24,0	;volatile
 13317                           
 13318                           ;mcc_generated_files/tmr1.c: 133:     }
 13319  1446  0008               	return
 13320  1447                     i1l3265:	
 13321                           
 13322                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
 13323  1447  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 13324  1448  0097               	movwf	23	;volatile
 13325                           
 13326                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
 13327  1449  0870               	movf	TMR1_WriteTimer@timerVal,w
 13328  144A  0096               	movwf	22	;volatile
 13329  144B  0008               	return
 13330  144C                     __end_of_TMR1_WriteTimer:	
 13331                           
 13332                           	psect	text65
 13333  13D3                     __ptext65:	
 13334 ;; *************** function _TMR1_CallBack *****************
 13335 ;; Defined at:
 13336 ;;		line 169 in file "mcc_generated_files/tmr1.c"
 13337 ;; Parameters:    Size  Location     Type
 13338 ;;		None
 13339 ;; Auto vars:     Size  Location     Type
 13340 ;;		None
 13341 ;; Return value:  Size  Location     Type
 13342 ;;                  1    wreg      void 
 13343 ;; Registers used:
 13344 ;;		wreg, status,2, status,0, pclath, cstack
 13345 ;; Tracked objects:
 13346 ;;		On entry : 1F/0
 13347 ;;		On exit  : 0/0
 13348 ;;		Unchanged: 0/0
 13349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13354 ;;Total ram usage:        0 bytes
 13355 ;; Hardware stack levels used:    1
 13356 ;; Hardware stack levels required when called:    1
 13357 ;; This function calls:
 13358 ;;		Absolute function
 13359 ;;		_TMR1_DefaultInterruptHandler
 13360 ;;		_TMR1_SystemTimer_ISR
 13361 ;; This function is called by:
 13362 ;;		_TMR1_ISR
 13363 ;; This function uses a non-reentrant model
 13364 ;;
 13365                           
 13366                           
 13367                           ;psect for function _TMR1_CallBack
 13368  13D3                     _TMR1_CallBack:	
 13369                           
 13370                           ;mcc_generated_files/tmr1.c: 172:     if(TMR1_InterruptHandler)
 13371                           
 13372                           ;incstack = 0
 13373                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 13374  13D3  0022               	movlb	2	; select bank2
 13375  13D4  085A               	movf	_TMR1_InterruptHandler^(0+256),w
 13376  13D5  045B               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 13377  13D6  1903               	btfsc	3,2
 13378  13D7  0008               	return
 13379                           
 13380                           ;mcc_generated_files/tmr1.c: 173:     {;mcc_generated_files/tmr1.c: 174:         TMR1_In
      +                          terruptHandler();
 13381  13D8  085B               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 13382  13D9  008A               	movwf	10
 13383  13DA  085A               	movf	_TMR1_InterruptHandler^(0+256),w
 13384  13DB  000A               	callw
 13385  13DC  3193               	pagesel	$
 13386  13DD  0008               	return
 13387  13DE                     __end_of_TMR1_CallBack:	
 13388                           
 13389                           	psect	text66
 13390  130D                     __ptext66:	
 13391 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 13392 ;; Defined at:
 13393 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 13394 ;; Parameters:    Size  Location     Type
 13395 ;;		None
 13396 ;; Auto vars:     Size  Location     Type
 13397 ;;		None
 13398 ;; Return value:  Size  Location     Type
 13399 ;;                  1    wreg      void 
 13400 ;; Registers used:
 13401 ;;		None
 13402 ;; Tracked objects:
 13403 ;;		On entry : 1F/2
 13404 ;;		On exit  : 1F/2
 13405 ;;		Unchanged: 1F/0
 13406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;Total ram usage:        0 bytes
 13412 ;; Hardware stack levels used:    1
 13413 ;; This function calls:
 13414 ;;		Nothing
 13415 ;; This function is called by:
 13416 ;;		_TMR1_Initialize
 13417 ;;		_TMR1_CallBack
 13418 ;; This function uses a non-reentrant model
 13419 ;;
 13420                           
 13421                           
 13422                           ;psect for function _TMR1_DefaultInterruptHandler
 13423  130D                     _TMR1_DefaultInterruptHandler:	
 13424                           
 13425                           ;incstack = 0
 13426                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 13427  130D  0008               	return
 13428  130E                     __end_of_TMR1_DefaultInterruptHandler:	
 13429                           
 13430                           	psect	text67
 13431  1610                     __ptext67:	
 13432 ;; *************** function _TMR1_SystemTimer_ISR *****************
 13433 ;; Defined at:
 13434 ;;		line 9 in file "SystemTimer.c"
 13435 ;; Parameters:    Size  Location     Type
 13436 ;;		None
 13437 ;; Auto vars:     Size  Location     Type
 13438 ;;		None
 13439 ;; Return value:  Size  Location     Type
 13440 ;;                  1    wreg      void 
 13441 ;; Registers used:
 13442 ;;		wreg, status,2, status,0
 13443 ;; Tracked objects:
 13444 ;;		On entry : 1F/2
 13445 ;;		On exit  : 1E/0
 13446 ;;		Unchanged: 0/0
 13447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13450 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13452 ;;Total ram usage:        1 bytes
 13453 ;; Hardware stack levels used:    1
 13454 ;; This function calls:
 13455 ;;		Nothing
 13456 ;; This function is called by:
 13457 ;;		_uart_start
 13458 ;;		_TMR1_CallBack
 13459 ;; This function uses a non-reentrant model
 13460 ;;
 13461                           
 13462                           
 13463                           ;psect for function _TMR1_SystemTimer_ISR
 13464  1610                     _TMR1_SystemTimer_ISR:	
 13465                           
 13466                           ;SystemTimer.c: 11:     system_counter++;
 13467                           
 13468                           ;incstack = 0
 13469                           ; Regs used in _TMR1_SystemTimer_ISR: [wreg+status,2+status,0]
 13470  1610  3001               	movlw	1
 13471  1611  00F0               	movwf	??_TMR1_SystemTimer_ISR
 13472  1612  0870               	movf	??_TMR1_SystemTimer_ISR,w
 13473  1613  0020               	movlb	0	; select bank0
 13474  1614  07B0               	addwf	_system_counter,f
 13475                           
 13476                           ;SystemTimer.c: 12:     _100ms_counter++;
 13477  1615  3001               	movlw	1
 13478  1616  00F0               	movwf	??_TMR1_SystemTimer_ISR
 13479  1617  0870               	movf	??_TMR1_SystemTimer_ISR,w
 13480  1618  07AB               	addwf	__100ms_counter,f
 13481                           
 13482                           ;SystemTimer.c: 13:     if( _100ms_counter == 10 )
 13483  1619  300A               	movlw	10
 13484  161A  062B               	xorwf	__100ms_counter,w
 13485  161B  1D03               	btfss	3,2
 13486  161C  0008               	return
 13487                           
 13488                           ;SystemTimer.c: 14:     {;SystemTimer.c: 15:         _100ms_counter = 0;
 13489  161D  01AB               	clrf	__100ms_counter
 13490                           
 13491                           ;SystemTimer.c: 16:         system_seconds++;
 13492  161E  3001               	movlw	1
 13493  161F  00F0               	movwf	??_TMR1_SystemTimer_ISR
 13494  1620  0870               	movf	??_TMR1_SystemTimer_ISR,w
 13495  1621  0021               	movlb	1	; select bank1
 13496  1622  07E9               	addwf	_system_seconds^(0+128),f
 13497                           
 13498                           ;SystemTimer.c: 18:         _1000ms_counter++;
 13499  1623  3001               	movlw	1
 13500  1624  00F0               	movwf	??_TMR1_SystemTimer_ISR
 13501  1625  0870               	movf	??_TMR1_SystemTimer_ISR,w
 13502  1626  0020               	movlb	0	; select bank0
 13503  1627  07AA               	addwf	__1000ms_counter,f
 13504                           
 13505                           ;SystemTimer.c: 19:         if( _1000ms_counter == 60 )
 13506  1628  303C               	movlw	60
 13507  1629  062A               	xorwf	__1000ms_counter,w
 13508  162A  1D03               	btfss	3,2
 13509  162B  0008               	return
 13510                           
 13511                           ;SystemTimer.c: 20:         {;SystemTimer.c: 21:             _1000ms_counter = 0;
 13512  162C  01AA               	clrf	__1000ms_counter
 13513                           
 13514                           ;SystemTimer.c: 22:             system_minutes++;
 13515  162D  3001               	movlw	1
 13516  162E  00F0               	movwf	??_TMR1_SystemTimer_ISR
 13517  162F  0870               	movf	??_TMR1_SystemTimer_ISR,w
 13518  1630  0021               	movlb	1	; select bank1
 13519  1631  07E8               	addwf	_system_minutes^(0+128),f
 13520  1632  0008               	return
 13521  1633                     __end_of_TMR1_SystemTimer_ISR:	
 13522                           
 13523                           	psect	text68
 13524  15F0                     __ptext68:	
 13525 ;; *************** function _EUSART_CommandHandler_ISR *****************
 13526 ;; Defined at:
 13527 ;;		line 14 in file "UartParser.c"
 13528 ;; Parameters:    Size  Location     Type
 13529 ;;		None
 13530 ;; Auto vars:     Size  Location     Type
 13531 ;;  rx_data         1    1[COMMON] unsigned char 
 13532 ;; Return value:  Size  Location     Type
 13533 ;;                  1    wreg      void 
 13534 ;; Registers used:
 13535 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13536 ;; Tracked objects:
 13537 ;;		On entry : 1F/2
 13538 ;;		On exit  : 1F/0
 13539 ;;		Unchanged: 0/0
 13540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13542 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13543 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13544 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13545 ;;Total ram usage:        2 bytes
 13546 ;; Hardware stack levels used:    1
 13547 ;; This function calls:
 13548 ;;		Nothing
 13549 ;; This function is called by:
 13550 ;;		_uart_start
 13551 ;;		_INTERRUPT_InterruptManager
 13552 ;; This function uses a non-reentrant model
 13553 ;;
 13554                           
 13555                           
 13556                           ;psect for function _EUSART_CommandHandler_ISR
 13557  15F0                     _EUSART_CommandHandler_ISR:	
 13558                           
 13559                           ;UartParser.c: 16:     uint8_t rx_data = RC1REG;
 13560                           
 13561                           ;incstack = 0
 13562                           ; Regs used in _EUSART_CommandHandler_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13563  15F0  0023               	movlb	3	; select bank3
 13564  15F1  0819               	movf	25,w	;volatile
 13565  15F2  00F0               	movwf	??_EUSART_CommandHandler_ISR
 13566  15F3  0870               	movf	??_EUSART_CommandHandler_ISR,w
 13567  15F4  00F1               	movwf	EUSART_CommandHandler_ISR@rx_data
 13568                           
 13569                           ;UartParser.c: 17:     if( lock_isr )
 13570  15F5  0020               	movlb	0	; select bank0
 13571  15F6  085F               	movf	_lock_isr,w
 13572  15F7  1D03               	btfss	3,2
 13573  15F8  0008               	return
 13574                           
 13575                           ;UartParser.c: 19:     isr_timer = ((uint8_t)((uint8_t)~system_counter)+((uint8_t)1));
 13576  15F9  0330               	decf	_system_counter,w
 13577  15FA  3AFF               	xorlw	255
 13578  15FB  00F0               	movwf	??_EUSART_CommandHandler_ISR
 13579  15FC  0870               	movf	??_EUSART_CommandHandler_ISR,w
 13580  15FD  00AE               	movwf	_isr_timer
 13581                           
 13582                           ;UartParser.c: 20:     if( rx_idx < 32 )
 13583  15FE  3020               	movlw	32
 13584  15FF  022F               	subwf	UartParser@rx_idx,w
 13585  1600  1803               	skipnc
 13586  1601  0008               	return
 13587                           
 13588                           ;UartParser.c: 21:         rx_buffer[rx_idx++] = rx_data;
 13589  1602  0871               	movf	EUSART_CommandHandler_ISR@rx_data,w
 13590  1603  00F0               	movwf	??_EUSART_CommandHandler_ISR
 13591  1604  082F               	movf	UartParser@rx_idx,w
 13592  1605  3E20               	addlw	(low (UartParser@rx_buffer| (0+256)))& (0+255)
 13593  1606  0086               	movwf	6
 13594  1607  3001               	movlw	1	; select bank2/3
 13595  1608  0087               	movwf	7
 13596  1609  0870               	movf	??_EUSART_CommandHandler_ISR,w
 13597  160A  0081               	movwf	1
 13598  160B  3001               	movlw	1
 13599  160C  00F0               	movwf	??_EUSART_CommandHandler_ISR
 13600  160D  0870               	movf	??_EUSART_CommandHandler_ISR,w
 13601  160E  07AF               	addwf	UartParser@rx_idx,f
 13602  160F  0008               	return
 13603  1610                     __end_of_EUSART_CommandHandler_ISR:	
 13604                           
 13605                           	psect	text69
 13606  1741                     __ptext69:	
 13607 ;; *************** function _EUSART_Receive_ISR *****************
 13608 ;; Defined at:
 13609 ;;		line 175 in file "mcc_generated_files/eusart.c"
 13610 ;; Parameters:    Size  Location     Type
 13611 ;;		None
 13612 ;; Auto vars:     Size  Location     Type
 13613 ;;		None
 13614 ;; Return value:  Size  Location     Type
 13615 ;;                  1    wreg      void 
 13616 ;; Registers used:
 13617 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13618 ;; Tracked objects:
 13619 ;;		On entry : 1F/2
 13620 ;;		On exit  : 0/0
 13621 ;;		Unchanged: 0/0
 13622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13627 ;;Total ram usage:        0 bytes
 13628 ;; Hardware stack levels used:    1
 13629 ;; Hardware stack levels required when called:    2
 13630 ;; This function calls:
 13631 ;;		Absolute function
 13632 ;;		_EUSART_DefaultErrorHandler
 13633 ;;		_EUSART_DefaultFramingErrorHandler
 13634 ;;		_EUSART_DefaultOverrunErrorHandler
 13635 ;;		_EUSART_RxDataHandler
 13636 ;; This function is called by:
 13637 ;;		_EUSART_Initialize
 13638 ;;		_INTERRUPT_InterruptManager
 13639 ;; This function uses a non-reentrant model
 13640 ;;
 13641                           
 13642                           
 13643                           ;psect for function _EUSART_Receive_ISR
 13644  1741                     _EUSART_Receive_ISR:	
 13645                           
 13646                           ;mcc_generated_files/eusart.c: 178:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 13647                           
 13648                           ;incstack = 0
 13649                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13650  1741  0020               	movlb	0	; select bank0
 13651  1742  083B               	movf	_eusartRxHead,w	;volatile
 13652  1743  3E40               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 13653  1744  0086               	movwf	6
 13654  1745  3001               	movlw	1	; select bank2/3
 13655  1746  0087               	movwf	7
 13656  1747  0181               	clrf	1
 13657                           
 13658                           ;mcc_generated_files/eusart.c: 180:     if(RC1STAbits.FERR){
 13659  1748  0023               	movlb	3	; select bank3
 13660  1749  1D1D               	btfss	29,2	;volatile
 13661  174A  2F58               	goto	i1l3477
 13662                           
 13663                           ;mcc_generated_files/eusart.c: 181:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 13664  174B  0020               	movlb	0	; select bank0
 13665  174C  083B               	movf	_eusartRxHead,w	;volatile
 13666  174D  3E40               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 13667  174E  0086               	movwf	6
 13668  174F  3001               	movlw	1	; select bank2/3
 13669  1750  0087               	movwf	7
 13670  1751  1481               	bsf	1,1
 13671                           
 13672                           ;mcc_generated_files/eusart.c: 182:         EUSART_FramingErrorHandler();
 13673  1752  0022               	movlb	2	; select bank2
 13674  1753  0865               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 13675  1754  008A               	movwf	10
 13676  1755  0864               	movf	_EUSART_FramingErrorHandler^(0+256),w
 13677  1756  000A               	callw
 13678  1757  3197               	pagesel	$
 13679  1758                     i1l3477:	
 13680                           
 13681                           ;mcc_generated_files/eusart.c: 185:     if(RC1STAbits.OERR){
 13682  1758  0023               	movlb	3	; select bank3
 13683  1759  1C9D               	btfss	29,1	;volatile
 13684  175A  2F68               	goto	i1l3483
 13685                           
 13686                           ;mcc_generated_files/eusart.c: 186:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 13687  175B  0020               	movlb	0	; select bank0
 13688  175C  083B               	movf	_eusartRxHead,w	;volatile
 13689  175D  3E40               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 13690  175E  0086               	movwf	6
 13691  175F  3001               	movlw	1	; select bank2/3
 13692  1760  0087               	movwf	7
 13693  1761  1501               	bsf	1,2
 13694                           
 13695                           ;mcc_generated_files/eusart.c: 187:         EUSART_OverrunErrorHandler();
 13696  1762  0022               	movlb	2	; select bank2
 13697  1763  0863               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 13698  1764  008A               	movwf	10
 13699  1765  0862               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 13700  1766  000A               	callw
 13701  1767  3197               	pagesel	$
 13702  1768                     i1l3483:	
 13703                           
 13704                           ;mcc_generated_files/eusart.c: 190:     if(eusartRxStatusBuffer[eusartRxHead].status){
 13705  1768  0020               	movlb	0	; select bank0
 13706  1769  083B               	movf	_eusartRxHead,w	;volatile
 13707  176A  3E40               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 13708  176B  0086               	movwf	6
 13709  176C  3001               	movlw	1	; select bank2/3
 13710  176D  0087               	movwf	7
 13711  176E  0801               	movf	1,w
 13712  176F  1903               	btfsc	3,2
 13713  1770  2F78               	goto	i1l3487
 13714                           
 13715                           ;mcc_generated_files/eusart.c: 191:         EUSART_ErrorHandler();
 13716  1771  0023               	movlb	3	; select bank3
 13717  1772  084D               	movf	(_EUSART_ErrorHandler+1)^(0+384),w
 13718  1773  008A               	movwf	10
 13719  1774  084C               	movf	_EUSART_ErrorHandler^(0+384),w
 13720  1775  000A               	callw
 13721  1776  3197               	pagesel	$
 13722                           
 13723                           ;mcc_generated_files/eusart.c: 192:     } else {
 13724  1777  0008               	return
 13725  1778                     i1l3487:	
 13726                           
 13727                           ;mcc_generated_files/eusart.c: 193:         EUSART_RxDataHandler();
 13728  1778  3194  24E0         	fcall	_EUSART_RxDataHandler
 13729  177A  0008               	return
 13730  177B                     __end_of_EUSART_Receive_ISR:	
 13731                           
 13732                           	psect	text70
 13733  1321                     __ptext70:	
 13734 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 13735 ;; Defined at:
 13736 ;;		line 211 in file "mcc_generated_files/eusart.c"
 13737 ;; Parameters:    Size  Location     Type
 13738 ;;		None
 13739 ;; Auto vars:     Size  Location     Type
 13740 ;;		None
 13741 ;; Return value:  Size  Location     Type
 13742 ;;                  1    wreg      void 
 13743 ;; Registers used:
 13744 ;;		None
 13745 ;; Tracked objects:
 13746 ;;		On entry : 1F/2
 13747 ;;		On exit  : 1F/3
 13748 ;;		Unchanged: 0/0
 13749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13754 ;;Total ram usage:        0 bytes
 13755 ;; Hardware stack levels used:    1
 13756 ;; This function calls:
 13757 ;;		Nothing
 13758 ;; This function is called by:
 13759 ;;		_EUSART_Initialize
 13760 ;;		_EUSART_Receive_ISR
 13761 ;; This function uses a non-reentrant model
 13762 ;;
 13763                           
 13764                           
 13765                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 13766  1321                     _EUSART_DefaultOverrunErrorHandler:	
 13767                           
 13768                           ;mcc_generated_files/eusart.c: 214:     RC1STAbits.CREN = 0;
 13769                           
 13770                           ;incstack = 0
 13771                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 13772  1321  0023               	movlb	3	; select bank3
 13773  1322  121D               	bcf	29,4	;volatile
 13774                           
 13775                           ;mcc_generated_files/eusart.c: 215:     RC1STAbits.CREN = 1;
 13776  1323  161D               	bsf	29,4	;volatile
 13777  1324  0008               	return
 13778  1325                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 13779                           
 13780                           	psect	text71
 13781  130C                     __ptext71:	
 13782 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 13783 ;; Defined at:
 13784 ;;		line 209 in file "mcc_generated_files/eusart.c"
 13785 ;; Parameters:    Size  Location     Type
 13786 ;;		None
 13787 ;; Auto vars:     Size  Location     Type
 13788 ;;		None
 13789 ;; Return value:  Size  Location     Type
 13790 ;;                  1    wreg      void 
 13791 ;; Registers used:
 13792 ;;		None
 13793 ;; Tracked objects:
 13794 ;;		On entry : 1F/2
 13795 ;;		On exit  : 1F/2
 13796 ;;		Unchanged: 1F/0
 13797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13802 ;;Total ram usage:        0 bytes
 13803 ;; Hardware stack levels used:    1
 13804 ;; This function calls:
 13805 ;;		Nothing
 13806 ;; This function is called by:
 13807 ;;		_EUSART_Initialize
 13808 ;;		_EUSART_Receive_ISR
 13809 ;; This function uses a non-reentrant model
 13810 ;;
 13811                           
 13812                           
 13813                           ;psect for function _EUSART_DefaultFramingErrorHandler
 13814  130C                     _EUSART_DefaultFramingErrorHandler:	
 13815                           
 13816                           ;incstack = 0
 13817                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 13818  130C  0008               	return
 13819  130D                     __end_of_EUSART_DefaultFramingErrorHandler:	
 13820                           
 13821                           	psect	text72
 13822  130F                     __ptext72:	
 13823 ;; *************** function _EUSART_DefaultErrorHandler *****************
 13824 ;; Defined at:
 13825 ;;		line 219 in file "mcc_generated_files/eusart.c"
 13826 ;; Parameters:    Size  Location     Type
 13827 ;;		None
 13828 ;; Auto vars:     Size  Location     Type
 13829 ;;		None
 13830 ;; Return value:  Size  Location     Type
 13831 ;;                  1    wreg      void 
 13832 ;; Registers used:
 13833 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13834 ;; Tracked objects:
 13835 ;;		On entry : 1F/3
 13836 ;;		On exit  : 1F/0
 13837 ;;		Unchanged: 0/0
 13838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13843 ;;Total ram usage:        0 bytes
 13844 ;; Hardware stack levels used:    1
 13845 ;; Hardware stack levels required when called:    1
 13846 ;; This function calls:
 13847 ;;		_EUSART_RxDataHandler
 13848 ;; This function is called by:
 13849 ;;		_EUSART_Initialize
 13850 ;;		_EUSART_Receive_ISR
 13851 ;; This function uses a non-reentrant model
 13852 ;;
 13853                           
 13854                           
 13855                           ;psect for function _EUSART_DefaultErrorHandler
 13856  130F                     _EUSART_DefaultErrorHandler:	
 13857                           
 13858                           ;mcc_generated_files/eusart.c: 220:     EUSART_RxDataHandler();
 13859                           
 13860                           ;incstack = 0
 13861                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13862  130F  3194  24E0         	fcall	_EUSART_RxDataHandler
 13863  1311  0008               	return
 13864  1312                     __end_of_EUSART_DefaultErrorHandler:	
 13865                           
 13866                           	psect	text73
 13867  14E0                     __ptext73:	
 13868 ;; *************** function _EUSART_RxDataHandler *****************
 13869 ;; Defined at:
 13870 ;;		line 199 in file "mcc_generated_files/eusart.c"
 13871 ;; Parameters:    Size  Location     Type
 13872 ;;		None
 13873 ;; Auto vars:     Size  Location     Type
 13874 ;;		None
 13875 ;; Return value:  Size  Location     Type
 13876 ;;                  1    wreg      void 
 13877 ;; Registers used:
 13878 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13879 ;; Tracked objects:
 13880 ;;		On entry : 1C/0
 13881 ;;		On exit  : 1F/0
 13882 ;;		Unchanged: 0/0
 13883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;Total ram usage:        1 bytes
 13889 ;; Hardware stack levels used:    1
 13890 ;; This function calls:
 13891 ;;		Nothing
 13892 ;; This function is called by:
 13893 ;;		_EUSART_Receive_ISR
 13894 ;;		_EUSART_DefaultErrorHandler
 13895 ;; This function uses a non-reentrant model
 13896 ;;
 13897                           
 13898                           
 13899                           ;psect for function _EUSART_RxDataHandler
 13900  14E0                     _EUSART_RxDataHandler:	
 13901                           
 13902                           ;mcc_generated_files/eusart.c: 201:     eusartRxBuffer[eusartRxHead++] = RC1REG;
 13903                           
 13904                           ;incstack = 0
 13905                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 13906  14E0  0023               	movlb	3	; select bank3
 13907  14E1  0819               	movf	25,w	;volatile
 13908  14E2  00F0               	movwf	??_EUSART_RxDataHandler
 13909  14E3  0020               	movlb	0	; select bank0
 13910  14E4  083B               	movf	_eusartRxHead,w
 13911  14E5  3EB0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 13912  14E6  0086               	movwf	6
 13913  14E7  3001               	movlw	1	; select bank3/4
 13914  14E8  0087               	movwf	7
 13915  14E9  0870               	movf	??_EUSART_RxDataHandler,w
 13916  14EA  0081               	movwf	1
 13917  14EB  3001               	movlw	1
 13918  14EC  00F0               	movwf	??_EUSART_RxDataHandler
 13919  14ED  0870               	movf	??_EUSART_RxDataHandler,w
 13920  14EE  07BB               	addwf	_eusartRxHead,f	;volatile
 13921                           
 13922                           ;mcc_generated_files/eusart.c: 202:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 13923  14EF  3008               	movlw	8
 13924  14F0  023B               	subwf	_eusartRxHead,w
 13925  14F1  1803               	btfsc	3,0
 13926                           
 13927                           ;mcc_generated_files/eusart.c: 203:     {;mcc_generated_files/eusart.c: 204:         eus
      +                          artRxHead = 0;
 13928  14F2  01BB               	clrf	_eusartRxHead	;volatile
 13929                           
 13930                           ;mcc_generated_files/eusart.c: 206:     eusartRxCount++;
 13931  14F3  3001               	movlw	1
 13932  14F4  00F0               	movwf	??_EUSART_RxDataHandler
 13933  14F5  0870               	movf	??_EUSART_RxDataHandler,w
 13934  14F6  07B9               	addwf	_eusartRxCount,f	;volatile
 13935  14F7  0008               	return
 13936  14F8                     __end_of_EUSART_RxDataHandler:	
 13937                           
 13938                           	psect	text74
 13939  140A                     __ptext74:	
 13940 ;; *************** function _ADC_ISR *****************
 13941 ;; Defined at:
 13942 ;;		line 149 in file "mcc_generated_files/adc.c"
 13943 ;; Parameters:    Size  Location     Type
 13944 ;;		None
 13945 ;; Auto vars:     Size  Location     Type
 13946 ;;		None
 13947 ;; Return value:  Size  Location     Type
 13948 ;;                  1    wreg      void 
 13949 ;; Registers used:
 13950 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13951 ;; Tracked objects:
 13952 ;;		On entry : 1F/0
 13953 ;;		On exit  : 0/0
 13954 ;;		Unchanged: 0/0
 13955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13960 ;;Total ram usage:        0 bytes
 13961 ;; Hardware stack levels used:    1
 13962 ;; Hardware stack levels required when called:    2
 13963 ;; This function calls:
 13964 ;;		Absolute function
 13965 ;;		_ADC_DefaultInterruptHandler
 13966 ;;		_ADC_VoltageControlHandler_ISR
 13967 ;; This function is called by:
 13968 ;;		_INTERRUPT_InterruptManager
 13969 ;; This function uses a non-reentrant model
 13970 ;;
 13971                           
 13972                           
 13973                           ;psect for function _ADC_ISR
 13974  140A                     _ADC_ISR:	
 13975                           
 13976                           ;mcc_generated_files/adc.c: 152:     PIR1bits.ADIF = 0;
 13977                           
 13978                           ;incstack = 0
 13979                           ; Regs used in _ADC_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13980  140A  1311               	bcf	17,6	;volatile
 13981                           
 13982                           ;mcc_generated_files/adc.c: 154:  if(ADC_InterruptHandler)
 13983  140B  0022               	movlb	2	; select bank2
 13984  140C  085E               	movf	_ADC_InterruptHandler^(0+256),w
 13985  140D  045F               	iorwf	(_ADC_InterruptHandler+1)^(0+256),w
 13986  140E  1903               	btfsc	3,2
 13987  140F  0008               	return
 13988                           
 13989                           ;mcc_generated_files/adc.c: 155:     {;mcc_generated_files/adc.c: 156:         ADC_Inter
      +                          ruptHandler();
 13990  1410  085F               	movf	(_ADC_InterruptHandler+1)^(0+256),w
 13991  1411  008A               	movwf	10
 13992  1412  085E               	movf	_ADC_InterruptHandler^(0+256),w
 13993  1413  000A               	callw
 13994  1414  3194               	pagesel	$
 13995  1415  0008               	return
 13996  1416                     __end_of_ADC_ISR:	
 13997                           
 13998                           	psect	text75
 13999  130B                     __ptext75:	
 14000 ;; *************** function _ADC_DefaultInterruptHandler *****************
 14001 ;; Defined at:
 14002 ;;		line 164 in file "mcc_generated_files/adc.c"
 14003 ;; Parameters:    Size  Location     Type
 14004 ;;		None
 14005 ;; Auto vars:     Size  Location     Type
 14006 ;;		None
 14007 ;; Return value:  Size  Location     Type
 14008 ;;                  1    wreg      void 
 14009 ;; Registers used:
 14010 ;;		None
 14011 ;; Tracked objects:
 14012 ;;		On entry : 1F/2
 14013 ;;		On exit  : 1F/2
 14014 ;;		Unchanged: 1F/0
 14015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14020 ;;Total ram usage:        0 bytes
 14021 ;; Hardware stack levels used:    1
 14022 ;; This function calls:
 14023 ;;		Nothing
 14024 ;; This function is called by:
 14025 ;;		_ADC_Initialize
 14026 ;;		_ADC_ISR
 14027 ;; This function uses a non-reentrant model
 14028 ;;
 14029                           
 14030                           
 14031                           ;psect for function _ADC_DefaultInterruptHandler
 14032  130B                     _ADC_DefaultInterruptHandler:	
 14033                           
 14034                           ;incstack = 0
 14035                           ; Regs used in _ADC_DefaultInterruptHandler: []
 14036  130B  0008               	return
 14037  130C                     __end_of_ADC_DefaultInterruptHandler:	
 14038                           
 14039                           	psect	text76
 14040  0A4A                     __ptext76:	
 14041 ;; *************** function _ADC_VoltageControlHandler_ISR *****************
 14042 ;; Defined at:
 14043 ;;		line 333 in file "vcontrol.c"
 14044 ;; Parameters:    Size  Location     Type
 14045 ;;		None
 14046 ;; Auto vars:     Size  Location     Type
 14047 ;;  pwm             4    5[BANK0 ] unsigned long 
 14048 ;;  force_inc       1    4[BANK0 ] _Bool 
 14049 ;; Return value:  Size  Location     Type
 14050 ;;                  1    wreg      void 
 14051 ;; Registers used:
 14052 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14053 ;; Tracked objects:
 14054 ;;		On entry : 1F/2
 14055 ;;		On exit  : 1F/0
 14056 ;;		Unchanged: 0/0
 14057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14059 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14060 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14061 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14062 ;;Total ram usage:        9 bytes
 14063 ;; Hardware stack levels used:    1
 14064 ;; Hardware stack levels required when called:    1
 14065 ;; This function calls:
 14066 ;;		_ADC_GetConversionResult
 14067 ;;		_LoadDutyValue
 14068 ;;		_PWM3_LoadDutyValue
 14069 ;;		___lldiv
 14070 ;;		___lmul
 14071 ;; This function is called by:
 14072 ;;		_init_chopper
 14073 ;;		_ADC_ISR
 14074 ;; This function uses a non-reentrant model
 14075 ;;
 14076                           
 14077                           
 14078                           ;psect for function _ADC_VoltageControlHandler_ISR
 14079  0A4A                     _ADC_VoltageControlHandler_ISR:	
 14080                           
 14081                           ;vcontrol.c: 335:     vdc_prev = vdc;
 14082                           
 14083                           ;incstack = 0
 14084                           ; Regs used in _ADC_VoltageControlHandler_ISR: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
 14085  0A4A  0020               	movlb	0	; select bank0
 14086  0A4B  083D               	movf	_vdc+1,w
 14087  0A4C  0021               	movlb	1	; select bank1
 14088  0A4D  00E5               	movwf	(_vdc_prev+1)^(0+128)
 14089  0A4E  0020               	movlb	0	; select bank0
 14090  0A4F  083C               	movf	_vdc,w
 14091  0A50  0021               	movlb	1	; select bank1
 14092  0A51  00E4               	movwf	_vdc_prev^(0+128)
 14093                           
 14094                           ;vcontrol.c: 336:     vdc = v_table[ADC_GetConversionResult() & 0x03FF ];
 14095  0A52  3193  232D  318A   	fcall	_ADC_GetConversionResult
 14096  0A55  30FF               	movlw	255
 14097  0A56  0570               	andwf	?_ADC_GetConversionResult,w
 14098  0A57  0020               	movlb	0	; select bank0
 14099  0A58  00C4               	movwf	??_ADC_VoltageControlHandler_ISR
 14100  0A59  3003               	movlw	3
 14101  0A5A  0571               	andwf	?_ADC_GetConversionResult+1,w
 14102  0A5B  00C5               	movwf	??_ADC_VoltageControlHandler_ISR+1
 14103  0A5C  35C4               	lslf	??_ADC_VoltageControlHandler_ISR,f
 14104  0A5D  0DC5               	rlf	??_ADC_VoltageControlHandler_ISR+1,f
 14105  0A5E  3072               	movlw	low (_v_table| (0+32768))
 14106  0A5F  0744               	addwf	??_ADC_VoltageControlHandler_ISR,w
 14107  0A60  0084               	movwf	4
 14108  0A61  3080               	movlw	high (_v_table| (0+32768))
 14109  0A62  3D45               	addwfc	??_ADC_VoltageControlHandler_ISR+1,w
 14110  0A63  0085               	movwf	5
 14111  0A64  3F00               	moviw [0]fsr0
 14112  0A65  00BC               	movwf	_vdc
 14113  0A66  3F01               	moviw [1]fsr0
 14114  0A67  00BD               	movwf	_vdc+1
 14115                           
 14116                           ;vcontrol.c: 338:     if( chopper_active == 0 )
 14117  0A68  0831               	movf	_chopper_active,w
 14118  0A69  1903               	btfsc	3,2
 14119  0A6A  0008               	return
 14120                           
 14121                           ;vcontrol.c: 341:     diff_vdc = vdc - vdc_prev;
 14122  0A6B  0021               	movlb	1	; select bank1
 14123  0A6C  0864               	movf	_vdc_prev^(0+128),w
 14124  0A6D  0020               	movlb	0	; select bank0
 14125  0A6E  023C               	subwf	_vdc,w
 14126  0A6F  0022               	movlb	2	; select bank2
 14127  0A70  00D6               	movwf	_diff_vdc^(0+256)
 14128  0A71  0021               	movlb	1	; select bank1
 14129  0A72  0865               	movf	(_vdc_prev+1)^(0+128),w
 14130  0A73  0020               	movlb	0	; select bank0
 14131  0A74  3B3D               	subwfb	_vdc+1,w
 14132  0A75  0022               	movlb	2	; select bank2
 14133  0A76  00D7               	movwf	(_diff_vdc+1)^(0+256)
 14134                           
 14135                           ;vcontrol.c: 342:     if( vdc > vdc_prev )
 14136  0A77  0020               	movlb	0	; select bank0
 14137  0A78  083D               	movf	_vdc+1,w
 14138  0A79  0021               	movlb	1	; select bank1
 14139  0A7A  0265               	subwf	(_vdc_prev+1)^(0+128),w
 14140  0A7B  1D03               	skipz
 14141  0A7C  2A81               	goto	u181_25
 14142  0A7D  0020               	movlb	0	; select bank0
 14143  0A7E  083C               	movf	_vdc,w
 14144  0A7F  0021               	movlb	1	; select bank1
 14145  0A80  0264               	subwf	_vdc_prev^(0+128),w
 14146  0A81                     u181_25:	
 14147  0A81  1803               	skipnc
 14148  0A82  2A87               	goto	i1l3377
 14149                           
 14150                           ;vcontrol.c: 343:         diff_positive = 1;
 14151  0A83  0020               	movlb	0	; select bank0
 14152  0A84  01B2               	clrf	_diff_positive
 14153  0A85  0AB2               	incf	_diff_positive,f
 14154  0A86  2A89               	goto	i1l3379
 14155  0A87                     i1l3377:	
 14156                           
 14157                           ;vcontrol.c: 345:         diff_positive = 0;
 14158  0A87  0020               	movlb	0	; select bank0
 14159  0A88  01B2               	clrf	_diff_positive
 14160  0A89                     i1l3379:	
 14161                           
 14162                           ;vcontrol.c: 347:     if( vdc > vdc_critic )
 14163  0A89  083D               	movf	_vdc+1,w
 14164  0A8A  023F               	subwf	_vdc_critic+1,w
 14165  0A8B  1D03               	skipz
 14166  0A8C  2A8F               	goto	u182_25
 14167  0A8D  083C               	movf	_vdc,w
 14168  0A8E  023E               	subwf	_vdc_critic,w
 14169  0A8F                     u182_25:	
 14170  0A8F  1803               	skipnc
 14171  0A90  2AAA               	goto	i1l3389
 14172                           
 14173                           ;vcontrol.c: 348:     {;vcontrol.c: 349:         do { LATAbits.LATA4 = 1; } while(0);
 14174  0A91  0022               	movlb	2	; select bank2
 14175  0A92  160C               	bsf	12,4	;volatile
 14176                           
 14177                           ;vcontrol.c: 350:         do { LATAbits.LATA5 = 0; } while(0);
 14178  0A93  128C               	bcf	12,5	;volatile
 14179                           
 14180                           ;vcontrol.c: 351:         PWM3_LoadDutyValue(759);
 14181  0A94  30F7               	movlw	247
 14182  0A95  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
 14183  0A96  3002               	movlw	2
 14184  0A97  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 14185  0A98  3194  24B4  318A   	fcall	_PWM3_LoadDutyValue
 14186                           
 14187                           ;vcontrol.c: 352:         current_duty = 759;
 14188  0A9B  30F7               	movlw	247
 14189  0A9C  0020               	movlb	0	; select bank0
 14190  0A9D  00A2               	movwf	_current_duty
 14191  0A9E  3002               	movlw	2
 14192  0A9F  00A3               	movwf	_current_duty+1
 14193                           
 14194                           ;vcontrol.c: 353:         target_duty = 759;
 14195  0AA0  30F7               	movlw	247
 14196  0AA1  00A4               	movwf	_target_duty
 14197  0AA2  3002               	movlw	2
 14198  0AA3  00A5               	movwf	_target_duty+1
 14199  0AA4                     i1l3387:	
 14200                           
 14201                           ;vcontrol.c: 354:         pwm_duty = 759;
 14202  0AA4  30F7               	movlw	247
 14203  0AA5  0020               	movlb	0	; select bank0
 14204  0AA6  00A6               	movwf	_pwm_duty
 14205  0AA7  3002               	movlw	2
 14206  0AA8  00A7               	movwf	_pwm_duty+1
 14207                           
 14208                           ;vcontrol.c: 355:     }
 14209  0AA9  2B79               	goto	i1l3439
 14210  0AAA                     i1l3389:	
 14211                           
 14212                           ;vcontrol.c: 357:     {;vcontrol.c: 358:         if( vdc >= vdc_max )
 14213  0AAA  0841               	movf	_vdc_max+1,w
 14214  0AAB  023D               	subwf	_vdc+1,w
 14215  0AAC  1D03               	skipz
 14216  0AAD  2AB0               	goto	u183_25
 14217  0AAE  0840               	movf	_vdc_max,w
 14218  0AAF  023C               	subwf	_vdc,w
 14219  0AB0                     u183_25:	
 14220  0AB0  1C03               	skipc
 14221  0AB1  2AB6               	goto	i1l3393
 14222                           
 14223                           ;vcontrol.c: 359:         {;vcontrol.c: 361:             do { LATAbits.LATA4 = 1; } whil
      +                          e(0);
 14224  0AB2  0022               	movlb	2	; select bank2
 14225  0AB3  160C               	bsf	12,4	;volatile
 14226                           
 14227                           ;vcontrol.c: 362:             do { LATAbits.LATA5 = 0; } while(0);
 14228  0AB4  128C               	bcf	12,5	;volatile
 14229  0AB5  2AA4               	goto	i1l3387
 14230  0AB6                     i1l3393:	
 14231                           
 14232                           ;vcontrol.c: 366:         {;vcontrol.c: 367:             if( vdc >= vdc_min )
 14233  0AB6  0843               	movf	_vdc_min+1,w
 14234  0AB7  023D               	subwf	_vdc+1,w
 14235  0AB8  1D03               	skipz
 14236  0AB9  2ABC               	goto	u184_25
 14237  0ABA  0842               	movf	_vdc_min,w
 14238  0ABB  023C               	subwf	_vdc,w
 14239  0ABC                     u184_25:	
 14240  0ABC  1C03               	skipc
 14241  0ABD  2B50               	goto	i1l873
 14242                           
 14243                           ;vcontrol.c: 368:             {;vcontrol.c: 369:                 do { LATAbits.LATA4 = 1
      +                          ; } while(0);
 14244  0ABE  0022               	movlb	2	; select bank2
 14245  0ABF  160C               	bsf	12,4	;volatile
 14246                           
 14247                           ;vcontrol.c: 370:                 do { LATAbits.LATA5 = 1; } while(0);
 14248  0AC0  168C               	bsf	12,5	;volatile
 14249                           
 14250                           ;vcontrol.c: 371:                 _Bool force_inc = 1;
 14251  0AC1  0020               	movlb	0	; select bank0
 14252  0AC2  01C8               	clrf	ADC_VoltageControlHandler_ISR@force_inc
 14253  0AC3  0AC8               	incf	ADC_VoltageControlHandler_ISR@force_inc,f
 14254                           
 14255                           ;vcontrol.c: 372:                 if( diff_positive == 1 )
 14256  0AC4  0332               	decf	_diff_positive,w
 14257  0AC5  1D03               	btfss	3,2
 14258  0AC6  2B29               	goto	i1l3411
 14259                           
 14260                           ;vcontrol.c: 373:                 {;vcontrol.c: 374:                     uint32_t pwm = 
      +                          (uint32_t)759 * (uint32_t)(vdc - vdc_min);
 14261  0AC7  0842               	movf	_vdc_min,w
 14262  0AC8  023C               	subwf	_vdc,w
 14263  0AC9  00F0               	movwf	___lmul@multiplier
 14264  0ACA  0843               	movf	_vdc_min+1,w
 14265  0ACB  3B3D               	subwfb	_vdc+1,w
 14266  0ACC  00F1               	movwf	___lmul@multiplier+1
 14267  0ACD  01F2               	clrf	___lmul@multiplier+2
 14268  0ACE  01F3               	clrf	___lmul@multiplier+3
 14269  0ACF  3000               	movlw	0
 14270  0AD0  00F7               	movwf	___lmul@multiplicand+3
 14271  0AD1  3000               	movlw	0
 14272  0AD2  00F6               	movwf	___lmul@multiplicand+2
 14273  0AD3  3002               	movlw	2
 14274  0AD4  00F5               	movwf	___lmul@multiplicand+1
 14275  0AD5  30F7               	movlw	247
 14276  0AD6  00F4               	movwf	___lmul@multiplicand
 14277  0AD7  3196  26AC  318A   	fcall	___lmul
 14278  0ADA  0873               	movf	?___lmul+3,w
 14279  0ADB  00CC               	movwf	ADC_VoltageControlHandler_ISR@pwm+3
 14280  0ADC  0872               	movf	?___lmul+2,w
 14281  0ADD  00CB               	movwf	ADC_VoltageControlHandler_ISR@pwm+2
 14282  0ADE  0871               	movf	?___lmul+1,w
 14283  0ADF  00CA               	movwf	ADC_VoltageControlHandler_ISR@pwm+1
 14284  0AE0  0870               	movf	?___lmul,w
 14285  0AE1  00C9               	movwf	ADC_VoltageControlHandler_ISR@pwm
 14286                           
 14287                           ;vcontrol.c: 375:                     pwm /= (vdc_max - vdc_min);
 14288  0AE2  0842               	movf	_vdc_min,w
 14289  0AE3  0240               	subwf	_vdc_max,w
 14290  0AE4  00F0               	movwf	___lldiv@divisor
 14291  0AE5  0843               	movf	_vdc_min+1,w
 14292  0AE6  3B41               	subwfb	_vdc_max+1,w
 14293  0AE7  00F1               	movwf	___lldiv@divisor+1
 14294  0AE8  01F2               	clrf	___lldiv@divisor+2
 14295  0AE9  01F3               	clrf	___lldiv@divisor+3
 14296  0AEA  084C               	movf	ADC_VoltageControlHandler_ISR@pwm+3,w
 14297  0AEB  00F7               	movwf	___lldiv@dividend+3
 14298  0AEC  084B               	movf	ADC_VoltageControlHandler_ISR@pwm+2,w
 14299  0AED  00F6               	movwf	___lldiv@dividend+2
 14300  0AEE  084A               	movf	ADC_VoltageControlHandler_ISR@pwm+1,w
 14301  0AEF  00F5               	movwf	___lldiv@dividend+1
 14302  0AF0  0849               	movf	ADC_VoltageControlHandler_ISR@pwm,w
 14303  0AF1  00F4               	movwf	___lldiv@dividend
 14304  0AF2  3188  20A8  318A   	fcall	___lldiv
 14305  0AF5  0873               	movf	?___lldiv+3,w
 14306  0AF6  00CC               	movwf	ADC_VoltageControlHandler_ISR@pwm+3
 14307  0AF7  0872               	movf	?___lldiv+2,w
 14308  0AF8  00CB               	movwf	ADC_VoltageControlHandler_ISR@pwm+2
 14309  0AF9  0871               	movf	?___lldiv+1,w
 14310  0AFA  00CA               	movwf	ADC_VoltageControlHandler_ISR@pwm+1
 14311  0AFB  0870               	movf	?___lldiv,w
 14312  0AFC  00C9               	movwf	ADC_VoltageControlHandler_ISR@pwm
 14313                           
 14314                           ;vcontrol.c: 376:                     if( pwm > 759 )
 14315  0AFD  084C               	movf	ADC_VoltageControlHandler_ISR@pwm+3,w
 14316  0AFE  1D03               	btfss	3,2
 14317  0AFF  2B09               	goto	i1l3401
 14318  0B00  084B               	movf	ADC_VoltageControlHandler_ISR@pwm+2,w
 14319  0B01  1D03               	btfss	3,2
 14320  0B02  2B09               	goto	i1l3401
 14321  0B03  30F8               	movlw	248
 14322  0B04  0249               	subwf	ADC_VoltageControlHandler_ISR@pwm,w
 14323  0B05  3002               	movlw	2
 14324  0B06  3B4A               	subwfb	ADC_VoltageControlHandler_ISR@pwm+1,w
 14325  0B07  1C03               	btfss	3,0
 14326  0B08  2B0E               	goto	i1l3405
 14327  0B09                     i1l3401:	
 14328                           
 14329                           ;vcontrol.c: 377:                     {;vcontrol.c: 378:                         pwm_dut
      +                          y = 759;
 14330  0B09  30F7               	movlw	247
 14331  0B0A  00A6               	movwf	_pwm_duty
 14332  0B0B  3002               	movlw	2
 14333  0B0C  00A7               	movwf	_pwm_duty+1
 14334                           
 14335                           ;vcontrol.c: 380:                     }
 14336  0B0D  2B28               	goto	i1l3403
 14337  0B0E                     i1l3405:	
 14338                           
 14339                           ;vcontrol.c: 382:                     {;vcontrol.c: 383:                         if( pwm
      +                          _duty < pwm )
 14340  0B0E  0826               	movf	_pwm_duty,w
 14341  0B0F  00C4               	movwf	??_ADC_VoltageControlHandler_ISR
 14342  0B10  0827               	movf	_pwm_duty+1,w
 14343  0B11  00C5               	movwf	??_ADC_VoltageControlHandler_ISR+1
 14344  0B12  01C6               	clrf	??_ADC_VoltageControlHandler_ISR+2
 14345  0B13  01C7               	clrf	??_ADC_VoltageControlHandler_ISR+3
 14346  0B14  084C               	movf	ADC_VoltageControlHandler_ISR@pwm+3,w
 14347  0B15  0247               	subwf	??_ADC_VoltageControlHandler_ISR+3,w
 14348  0B16  1D03               	skipz
 14349  0B17  2B22               	goto	u187_25
 14350  0B18  084B               	movf	ADC_VoltageControlHandler_ISR@pwm+2,w
 14351  0B19  0246               	subwf	??_ADC_VoltageControlHandler_ISR+2,w
 14352  0B1A  1D03               	skipz
 14353  0B1B  2B22               	goto	u187_25
 14354  0B1C  084A               	movf	ADC_VoltageControlHandler_ISR@pwm+1,w
 14355  0B1D  0245               	subwf	??_ADC_VoltageControlHandler_ISR+1,w
 14356  0B1E  1D03               	skipz
 14357  0B1F  2B22               	goto	u187_25
 14358  0B20  0849               	movf	ADC_VoltageControlHandler_ISR@pwm,w
 14359  0B21  0244               	subwf	??_ADC_VoltageControlHandler_ISR,w
 14360  0B22                     u187_25:	
 14361  0B22  1803               	skipnc
 14362  0B23  2B29               	goto	i1l3411
 14363                           
 14364                           ;vcontrol.c: 384:                         {;vcontrol.c: 385:                            
      +                           pwm_duty = pwm;
 14365  0B24  084A               	movf	ADC_VoltageControlHandler_ISR@pwm+1,w
 14366  0B25  00A7               	movwf	_pwm_duty+1
 14367  0B26  0849               	movf	ADC_VoltageControlHandler_ISR@pwm,w
 14368  0B27  00A6               	movwf	_pwm_duty
 14369  0B28                     i1l3403:	
 14370                           
 14371                           ;vcontrol.c: 379:                         force_inc = 0;
 14372  0B28  01C8               	clrf	ADC_VoltageControlHandler_ISR@force_inc
 14373  0B29                     i1l3411:	
 14374                           
 14375                           ;vcontrol.c: 390:                 if( force_inc == 1 )
 14376  0B29  0348               	decf	ADC_VoltageControlHandler_ISR@force_inc,w
 14377  0B2A  1D03               	btfss	3,2
 14378  0B2B  2B4C               	goto	i1l3425
 14379                           
 14380                           ;vcontrol.c: 391:                 {;vcontrol.c: 392:                     if( duty_count_
      +                          up >= duty_count_up_max )
 14381  0B2C  0022               	movlb	2	; select bank2
 14382  0B2D  086F               	movf	(_duty_count_up_max+1)^(0+256),w
 14383  0B2E  0253               	subwf	(_duty_count_up+1)^(0+256),w
 14384  0B2F  1D03               	skipz
 14385  0B30  2B33               	goto	u189_25
 14386  0B31  086E               	movf	_duty_count_up_max^(0+256),w
 14387  0B32  0252               	subwf	_duty_count_up^(0+256),w
 14388  0B33                     u189_25:	
 14389  0B33  1C03               	skipc
 14390  0B34  2B48               	goto	i1l3423
 14391                           
 14392                           ;vcontrol.c: 393:                     {;vcontrol.c: 394:                         duty_co
      +                          unt_up = 0;
 14393  0B35  01D2               	clrf	_duty_count_up^(0+256)
 14394  0B36  01D3               	clrf	(_duty_count_up+1)^(0+256)
 14395                           
 14396                           ;vcontrol.c: 395:                         pwm_duty += duty_pwm_inc;
 14397  0B37  3008               	movlw	8
 14398  0B38  0020               	movlb	0	; select bank0
 14399  0B39  07A6               	addwf	_pwm_duty,f
 14400  0B3A  3000               	movlw	0
 14401  0B3B  3DA7               	addwfc	_pwm_duty+1,f
 14402                           
 14403                           ;vcontrol.c: 396:                         if( pwm_duty > 759 )
 14404  0B3C  3002               	movlw	2
 14405  0B3D  0227               	subwf	_pwm_duty+1,w
 14406  0B3E  30F8               	movlw	248
 14407  0B3F  1903               	skipnz
 14408  0B40  0226               	subwf	_pwm_duty,w
 14409  0B41  1C03               	skipc
 14410  0B42  2B4C               	goto	i1l3425
 14411                           
 14412                           ;vcontrol.c: 397:                             pwm_duty = 759;
 14413  0B43  30F7               	movlw	247
 14414  0B44  00A6               	movwf	_pwm_duty
 14415  0B45  3002               	movlw	2
 14416  0B46  00A7               	movwf	_pwm_duty+1
 14417  0B47  2B4C               	goto	i1l3425
 14418  0B48                     i1l3423:	
 14419                           
 14420                           ;vcontrol.c: 400:                         duty_count_up++;
 14421  0B48  3001               	movlw	1
 14422  0B49  07D2               	addwf	_duty_count_up^(0+256),f
 14423  0B4A  3000               	movlw	0
 14424  0B4B  3DD3               	addwfc	(_duty_count_up+1)^(0+256),f
 14425  0B4C                     i1l3425:	
 14426                           
 14427                           ;vcontrol.c: 402:                 duty_count_down = 0;
 14428  0B4C  0022               	movlb	2	; select bank2
 14429  0B4D  01D0               	clrf	_duty_count_down^(0+256)
 14430  0B4E  01D1               	clrf	(_duty_count_down+1)^(0+256)
 14431                           
 14432                           ;vcontrol.c: 403:             }
 14433  0B4F  2B79               	goto	i1l3439
 14434  0B50                     i1l873:	
 14435                           ;vcontrol.c: 405:             {;vcontrol.c: 406:                 do { LATAbits.LATA4 = 0
      +                          ; } while(0);
 14436                           
 14437  0B50  0022               	movlb	2	; select bank2
 14438  0B51  120C               	bcf	12,4	;volatile
 14439                           
 14440                           ;vcontrol.c: 407:                 do { LATAbits.LATA5 = 1; } while(0);
 14441  0B52  168C               	bsf	12,5	;volatile
 14442                           
 14443                           ;vcontrol.c: 408:                 if( duty_count_down >= duty_count_down_max )
 14444  0B53  086B               	movf	(_duty_count_down_max+1)^(0+256),w
 14445  0B54  0251               	subwf	(_duty_count_down+1)^(0+256),w
 14446  0B55  1D03               	skipz
 14447  0B56  2B59               	goto	u191_25
 14448  0B57  086A               	movf	_duty_count_down_max^(0+256),w
 14449  0B58  0250               	subwf	_duty_count_down^(0+256),w
 14450  0B59                     u191_25:	
 14451  0B59  1C03               	skipc
 14452  0B5A  2B75               	goto	i1l3437
 14453                           
 14454                           ;vcontrol.c: 409:                 {;vcontrol.c: 410:                     duty_count_down
      +                           = 0;
 14455  0B5B  01D0               	clrf	_duty_count_down^(0+256)
 14456  0B5C  01D1               	clrf	(_duty_count_down+1)^(0+256)
 14457                           
 14458                           ;vcontrol.c: 411:                     if( pwm_duty > duty_pwm_dec )
 14459  0B5D  0020               	movlb	0	; select bank0
 14460  0B5E  0827               	movf	_pwm_duty+1,w
 14461  0B5F  0022               	movlb	2	; select bank2
 14462  0B60  026D               	subwf	(_duty_pwm_dec+1)^(0+256),w
 14463  0B61  1D03               	skipz
 14464  0B62  2B67               	goto	u192_25
 14465  0B63  0020               	movlb	0	; select bank0
 14466  0B64  0826               	movf	_pwm_duty,w
 14467  0B65  0022               	movlb	2	; select bank2
 14468  0B66  026C               	subwf	_duty_pwm_dec^(0+256),w
 14469  0B67                     u192_25:	
 14470  0B67  1803               	skipnc
 14471  0B68  2B71               	goto	i1l3435
 14472                           
 14473                           ;vcontrol.c: 412:                         pwm_duty -= duty_pwm_dec;
 14474  0B69  086C               	movf	_duty_pwm_dec^(0+256),w
 14475  0B6A  0020               	movlb	0	; select bank0
 14476  0B6B  02A6               	subwf	_pwm_duty,f
 14477  0B6C  0022               	movlb	2	; select bank2
 14478  0B6D  086D               	movf	(_duty_pwm_dec+1)^(0+256),w
 14479  0B6E  0020               	movlb	0	; select bank0
 14480  0B6F  3BA7               	subwfb	_pwm_duty+1,f
 14481  0B70  2B79               	goto	i1l3439
 14482  0B71                     i1l3435:	
 14483                           
 14484                           ;vcontrol.c: 414:                         pwm_duty = 0;
 14485  0B71  0020               	movlb	0	; select bank0
 14486  0B72  01A6               	clrf	_pwm_duty
 14487  0B73  01A7               	clrf	_pwm_duty+1
 14488  0B74  2B79               	goto	i1l3439
 14489  0B75                     i1l3437:	
 14490                           
 14491                           ;vcontrol.c: 417:                     duty_count_down++;
 14492  0B75  3001               	movlw	1
 14493  0B76  07D0               	addwf	_duty_count_down^(0+256),f
 14494  0B77  3000               	movlw	0
 14495  0B78  3DD1               	addwfc	(_duty_count_down+1)^(0+256),f
 14496  0B79                     i1l3439:	
 14497                           
 14498                           ;vcontrol.c: 423:     LoadDutyValue( pwm_duty );
 14499  0B79  0020               	movlb	0	; select bank0
 14500  0B7A  0827               	movf	_pwm_duty+1,w
 14501  0B7B  00F1               	movwf	LoadDutyValue@duty+1
 14502  0B7C  0826               	movf	_pwm_duty,w
 14503  0B7D  00F0               	movwf	LoadDutyValue@duty
 14504  0B7E  3193  2332         	fcall	_LoadDutyValue
 14505  0B80  0008               	return
 14506  0B81                     __end_of_ADC_VoltageControlHandler_ISR:	
 14507                           
 14508                           	psect	text77
 14509  16AC                     __ptext77:	
 14510 ;; *************** function ___lmul *****************
 14511 ;; Defined at:
 14512 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 14513 ;; Parameters:    Size  Location     Type
 14514 ;;  multiplier      4    0[COMMON] unsigned long 
 14515 ;;  multiplicand    4    4[COMMON] unsigned long 
 14516 ;; Auto vars:     Size  Location     Type
 14517 ;;  product         4    8[COMMON] unsigned long 
 14518 ;; Return value:  Size  Location     Type
 14519 ;;                  4    0[COMMON] unsigned long 
 14520 ;; Registers used:
 14521 ;;		wreg, status,2, status,0
 14522 ;; Tracked objects:
 14523 ;;		On entry : 1F/0
 14524 ;;		On exit  : 1F/0
 14525 ;;		Unchanged: 1F/0
 14526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14527 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14528 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14530 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14531 ;;Total ram usage:       12 bytes
 14532 ;; Hardware stack levels used:    1
 14533 ;; This function calls:
 14534 ;;		Nothing
 14535 ;; This function is called by:
 14536 ;;		_ADC_VoltageControlHandler_ISR
 14537 ;; This function uses a non-reentrant model
 14538 ;;
 14539                           
 14540                           
 14541                           ;psect for function ___lmul
 14542  16AC                     ___lmul:	
 14543                           
 14544                           ;incstack = 0
 14545                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14546  16AC  3000               	movlw	0
 14547  16AD  00FB               	movwf	___lmul@product+3
 14548  16AE  3000               	movlw	0
 14549  16AF  00FA               	movwf	___lmul@product+2
 14550  16B0  3000               	movlw	0
 14551  16B1  00F9               	movwf	___lmul@product+1
 14552  16B2  3000               	movlw	0
 14553  16B3  00F8               	movwf	___lmul@product
 14554  16B4                     i1l3045:	
 14555  16B4  1C70               	btfss	___lmul@multiplier,0
 14556  16B5  2EBE               	goto	i1l3049
 14557  16B6  0874               	movf	___lmul@multiplicand,w
 14558  16B7  07F8               	addwf	___lmul@product,f
 14559  16B8  0875               	movf	___lmul@multiplicand+1,w
 14560  16B9  3DF9               	addwfc	___lmul@product+1,f
 14561  16BA  0876               	movf	___lmul@multiplicand+2,w
 14562  16BB  3DFA               	addwfc	___lmul@product+2,f
 14563  16BC  0877               	movf	___lmul@multiplicand+3,w
 14564  16BD  3DFB               	addwfc	___lmul@product+3,f
 14565  16BE                     i1l3049:	
 14566  16BE  3001               	movlw	1
 14567  16BF                     u154_25:	
 14568  16BF  35F4               	lslf	___lmul@multiplicand,f
 14569  16C0  0DF5               	rlf	___lmul@multiplicand+1,f
 14570  16C1  0DF6               	rlf	___lmul@multiplicand+2,f
 14571  16C2  0DF7               	rlf	___lmul@multiplicand+3,f
 14572  16C3  0B89               	decfsz	9,f
 14573  16C4  2EBF               	goto	u154_25
 14574  16C5  3001               	movlw	1
 14575  16C6                     u155_25:	
 14576  16C6  36F3               	lsrf	___lmul@multiplier+3,f
 14577  16C7  0CF2               	rrf	___lmul@multiplier+2,f
 14578  16C8  0CF1               	rrf	___lmul@multiplier+1,f
 14579  16C9  0CF0               	rrf	___lmul@multiplier,f
 14580  16CA  0B89               	decfsz	9,f
 14581  16CB  2EC6               	goto	u155_25
 14582  16CC  0873               	movf	___lmul@multiplier+3,w
 14583  16CD  0472               	iorwf	___lmul@multiplier+2,w
 14584  16CE  0471               	iorwf	___lmul@multiplier+1,w
 14585  16CF  0470               	iorwf	___lmul@multiplier,w
 14586  16D0  1D03               	skipz
 14587  16D1  2EB4               	goto	i1l3045
 14588  16D2  087B               	movf	___lmul@product+3,w
 14589  16D3  00F3               	movwf	?___lmul+3
 14590  16D4  087A               	movf	___lmul@product+2,w
 14591  16D5  00F2               	movwf	?___lmul+2
 14592  16D6  0879               	movf	___lmul@product+1,w
 14593  16D7  00F1               	movwf	?___lmul+1
 14594  16D8  0878               	movf	___lmul@product,w
 14595  16D9  00F0               	movwf	?___lmul
 14596  16DA  0008               	return
 14597  16DB                     __end_of___lmul:	
 14598                           
 14599                           	psect	text78
 14600  08A8                     __ptext78:	
 14601 ;; *************** function ___lldiv *****************
 14602 ;; Defined at:
 14603 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 14604 ;; Parameters:    Size  Location     Type
 14605 ;;  divisor         4    0[COMMON] unsigned long 
 14606 ;;  dividend        4    4[COMMON] unsigned long 
 14607 ;; Auto vars:     Size  Location     Type
 14608 ;;  quotient        4    9[COMMON] unsigned long 
 14609 ;;  counter         1   13[COMMON] unsigned char 
 14610 ;; Return value:  Size  Location     Type
 14611 ;;                  4    0[COMMON] unsigned long 
 14612 ;; Registers used:
 14613 ;;		wreg, status,2, status,0
 14614 ;; Tracked objects:
 14615 ;;		On entry : 1F/0
 14616 ;;		On exit  : 1F/0
 14617 ;;		Unchanged: 1F/0
 14618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14619 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14620 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14621 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14622 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14623 ;;Total ram usage:       14 bytes
 14624 ;; Hardware stack levels used:    1
 14625 ;; This function calls:
 14626 ;;		Nothing
 14627 ;; This function is called by:
 14628 ;;		_ADC_VoltageControlHandler_ISR
 14629 ;; This function uses a non-reentrant model
 14630 ;;
 14631                           
 14632                           
 14633                           ;psect for function ___lldiv
 14634  08A8                     ___lldiv:	
 14635                           
 14636                           ;incstack = 0
 14637                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 14638  08A8  3000               	movlw	0
 14639  08A9  00FC               	movwf	___lldiv@quotient+3
 14640  08AA  3000               	movlw	0
 14641  08AB  00FB               	movwf	___lldiv@quotient+2
 14642  08AC  3000               	movlw	0
 14643  08AD  00FA               	movwf	___lldiv@quotient+1
 14644  08AE  3000               	movlw	0
 14645  08AF  00F9               	movwf	___lldiv@quotient
 14646  08B0  0873               	movf	___lldiv@divisor+3,w
 14647  08B1  0472               	iorwf	___lldiv@divisor+2,w
 14648  08B2  0471               	iorwf	___lldiv@divisor+1,w
 14649  08B3  0470               	iorwf	___lldiv@divisor,w
 14650  08B4  1903               	skipnz
 14651  08B5  28F1               	goto	i1l3077
 14652  08B6  01FD               	clrf	___lldiv@counter
 14653  08B7  0AFD               	incf	___lldiv@counter,f
 14654  08B8                     i1l3063:	
 14655  08B8  1BF3               	btfsc	___lldiv@divisor+3,7
 14656  08B9  28C6               	goto	i1l3065
 14657  08BA  3001               	movlw	1
 14658  08BB                     u158_25:	
 14659  08BB  35F0               	lslf	___lldiv@divisor,f
 14660  08BC  0DF1               	rlf	___lldiv@divisor+1,f
 14661  08BD  0DF2               	rlf	___lldiv@divisor+2,f
 14662  08BE  0DF3               	rlf	___lldiv@divisor+3,f
 14663  08BF  0B89               	decfsz	9,f
 14664  08C0  28BB               	goto	u158_25
 14665  08C1  3001               	movlw	1
 14666  08C2  00F8               	movwf	??___lldiv
 14667  08C3  0878               	movf	??___lldiv,w
 14668  08C4  07FD               	addwf	___lldiv@counter,f
 14669  08C5  28B8               	goto	i1l3063
 14670  08C6                     i1l3065:	
 14671  08C6  3001               	movlw	1
 14672  08C7                     u160_25:	
 14673  08C7  35F9               	lslf	___lldiv@quotient,f
 14674  08C8  0DFA               	rlf	___lldiv@quotient+1,f
 14675  08C9  0DFB               	rlf	___lldiv@quotient+2,f
 14676  08CA  0DFC               	rlf	___lldiv@quotient+3,f
 14677  08CB  0B89               	decfsz	9,f
 14678  08CC  28C7               	goto	u160_25
 14679  08CD  0873               	movf	___lldiv@divisor+3,w
 14680  08CE  0277               	subwf	___lldiv@dividend+3,w
 14681  08CF  1D03               	skipz
 14682  08D0  28DB               	goto	u161_25
 14683  08D1  0872               	movf	___lldiv@divisor+2,w
 14684  08D2  0276               	subwf	___lldiv@dividend+2,w
 14685  08D3  1D03               	skipz
 14686  08D4  28DB               	goto	u161_25
 14687  08D5  0871               	movf	___lldiv@divisor+1,w
 14688  08D6  0275               	subwf	___lldiv@dividend+1,w
 14689  08D7  1D03               	skipz
 14690  08D8  28DB               	goto	u161_25
 14691  08D9  0870               	movf	___lldiv@divisor,w
 14692  08DA  0274               	subwf	___lldiv@dividend,w
 14693  08DB                     u161_25:	
 14694  08DB  1C03               	skipc
 14695  08DC  28E6               	goto	i1l3073
 14696  08DD  0870               	movf	___lldiv@divisor,w
 14697  08DE  02F4               	subwf	___lldiv@dividend,f
 14698  08DF  0871               	movf	___lldiv@divisor+1,w
 14699  08E0  3BF5               	subwfb	___lldiv@dividend+1,f
 14700  08E1  0872               	movf	___lldiv@divisor+2,w
 14701  08E2  3BF6               	subwfb	___lldiv@dividend+2,f
 14702  08E3  0873               	movf	___lldiv@divisor+3,w
 14703  08E4  3BF7               	subwfb	___lldiv@dividend+3,f
 14704  08E5  1479               	bsf	___lldiv@quotient,0
 14705  08E6                     i1l3073:	
 14706  08E6  3001               	movlw	1
 14707  08E7                     u162_25:	
 14708  08E7  36F3               	lsrf	___lldiv@divisor+3,f
 14709  08E8  0CF2               	rrf	___lldiv@divisor+2,f
 14710  08E9  0CF1               	rrf	___lldiv@divisor+1,f
 14711  08EA  0CF0               	rrf	___lldiv@divisor,f
 14712  08EB  0B89               	decfsz	9,f
 14713  08EC  28E7               	goto	u162_25
 14714  08ED  3001               	movlw	1
 14715  08EE  02FD               	subwf	___lldiv@counter,f
 14716  08EF  1D03               	btfss	3,2
 14717  08F0  28C6               	goto	i1l3065
 14718  08F1                     i1l3077:	
 14719  08F1  087C               	movf	___lldiv@quotient+3,w
 14720  08F2  00F3               	movwf	?___lldiv+3
 14721  08F3  087B               	movf	___lldiv@quotient+2,w
 14722  08F4  00F2               	movwf	?___lldiv+2
 14723  08F5  087A               	movf	___lldiv@quotient+1,w
 14724  08F6  00F1               	movwf	?___lldiv+1
 14725  08F7  0879               	movf	___lldiv@quotient,w
 14726  08F8  00F0               	movwf	?___lldiv
 14727  08F9  0008               	return
 14728  08FA                     __end_of___lldiv:	
 14729                           
 14730                           	psect	text79
 14731  14B4                     __ptext79:	
 14732 ;; *************** function _PWM3_LoadDutyValue *****************
 14733 ;; Defined at:
 14734 ;;		line 74 in file "mcc_generated_files/pwm3.c"
 14735 ;; Parameters:    Size  Location     Type
 14736 ;;  dutyValue       2    0[COMMON] unsigned short 
 14737 ;; Auto vars:     Size  Location     Type
 14738 ;;		None
 14739 ;; Return value:  Size  Location     Type
 14740 ;;                  1    wreg      void 
 14741 ;; Registers used:
 14742 ;;		wreg, status,2, status,0
 14743 ;; Tracked objects:
 14744 ;;		On entry : 1D/0
 14745 ;;		On exit  : 1F/C
 14746 ;;		Unchanged: 0/0
 14747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14748 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14750 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14751 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14752 ;;Total ram usage:        4 bytes
 14753 ;; Hardware stack levels used:    1
 14754 ;; This function calls:
 14755 ;;		Nothing
 14756 ;; This function is called by:
 14757 ;;		_ADC_VoltageControlHandler_ISR
 14758 ;;		_TMR2_DutyControlHandler_ISR
 14759 ;; This function uses a non-reentrant model
 14760 ;;
 14761                           
 14762                           
 14763                           ;psect for function _PWM3_LoadDutyValue
 14764  14B4                     _PWM3_LoadDutyValue:	
 14765                           
 14766                           ;mcc_generated_files/pwm3.c: 74:  void PWM3_LoadDutyValue(uint16_t dutyValue);mcc_genera
      +                          ted_files/pwm3.c: 75:  {;mcc_generated_files/pwm3.c: 77:      PWM3DCH = (dutyValue & 0x0
      +                          3FC)>>2;
 14767                           
 14768                           ;incstack = 0
 14769                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
 14770  14B4  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 14771  14B5  00F3               	movwf	??_PWM3_LoadDutyValue+1
 14772  14B6  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 14773  14B7  00F2               	movwf	??_PWM3_LoadDutyValue
 14774  14B8  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 14775  14B9  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 14776  14BA  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 14777  14BB  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 14778  14BC  0872               	movf	??_PWM3_LoadDutyValue,w
 14779  14BD  002C               	movlb	12	; select bank12
 14780  14BE  0098               	movwf	24	;volatile
 14781                           
 14782                           ;mcc_generated_files/pwm3.c: 80:      PWM3DCL = (dutyValue & 0x0003)<<6;
 14783  14BF  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 14784  14C0  3903               	andlw	3
 14785  14C1  00F2               	movwf	??_PWM3_LoadDutyValue
 14786  14C2  3005               	movlw	5
 14787  14C3                     u133_25:	
 14788  14C3  35F2               	lslf	??_PWM3_LoadDutyValue,f
 14789  14C4  3EFF               	addlw	-1
 14790  14C5  1D03               	skipz
 14791  14C6  2CC3               	goto	u133_25
 14792  14C7  3572               	lslf	??_PWM3_LoadDutyValue,w
 14793  14C8  0097               	movwf	23	;volatile
 14794  14C9  0008               	return
 14795  14CA                     __end_of_PWM3_LoadDutyValue:	
 14796                           
 14797                           	psect	text80
 14798  1332                     __ptext80:	
 14799 ;; *************** function _LoadDutyValue *****************
 14800 ;; Defined at:
 14801 ;;		line 205 in file "vcontrol.c"
 14802 ;; Parameters:    Size  Location     Type
 14803 ;;  duty            2    0[COMMON] unsigned short 
 14804 ;; Auto vars:     Size  Location     Type
 14805 ;;		None
 14806 ;; Return value:  Size  Location     Type
 14807 ;;                  1    wreg      void 
 14808 ;; Registers used:
 14809 ;;		wreg
 14810 ;; Tracked objects:
 14811 ;;		On entry : 1F/0
 14812 ;;		On exit  : 1F/0
 14813 ;;		Unchanged: 0/0
 14814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14815 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14818 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14819 ;;Total ram usage:        2 bytes
 14820 ;; Hardware stack levels used:    1
 14821 ;; This function calls:
 14822 ;;		Nothing
 14823 ;; This function is called by:
 14824 ;;		_ADC_VoltageControlHandler_ISR
 14825 ;; This function uses a non-reentrant model
 14826 ;;
 14827                           
 14828                           
 14829                           ;psect for function _LoadDutyValue
 14830  1332                     _LoadDutyValue:	
 14831                           
 14832                           ;vcontrol.c: 205: static void LoadDutyValue(uint16_t duty);vcontrol.c: 206: {;vcontrol.c
      +                          : 207:     target_duty = duty;
 14833                           
 14834                           ;incstack = 0
 14835                           ; Regs used in _LoadDutyValue: [wreg]
 14836  1332  0871               	movf	LoadDutyValue@duty+1,w
 14837  1333  00A5               	movwf	_target_duty+1
 14838  1334  0870               	movf	LoadDutyValue@duty,w
 14839  1335  00A4               	movwf	_target_duty
 14840  1336  0008               	return
 14841  1337                     __end_of_LoadDutyValue:	
 14842                           
 14843                           	psect	text81
 14844  132D                     __ptext81:	
 14845 ;; *************** function _ADC_GetConversionResult *****************
 14846 ;; Defined at:
 14847 ;;		line 114 in file "mcc_generated_files/adc.c"
 14848 ;; Parameters:    Size  Location     Type
 14849 ;;		None
 14850 ;; Auto vars:     Size  Location     Type
 14851 ;;		None
 14852 ;; Return value:  Size  Location     Type
 14853 ;;                  2    0[COMMON] unsigned short 
 14854 ;; Registers used:
 14855 ;;		wreg
 14856 ;; Tracked objects:
 14857 ;;		On entry : 1F/1
 14858 ;;		On exit  : 1F/1
 14859 ;;		Unchanged: 0/0
 14860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14861 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14864 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14865 ;;Total ram usage:        2 bytes
 14866 ;; Hardware stack levels used:    1
 14867 ;; This function calls:
 14868 ;;		Nothing
 14869 ;; This function is called by:
 14870 ;;		_ADC_VoltageControlHandler_ISR
 14871 ;; This function uses a non-reentrant model
 14872 ;;
 14873                           
 14874                           
 14875                           ;psect for function _ADC_GetConversionResult
 14876  132D                     _ADC_GetConversionResult:	
 14877                           
 14878                           ;mcc_generated_files/adc.c: 117:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 14879                           
 14880                           ;incstack = 0
 14881                           ; Regs used in _ADC_GetConversionResult: [wreg]
 14882  132D  081C               	movf	28,w	;volatile
 14883  132E  00F1               	movwf	?_ADC_GetConversionResult+1
 14884  132F  081B               	movf	27,w	;volatile
 14885  1330  00F0               	movwf	?_ADC_GetConversionResult
 14886  1331  0008               	return
 14887  1332                     __end_of_ADC_GetConversionResult:	
 14888  007E                     btemp	set	126	;btemp
 14889  007E                     int$flags	set	126
 14890  007E                     wtemp0	set	126


Data Sizes:
    Strings     300
    Constant    2096
    Data        11
    BSS         133
    Persistent  48
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     27      65
    BANK1            80     68      79
    BANK2            80      0      80
    BANK3            80     15      46
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    set_vdc_threshold@v_target	PTR unsigned short  size(1) Largest target is 2
		 -> vdc_critic(BANK0[2]), vdc_max(BANK0[2]), vdc_min(BANK0[2]), 

    tx_string	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_20(CODE[25]), STR_19(CODE[25]), STR_18(CODE[22]), STR_17(CODE[24]), 
		 -> STR_16(CODE[23]), STR_15(CODE[22]), STR_14(CODE[34]), STR_13(CODE[15]), 
		 -> STR_12(CODE[16]), STR_11(CODE[18]), STR_10(CODE[23]), STR_9(CODE[5]), 
		 -> STR_8(CODE[25]), STR_7(CODE[3]), STR_6(CODE[6]), STR_5(CODE[3]), 
		 -> STR_4(CODE[6]), STR_3(CODE[3]), num_buffer(BANK3[5]), STR_2(CODE[6]), 
		 -> STR_1(CODE[5]), NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_SystemTimer_ISR(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_SystemTimer_ISR(), TMR1_DefaultInterruptHandler(), Absolute function(), 

    ADC_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_VoltageControlHandler_ISR(), ADC_DefaultInterruptHandler(), 

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_VoltageControlHandler_ISR(), ADC_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DutyControlHandler_ISR(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DutyControlHandler_ISR(), Absolute function(), TMR2_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> save_to_flash@buff(BANK1[64]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_CommandHandler_ISR(), EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_CommandHandler_ISR(), Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_TMR2_DutyControlHandler_ISR
    _TMR2_DutyControlHandler_ISR->_PWM3_LoadDutyValue
    _TMR1_ISR->_TMR1_WriteTimer
    _TMR1_CallBack->_TMR1_SystemTimer_ISR
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler
    _ADC_VoltageControlHandler_ISR->___lldiv

Critical Paths under _main in BANK0

    _main->_ApplicationInit
    _main->_uart_task
    _uart_task->_save_to_flash
    _uart_start->_EUSART_SetRxInterruptHandler
    _uart_start->_TMR1_SetInterruptHandler
    _relay_watchdog_task->_set_reset_duration
    _relay_watchdog_record_activations_task->_save_to_flash
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _ADC_Initialize->_ADC_SetInterruptHandler
    _ApplicationInit->_save_to_flash
    _start_chopper->_init_chopper
    _init_chopper->_ADC_SelectChannel
    _init_chopper->_ADC_SetInterruptHandler
    _init_chopper->_TMR2_SetInterruptHandler
    _set_vdc_speed->___lwdiv
    _set_vdc_min->_set_vdc_threshold
    _set_vdc_max->_set_vdc_threshold
    _set_vdc_critic->_set_vdc_threshold
    _set_reset_duration->___lwdiv
    _save_to_flash->_FLASH_WriteBlock
    _get_vdc_speed->___wmul
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _ADC_ISR->_ADC_VoltageControlHandler_ISR

Critical Paths under _main in BANK1

    _uart_task->_save_to_flash
    _relay_watchdog_record_activations_task->_save_to_flash
    _ApplicationInit->_save_to_flash

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_uart_task

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   25827
                    _ApplicationInit
                  _SYSTEM_Initialize
                       _init_chopper
                _init_relay_watchdog
_relay_watchdog_record_activations_t
                _relay_watchdog_task
                         _uart_start
                          _uart_task
 ---------------------------------------------------------------------------------
 (1) _uart_task                                           19    19      0   10302
                                             23 BANK0      4     4      0
                                              0 BANK3     15    15      0
       _get_relay_activation_counter
            _get_relay_reset_voltage
                 _get_reset_duration
                            _get_vdc
                     _get_vdc_critic
                        _get_vdc_max
                        _get_vdc_min
                      _get_vdc_speed
                  _is_chopper_active
                      _save_to_flash
            _set_relay_reset_voltage
                 _set_reset_duration
                     _set_vdc_critic
                        _set_vdc_max
                        _set_vdc_min
                      _set_vdc_speed
                      _start_chopper
                       _stop_chopper
 ---------------------------------------------------------------------------------
 (2) _stop_chopper                                         0     0      0       0
                _stop_relay_watchdog
 ---------------------------------------------------------------------------------
 (3) _stop_relay_watchdog                                  0     0      0       0
                        _close_relay
 ---------------------------------------------------------------------------------
 (2) _is_chopper_active                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_vdc_min                                          2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _get_vdc_max                                          2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _get_vdc_critic                                       2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _uart_start                                           0     0      0     474
       _EUSART_SetRxInterruptHandler
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _relay_watchdog_task                                  1     1      0    1194
                                             19 BANK0      1     1      0
                        _close_relay
                            _get_vdc
                         _open_relay
                 _set_reset_duration
 ---------------------------------------------------------------------------------
 (2) _open_relay                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_vdc                                              2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _close_relay                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _relay_watchdog_record_activations_task               1     1      0    2104
                                             23 BANK0      1     1      0
                      _save_to_flash
 ---------------------------------------------------------------------------------
 (1) _init_relay_watchdog                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1190
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     211
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     237
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_SetInterruptHandler                             2     0      2     237
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     531
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _EUSART_SetRxInterruptHandler                         2     0      2     237
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0     211
            _ADC_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _ApplicationInit                                     13    13      0   10110
                                             23 BANK0      4     4      0
                                              0 BANK3      9     9      0
                     _FLASH_ReadWord
                      _save_to_flash
       _set_relay_activation_counter
            _set_relay_reset_voltage
                 _set_reset_duration
                     _set_vdc_critic
                        _set_vdc_max
                        _set_vdc_min
                      _set_vdc_speed
                      _start_chopper
 ---------------------------------------------------------------------------------
 (2) _start_chopper                                        0     0      0     453
                       _init_chopper
               _start_relay_watchdog
 ---------------------------------------------------------------------------------
 (3) _start_relay_watchdog                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_chopper                                         1     1      0     453
                                             11 BANK0      1     1      0
                  _ADC_SelectChannel
            _ADC_SetInterruptHandler
                _ADC_StartConversion
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (4) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TMR2_SetInterruptHandler                             2     0      2     211
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetInterruptHandler                              2     0      2     211
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _ADC_SelectChannel                                    2     2      0      31
                                              9 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _set_vdc_speed                                        2     0      2    1104
                                             17 BANK0      2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) _set_vdc_min                                          3     1      2     996
                                             12 BANK0      3     1      2
                  _set_vdc_threshold
 ---------------------------------------------------------------------------------
 (2) _set_vdc_max                                          3     1      2     996
                                             12 BANK0      3     1      2
                  _set_vdc_threshold
 ---------------------------------------------------------------------------------
 (2) _set_vdc_critic                                       3     1      2     996
                                             12 BANK0      3     1      2
                  _set_vdc_threshold
 ---------------------------------------------------------------------------------
 (3) _set_vdc_threshold                                    3     0      3     695
                                              9 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _set_reset_duration                                   2     0      2    1194
                                             17 BANK0      2     0      2
                            ___lwdiv
             _restart_relay_watchdog
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     741
                                              9 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _set_relay_reset_voltage                              2     0      2     363
                                              9 BANK0      2     0      2
             _restart_relay_watchdog
 ---------------------------------------------------------------------------------
 (3) _restart_relay_watchdog                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _set_relay_activation_counter                         4     0      4     211
                                              9 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _save_to_flash                                       69    69      0    2104
                                             22 BANK0      1     1      0
                                              0 BANK1     68    68      0
                   _FLASH_WriteBlock
       _get_relay_activation_counter
            _get_relay_reset_voltage
                 _get_reset_duration
                      _get_vdc_speed
 ---------------------------------------------------------------------------------
 (3) _get_vdc_speed                                        2     0      2     736
                                             15 BANK0      2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     736
                                              9 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _get_reset_duration                                   2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _get_relay_reset_voltage                              2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _get_relay_activation_counter                         4     0      4       0
                                              9 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    10     7      3     961
                                             12 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     189
                                              9 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     979
                                              9 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0    1415
                   Absolute function *
                            _ADC_ISR
          _EUSART_CommandHandler_ISR *
                 _EUSART_Receive_ISR *
                           _TMR1_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR2_ISR                                             0     0      0     196
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR2_CallBack                                        0     0      0     196
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
        _TMR2_DutyControlHandler_ISR *
 ---------------------------------------------------------------------------------
 (8) _TMR2_DutyControlHandler_ISR                          2     2      0     196
                                              4 COMMON     2     2      0
                 _PWM3_LoadDutyValue
 ---------------------------------------------------------------------------------
 (8) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0     229
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_WriteTimer                                      2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) _TMR1_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
               _TMR1_SystemTimer_ISR *
 ---------------------------------------------------------------------------------
 (8) _TMR1_SystemTimer_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_CommandHandler_ISR                            2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _ADC_ISR                                              0     0      0     967
                   Absolute function *
        _ADC_DefaultInterruptHandler *
      _ADC_VoltageControlHandler_ISR *
 ---------------------------------------------------------------------------------
 (7) _ADC_VoltageControlHandler_ISR                        9     9      0     967
                                              0 BANK0      9     9      0
            _ADC_GetConversionResult
                      _LoadDutyValue
                 _PWM3_LoadDutyValue
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (8) ___lmul                                              12     4      8     244
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (8) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (9) _PWM3_LoadDutyValue                                   4     2      2     196
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _LoadDutyValue                                        2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) _ADC_DefaultInterruptHandler                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ApplicationInit
     _FLASH_ReadWord
     _save_to_flash
       _FLASH_WriteBlock
         _FLASH_EraseBlock
       _get_relay_activation_counter
       _get_relay_reset_voltage
       _get_reset_duration
       _get_vdc_speed
         ___wmul
     _set_relay_activation_counter
     _set_relay_reset_voltage
       _restart_relay_watchdog
     _set_reset_duration
       ___lwdiv
       _restart_relay_watchdog
     _set_vdc_critic
       _set_vdc_threshold
     _set_vdc_max
       _set_vdc_threshold
     _set_vdc_min
       _set_vdc_threshold
     _set_vdc_speed
       ___lwdiv
     _start_chopper
       _init_chopper
         _ADC_SelectChannel
         _ADC_SetInterruptHandler
         _ADC_StartConversion
         _TMR2_SetInterruptHandler
         _TMR2_StartTimer
       _start_relay_watchdog
   _SYSTEM_Initialize
     _ADC_Initialize
       _ADC_SetInterruptHandler
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _TMR4_Initialize
     _WDT_Initialize
   _init_chopper
     _ADC_SelectChannel
     _ADC_SetInterruptHandler
     _ADC_StartConversion
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
   _init_relay_watchdog
   _relay_watchdog_record_activations_task
     _save_to_flash
       _FLASH_WriteBlock
         _FLASH_EraseBlock
       _get_relay_activation_counter
       _get_relay_reset_voltage
       _get_reset_duration
       _get_vdc_speed
         ___wmul
   _relay_watchdog_task
     _close_relay
     _get_vdc
     _open_relay
     _set_reset_duration
       ___lwdiv
       _restart_relay_watchdog
   _uart_start
     _EUSART_SetRxInterruptHandler
     _TMR1_SetInterruptHandler
   _uart_task
     _get_relay_activation_counter
     _get_relay_reset_voltage
     _get_reset_duration
     _get_vdc
     _get_vdc_critic
     _get_vdc_max
     _get_vdc_min
     _get_vdc_speed
       ___wmul
     _is_chopper_active
     _save_to_flash
       _FLASH_WriteBlock
         _FLASH_EraseBlock
       _get_relay_activation_counter
       _get_relay_reset_voltage
       _get_reset_duration
       _get_vdc_speed
         ___wmul
     _set_relay_reset_voltage
       _restart_relay_watchdog
     _set_reset_duration
       ___lwdiv
       _restart_relay_watchdog
     _set_vdc_critic
       _set_vdc_threshold
     _set_vdc_max
       _set_vdc_threshold
     _set_vdc_min
       _set_vdc_threshold
     _set_vdc_speed
       ___lwdiv
     _start_chopper
       _init_chopper
         _ADC_SelectChannel
         _ADC_SetInterruptHandler
         _ADC_StartConversion
         _TMR2_SetInterruptHandler
         _TMR2_StartTimer
       _start_relay_watchdog
     _stop_chopper
       _stop_relay_watchdog
         _close_relay

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _ADC_ISR *
     Absolute function(Fake) *
     _ADC_DefaultInterruptHandler *
     _ADC_VoltageControlHandler_ISR *
       _ADC_GetConversionResult
       _LoadDutyValue
       _PWM3_LoadDutyValue
       ___lldiv
       ___lmul
   _EUSART_CommandHandler_ISR *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _TMR1_ISR *
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _TMR1_SystemTimer_ISR *
     _TMR1_WriteTimer
   _TMR2_ISR *
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _TMR2_DutyControlHandler_ISR *
         _PWM3_LoadDutyValue

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1B      41       5       81.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     44      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      F      2E      11       57.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     11C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     11C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Feb 26 12:28:37 2021

                                   ?_get_vdc_max 004D                                     ?_get_vdc_min 004D  
                  ?_EUSART_SetRxInterruptHandler 004D             __size_of_TMR2_DutyControlHandler_ISR 0044  
               __end_of_TMR2_SetInterruptHandler 1375             __end_of_get_relay_activation_counter 147C  
          __size_of_get_relay_activation_counter 0011                   ??_set_relay_activation_counter 0051  
                   _get_relay_activation_counter 146B                                      __CFG_CP$OFF 0000  
                                 ?_get_vdc_speed 0053                                               _st 00EA  
                            ___wmul@multiplicand 004F                                      __CFG_LVP$ON 0000  
                                ?_get_vdc_critic 004D                                              l990 0D9D  
                                            _PR2 001B                                              _PR4 0416  
                                _timer1ReloadVal 015C                           ??_EUSART_RxDataHandler 0070  
                                __end_of_ADC_ISR 1416                                              _vdc 003C  
                 ?_EUSART_SetFramingErrorHandler 004D                  __end_of_ADC_SetInterruptHandler 136D  
                                _TMR2_Initialize 148D                                    _LoadDutyValue 1332  
                                   __CFG_BORV$LO 0000                                              wreg 0009  
                                   __CFG_IESO$ON 0000           ADC_VoltageControlHandler_ISR@force_inc 0048  
                   ?_ADC_DefaultInterruptHandler 0070                          ?_restart_relay_watchdog 0070  
                 FLASH_WriteBlock@flashWordArray 0052                                             l1160 0C3F  
                                           l1152 0BB3                                             l1241 154C  
                                           l1162 0C62                                             l1154 0BD6  
                                           l1156 0BF9                                             l1158 0C1C  
                                           l4033 091A                                             l4043 0940  
                                           l4133 089A                                             l4125 087C  
                                           l4205 1526                                             l4127 0888  
                                           l4137 08A3                                             l4323 0BD8  
                                           l4411 0D3B                                             l4245 0969  
                                           l4085 158E                                             l4341 0C41  
                                           l4317 0BB5                                             l4501 0EAE  
                                           l4239 1644                                             l4335 0C1E  
                                           l4431 0D6C                                             l4353 0C76  
                                           l4329 0BFB                                             l4347 0C64  
                                           l4443 0D85                                             l4285 1509  
                                           l4365 0CA8                                             l4357 0C81  
                                           l4445 0D89                                             l4429 0D54  
                                           l4287 150D                                             l4383 0D06  
                                           l4623 09E8                                             l4439 0D7C  
                                           l4297 16ED                                             l4633 09FC  
                                           l4449 0D8E                                             l4713 15A7  
                                           l4299 16F4                                             l4619 09E0  
                                           l4547 0F51                                             l4491 0EA5  
                                           l4581 0FCE                                             l4493 0EA8  
                                           l4663 0A3A                                             l4591 0FE4  
                                           l4559 0F77                                             l4495 0EAA  
                                           l4399 0D2A                                             l4649 0A20  
                                           l4685 1790                                             l4597 0FE6  
                                           l4695 17B9                                             l3999 1546  
                                           STR_1 1953                                     __CFG_WDTE$ON 0000  
                                           STR_2 193C                                             STR_4 1942  
                                           STR_6 1948                                             STR_8 1822  
                                           STR_9 194E                                             _LATA 010C  
                                           _LATC 010E                                             u3085 0CBE  
                                           u2705 154D                                             u3425 09F5  
                                           u2715 1552                                             u3445 0A09  
                                           u2735 090A                                             u2825 087F  
                                           u3547 1666                                             u2845 0889  
                                           u2855 0893                                             u2865 089B  
                                           _TMR2 001A                                             _TMR4 0415  
                                           _WPUA 020C                                             _WPUC 020E  
                      set_vdc_threshold@v_target 004F                                     __CFG_WRT$OFF 0000  
                                  __CFG_FCMEN$ON 0000                                             _main 1596  
                                           fsr0h 0005                                             fsr1h 0007  
                                           indf0 0000                                             fsr0l 0004  
                                           indf1 0001                                             fsr1l 0006  
                                           btemp 007E                                ?_FLASH_WriteBlock 0050  
                                  __CFG_BOREN$ON 0000                                             start 0034  
                             ??_FLASH_WriteBlock 0053                       ??_TMR1_SetInterruptHandler 004F  
                                  __CFG_MCLRE$ON 0000                            __size_of_stop_chopper 000E  
                  ?_get_relay_activation_counter 004D                   __size_of_OSCILLATOR_Initialize 0008  
                        __end_of_ApplicationInit 0D18                    __end_of_OSCILLATOR_Initialize 139D  
                                          ?_main 0070                                            STR_10 1885  
                                          STR_11 190B                                            STR_12 191D  
                                          STR_20 1854                                            STR_13 192D  
                                          STR_14 1800                                            STR_15 18DF  
                                          STR_16 189C                                            STR_17 186D  
                                          STR_18 18F5                                            STR_19 183B  
                                __end_of___lldiv 08FA                                            _T1CON 0018  
                                          _T2CON 001C                                            _T4CON 0417  
                             ApplicationInit@val 01C4                                  __end_of___lwdiv 08A8  
                                          i1l384 0013                                            i1l393 0032  
                                          i1l386 0020                                            i1l388 002A  
                                          i1l873 0B50                                            i1l885 17DB  
                ??_ADC_VoltageControlHandler_ISR 0044                                   ?_LoadDutyValue 0070  
                                          _TMR1H 0017                                            _TMR1L 0016  
                                          _TRISA 008C                                            _TRISC 008E  
                                 _system_counter 0030                                            _RXPPS 0E24  
               __size_of_ADC_GetConversionResult 0005                                    _start_chopper 1510  
                                _TMR4_Initialize 13C9                              ___lmul@multiplicand 0074  
                 __end_of_restart_relay_watchdog 13C9                                   _system_minutes 00E8  
                                 _system_seconds 00E9                                 __end_of_TMR1_ISR 1422  
                                __end_of_get_vdc 133C                                 __end_of_TMR2_ISR 1329  
                                 _WDT_Initialize 1329                          __end_of_PWM3_Initialize 142F  
                        __end_of_TMR1_Initialize 1544                                  __end_of_v_table 0872  
                                          pclath 000A                                            status 0003  
                                          wtemp0 007E                                  _TMR2_StartTimer 1315  
                                   _stop_chopper 142F                                  _TMR1_WriteTimer 143D  
                                __initialization 0036              set_relay_reset_voltage@relay_vthres 004D  
               ADC_VoltageControlHandler_ISR@pwm 0049                                     __end_of_main 15B2  
                                ??_get_vdc_speed 0055                   set_reset_duration@reset_dur_ms 0055  
                    ??_EUSART_CommandHandler_ISR 0070                          __end_of_TMR2_Initialize 149F  
                                      ??_ADC_ISR 007E                                   __CFG_LPBOR$OFF 0000  
                    ?_INTERRUPT_InterruptManager 0070                   ??_EUSART_SetRxInterruptHandler 004F  
                       _TMR2_SetInterruptHandler 136D                                           ??_main 005F  
                                 ?_start_chopper 0070                          __size_of_FLASH_ReadWord 001F  
                                 __CFG_PLLEN$OFF 0000                                  set_vdc_max@vmax 0050  
                                set_vdc_min@vmin 0050                           __end_of_WDT_Initialize 132D  
                            _stop_relay_watchdog 1353        __end_of_EUSART_DefaultFramingErrorHandler 130D  
     __size_of_EUSART_DefaultFramingErrorHandler 0001              ??_EUSART_DefaultFramingErrorHandler 0070  
             ?_EUSART_DefaultFramingErrorHandler 0070                _EUSART_DefaultFramingErrorHandler 130C  
                                         _ADCON0 009D                                           _ADCON1 009E  
                                         _ADCON2 009F                       _EUSART_OverrunErrorHandler 0162  
                      FLASH_WriteBlock@writeAddr 0050                    __size_of_TMR1_SystemTimer_ISR 0023  
                                         _ADRESH 009C                                           _ADRESL 009B  
                                 __CFG_ZCDDIS$ON 0000                                           _ANSELA 018C  
                                         _ANSELC 018E                                           _BORCON 0116  
                                         _T1GCON 0019                                           _RC1REG 0199  
                                         _RC0PPS 0EA0                                           _RC1PPS 0EA1  
                                         _RC1STA 019D                                           _RC2PPS 0EA2  
                        TMR1_WriteTimer@timerVal 0070                                           i1l3021 17F5  
                                  ?_init_chopper 0070                                           i1l3023 17F9  
                                         i1l3015 17D7                                           _ODCONA 028C  
                                         _ODCONC 028E                                           i1l3045 16B4  
                                         i1l3063 08B8                                           i1l3073 08E6  
                                         i1l3065 08C6                                           i1l3049 16BE  
                                         i1l3401 0B09                                           i1l3403 0B28  
                                         i1l3411 0B29                                           i1l3077 08F1  
                                         i1l3405 0B0E                                           i1l3423 0B48  
                                         i1l3425 0B4C                                           i1l3265 1447  
                                         i1l3435 0B71                                           i1l3437 0B75  
                                         i1l3439 0B79                                           i1l3393 0AB6  
                                         i1l3377 0A87                                           i1l3387 0AA4  
                                         i1l3379 0A89                                           i1l3483 1768  
                                         i1l3389 0AAA                                           i1l3477 1758  
                                         i1l3487 1778                                           u133_25 14C3  
                                         _INLVLA 038C                                           _INLVLC 038E  
                                         u160_25 08C7                                           u161_25 08DB  
                                         u162_25 08E7                                           u154_25 16BF  
                                         u146_25 17C3                                           u155_25 16C6  
                                         u148_25 17E1                                           u181_25 0A81  
                                         u158_25 08BB                                           u182_25 0A8F  
                                         u191_25 0B59                                           u183_25 0AB0  
                                         _PMADRH 0192                                           u192_25 0B67  
                                         u184_25 0ABC                                           _PMADRL 0191  
                                         _PMDATH 0194                           set_vdc_threshold@v_val 004D  
                                         _PMDATL 0193                     __size_of_relay_watchdog_task 0080  
                                         u187_25 0B22                                           _PMCON2 0196  
                                         u189_25 0B33                        __size_of_FLASH_EraseBlock 001F  
                                         _OSCCON 0099                                   __100ms_counter 002B  
                                         _TX1REG 019A                                           _WDTCON 0097  
                                         _TX1STA 019E   __end_of_relay_watchdog_record_activations_task 17BC  
__size_of_relay_watchdog_record_activations_task 0041         ??_relay_watchdog_record_activations_task 005B  
        ?_relay_watchdog_record_activations_task 0070           _relay_watchdog_record_activations_task 177B  
                          __end_of_save_to_flash 09CA                                   __CFG_PWRTE$OFF 0000  
                           ?_stop_relay_watchdog 0070                         ?_get_relay_reset_voltage 004D  
           __end_of_TMR1_DefaultInterruptHandler 130E            __size_of_TMR1_DefaultInterruptHandler 0001  
                   _TMR1_DefaultInterruptHandler 130D             __size_of_ADC_DefaultInterruptHandler 0001  
               __size_of_ADC_SetInterruptHandler 0008                                           ___lmul 16AC  
                    __size_of_PWM3_LoadDutyValue 0016                                     ?_set_vdc_max 0050  
                                   ?_set_vdc_min 0050                                           ___wmul 1544  
                                 __CFG_STVREN$ON 0000                                        ??___lldiv 0078  
                           __size_of_close_relay 0003                                        ??___lwdiv 0051  
                           __size_of_get_vdc_max 0006                             __size_of_get_vdc_min 0005  
                        __end_of_TMR4_Initialize 13D3                                _set_vdc_threshold 157A  
                               __end_of_duty_inc 195A                                 ?_ApplicationInit 0070  
                                         _st_act 00E7                                           _vcs_st 00EC  
                                ??_LoadDutyValue 0072                                           _rx_idx 0036  
                                         _tx_idx 0033                                           _tx_len 00ED  
                                      ??_get_vdc 004F                         ?_set_relay_reset_voltage 004D  
                             ?_set_vdc_threshold 004D                          FLASH_ReadWord@flashAddr 004D  
                 ??_get_relay_activation_counter 0051                                  ?_WDT_Initialize 0070  
                        __end_of_TMR2_StartTimer 1318            __end_of_ADC_VoltageControlHandler_ISR 0B81  
         __size_of_ADC_VoltageControlHandler_ISR 0137                    _ADC_VoltageControlHandler_ISR 0A4A  
       TMR1_SetInterruptHandler@InterruptHandler 004D          ADC_SetInterruptHandler@InterruptHandler 004D  
       TMR2_SetInterruptHandler@InterruptHandler 004D                              ??_set_vdc_threshold 0050  
                        __end_of_TMR1_WriteTimer 144C                        _EUSART_CommandHandler_ISR 15F0  
                                 ??_init_chopper 004F                            __end_of_TMR1_CallBack 13DE  
                               ?_PWM3_Initialize 0070                                 ?_TMR1_Initialize 0070  
                              LoadDutyValue@duty 0070                                _SYSTEM_Initialize 155F  
                        __end_of__initialization 006E                            __end_of_TMR2_CallBack 13E9  
                             ?_SYSTEM_Initialize 0070                       __end_of_get_reset_duration 13B6  
                     __end_of_set_reset_duration 170E                            ??_stop_relay_watchdog 004D  
                   __size_of_init_relay_watchdog 0001                              _relay_reset_voltage 0020  
                   __size_of_ADC_StartConversion 0003                                   __pcstackCOMMON 0070  
                                   __pidataBANK0 0002                                     __pidataBANK1 0873  
                                   __pidataBANK2 13A5                              ??_SYSTEM_Initialize 004F  
                               ??_get_vdc_critic 004F                                        ?_TMR1_ISR 0070  
                                      ?_TMR2_ISR 0070                    ?_TMR1_DefaultInterruptHandler 0070  
                      __end_of_set_vdc_threshold 1596                                 ?_TMR2_Initialize 0070  
                                ??_start_chopper 0050                          _ADC_GetConversionResult 132D  
                          __end_of_set_vdc_speed 1659                                   _OPTION_REGbits 0095  
                           _eusartRxStatusBuffer 0140              __end_of_TMR2_DutyControlHandler_ISR 1800  
                    _TMR2_DutyControlHandler_ISR 17BC                      FLASH_WriteBlock@GIEBitValue 0058  
                ??_EUSART_SetOverrunErrorHandler 004F                        __end_of_SYSTEM_Initialize 157A  
                                     __pbssBANK0 0020                                       __pbssBANK1 00E4  
                                     __pbssBANK2 0120                                       __pbssBANK3 01A0  
                               set_vdc_critic@vc 0050                          __size_of_set_vdc_critic 000B  
                    __size_of_EUSART_Receive_ISR 003A                                    _init_required 0060  
                    uart_task@activation_counter 01C4                                       __pmaintext 1596  
                  __size_of_start_relay_watchdog 0009                                          ?___lmul 0070  
                                     _delta_duty 0154                                uart_task@val_1511 01CA  
                              uart_task@val_1518 01BF                                          ?___wmul 004D  
                                     ??_TMR1_ISR 0072                                  __CFG_PPS1WAY$ON 0000  
                                     ??_TMR2_ISR 0076                                       __pintentry 0004  
                                        _ADC_ISR 140A                                  __1000ms_counter 002A  
                                 ___lmul@product 0078                                 ?_TMR4_Initialize 0070  
                   ??_EUSART_DefaultErrorHandler 0071                        __size_of_FLASH_WriteBlock 0066  
                        __size_of_ADC_Initialize 0011                                   _FLASH_ReadWord 15B2  
                                  _eusartRxCount 0039                               __size_of_uart_task 02E8  
                              uart_task@xor_1517 01BE                                          _SP1BRGH 019C  
                                        _SP1BRGL 019B                                save_to_flash@buff 00A0  
                  __size_of_EUSART_RxDataHandler 0018                                          _OSCSTAT 009A  
                                        _OSCTUNE 0098                                          _PWM3DCH 0618  
                                        _PWM3DCL 0617                                          _PWM3CON 0619  
                                        _SLRCONA 030C                                          _SLRCONC 030E  
                       ??_EUSART_SetErrorHandler 004F                                 ?_TMR2_StartTimer 0070  
                               ?_TMR1_WriteTimer 0070                              UartParser@rx_buffer 0120  
                               _FLASH_EraseBlock 15D1            set_relay_activation_counter@act_count 004D  
                 ?_ADC_VoltageControlHandler_ISR 0070                 EUSART_CommandHandler_ISR@rx_data 0071  
                           _ADC_InterruptHandler 015E                          _ADC_SetInterruptHandler 1365  
            __size_of_EUSART_DefaultErrorHandler 0003                       ??_TMR2_SetInterruptHandler 004F  
                                __size_of___lmul 002F                                          ___lldiv 08A8  
                                __size_of___wmul 001B                       __size_of_set_vdc_threshold 001C  
                                        ___lwdiv 0874                             __end_of_init_chopper 1680  
                      ??_ADC_GetConversionResult 0072                           __end_of_FLASH_ReadWord 15D1  
                           __size_of_set_vdc_max 000B                             __size_of_set_vdc_min 000B  
                            _relay_watchdog_task 09CA                                          __ptext1 0D18  
                                        __ptext2 142F                                          __ptext3 1353  
                                        __ptext4 131E                                          __ptext5 133C  
                                        __ptext6 134D                                          __ptext7 1347  
                                        __ptext8 14CA                                          __ptext9 09CA  
                                        _get_vdc 1337                   ??_TMR1_DefaultInterruptHandler 0070  
                                      _T1CONbits 0018                            _OSCILLATOR_Initialize 1395  
                                      _T2CONbits 001C                __size_of_TMR1_SetInterruptHandler 0008  
                       ??_PIN_MANAGER_Initialize 004D                        ?_TMR1_SetInterruptHandler 004D  
                                        _vdc_max 0040                                          _vdc_min 0042  
                                        _v_table 0072                                    _duty_count_up 0152  
                     __size_of_SYSTEM_Initialize 001B                                          clrloop0 135A  
                           end_of_initialization 006E                                   _reset_duration 014E  
                           ?_relay_watchdog_task 0070            __end_of_EUSART_SetOverrunErrorHandler 138D  
         __size_of_EUSART_SetOverrunErrorHandler 0008                    _EUSART_SetOverrunErrorHandler 1385  
                                     _vdc_critic 003E                                          init_ram 135F  
                                        initloop 1360                                _EUSART_Initialize 170E  
                                     _open_relay 131B                               _activation_counter 0148  
                              __end_of_uart_task 1000                                  ___lldiv@divisor 0070  
                                ___lldiv@counter 007D                               ?_EUSART_Initialize 0070  
                   __end_of_TMR1_SystemTimer_ISR 1633                                       _num_buffer 01B8  
                      FLASH_ReadWord@GIEBitValue 004F                            __end_of_get_vdc_speed 14B4  
                                ?_FLASH_ReadWord 004D                                       _uart_start 14CA  
                            ??_EUSART_Initialize 004F                                 ??_WDT_Initialize 004D  
                                     _vcs_sub_st 00EB                 __size_of_get_relay_reset_voltage 0006  
                           __end_of_duty_pwm_inc 195C                                 __CFG_FOSC$INTOSC 0000  
            __end_of_ADC_DefaultInterruptHandler 130C                      _ADC_DefaultInterruptHandler 130B  
                                      _TRISAbits 008C                              _init_relay_watchdog 0872  
                   ApplicationInit@invalid_param 01BF                              _ADC_StartConversion 1312  
                __size_of_EUSART_SetErrorHandler 0008                            ??_relay_watchdog_task 0057  
                      __end_of_EUSART_Initialize 1741                    ??_ADC_DefaultInterruptHandler 0070  
               __size_of_set_relay_reset_voltage 0018                                   _set_vdc_critic 13E9  
                      ??_ADC_SetInterruptHandler 004F                       __end_of_PWM3_LoadDutyValue 14CA  
                              FLASH_WriteBlock@i 0059                                    ??_close_relay 004D  
                           ?_init_relay_watchdog 0070                             ?_ADC_StartConversion 0070  
                                  ??_get_vdc_max 004F                                    ??_get_vdc_min 004F  
           __end_of_TMR2_DefaultInterruptHandler 130F            __size_of_TMR2_DefaultInterruptHandler 0001  
                   _TMR2_DefaultInterruptHandler 130E                                _is_chopper_active 131E  
                                 __end_of___lmul 16DB               __end_of_EUSART_DefaultErrorHandler 1312  
                     _EUSART_DefaultErrorHandler 130F                                   __end_of___wmul 155F  
                       ??_restart_relay_watchdog 004D                                __size_of_TMR1_ISR 000C  
                              __size_of_TMR2_ISR 0004                               ?_is_chopper_active 0070  
                                 _ADC_Initialize 147C                               _get_reset_duration 13AD  
                             _set_reset_duration 16DB                                 _FLASH_WriteBlock 08FA  
                         ?_OSCILLATOR_Initialize 0070                                _reset_duration_ms 0168  
                          __end_of_LoadDutyValue 1337                           __size_of_save_to_flash 006A  
                            start_initialization 0036                                SolidStateRelay@st 0029  
                            ??_is_chopper_active 004D                                   _ra_local_timer 00E6  
                            ?_get_reset_duration 004D                  __size_of_PIN_MANAGER_Initialize 002C  
                            ?_set_reset_duration 0055                         __size_of_ApplicationInit 0197  
   EUSART_SetRxInterruptHandler@interruptHandler 004D                           __end_of_set_vdc_critic 13F4  
                    __end_of_stop_relay_watchdog 1359                  save_to_flash@activation_counter 00E0  
                                    ?_open_relay 0070                            ??_init_relay_watchdog 004D  
                 ?_EUSART_SetOverrunErrorHandler 004D                            ??_ADC_StartConversion 004D  
                          __size_of_init_chopper 0027                             ??_get_reset_duration 004F  
                           ??_set_reset_duration 0057                         __size_of_PWM3_Initialize 000D  
                       __size_of_TMR1_Initialize 001A                        __end_of_is_chopper_active 1321  
                     _EUSART_FramingErrorHandler 0164                                         ??___lmul 0078  
                                       ??___wmul 0051                           _EUSART_SetErrorHandler 1375  
                                    _CCPTMRSbits 029E                           __end_of_ADC_Initialize 148D  
                                    __pdataBANK0 005F                                      __pdataBANK1 00EE  
                                    __pdataBANK2 0168                                         ?_ADC_ISR 0070  
                    FLASH_EraseBlock@GIEBitValue 004F                                      ?_uart_start 0070  
                  ?_TMR2_DefaultInterruptHandler 0070                         __end_of_FLASH_EraseBlock 15F0  
                            __end_of_close_relay 131B                           __size_of_TMR1_CallBack 000B  
                            __end_of_get_vdc_max 1353                              __end_of_get_vdc_min 1341  
                          __end_of_start_chopper 152A                           __size_of_TMR2_CallBack 000B  
                                      ___latbits 0002                                    __pcstackBANK0 0044  
                                  __pcstackBANK1 00A0                                    __pcstackBANK3 01BD  
                   __end_of_start_relay_watchdog 13BF                         __size_of_TMR2_Initialize 0012  
                           _TMR1_SystemTimer_ISR 1610                                  ?_set_vdc_critic 0050  
                     __end_of_EUSART_Receive_ISR 177B                                     _init_chopper 1659  
                     __size_of_EUSART_Initialize 0033                                    ?_stop_chopper 0070  
               _EUSART_RxDefaultInterruptHandler 0166                                    _diff_positive 0032  
                                 _chopper_active 0031                                     _current_duty 0022  
                                  _save_to_flash 0960                                        __pnvBANK2 015A  
                                      __pnvBANK3 01CC                     __end_of_EUSART_RxDataHandler 14F8  
                         __size_of_set_vdc_speed 0026                                 ___lwdiv@dividend 004F  
                         _PIN_MANAGER_Initialize 1680                                _ADC_SelectChannel 144C  
               __end_of_TMR1_SetInterruptHandler 13A5                                 UartParser@rx_idx 002F  
                               UartParser@tx_idx 002C                                         ?___lldiv 0070  
                                       ?___lwdiv 004D                                  ?_ADC_Initialize 0070  
                                   _eusartRxHead 003B                               ?_ADC_SelectChannel 0070  
                                   _eusartRxTail 003A                     ??_INTERRUPT_InterruptManager 007E  
                __size_of_restart_relay_watchdog 000A                                         ?_get_vdc 004D  
                        _get_relay_reset_voltage 1341                                         _BAUD1CON 019F  
                            ??_ADC_SelectChannel 004D                              __size_of_open_relay 0003  
                        __size_of_get_vdc_critic 0006                         __size_of_TMR4_Initialize 000A  
                          ?_TMR1_SystemTimer_ISR 0070                                 ___lwdiv@quotient 0053  
                 FLASH_WriteBlock@blockStartAddr 0056                          _set_relay_reset_voltage 14F8  
                                 _eusartRxBuffer 01B0                                    _TMR1_CallBack 13D3  
                                 ??_stop_chopper 004D                                   ___wmul@product 0051  
                            __size_of_uart_start 0016                                         _LATAbits 010C  
         EUSART_SetErrorHandler@interruptHandler 004D                                   ?_save_to_flash 0070  
                                       _LATCbits 010E                                        _isr_timer 002E  
                              ??_ApplicationInit 005B                                        clear_ram0 1359  
                                  _TMR2_CallBack 13DE                                         _PIE1bits 0091  
                              _eusartRxLastError 0038                         __size_of_TMR2_StartTimer 0003  
                      __end_of_ADC_SelectChannel 145B                                     _duty_pwm_dec 016C  
                                   UartParser@st 002D                         __size_of_TMR1_WriteTimer 000F  
                                   _duty_pwm_inc 195A              __size_of_INTERRUPT_InterruptManager 0030  
                            _duty_count_down_max 016A                                         _PIR1bits 0011  
                ??_EUSART_SetFramingErrorHandler 004F                                         _PIR2bits 0012  
                      FLASH_EraseBlock@startAddr 004D                                  _duty_count_down 0150  
                                    _close_relay 1318                              __end_of_invalid_arg 18C9  
                            __end_of_invalid_com 18DF                       __size_of_is_chopper_active 0003  
                               ??_FLASH_ReadWord 004F                                      _get_vdc_max 134D  
                                    _get_vdc_min 133C                                    ??_set_vdc_max 0052  
                                  ??_set_vdc_min 0052        __end_of_EUSART_DefaultOverrunErrorHandler 1325  
     __size_of_EUSART_DefaultOverrunErrorHandler 0004              ??_EUSART_DefaultOverrunErrorHandler 0070  
             ?_EUSART_DefaultOverrunErrorHandler 0070                _EUSART_DefaultOverrunErrorHandler 1321  
                                      _uart_task 0D18                                         _TMR1_ISR 1416  
                                       _TMR2_ISR 1325                                       uart_task@i 01C1  
                                      _rx_buffer 01A0                                ??_TMR1_Initialize 004F  
                              ??_PWM3_Initialize 004D                                 __size_of_ADC_ISR 000C  
                                     _ADCON0bits 009D                                ___wmul@multiplier 004D  
                       ADC_SelectChannel@channel 004E                                    _set_vdc_speed 1633  
                 ??_TMR2_DefaultInterruptHandler 0070                __size_of_TMR2_SetInterruptHandler 0008  
                      ?_TMR2_SetInterruptHandler 004D                                        _tx_string 0158  
                              ___lmul@multiplier 0070                                         _Commands 0037  
                                 ?_TMR1_CallBack 0070                           _restart_relay_watchdog 13BF  
                              ??_TMR2_Initialize 004F             __end_of_set_relay_activation_counter 146B  
          __size_of_set_relay_activation_counter 0010                     _set_relay_activation_counter 145B  
                       __end_of_FLASH_WriteBlock 0960                                   ?_TMR2_CallBack 0070  
                                _command_pending 0035                         ?_ADC_GetConversionResult 0070  
                           _start_relay_watchdog 13B6                                       ?_uart_task 0070  
                        ??_OSCILLATOR_Initialize 004D                              _EUSART_ErrorHandler 01CC  
                      ??_get_relay_reset_voltage 004F                                 __size_of___lldiv 0052  
                    ?_EUSART_DefaultErrorHandler 0070                                 __size_of___lwdiv 0034  
                                uart_task@i_1516 01C2                         _TMR1_SetInterruptHandler 139D  
                             _PWM3_LoadDutyValue 14B4                              __end_of_set_vdc_max 13FF  
                            __end_of_set_vdc_min 140A                            _TMR1_InterruptHandler 015A  
                               __size_of_get_vdc 0005                                   ?_set_vdc_speed 0055  
                    __end_of_relay_watchdog_task 0A4A                                      _local_timer 0028  
                         ??_TMR1_SystemTimer_ISR 0070                                         _diff_vdc 0156  
                                ___lwdiv@divisor 004D                             _EUSART_RxDataHandler 14E0  
                   ?_TMR2_DutyControlHandler_ISR 0070                                  ___lwdiv@counter 0052  
                      ??_set_relay_reset_voltage 004F                                         __ptext10 131B  
                                       __ptext11 1337                                         __ptext20 139D  
                                       __ptext12 1318                                         __ptext21 1422  
                                       __ptext13 177B                                         __ptext30 0B81  
                                       __ptext22 1680                                         __ptext14 0872  
                                       __ptext31 1510                                         __ptext23 1395  
                                       __ptext15 155F                                         __ptext40 13FF  
                                       __ptext32 13B6                                         __ptext24 170E  
                                       __ptext16 1329                                         __ptext41 13F4  
                                       __ptext33 1659                                         __ptext25 138D  
                                       __ptext17 13C9                                         __ptext50 149F  
                                       __ptext42 13E9                                         __ptext34 1315  
                                       __ptext26 1385                                         __ptext18 148D  
                                       __ptext51 1544                                         __ptext43 157A  
                                       __ptext35 136D                                         __ptext27 137D  
                                       __ptext19 152A                                         __ptext60 13DE  
                                       __ptext52 13AD                                         __ptext44 16DB  
                                       __ptext36 1312                                         __ptext28 1375  
                                       __ptext61 130E                                         __ptext53 1341  
                                       __ptext45 0874                                         __ptext37 1365  
                                       __ptext29 147C                                         __ptext70 1321  
                                       __ptext62 17BC                                         __ptext54 146B  
                                       __ptext46 14F8                                         __ptext38 144C  
                                       __ptext71 130C                                         __ptext63 1416  
                                       __ptext55 08FA                                         __ptext47 13BF  
                                       __ptext39 1633                                         __ptext80 1332  
                                       __ptext72 130F                                         __ptext64 143D  
                                       __ptext56 15D1                                         __ptext48 145B  
                                       __ptext81 132D                                         __ptext73 14E0  
                                       __ptext65 13D3                                         __ptext57 15B2  
                                       __ptext49 0960                                         __ptext74 140A  
                                       __ptext66 130D                              ?_PWM3_LoadDutyValue 0070  
                                       __ptext75 130B                                         __ptext67 1610  
                                       __ptext59 1325                                         __ptext76 0A4A  
                                       __ptext68 15F0                                         __ptext77 16AC  
                                       __ptext69 1741                                         __ptext78 08A8  
                                       __ptext79 14B4                       ApplicationInit@act_counter 01C0  
                                ??_save_to_flash 005A                                      _invalid_arg 18B3  
                                    _invalid_com 18C9                           __size_of_get_vdc_speed 0015  
                              ??_TMR4_Initialize 004D                                    __size_of_main 001C  
                                       _lock_isr 005F                                         _duty_inc 1958  
                                   ??_open_relay 004D                    ?_set_relay_activation_counter 004D  
                        ?_EUSART_SetErrorHandler 004D                       __size_of_ADC_SelectChannel 000F  
                                       _vdc_prev 00E4                                       _RC1STAbits 019D  
                          ?_start_relay_watchdog 0070    EUSART_SetOverrunErrorHandler@interruptHandler 004D  
                           ??_PWM3_LoadDutyValue 0072                                         _prev_vdc 014C  
             __size_of_EUSART_CommandHandler_ISR 0020                                         int$flags 007E  
                     ?_EUSART_CommandHandler_ISR 0070                                         _pwm_duty 0026  
                              ??_TMR2_StartTimer 004D                             set_vdc_speed@msDelay 0055  
             __end_of_INTERRUPT_InterruptManager 0034                       _INTERRUPT_InterruptManager 0004  
          __end_of_EUSART_SetFramingErrorHandler 1385           __size_of_EUSART_SetFramingErrorHandler 0008  
                  _EUSART_SetFramingErrorHandler 137D                                ??_TMR1_WriteTimer 0072  
                                   ??_uart_start 004F                                ?_FLASH_EraseBlock 004D  
                           __end_of_stop_chopper 143D                               ??_FLASH_EraseBlock 004F  
                                     _INTCONbits 000B                                   _get_vdc_critic 1347  
                               ??_set_vdc_critic 0052                            ?_EUSART_RxDataHandler 0070  
                             __end_of_open_relay 131E                                   __pstringtext10 186D  
                                 __pstringtext11 1885                                   __pstringtext20 1948  
                                 __pstringtext12 189C                                   __pstringtext21 194E  
                                 __pstringtext13 18DF                                   __pstringtext22 1953  
                                 __pstringtext14 18F5                                   __pstringtext23 0000  
                                 __pstringtext15 190B                                   __pstringtext16 191D  
                                 __pstringtext17 192D                                   __pstringtext18 193C  
                                 __pstringtext19 1942                                  ??_TMR1_CallBack 0071  
                       ?_ADC_SetInterruptHandler 004D                          __size_of_WDT_Initialize 0004  
                  ??_TMR2_DutyControlHandler_ISR 0074                  __end_of_get_relay_reset_voltage 1347  
                                       intlevel1 0000                                  ??_TMR2_CallBack 0076  
                    __end_of_init_relay_watchdog 0873                      __end_of_ADC_StartConversion 1315  
                                     _PMCON1bits 0195                                 ___lldiv@dividend 0074  
                        ?_PIN_MANAGER_Initialize 0070                  __end_of_ADC_GetConversionResult 1332  
                 __end_of_EUSART_SetErrorHandler 137D                                __CFG_CLKOUTEN$OFF 0000  
                                    _target_duty 0024                               __end_of_uart_start 14E0  
                   ApplicationInit@chopper_state 01BD                                 ??_ADC_Initialize 004F  
           __end_of_EUSART_SetRxInterruptHandler 1395            __size_of_EUSART_SetRxInterruptHandler 0008  
                   _EUSART_SetRxInterruptHandler 138D                           __size_of_LoadDutyValue 0005  
                    __size_of_get_reset_duration 0009                     __size_of_stop_relay_watchdog 0006  
                __end_of_set_relay_reset_voltage 1510                      __size_of_set_reset_duration 0033  
                              _duty_count_up_max 016E                                      ??_uart_task 005B  
                                    _set_vdc_max 13F4                                      _set_vdc_min 13FF  
                             _EUSART_Receive_ISR 1741    EUSART_SetFramingErrorHandler@interruptHandler 004D  
                    PWM3_LoadDutyValue@dutyValue 0070                __end_of_EUSART_CommandHandler_ISR 1610  
                                  _command_error 0034                                    _get_vdc_speed 149F  
                                  __pstringtext1 0072                                    __pstringtext2 18B3  
                                  __pstringtext3 18C9                                    __pstringtext4 1958  
                                  __pstringtext5 195A                                    __pstringtext6 1800  
                                  __pstringtext7 1822                                    __pstringtext8 183B  
                                  __pstringtext9 1854                                  ??_set_vdc_speed 0057  
                         __end_of_get_vdc_critic 134D                              ?_EUSART_Receive_ISR 0070  
                                  uart_task@none 00EE                                 ___lldiv@quotient 0079  
                                _ApplicationInit 0B81                                       _TX1STAbits 019E  
                                   uart_task@idx 01C3                                     uart_task@val 01C8  
                 __end_of_PIN_MANAGER_Initialize 16AC                                     uart_task@xor 01BD  
                           ??_EUSART_Receive_ISR 0071                            _TMR2_InterruptHandler 0160  
                                _TMR1_Initialize 152A                                  _PWM3_Initialize 1422  
                         ??_start_relay_watchdog 004D                           __size_of_start_chopper 001A  
                                   ?_close_relay 0070  
