

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Feb 25 17:30:32 2021

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	stringtext6,global,class=STRCODE,delta=2
    15                           	psect	stringtext7,global,class=STRCODE,delta=2
    16                           	psect	stringtext8,global,class=STRCODE,delta=2
    17                           	psect	stringtext9,global,class=STRCODE,delta=2
    18                           	psect	stringtext10,global,class=STRCODE,delta=2
    19                           	psect	stringtext11,global,class=STRCODE,delta=2
    20                           	psect	stringtext12,global,class=STRCODE,delta=2
    21                           	psect	stringtext13,global,class=STRCODE,delta=2
    22                           	psect	stringtext14,global,class=STRCODE,delta=2
    23                           	psect	stringtext15,global,class=STRCODE,delta=2
    24                           	psect	stringtext16,global,class=STRCODE,delta=2
    25                           	psect	stringtext17,global,class=STRCODE,delta=2
    26                           	psect	stringtext18,global,class=STRCODE,delta=2
    27                           	psect	stringtext19,global,class=STRCODE,delta=2
    28                           	psect	stringtext20,global,class=STRCODE,delta=2
    29                           	psect	stringtext21,global,class=STRCODE,delta=2
    30                           	psect	stringtext22,global,class=STRCODE,delta=2
    31                           	psect	stringtext23,global,class=STRCODE,delta=2
    32                           	psect	cinit,global,class=CODE,merge=1,delta=2
    33                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    34                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    35                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    37                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    38                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    39                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    40                           	psect	clrtext,global,class=CODE,delta=2
    41                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    42                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    43                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    44                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    45                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    46                           	psect	text1,local,class=CODE,merge=1,delta=2
    47                           	psect	text2,local,class=CODE,merge=1,delta=2
    48                           	psect	text3,local,class=CODE,merge=1,delta=2
    49                           	psect	text4,local,class=CODE,merge=1,delta=2
    50                           	psect	text5,local,class=CODE,merge=1,delta=2
    51                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text7,local,class=CODE,merge=1,delta=2
    53                           	psect	text8,local,class=CODE,merge=1,delta=2
    54                           	psect	text9,local,class=CODE,merge=1,delta=2
    55                           	psect	text10,local,class=CODE,merge=1,delta=2
    56                           	psect	text11,local,class=CODE,merge=1,delta=2
    57                           	psect	text12,local,class=CODE,merge=1,delta=2
    58                           	psect	text13,local,class=CODE,merge=1,delta=2
    59                           	psect	text14,local,class=CODE,merge=1,delta=2
    60                           	psect	text15,local,class=CODE,merge=1,delta=2
    61                           	psect	text16,local,class=CODE,merge=1,delta=2
    62                           	psect	text17,local,class=CODE,merge=1,delta=2
    63                           	psect	text18,local,class=CODE,merge=1,delta=2
    64                           	psect	text19,local,class=CODE,merge=1,delta=2
    65                           	psect	text20,local,class=CODE,merge=1,delta=2
    66                           	psect	text21,local,class=CODE,merge=1,delta=2
    67                           	psect	text22,local,class=CODE,merge=1,delta=2
    68                           	psect	text23,local,class=CODE,merge=1,delta=2
    69                           	psect	text24,local,class=CODE,merge=1,delta=2
    70                           	psect	text25,local,class=CODE,merge=1,delta=2
    71                           	psect	text26,local,class=CODE,merge=1,delta=2
    72                           	psect	text27,local,class=CODE,merge=1,delta=2
    73                           	psect	text28,local,class=CODE,merge=1,delta=2
    74                           	psect	text29,local,class=CODE,merge=1,delta=2
    75                           	psect	text30,local,class=CODE,merge=1,delta=2
    76                           	psect	text31,local,class=CODE,merge=1,delta=2
    77                           	psect	text32,local,class=CODE,merge=1,delta=2
    78                           	psect	text33,local,class=CODE,merge=1,delta=2
    79                           	psect	text34,local,class=CODE,merge=1,delta=2
    80                           	psect	text35,local,class=CODE,merge=1,delta=2
    81                           	psect	text36,local,class=CODE,merge=1,delta=2
    82                           	psect	text37,local,class=CODE,merge=1,delta=2
    83                           	psect	text38,local,class=CODE,merge=1,delta=2
    84                           	psect	text39,local,class=CODE,merge=1,delta=2
    85                           	psect	text40,local,class=CODE,merge=1,delta=2
    86                           	psect	text41,local,class=CODE,merge=1,delta=2
    87                           	psect	text42,local,class=CODE,merge=1,delta=2
    88                           	psect	text43,local,class=CODE,merge=1,delta=2
    89                           	psect	text44,local,class=CODE,merge=1,delta=2
    90                           	psect	text45,local,class=CODE,merge=1,delta=2
    91                           	psect	text46,local,class=CODE,merge=1,delta=2
    92                           	psect	text47,local,class=CODE,merge=1,delta=2,group=1
    93                           	psect	text48,local,class=CODE,merge=1,delta=2
    94                           	psect	text49,local,class=CODE,merge=1,delta=2
    95                           	psect	text50,local,class=CODE,merge=1,delta=2
    96                           	psect	text51,local,class=CODE,merge=1,delta=2
    97                           	psect	text52,local,class=CODE,merge=1,delta=2
    98                           	psect	text53,local,class=CODE,merge=1,delta=2
    99                           	psect	text54,local,class=CODE,merge=1,delta=2
   100                           	psect	text55,local,class=CODE,merge=1,delta=2
   101                           	psect	text56,local,class=CODE,merge=1,delta=2
   102                           	psect	intentry,global,class=CODE,delta=2
   103                           	psect	text58,local,class=CODE,merge=1,delta=2
   104                           	psect	text59,local,class=CODE,merge=1,delta=2
   105                           	psect	text60,local,class=CODE,merge=1,delta=2
   106                           	psect	text61,local,class=CODE,merge=1,delta=2
   107                           	psect	text62,local,class=CODE,merge=1,delta=2
   108                           	psect	text63,local,class=CODE,merge=1,delta=2
   109                           	psect	text64,local,class=CODE,merge=1,delta=2
   110                           	psect	text65,local,class=CODE,merge=1,delta=2
   111                           	psect	text66,local,class=CODE,merge=1,delta=2
   112                           	psect	text67,local,class=CODE,merge=1,delta=2
   113                           	psect	text68,local,class=CODE,merge=1,delta=2
   114                           	psect	text69,local,class=CODE,merge=1,delta=2
   115                           	psect	text70,local,class=CODE,merge=1,delta=2
   116                           	psect	text71,local,class=CODE,merge=1,delta=2
   117                           	psect	text72,local,class=CODE,merge=1,delta=2
   118                           	psect	text73,local,class=CODE,merge=1,delta=2
   119                           	psect	text74,local,class=CODE,merge=1,delta=2
   120                           	psect	text75,local,class=CODE,merge=1,delta=2
   121                           	psect	text76,local,class=CODE,merge=1,delta=2,group=1
   122                           	psect	text77,local,class=CODE,merge=1,delta=2,group=1
   123                           	psect	text78,local,class=CODE,merge=1,delta=2
   124                           	psect	text79,local,class=CODE,merge=1,delta=2
   125                           	psect	text80,local,class=CODE,merge=1,delta=2
   126                           	dabs	1,0x7E,2
   127  0000                     
   128                           ; Version 2.05
   129                           ; Generated 20/12/2018 GMT
   130                           ; 
   131                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   132                           ; All rights reserved.
   133                           ; 
   134                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   135                           ; 
   136                           ; Redistribution and use in source and binary forms, with or without modification, are
   137                           ; permitted provided that the following conditions are met:
   138                           ; 
   139                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   140                           ;        conditions and the following disclaimer.
   141                           ; 
   142                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   143                           ;        of conditions and the following disclaimer in the documentation and/or other
   144                           ;        materials provided with the distribution.
   145                           ; 
   146                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   147                           ;        software without specific prior written permission.
   148                           ; 
   149                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   150                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   151                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   152                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   153                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   154                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   155                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   156                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   157                           ; 
   158                           ; 
   159                           ; Code-generator required, PIC16F1705 Definitions
   160                           ; 
   161                           ; SFR Addresses
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  0007                     	;# 
   170  0008                     	;# 
   171  0009                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000E                     	;# 
   176  0011                     	;# 
   177  0012                     	;# 
   178  0013                     	;# 
   179  0015                     	;# 
   180  0016                     	;# 
   181  0016                     	;# 
   182  0017                     	;# 
   183  0018                     	;# 
   184  0019                     	;# 
   185  001A                     	;# 
   186  001B                     	;# 
   187  001C                     	;# 
   188  008C                     	;# 
   189  008E                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0093                     	;# 
   193  0095                     	;# 
   194  0096                     	;# 
   195  0097                     	;# 
   196  0098                     	;# 
   197  0099                     	;# 
   198  009A                     	;# 
   199  009B                     	;# 
   200  009B                     	;# 
   201  009C                     	;# 
   202  009D                     	;# 
   203  009E                     	;# 
   204  009F                     	;# 
   205  010C                     	;# 
   206  010E                     	;# 
   207  0111                     	;# 
   208  0112                     	;# 
   209  0113                     	;# 
   210  0114                     	;# 
   211  0115                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  0118                     	;# 
   215  0119                     	;# 
   216  011C                     	;# 
   217  018C                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0194                     	;# 
   225  0195                     	;# 
   226  0196                     	;# 
   227  0197                     	;# 
   228  0199                     	;# 
   229  0199                     	;# 
   230  0199                     	;# 
   231  019A                     	;# 
   232  019A                     	;# 
   233  019A                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019C                     	;# 
   240  019C                     	;# 
   241  019C                     	;# 
   242  019D                     	;# 
   243  019D                     	;# 
   244  019D                     	;# 
   245  019E                     	;# 
   246  019E                     	;# 
   247  019E                     	;# 
   248  019F                     	;# 
   249  019F                     	;# 
   250  019F                     	;# 
   251  019F                     	;# 
   252  019F                     	;# 
   253  020C                     	;# 
   254  020E                     	;# 
   255  0211                     	;# 
   256  0211                     	;# 
   257  0212                     	;# 
   258  0212                     	;# 
   259  0213                     	;# 
   260  0213                     	;# 
   261  0214                     	;# 
   262  0214                     	;# 
   263  0215                     	;# 
   264  0215                     	;# 
   265  0215                     	;# 
   266  0215                     	;# 
   267  0216                     	;# 
   268  0216                     	;# 
   269  0217                     	;# 
   270  0217                     	;# 
   271  028C                     	;# 
   272  028E                     	;# 
   273  0291                     	;# 
   274  0291                     	;# 
   275  0292                     	;# 
   276  0293                     	;# 
   277  0293                     	;# 
   278  0298                     	;# 
   279  0298                     	;# 
   280  0299                     	;# 
   281  029A                     	;# 
   282  029A                     	;# 
   283  029E                     	;# 
   284  030C                     	;# 
   285  030E                     	;# 
   286  038C                     	;# 
   287  038E                     	;# 
   288  0391                     	;# 
   289  0392                     	;# 
   290  0393                     	;# 
   291  0397                     	;# 
   292  0398                     	;# 
   293  0399                     	;# 
   294  0415                     	;# 
   295  0416                     	;# 
   296  0417                     	;# 
   297  041C                     	;# 
   298  041D                     	;# 
   299  041E                     	;# 
   300  0511                     	;# 
   301  0515                     	;# 
   302  0617                     	;# 
   303  0618                     	;# 
   304  0619                     	;# 
   305  0619                     	;# 
   306  061A                     	;# 
   307  061B                     	;# 
   308  061C                     	;# 
   309  061C                     	;# 
   310  0691                     	;# 
   311  0692                     	;# 
   312  0693                     	;# 
   313  0694                     	;# 
   314  0695                     	;# 
   315  0696                     	;# 
   316  0697                     	;# 
   317  0698                     	;# 
   318  0699                     	;# 
   319  069A                     	;# 
   320  069B                     	;# 
   321  069C                     	;# 
   322  069D                     	;# 
   323  069E                     	;# 
   324  069F                     	;# 
   325  0E0F                     	;# 
   326  0E10                     	;# 
   327  0E11                     	;# 
   328  0E12                     	;# 
   329  0E13                     	;# 
   330  0E14                     	;# 
   331  0E15                     	;# 
   332  0E17                     	;# 
   333  0E20                     	;# 
   334  0E21                     	;# 
   335  0E22                     	;# 
   336  0E24                     	;# 
   337  0E25                     	;# 
   338  0E28                     	;# 
   339  0E29                     	;# 
   340  0E2A                     	;# 
   341  0E2B                     	;# 
   342  0E90                     	;# 
   343  0E91                     	;# 
   344  0E92                     	;# 
   345  0E94                     	;# 
   346  0E95                     	;# 
   347  0EA0                     	;# 
   348  0EA1                     	;# 
   349  0EA2                     	;# 
   350  0EA3                     	;# 
   351  0EA4                     	;# 
   352  0EA5                     	;# 
   353  0F0F                     	;# 
   354  0F10                     	;# 
   355  0F11                     	;# 
   356  0F12                     	;# 
   357  0F13                     	;# 
   358  0F14                     	;# 
   359  0F15                     	;# 
   360  0F16                     	;# 
   361  0F17                     	;# 
   362  0F18                     	;# 
   363  0F19                     	;# 
   364  0F1A                     	;# 
   365  0F1B                     	;# 
   366  0F1C                     	;# 
   367  0F1D                     	;# 
   368  0F1E                     	;# 
   369  0F1F                     	;# 
   370  0F20                     	;# 
   371  0F21                     	;# 
   372  0F22                     	;# 
   373  0F23                     	;# 
   374  0F24                     	;# 
   375  0F25                     	;# 
   376  0F26                     	;# 
   377  0F27                     	;# 
   378  0F28                     	;# 
   379  0F29                     	;# 
   380  0F2A                     	;# 
   381  0F2B                     	;# 
   382  0F2C                     	;# 
   383  0F2D                     	;# 
   384  0F9E                     	;# 
   385  0FE4                     	;# 
   386  0FE5                     	;# 
   387  0FE6                     	;# 
   388  0FE7                     	;# 
   389  0FE8                     	;# 
   390  0FE9                     	;# 
   391  0FEA                     	;# 
   392  0FEB                     	;# 
   393  0FED                     	;# 
   394  0FEE                     	;# 
   395  0FEF                     	;# 
   396  0000                     	;# 
   397  0001                     	;# 
   398  0002                     	;# 
   399  0003                     	;# 
   400  0004                     	;# 
   401  0005                     	;# 
   402  0006                     	;# 
   403  0007                     	;# 
   404  0008                     	;# 
   405  0009                     	;# 
   406  000A                     	;# 
   407  000B                     	;# 
   408  000C                     	;# 
   409  000E                     	;# 
   410  0011                     	;# 
   411  0012                     	;# 
   412  0013                     	;# 
   413  0015                     	;# 
   414  0016                     	;# 
   415  0016                     	;# 
   416  0017                     	;# 
   417  0018                     	;# 
   418  0019                     	;# 
   419  001A                     	;# 
   420  001B                     	;# 
   421  001C                     	;# 
   422  008C                     	;# 
   423  008E                     	;# 
   424  0091                     	;# 
   425  0092                     	;# 
   426  0093                     	;# 
   427  0095                     	;# 
   428  0096                     	;# 
   429  0097                     	;# 
   430  0098                     	;# 
   431  0099                     	;# 
   432  009A                     	;# 
   433  009B                     	;# 
   434  009B                     	;# 
   435  009C                     	;# 
   436  009D                     	;# 
   437  009E                     	;# 
   438  009F                     	;# 
   439  010C                     	;# 
   440  010E                     	;# 
   441  0111                     	;# 
   442  0112                     	;# 
   443  0113                     	;# 
   444  0114                     	;# 
   445  0115                     	;# 
   446  0116                     	;# 
   447  0117                     	;# 
   448  0118                     	;# 
   449  0119                     	;# 
   450  011C                     	;# 
   451  018C                     	;# 
   452  018E                     	;# 
   453  0191                     	;# 
   454  0191                     	;# 
   455  0192                     	;# 
   456  0193                     	;# 
   457  0193                     	;# 
   458  0194                     	;# 
   459  0195                     	;# 
   460  0196                     	;# 
   461  0197                     	;# 
   462  0199                     	;# 
   463  0199                     	;# 
   464  0199                     	;# 
   465  019A                     	;# 
   466  019A                     	;# 
   467  019A                     	;# 
   468  019B                     	;# 
   469  019B                     	;# 
   470  019B                     	;# 
   471  019B                     	;# 
   472  019B                     	;# 
   473  019C                     	;# 
   474  019C                     	;# 
   475  019C                     	;# 
   476  019D                     	;# 
   477  019D                     	;# 
   478  019D                     	;# 
   479  019E                     	;# 
   480  019E                     	;# 
   481  019E                     	;# 
   482  019F                     	;# 
   483  019F                     	;# 
   484  019F                     	;# 
   485  019F                     	;# 
   486  019F                     	;# 
   487  020C                     	;# 
   488  020E                     	;# 
   489  0211                     	;# 
   490  0211                     	;# 
   491  0212                     	;# 
   492  0212                     	;# 
   493  0213                     	;# 
   494  0213                     	;# 
   495  0214                     	;# 
   496  0214                     	;# 
   497  0215                     	;# 
   498  0215                     	;# 
   499  0215                     	;# 
   500  0215                     	;# 
   501  0216                     	;# 
   502  0216                     	;# 
   503  0217                     	;# 
   504  0217                     	;# 
   505  028C                     	;# 
   506  028E                     	;# 
   507  0291                     	;# 
   508  0291                     	;# 
   509  0292                     	;# 
   510  0293                     	;# 
   511  0293                     	;# 
   512  0298                     	;# 
   513  0298                     	;# 
   514  0299                     	;# 
   515  029A                     	;# 
   516  029A                     	;# 
   517  029E                     	;# 
   518  030C                     	;# 
   519  030E                     	;# 
   520  038C                     	;# 
   521  038E                     	;# 
   522  0391                     	;# 
   523  0392                     	;# 
   524  0393                     	;# 
   525  0397                     	;# 
   526  0398                     	;# 
   527  0399                     	;# 
   528  0415                     	;# 
   529  0416                     	;# 
   530  0417                     	;# 
   531  041C                     	;# 
   532  041D                     	;# 
   533  041E                     	;# 
   534  0511                     	;# 
   535  0515                     	;# 
   536  0617                     	;# 
   537  0618                     	;# 
   538  0619                     	;# 
   539  0619                     	;# 
   540  061A                     	;# 
   541  061B                     	;# 
   542  061C                     	;# 
   543  061C                     	;# 
   544  0691                     	;# 
   545  0692                     	;# 
   546  0693                     	;# 
   547  0694                     	;# 
   548  0695                     	;# 
   549  0696                     	;# 
   550  0697                     	;# 
   551  0698                     	;# 
   552  0699                     	;# 
   553  069A                     	;# 
   554  069B                     	;# 
   555  069C                     	;# 
   556  069D                     	;# 
   557  069E                     	;# 
   558  069F                     	;# 
   559  0E0F                     	;# 
   560  0E10                     	;# 
   561  0E11                     	;# 
   562  0E12                     	;# 
   563  0E13                     	;# 
   564  0E14                     	;# 
   565  0E15                     	;# 
   566  0E17                     	;# 
   567  0E20                     	;# 
   568  0E21                     	;# 
   569  0E22                     	;# 
   570  0E24                     	;# 
   571  0E25                     	;# 
   572  0E28                     	;# 
   573  0E29                     	;# 
   574  0E2A                     	;# 
   575  0E2B                     	;# 
   576  0E90                     	;# 
   577  0E91                     	;# 
   578  0E92                     	;# 
   579  0E94                     	;# 
   580  0E95                     	;# 
   581  0EA0                     	;# 
   582  0EA1                     	;# 
   583  0EA2                     	;# 
   584  0EA3                     	;# 
   585  0EA4                     	;# 
   586  0EA5                     	;# 
   587  0F0F                     	;# 
   588  0F10                     	;# 
   589  0F11                     	;# 
   590  0F12                     	;# 
   591  0F13                     	;# 
   592  0F14                     	;# 
   593  0F15                     	;# 
   594  0F16                     	;# 
   595  0F17                     	;# 
   596  0F18                     	;# 
   597  0F19                     	;# 
   598  0F1A                     	;# 
   599  0F1B                     	;# 
   600  0F1C                     	;# 
   601  0F1D                     	;# 
   602  0F1E                     	;# 
   603  0F1F                     	;# 
   604  0F20                     	;# 
   605  0F21                     	;# 
   606  0F22                     	;# 
   607  0F23                     	;# 
   608  0F24                     	;# 
   609  0F25                     	;# 
   610  0F26                     	;# 
   611  0F27                     	;# 
   612  0F28                     	;# 
   613  0F29                     	;# 
   614  0F2A                     	;# 
   615  0F2B                     	;# 
   616  0F2C                     	;# 
   617  0F2D                     	;# 
   618  0F9E                     	;# 
   619  0FE4                     	;# 
   620  0FE5                     	;# 
   621  0FE6                     	;# 
   622  0FE7                     	;# 
   623  0FE8                     	;# 
   624  0FE9                     	;# 
   625  0FEA                     	;# 
   626  0FEB                     	;# 
   627  0FED                     	;# 
   628  0FEE                     	;# 
   629  0FEF                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000E                     	;# 
   644  0011                     	;# 
   645  0012                     	;# 
   646  0013                     	;# 
   647  0015                     	;# 
   648  0016                     	;# 
   649  0016                     	;# 
   650  0017                     	;# 
   651  0018                     	;# 
   652  0019                     	;# 
   653  001A                     	;# 
   654  001B                     	;# 
   655  001C                     	;# 
   656  008C                     	;# 
   657  008E                     	;# 
   658  0091                     	;# 
   659  0092                     	;# 
   660  0093                     	;# 
   661  0095                     	;# 
   662  0096                     	;# 
   663  0097                     	;# 
   664  0098                     	;# 
   665  0099                     	;# 
   666  009A                     	;# 
   667  009B                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  009F                     	;# 
   673  010C                     	;# 
   674  010E                     	;# 
   675  0111                     	;# 
   676  0112                     	;# 
   677  0113                     	;# 
   678  0114                     	;# 
   679  0115                     	;# 
   680  0116                     	;# 
   681  0117                     	;# 
   682  0118                     	;# 
   683  0119                     	;# 
   684  011C                     	;# 
   685  018C                     	;# 
   686  018E                     	;# 
   687  0191                     	;# 
   688  0191                     	;# 
   689  0192                     	;# 
   690  0193                     	;# 
   691  0193                     	;# 
   692  0194                     	;# 
   693  0195                     	;# 
   694  0196                     	;# 
   695  0197                     	;# 
   696  0199                     	;# 
   697  0199                     	;# 
   698  0199                     	;# 
   699  019A                     	;# 
   700  019A                     	;# 
   701  019A                     	;# 
   702  019B                     	;# 
   703  019B                     	;# 
   704  019B                     	;# 
   705  019B                     	;# 
   706  019B                     	;# 
   707  019C                     	;# 
   708  019C                     	;# 
   709  019C                     	;# 
   710  019D                     	;# 
   711  019D                     	;# 
   712  019D                     	;# 
   713  019E                     	;# 
   714  019E                     	;# 
   715  019E                     	;# 
   716  019F                     	;# 
   717  019F                     	;# 
   718  019F                     	;# 
   719  019F                     	;# 
   720  019F                     	;# 
   721  020C                     	;# 
   722  020E                     	;# 
   723  0211                     	;# 
   724  0211                     	;# 
   725  0212                     	;# 
   726  0212                     	;# 
   727  0213                     	;# 
   728  0213                     	;# 
   729  0214                     	;# 
   730  0214                     	;# 
   731  0215                     	;# 
   732  0215                     	;# 
   733  0215                     	;# 
   734  0215                     	;# 
   735  0216                     	;# 
   736  0216                     	;# 
   737  0217                     	;# 
   738  0217                     	;# 
   739  028C                     	;# 
   740  028E                     	;# 
   741  0291                     	;# 
   742  0291                     	;# 
   743  0292                     	;# 
   744  0293                     	;# 
   745  0293                     	;# 
   746  0298                     	;# 
   747  0298                     	;# 
   748  0299                     	;# 
   749  029A                     	;# 
   750  029A                     	;# 
   751  029E                     	;# 
   752  030C                     	;# 
   753  030E                     	;# 
   754  038C                     	;# 
   755  038E                     	;# 
   756  0391                     	;# 
   757  0392                     	;# 
   758  0393                     	;# 
   759  0397                     	;# 
   760  0398                     	;# 
   761  0399                     	;# 
   762  0415                     	;# 
   763  0416                     	;# 
   764  0417                     	;# 
   765  041C                     	;# 
   766  041D                     	;# 
   767  041E                     	;# 
   768  0511                     	;# 
   769  0515                     	;# 
   770  0617                     	;# 
   771  0618                     	;# 
   772  0619                     	;# 
   773  0619                     	;# 
   774  061A                     	;# 
   775  061B                     	;# 
   776  061C                     	;# 
   777  061C                     	;# 
   778  0691                     	;# 
   779  0692                     	;# 
   780  0693                     	;# 
   781  0694                     	;# 
   782  0695                     	;# 
   783  0696                     	;# 
   784  0697                     	;# 
   785  0698                     	;# 
   786  0699                     	;# 
   787  069A                     	;# 
   788  069B                     	;# 
   789  069C                     	;# 
   790  069D                     	;# 
   791  069E                     	;# 
   792  069F                     	;# 
   793  0E0F                     	;# 
   794  0E10                     	;# 
   795  0E11                     	;# 
   796  0E12                     	;# 
   797  0E13                     	;# 
   798  0E14                     	;# 
   799  0E15                     	;# 
   800  0E17                     	;# 
   801  0E20                     	;# 
   802  0E21                     	;# 
   803  0E22                     	;# 
   804  0E24                     	;# 
   805  0E25                     	;# 
   806  0E28                     	;# 
   807  0E29                     	;# 
   808  0E2A                     	;# 
   809  0E2B                     	;# 
   810  0E90                     	;# 
   811  0E91                     	;# 
   812  0E92                     	;# 
   813  0E94                     	;# 
   814  0E95                     	;# 
   815  0EA0                     	;# 
   816  0EA1                     	;# 
   817  0EA2                     	;# 
   818  0EA3                     	;# 
   819  0EA4                     	;# 
   820  0EA5                     	;# 
   821  0F0F                     	;# 
   822  0F10                     	;# 
   823  0F11                     	;# 
   824  0F12                     	;# 
   825  0F13                     	;# 
   826  0F14                     	;# 
   827  0F15                     	;# 
   828  0F16                     	;# 
   829  0F17                     	;# 
   830  0F18                     	;# 
   831  0F19                     	;# 
   832  0F1A                     	;# 
   833  0F1B                     	;# 
   834  0F1C                     	;# 
   835  0F1D                     	;# 
   836  0F1E                     	;# 
   837  0F1F                     	;# 
   838  0F20                     	;# 
   839  0F21                     	;# 
   840  0F22                     	;# 
   841  0F23                     	;# 
   842  0F24                     	;# 
   843  0F25                     	;# 
   844  0F26                     	;# 
   845  0F27                     	;# 
   846  0F28                     	;# 
   847  0F29                     	;# 
   848  0F2A                     	;# 
   849  0F2B                     	;# 
   850  0F2C                     	;# 
   851  0F2D                     	;# 
   852  0F9E                     	;# 
   853  0FE4                     	;# 
   854  0FE5                     	;# 
   855  0FE6                     	;# 
   856  0FE7                     	;# 
   857  0FE8                     	;# 
   858  0FE9                     	;# 
   859  0FEA                     	;# 
   860  0FEB                     	;# 
   861  0FED                     	;# 
   862  0FEE                     	;# 
   863  0FEF                     	;# 
   864  0000                     	;# 
   865  0001                     	;# 
   866  0002                     	;# 
   867  0003                     	;# 
   868  0004                     	;# 
   869  0005                     	;# 
   870  0006                     	;# 
   871  0007                     	;# 
   872  0008                     	;# 
   873  0009                     	;# 
   874  000A                     	;# 
   875  000B                     	;# 
   876  000C                     	;# 
   877  000E                     	;# 
   878  0011                     	;# 
   879  0012                     	;# 
   880  0013                     	;# 
   881  0015                     	;# 
   882  0016                     	;# 
   883  0016                     	;# 
   884  0017                     	;# 
   885  0018                     	;# 
   886  0019                     	;# 
   887  001A                     	;# 
   888  001B                     	;# 
   889  001C                     	;# 
   890  008C                     	;# 
   891  008E                     	;# 
   892  0091                     	;# 
   893  0092                     	;# 
   894  0093                     	;# 
   895  0095                     	;# 
   896  0096                     	;# 
   897  0097                     	;# 
   898  0098                     	;# 
   899  0099                     	;# 
   900  009A                     	;# 
   901  009B                     	;# 
   902  009B                     	;# 
   903  009C                     	;# 
   904  009D                     	;# 
   905  009E                     	;# 
   906  009F                     	;# 
   907  010C                     	;# 
   908  010E                     	;# 
   909  0111                     	;# 
   910  0112                     	;# 
   911  0113                     	;# 
   912  0114                     	;# 
   913  0115                     	;# 
   914  0116                     	;# 
   915  0117                     	;# 
   916  0118                     	;# 
   917  0119                     	;# 
   918  011C                     	;# 
   919  018C                     	;# 
   920  018E                     	;# 
   921  0191                     	;# 
   922  0191                     	;# 
   923  0192                     	;# 
   924  0193                     	;# 
   925  0193                     	;# 
   926  0194                     	;# 
   927  0195                     	;# 
   928  0196                     	;# 
   929  0197                     	;# 
   930  0199                     	;# 
   931  0199                     	;# 
   932  0199                     	;# 
   933  019A                     	;# 
   934  019A                     	;# 
   935  019A                     	;# 
   936  019B                     	;# 
   937  019B                     	;# 
   938  019B                     	;# 
   939  019B                     	;# 
   940  019B                     	;# 
   941  019C                     	;# 
   942  019C                     	;# 
   943  019C                     	;# 
   944  019D                     	;# 
   945  019D                     	;# 
   946  019D                     	;# 
   947  019E                     	;# 
   948  019E                     	;# 
   949  019E                     	;# 
   950  019F                     	;# 
   951  019F                     	;# 
   952  019F                     	;# 
   953  019F                     	;# 
   954  019F                     	;# 
   955  020C                     	;# 
   956  020E                     	;# 
   957  0211                     	;# 
   958  0211                     	;# 
   959  0212                     	;# 
   960  0212                     	;# 
   961  0213                     	;# 
   962  0213                     	;# 
   963  0214                     	;# 
   964  0214                     	;# 
   965  0215                     	;# 
   966  0215                     	;# 
   967  0215                     	;# 
   968  0215                     	;# 
   969  0216                     	;# 
   970  0216                     	;# 
   971  0217                     	;# 
   972  0217                     	;# 
   973  028C                     	;# 
   974  028E                     	;# 
   975  0291                     	;# 
   976  0291                     	;# 
   977  0292                     	;# 
   978  0293                     	;# 
   979  0293                     	;# 
   980  0298                     	;# 
   981  0298                     	;# 
   982  0299                     	;# 
   983  029A                     	;# 
   984  029A                     	;# 
   985  029E                     	;# 
   986  030C                     	;# 
   987  030E                     	;# 
   988  038C                     	;# 
   989  038E                     	;# 
   990  0391                     	;# 
   991  0392                     	;# 
   992  0393                     	;# 
   993  0397                     	;# 
   994  0398                     	;# 
   995  0399                     	;# 
   996  0415                     	;# 
   997  0416                     	;# 
   998  0417                     	;# 
   999  041C                     	;# 
  1000  041D                     	;# 
  1001  041E                     	;# 
  1002  0511                     	;# 
  1003  0515                     	;# 
  1004  0617                     	;# 
  1005  0618                     	;# 
  1006  0619                     	;# 
  1007  0619                     	;# 
  1008  061A                     	;# 
  1009  061B                     	;# 
  1010  061C                     	;# 
  1011  061C                     	;# 
  1012  0691                     	;# 
  1013  0692                     	;# 
  1014  0693                     	;# 
  1015  0694                     	;# 
  1016  0695                     	;# 
  1017  0696                     	;# 
  1018  0697                     	;# 
  1019  0698                     	;# 
  1020  0699                     	;# 
  1021  069A                     	;# 
  1022  069B                     	;# 
  1023  069C                     	;# 
  1024  069D                     	;# 
  1025  069E                     	;# 
  1026  069F                     	;# 
  1027  0E0F                     	;# 
  1028  0E10                     	;# 
  1029  0E11                     	;# 
  1030  0E12                     	;# 
  1031  0E13                     	;# 
  1032  0E14                     	;# 
  1033  0E15                     	;# 
  1034  0E17                     	;# 
  1035  0E20                     	;# 
  1036  0E21                     	;# 
  1037  0E22                     	;# 
  1038  0E24                     	;# 
  1039  0E25                     	;# 
  1040  0E28                     	;# 
  1041  0E29                     	;# 
  1042  0E2A                     	;# 
  1043  0E2B                     	;# 
  1044  0E90                     	;# 
  1045  0E91                     	;# 
  1046  0E92                     	;# 
  1047  0E94                     	;# 
  1048  0E95                     	;# 
  1049  0EA0                     	;# 
  1050  0EA1                     	;# 
  1051  0EA2                     	;# 
  1052  0EA3                     	;# 
  1053  0EA4                     	;# 
  1054  0EA5                     	;# 
  1055  0F0F                     	;# 
  1056  0F10                     	;# 
  1057  0F11                     	;# 
  1058  0F12                     	;# 
  1059  0F13                     	;# 
  1060  0F14                     	;# 
  1061  0F15                     	;# 
  1062  0F16                     	;# 
  1063  0F17                     	;# 
  1064  0F18                     	;# 
  1065  0F19                     	;# 
  1066  0F1A                     	;# 
  1067  0F1B                     	;# 
  1068  0F1C                     	;# 
  1069  0F1D                     	;# 
  1070  0F1E                     	;# 
  1071  0F1F                     	;# 
  1072  0F20                     	;# 
  1073  0F21                     	;# 
  1074  0F22                     	;# 
  1075  0F23                     	;# 
  1076  0F24                     	;# 
  1077  0F25                     	;# 
  1078  0F26                     	;# 
  1079  0F27                     	;# 
  1080  0F28                     	;# 
  1081  0F29                     	;# 
  1082  0F2A                     	;# 
  1083  0F2B                     	;# 
  1084  0F2C                     	;# 
  1085  0F2D                     	;# 
  1086  0F9E                     	;# 
  1087  0FE4                     	;# 
  1088  0FE5                     	;# 
  1089  0FE6                     	;# 
  1090  0FE7                     	;# 
  1091  0FE8                     	;# 
  1092  0FE9                     	;# 
  1093  0FEA                     	;# 
  1094  0FEB                     	;# 
  1095  0FED                     	;# 
  1096  0FEE                     	;# 
  1097  0FEF                     	;# 
  1098  0000                     	;# 
  1099  0001                     	;# 
  1100  0002                     	;# 
  1101  0003                     	;# 
  1102  0004                     	;# 
  1103  0005                     	;# 
  1104  0006                     	;# 
  1105  0007                     	;# 
  1106  0008                     	;# 
  1107  0009                     	;# 
  1108  000A                     	;# 
  1109  000B                     	;# 
  1110  000C                     	;# 
  1111  000E                     	;# 
  1112  0011                     	;# 
  1113  0012                     	;# 
  1114  0013                     	;# 
  1115  0015                     	;# 
  1116  0016                     	;# 
  1117  0016                     	;# 
  1118  0017                     	;# 
  1119  0018                     	;# 
  1120  0019                     	;# 
  1121  001A                     	;# 
  1122  001B                     	;# 
  1123  001C                     	;# 
  1124  008C                     	;# 
  1125  008E                     	;# 
  1126  0091                     	;# 
  1127  0092                     	;# 
  1128  0093                     	;# 
  1129  0095                     	;# 
  1130  0096                     	;# 
  1131  0097                     	;# 
  1132  0098                     	;# 
  1133  0099                     	;# 
  1134  009A                     	;# 
  1135  009B                     	;# 
  1136  009B                     	;# 
  1137  009C                     	;# 
  1138  009D                     	;# 
  1139  009E                     	;# 
  1140  009F                     	;# 
  1141  010C                     	;# 
  1142  010E                     	;# 
  1143  0111                     	;# 
  1144  0112                     	;# 
  1145  0113                     	;# 
  1146  0114                     	;# 
  1147  0115                     	;# 
  1148  0116                     	;# 
  1149  0117                     	;# 
  1150  0118                     	;# 
  1151  0119                     	;# 
  1152  011C                     	;# 
  1153  018C                     	;# 
  1154  018E                     	;# 
  1155  0191                     	;# 
  1156  0191                     	;# 
  1157  0192                     	;# 
  1158  0193                     	;# 
  1159  0193                     	;# 
  1160  0194                     	;# 
  1161  0195                     	;# 
  1162  0196                     	;# 
  1163  0197                     	;# 
  1164  0199                     	;# 
  1165  0199                     	;# 
  1166  0199                     	;# 
  1167  019A                     	;# 
  1168  019A                     	;# 
  1169  019A                     	;# 
  1170  019B                     	;# 
  1171  019B                     	;# 
  1172  019B                     	;# 
  1173  019B                     	;# 
  1174  019B                     	;# 
  1175  019C                     	;# 
  1176  019C                     	;# 
  1177  019C                     	;# 
  1178  019D                     	;# 
  1179  019D                     	;# 
  1180  019D                     	;# 
  1181  019E                     	;# 
  1182  019E                     	;# 
  1183  019E                     	;# 
  1184  019F                     	;# 
  1185  019F                     	;# 
  1186  019F                     	;# 
  1187  019F                     	;# 
  1188  019F                     	;# 
  1189  020C                     	;# 
  1190  020E                     	;# 
  1191  0211                     	;# 
  1192  0211                     	;# 
  1193  0212                     	;# 
  1194  0212                     	;# 
  1195  0213                     	;# 
  1196  0213                     	;# 
  1197  0214                     	;# 
  1198  0214                     	;# 
  1199  0215                     	;# 
  1200  0215                     	;# 
  1201  0215                     	;# 
  1202  0215                     	;# 
  1203  0216                     	;# 
  1204  0216                     	;# 
  1205  0217                     	;# 
  1206  0217                     	;# 
  1207  028C                     	;# 
  1208  028E                     	;# 
  1209  0291                     	;# 
  1210  0291                     	;# 
  1211  0292                     	;# 
  1212  0293                     	;# 
  1213  0293                     	;# 
  1214  0298                     	;# 
  1215  0298                     	;# 
  1216  0299                     	;# 
  1217  029A                     	;# 
  1218  029A                     	;# 
  1219  029E                     	;# 
  1220  030C                     	;# 
  1221  030E                     	;# 
  1222  038C                     	;# 
  1223  038E                     	;# 
  1224  0391                     	;# 
  1225  0392                     	;# 
  1226  0393                     	;# 
  1227  0397                     	;# 
  1228  0398                     	;# 
  1229  0399                     	;# 
  1230  0415                     	;# 
  1231  0416                     	;# 
  1232  0417                     	;# 
  1233  041C                     	;# 
  1234  041D                     	;# 
  1235  041E                     	;# 
  1236  0511                     	;# 
  1237  0515                     	;# 
  1238  0617                     	;# 
  1239  0618                     	;# 
  1240  0619                     	;# 
  1241  0619                     	;# 
  1242  061A                     	;# 
  1243  061B                     	;# 
  1244  061C                     	;# 
  1245  061C                     	;# 
  1246  0691                     	;# 
  1247  0692                     	;# 
  1248  0693                     	;# 
  1249  0694                     	;# 
  1250  0695                     	;# 
  1251  0696                     	;# 
  1252  0697                     	;# 
  1253  0698                     	;# 
  1254  0699                     	;# 
  1255  069A                     	;# 
  1256  069B                     	;# 
  1257  069C                     	;# 
  1258  069D                     	;# 
  1259  069E                     	;# 
  1260  069F                     	;# 
  1261  0E0F                     	;# 
  1262  0E10                     	;# 
  1263  0E11                     	;# 
  1264  0E12                     	;# 
  1265  0E13                     	;# 
  1266  0E14                     	;# 
  1267  0E15                     	;# 
  1268  0E17                     	;# 
  1269  0E20                     	;# 
  1270  0E21                     	;# 
  1271  0E22                     	;# 
  1272  0E24                     	;# 
  1273  0E25                     	;# 
  1274  0E28                     	;# 
  1275  0E29                     	;# 
  1276  0E2A                     	;# 
  1277  0E2B                     	;# 
  1278  0E90                     	;# 
  1279  0E91                     	;# 
  1280  0E92                     	;# 
  1281  0E94                     	;# 
  1282  0E95                     	;# 
  1283  0EA0                     	;# 
  1284  0EA1                     	;# 
  1285  0EA2                     	;# 
  1286  0EA3                     	;# 
  1287  0EA4                     	;# 
  1288  0EA5                     	;# 
  1289  0F0F                     	;# 
  1290  0F10                     	;# 
  1291  0F11                     	;# 
  1292  0F12                     	;# 
  1293  0F13                     	;# 
  1294  0F14                     	;# 
  1295  0F15                     	;# 
  1296  0F16                     	;# 
  1297  0F17                     	;# 
  1298  0F18                     	;# 
  1299  0F19                     	;# 
  1300  0F1A                     	;# 
  1301  0F1B                     	;# 
  1302  0F1C                     	;# 
  1303  0F1D                     	;# 
  1304  0F1E                     	;# 
  1305  0F1F                     	;# 
  1306  0F20                     	;# 
  1307  0F21                     	;# 
  1308  0F22                     	;# 
  1309  0F23                     	;# 
  1310  0F24                     	;# 
  1311  0F25                     	;# 
  1312  0F26                     	;# 
  1313  0F27                     	;# 
  1314  0F28                     	;# 
  1315  0F29                     	;# 
  1316  0F2A                     	;# 
  1317  0F2B                     	;# 
  1318  0F2C                     	;# 
  1319  0F2D                     	;# 
  1320  0F9E                     	;# 
  1321  0FE4                     	;# 
  1322  0FE5                     	;# 
  1323  0FE6                     	;# 
  1324  0FE7                     	;# 
  1325  0FE8                     	;# 
  1326  0FE9                     	;# 
  1327  0FEA                     	;# 
  1328  0FEB                     	;# 
  1329  0FED                     	;# 
  1330  0FEE                     	;# 
  1331  0FEF                     	;# 
  1332  0000                     	;# 
  1333  0001                     	;# 
  1334  0002                     	;# 
  1335  0003                     	;# 
  1336  0004                     	;# 
  1337  0005                     	;# 
  1338  0006                     	;# 
  1339  0007                     	;# 
  1340  0008                     	;# 
  1341  0009                     	;# 
  1342  000A                     	;# 
  1343  000B                     	;# 
  1344  000C                     	;# 
  1345  000E                     	;# 
  1346  0011                     	;# 
  1347  0012                     	;# 
  1348  0013                     	;# 
  1349  0015                     	;# 
  1350  0016                     	;# 
  1351  0016                     	;# 
  1352  0017                     	;# 
  1353  0018                     	;# 
  1354  0019                     	;# 
  1355  001A                     	;# 
  1356  001B                     	;# 
  1357  001C                     	;# 
  1358  008C                     	;# 
  1359  008E                     	;# 
  1360  0091                     	;# 
  1361  0092                     	;# 
  1362  0093                     	;# 
  1363  0095                     	;# 
  1364  0096                     	;# 
  1365  0097                     	;# 
  1366  0098                     	;# 
  1367  0099                     	;# 
  1368  009A                     	;# 
  1369  009B                     	;# 
  1370  009B                     	;# 
  1371  009C                     	;# 
  1372  009D                     	;# 
  1373  009E                     	;# 
  1374  009F                     	;# 
  1375  010C                     	;# 
  1376  010E                     	;# 
  1377  0111                     	;# 
  1378  0112                     	;# 
  1379  0113                     	;# 
  1380  0114                     	;# 
  1381  0115                     	;# 
  1382  0116                     	;# 
  1383  0117                     	;# 
  1384  0118                     	;# 
  1385  0119                     	;# 
  1386  011C                     	;# 
  1387  018C                     	;# 
  1388  018E                     	;# 
  1389  0191                     	;# 
  1390  0191                     	;# 
  1391  0192                     	;# 
  1392  0193                     	;# 
  1393  0193                     	;# 
  1394  0194                     	;# 
  1395  0195                     	;# 
  1396  0196                     	;# 
  1397  0197                     	;# 
  1398  0199                     	;# 
  1399  0199                     	;# 
  1400  0199                     	;# 
  1401  019A                     	;# 
  1402  019A                     	;# 
  1403  019A                     	;# 
  1404  019B                     	;# 
  1405  019B                     	;# 
  1406  019B                     	;# 
  1407  019B                     	;# 
  1408  019B                     	;# 
  1409  019C                     	;# 
  1410  019C                     	;# 
  1411  019C                     	;# 
  1412  019D                     	;# 
  1413  019D                     	;# 
  1414  019D                     	;# 
  1415  019E                     	;# 
  1416  019E                     	;# 
  1417  019E                     	;# 
  1418  019F                     	;# 
  1419  019F                     	;# 
  1420  019F                     	;# 
  1421  019F                     	;# 
  1422  019F                     	;# 
  1423  020C                     	;# 
  1424  020E                     	;# 
  1425  0211                     	;# 
  1426  0211                     	;# 
  1427  0212                     	;# 
  1428  0212                     	;# 
  1429  0213                     	;# 
  1430  0213                     	;# 
  1431  0214                     	;# 
  1432  0214                     	;# 
  1433  0215                     	;# 
  1434  0215                     	;# 
  1435  0215                     	;# 
  1436  0215                     	;# 
  1437  0216                     	;# 
  1438  0216                     	;# 
  1439  0217                     	;# 
  1440  0217                     	;# 
  1441  028C                     	;# 
  1442  028E                     	;# 
  1443  0291                     	;# 
  1444  0291                     	;# 
  1445  0292                     	;# 
  1446  0293                     	;# 
  1447  0293                     	;# 
  1448  0298                     	;# 
  1449  0298                     	;# 
  1450  0299                     	;# 
  1451  029A                     	;# 
  1452  029A                     	;# 
  1453  029E                     	;# 
  1454  030C                     	;# 
  1455  030E                     	;# 
  1456  038C                     	;# 
  1457  038E                     	;# 
  1458  0391                     	;# 
  1459  0392                     	;# 
  1460  0393                     	;# 
  1461  0397                     	;# 
  1462  0398                     	;# 
  1463  0399                     	;# 
  1464  0415                     	;# 
  1465  0416                     	;# 
  1466  0417                     	;# 
  1467  041C                     	;# 
  1468  041D                     	;# 
  1469  041E                     	;# 
  1470  0511                     	;# 
  1471  0515                     	;# 
  1472  0617                     	;# 
  1473  0618                     	;# 
  1474  0619                     	;# 
  1475  0619                     	;# 
  1476  061A                     	;# 
  1477  061B                     	;# 
  1478  061C                     	;# 
  1479  061C                     	;# 
  1480  0691                     	;# 
  1481  0692                     	;# 
  1482  0693                     	;# 
  1483  0694                     	;# 
  1484  0695                     	;# 
  1485  0696                     	;# 
  1486  0697                     	;# 
  1487  0698                     	;# 
  1488  0699                     	;# 
  1489  069A                     	;# 
  1490  069B                     	;# 
  1491  069C                     	;# 
  1492  069D                     	;# 
  1493  069E                     	;# 
  1494  069F                     	;# 
  1495  0E0F                     	;# 
  1496  0E10                     	;# 
  1497  0E11                     	;# 
  1498  0E12                     	;# 
  1499  0E13                     	;# 
  1500  0E14                     	;# 
  1501  0E15                     	;# 
  1502  0E17                     	;# 
  1503  0E20                     	;# 
  1504  0E21                     	;# 
  1505  0E22                     	;# 
  1506  0E24                     	;# 
  1507  0E25                     	;# 
  1508  0E28                     	;# 
  1509  0E29                     	;# 
  1510  0E2A                     	;# 
  1511  0E2B                     	;# 
  1512  0E90                     	;# 
  1513  0E91                     	;# 
  1514  0E92                     	;# 
  1515  0E94                     	;# 
  1516  0E95                     	;# 
  1517  0EA0                     	;# 
  1518  0EA1                     	;# 
  1519  0EA2                     	;# 
  1520  0EA3                     	;# 
  1521  0EA4                     	;# 
  1522  0EA5                     	;# 
  1523  0F0F                     	;# 
  1524  0F10                     	;# 
  1525  0F11                     	;# 
  1526  0F12                     	;# 
  1527  0F13                     	;# 
  1528  0F14                     	;# 
  1529  0F15                     	;# 
  1530  0F16                     	;# 
  1531  0F17                     	;# 
  1532  0F18                     	;# 
  1533  0F19                     	;# 
  1534  0F1A                     	;# 
  1535  0F1B                     	;# 
  1536  0F1C                     	;# 
  1537  0F1D                     	;# 
  1538  0F1E                     	;# 
  1539  0F1F                     	;# 
  1540  0F20                     	;# 
  1541  0F21                     	;# 
  1542  0F22                     	;# 
  1543  0F23                     	;# 
  1544  0F24                     	;# 
  1545  0F25                     	;# 
  1546  0F26                     	;# 
  1547  0F27                     	;# 
  1548  0F28                     	;# 
  1549  0F29                     	;# 
  1550  0F2A                     	;# 
  1551  0F2B                     	;# 
  1552  0F2C                     	;# 
  1553  0F2D                     	;# 
  1554  0F9E                     	;# 
  1555  0FE4                     	;# 
  1556  0FE5                     	;# 
  1557  0FE6                     	;# 
  1558  0FE7                     	;# 
  1559  0FE8                     	;# 
  1560  0FE9                     	;# 
  1561  0FEA                     	;# 
  1562  0FEB                     	;# 
  1563  0FED                     	;# 
  1564  0FEE                     	;# 
  1565  0FEF                     	;# 
  1566  0000                     	;# 
  1567  0001                     	;# 
  1568  0002                     	;# 
  1569  0003                     	;# 
  1570  0004                     	;# 
  1571  0005                     	;# 
  1572  0006                     	;# 
  1573  0007                     	;# 
  1574  0008                     	;# 
  1575  0009                     	;# 
  1576  000A                     	;# 
  1577  000B                     	;# 
  1578  000C                     	;# 
  1579  000E                     	;# 
  1580  0011                     	;# 
  1581  0012                     	;# 
  1582  0013                     	;# 
  1583  0015                     	;# 
  1584  0016                     	;# 
  1585  0016                     	;# 
  1586  0017                     	;# 
  1587  0018                     	;# 
  1588  0019                     	;# 
  1589  001A                     	;# 
  1590  001B                     	;# 
  1591  001C                     	;# 
  1592  008C                     	;# 
  1593  008E                     	;# 
  1594  0091                     	;# 
  1595  0092                     	;# 
  1596  0093                     	;# 
  1597  0095                     	;# 
  1598  0096                     	;# 
  1599  0097                     	;# 
  1600  0098                     	;# 
  1601  0099                     	;# 
  1602  009A                     	;# 
  1603  009B                     	;# 
  1604  009B                     	;# 
  1605  009C                     	;# 
  1606  009D                     	;# 
  1607  009E                     	;# 
  1608  009F                     	;# 
  1609  010C                     	;# 
  1610  010E                     	;# 
  1611  0111                     	;# 
  1612  0112                     	;# 
  1613  0113                     	;# 
  1614  0114                     	;# 
  1615  0115                     	;# 
  1616  0116                     	;# 
  1617  0117                     	;# 
  1618  0118                     	;# 
  1619  0119                     	;# 
  1620  011C                     	;# 
  1621  018C                     	;# 
  1622  018E                     	;# 
  1623  0191                     	;# 
  1624  0191                     	;# 
  1625  0192                     	;# 
  1626  0193                     	;# 
  1627  0193                     	;# 
  1628  0194                     	;# 
  1629  0195                     	;# 
  1630  0196                     	;# 
  1631  0197                     	;# 
  1632  0199                     	;# 
  1633  0199                     	;# 
  1634  0199                     	;# 
  1635  019A                     	;# 
  1636  019A                     	;# 
  1637  019A                     	;# 
  1638  019B                     	;# 
  1639  019B                     	;# 
  1640  019B                     	;# 
  1641  019B                     	;# 
  1642  019B                     	;# 
  1643  019C                     	;# 
  1644  019C                     	;# 
  1645  019C                     	;# 
  1646  019D                     	;# 
  1647  019D                     	;# 
  1648  019D                     	;# 
  1649  019E                     	;# 
  1650  019E                     	;# 
  1651  019E                     	;# 
  1652  019F                     	;# 
  1653  019F                     	;# 
  1654  019F                     	;# 
  1655  019F                     	;# 
  1656  019F                     	;# 
  1657  020C                     	;# 
  1658  020E                     	;# 
  1659  0211                     	;# 
  1660  0211                     	;# 
  1661  0212                     	;# 
  1662  0212                     	;# 
  1663  0213                     	;# 
  1664  0213                     	;# 
  1665  0214                     	;# 
  1666  0214                     	;# 
  1667  0215                     	;# 
  1668  0215                     	;# 
  1669  0215                     	;# 
  1670  0215                     	;# 
  1671  0216                     	;# 
  1672  0216                     	;# 
  1673  0217                     	;# 
  1674  0217                     	;# 
  1675  028C                     	;# 
  1676  028E                     	;# 
  1677  0291                     	;# 
  1678  0291                     	;# 
  1679  0292                     	;# 
  1680  0293                     	;# 
  1681  0293                     	;# 
  1682  0298                     	;# 
  1683  0298                     	;# 
  1684  0299                     	;# 
  1685  029A                     	;# 
  1686  029A                     	;# 
  1687  029E                     	;# 
  1688  030C                     	;# 
  1689  030E                     	;# 
  1690  038C                     	;# 
  1691  038E                     	;# 
  1692  0391                     	;# 
  1693  0392                     	;# 
  1694  0393                     	;# 
  1695  0397                     	;# 
  1696  0398                     	;# 
  1697  0399                     	;# 
  1698  0415                     	;# 
  1699  0416                     	;# 
  1700  0417                     	;# 
  1701  041C                     	;# 
  1702  041D                     	;# 
  1703  041E                     	;# 
  1704  0511                     	;# 
  1705  0515                     	;# 
  1706  0617                     	;# 
  1707  0618                     	;# 
  1708  0619                     	;# 
  1709  0619                     	;# 
  1710  061A                     	;# 
  1711  061B                     	;# 
  1712  061C                     	;# 
  1713  061C                     	;# 
  1714  0691                     	;# 
  1715  0692                     	;# 
  1716  0693                     	;# 
  1717  0694                     	;# 
  1718  0695                     	;# 
  1719  0696                     	;# 
  1720  0697                     	;# 
  1721  0698                     	;# 
  1722  0699                     	;# 
  1723  069A                     	;# 
  1724  069B                     	;# 
  1725  069C                     	;# 
  1726  069D                     	;# 
  1727  069E                     	;# 
  1728  069F                     	;# 
  1729  0E0F                     	;# 
  1730  0E10                     	;# 
  1731  0E11                     	;# 
  1732  0E12                     	;# 
  1733  0E13                     	;# 
  1734  0E14                     	;# 
  1735  0E15                     	;# 
  1736  0E17                     	;# 
  1737  0E20                     	;# 
  1738  0E21                     	;# 
  1739  0E22                     	;# 
  1740  0E24                     	;# 
  1741  0E25                     	;# 
  1742  0E28                     	;# 
  1743  0E29                     	;# 
  1744  0E2A                     	;# 
  1745  0E2B                     	;# 
  1746  0E90                     	;# 
  1747  0E91                     	;# 
  1748  0E92                     	;# 
  1749  0E94                     	;# 
  1750  0E95                     	;# 
  1751  0EA0                     	;# 
  1752  0EA1                     	;# 
  1753  0EA2                     	;# 
  1754  0EA3                     	;# 
  1755  0EA4                     	;# 
  1756  0EA5                     	;# 
  1757  0F0F                     	;# 
  1758  0F10                     	;# 
  1759  0F11                     	;# 
  1760  0F12                     	;# 
  1761  0F13                     	;# 
  1762  0F14                     	;# 
  1763  0F15                     	;# 
  1764  0F16                     	;# 
  1765  0F17                     	;# 
  1766  0F18                     	;# 
  1767  0F19                     	;# 
  1768  0F1A                     	;# 
  1769  0F1B                     	;# 
  1770  0F1C                     	;# 
  1771  0F1D                     	;# 
  1772  0F1E                     	;# 
  1773  0F1F                     	;# 
  1774  0F20                     	;# 
  1775  0F21                     	;# 
  1776  0F22                     	;# 
  1777  0F23                     	;# 
  1778  0F24                     	;# 
  1779  0F25                     	;# 
  1780  0F26                     	;# 
  1781  0F27                     	;# 
  1782  0F28                     	;# 
  1783  0F29                     	;# 
  1784  0F2A                     	;# 
  1785  0F2B                     	;# 
  1786  0F2C                     	;# 
  1787  0F2D                     	;# 
  1788  0F9E                     	;# 
  1789  0FE4                     	;# 
  1790  0FE5                     	;# 
  1791  0FE6                     	;# 
  1792  0FE7                     	;# 
  1793  0FE8                     	;# 
  1794  0FE9                     	;# 
  1795  0FEA                     	;# 
  1796  0FEB                     	;# 
  1797  0FED                     	;# 
  1798  0FEE                     	;# 
  1799  0FEF                     	;# 
  1800  0000                     	;# 
  1801  0001                     	;# 
  1802  0002                     	;# 
  1803  0003                     	;# 
  1804  0004                     	;# 
  1805  0005                     	;# 
  1806  0006                     	;# 
  1807  0007                     	;# 
  1808  0008                     	;# 
  1809  0009                     	;# 
  1810  000A                     	;# 
  1811  000B                     	;# 
  1812  000C                     	;# 
  1813  000E                     	;# 
  1814  0011                     	;# 
  1815  0012                     	;# 
  1816  0013                     	;# 
  1817  0015                     	;# 
  1818  0016                     	;# 
  1819  0016                     	;# 
  1820  0017                     	;# 
  1821  0018                     	;# 
  1822  0019                     	;# 
  1823  001A                     	;# 
  1824  001B                     	;# 
  1825  001C                     	;# 
  1826  008C                     	;# 
  1827  008E                     	;# 
  1828  0091                     	;# 
  1829  0092                     	;# 
  1830  0093                     	;# 
  1831  0095                     	;# 
  1832  0096                     	;# 
  1833  0097                     	;# 
  1834  0098                     	;# 
  1835  0099                     	;# 
  1836  009A                     	;# 
  1837  009B                     	;# 
  1838  009B                     	;# 
  1839  009C                     	;# 
  1840  009D                     	;# 
  1841  009E                     	;# 
  1842  009F                     	;# 
  1843  010C                     	;# 
  1844  010E                     	;# 
  1845  0111                     	;# 
  1846  0112                     	;# 
  1847  0113                     	;# 
  1848  0114                     	;# 
  1849  0115                     	;# 
  1850  0116                     	;# 
  1851  0117                     	;# 
  1852  0118                     	;# 
  1853  0119                     	;# 
  1854  011C                     	;# 
  1855  018C                     	;# 
  1856  018E                     	;# 
  1857  0191                     	;# 
  1858  0191                     	;# 
  1859  0192                     	;# 
  1860  0193                     	;# 
  1861  0193                     	;# 
  1862  0194                     	;# 
  1863  0195                     	;# 
  1864  0196                     	;# 
  1865  0197                     	;# 
  1866  0199                     	;# 
  1867  0199                     	;# 
  1868  0199                     	;# 
  1869  019A                     	;# 
  1870  019A                     	;# 
  1871  019A                     	;# 
  1872  019B                     	;# 
  1873  019B                     	;# 
  1874  019B                     	;# 
  1875  019B                     	;# 
  1876  019B                     	;# 
  1877  019C                     	;# 
  1878  019C                     	;# 
  1879  019C                     	;# 
  1880  019D                     	;# 
  1881  019D                     	;# 
  1882  019D                     	;# 
  1883  019E                     	;# 
  1884  019E                     	;# 
  1885  019E                     	;# 
  1886  019F                     	;# 
  1887  019F                     	;# 
  1888  019F                     	;# 
  1889  019F                     	;# 
  1890  019F                     	;# 
  1891  020C                     	;# 
  1892  020E                     	;# 
  1893  0211                     	;# 
  1894  0211                     	;# 
  1895  0212                     	;# 
  1896  0212                     	;# 
  1897  0213                     	;# 
  1898  0213                     	;# 
  1899  0214                     	;# 
  1900  0214                     	;# 
  1901  0215                     	;# 
  1902  0215                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0216                     	;# 
  1906  0216                     	;# 
  1907  0217                     	;# 
  1908  0217                     	;# 
  1909  028C                     	;# 
  1910  028E                     	;# 
  1911  0291                     	;# 
  1912  0291                     	;# 
  1913  0292                     	;# 
  1914  0293                     	;# 
  1915  0293                     	;# 
  1916  0298                     	;# 
  1917  0298                     	;# 
  1918  0299                     	;# 
  1919  029A                     	;# 
  1920  029A                     	;# 
  1921  029E                     	;# 
  1922  030C                     	;# 
  1923  030E                     	;# 
  1924  038C                     	;# 
  1925  038E                     	;# 
  1926  0391                     	;# 
  1927  0392                     	;# 
  1928  0393                     	;# 
  1929  0397                     	;# 
  1930  0398                     	;# 
  1931  0399                     	;# 
  1932  0415                     	;# 
  1933  0416                     	;# 
  1934  0417                     	;# 
  1935  041C                     	;# 
  1936  041D                     	;# 
  1937  041E                     	;# 
  1938  0511                     	;# 
  1939  0515                     	;# 
  1940  0617                     	;# 
  1941  0618                     	;# 
  1942  0619                     	;# 
  1943  0619                     	;# 
  1944  061A                     	;# 
  1945  061B                     	;# 
  1946  061C                     	;# 
  1947  061C                     	;# 
  1948  0691                     	;# 
  1949  0692                     	;# 
  1950  0693                     	;# 
  1951  0694                     	;# 
  1952  0695                     	;# 
  1953  0696                     	;# 
  1954  0697                     	;# 
  1955  0698                     	;# 
  1956  0699                     	;# 
  1957  069A                     	;# 
  1958  069B                     	;# 
  1959  069C                     	;# 
  1960  069D                     	;# 
  1961  069E                     	;# 
  1962  069F                     	;# 
  1963  0E0F                     	;# 
  1964  0E10                     	;# 
  1965  0E11                     	;# 
  1966  0E12                     	;# 
  1967  0E13                     	;# 
  1968  0E14                     	;# 
  1969  0E15                     	;# 
  1970  0E17                     	;# 
  1971  0E20                     	;# 
  1972  0E21                     	;# 
  1973  0E22                     	;# 
  1974  0E24                     	;# 
  1975  0E25                     	;# 
  1976  0E28                     	;# 
  1977  0E29                     	;# 
  1978  0E2A                     	;# 
  1979  0E2B                     	;# 
  1980  0E90                     	;# 
  1981  0E91                     	;# 
  1982  0E92                     	;# 
  1983  0E94                     	;# 
  1984  0E95                     	;# 
  1985  0EA0                     	;# 
  1986  0EA1                     	;# 
  1987  0EA2                     	;# 
  1988  0EA3                     	;# 
  1989  0EA4                     	;# 
  1990  0EA5                     	;# 
  1991  0F0F                     	;# 
  1992  0F10                     	;# 
  1993  0F11                     	;# 
  1994  0F12                     	;# 
  1995  0F13                     	;# 
  1996  0F14                     	;# 
  1997  0F15                     	;# 
  1998  0F16                     	;# 
  1999  0F17                     	;# 
  2000  0F18                     	;# 
  2001  0F19                     	;# 
  2002  0F1A                     	;# 
  2003  0F1B                     	;# 
  2004  0F1C                     	;# 
  2005  0F1D                     	;# 
  2006  0F1E                     	;# 
  2007  0F1F                     	;# 
  2008  0F20                     	;# 
  2009  0F21                     	;# 
  2010  0F22                     	;# 
  2011  0F23                     	;# 
  2012  0F24                     	;# 
  2013  0F25                     	;# 
  2014  0F26                     	;# 
  2015  0F27                     	;# 
  2016  0F28                     	;# 
  2017  0F29                     	;# 
  2018  0F2A                     	;# 
  2019  0F2B                     	;# 
  2020  0F2C                     	;# 
  2021  0F2D                     	;# 
  2022  0F9E                     	;# 
  2023  0FE4                     	;# 
  2024  0FE5                     	;# 
  2025  0FE6                     	;# 
  2026  0FE7                     	;# 
  2027  0FE8                     	;# 
  2028  0FE9                     	;# 
  2029  0FEA                     	;# 
  2030  0FEB                     	;# 
  2031  0FED                     	;# 
  2032  0FEE                     	;# 
  2033  0FEF                     	;# 
  2034  0000                     	;# 
  2035  0001                     	;# 
  2036  0002                     	;# 
  2037  0003                     	;# 
  2038  0004                     	;# 
  2039  0005                     	;# 
  2040  0006                     	;# 
  2041  0007                     	;# 
  2042  0008                     	;# 
  2043  0009                     	;# 
  2044  000A                     	;# 
  2045  000B                     	;# 
  2046  000C                     	;# 
  2047  000E                     	;# 
  2048  0011                     	;# 
  2049  0012                     	;# 
  2050  0013                     	;# 
  2051  0015                     	;# 
  2052  0016                     	;# 
  2053  0016                     	;# 
  2054  0017                     	;# 
  2055  0018                     	;# 
  2056  0019                     	;# 
  2057  001A                     	;# 
  2058  001B                     	;# 
  2059  001C                     	;# 
  2060  008C                     	;# 
  2061  008E                     	;# 
  2062  0091                     	;# 
  2063  0092                     	;# 
  2064  0093                     	;# 
  2065  0095                     	;# 
  2066  0096                     	;# 
  2067  0097                     	;# 
  2068  0098                     	;# 
  2069  0099                     	;# 
  2070  009A                     	;# 
  2071  009B                     	;# 
  2072  009B                     	;# 
  2073  009C                     	;# 
  2074  009D                     	;# 
  2075  009E                     	;# 
  2076  009F                     	;# 
  2077  010C                     	;# 
  2078  010E                     	;# 
  2079  0111                     	;# 
  2080  0112                     	;# 
  2081  0113                     	;# 
  2082  0114                     	;# 
  2083  0115                     	;# 
  2084  0116                     	;# 
  2085  0117                     	;# 
  2086  0118                     	;# 
  2087  0119                     	;# 
  2088  011C                     	;# 
  2089  018C                     	;# 
  2090  018E                     	;# 
  2091  0191                     	;# 
  2092  0191                     	;# 
  2093  0192                     	;# 
  2094  0193                     	;# 
  2095  0193                     	;# 
  2096  0194                     	;# 
  2097  0195                     	;# 
  2098  0196                     	;# 
  2099  0197                     	;# 
  2100  0199                     	;# 
  2101  0199                     	;# 
  2102  0199                     	;# 
  2103  019A                     	;# 
  2104  019A                     	;# 
  2105  019A                     	;# 
  2106  019B                     	;# 
  2107  019B                     	;# 
  2108  019B                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019C                     	;# 
  2112  019C                     	;# 
  2113  019C                     	;# 
  2114  019D                     	;# 
  2115  019D                     	;# 
  2116  019D                     	;# 
  2117  019E                     	;# 
  2118  019E                     	;# 
  2119  019E                     	;# 
  2120  019F                     	;# 
  2121  019F                     	;# 
  2122  019F                     	;# 
  2123  019F                     	;# 
  2124  019F                     	;# 
  2125  020C                     	;# 
  2126  020E                     	;# 
  2127  0211                     	;# 
  2128  0211                     	;# 
  2129  0212                     	;# 
  2130  0212                     	;# 
  2131  0213                     	;# 
  2132  0213                     	;# 
  2133  0214                     	;# 
  2134  0214                     	;# 
  2135  0215                     	;# 
  2136  0215                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0216                     	;# 
  2140  0216                     	;# 
  2141  0217                     	;# 
  2142  0217                     	;# 
  2143  028C                     	;# 
  2144  028E                     	;# 
  2145  0291                     	;# 
  2146  0291                     	;# 
  2147  0292                     	;# 
  2148  0293                     	;# 
  2149  0293                     	;# 
  2150  0298                     	;# 
  2151  0298                     	;# 
  2152  0299                     	;# 
  2153  029A                     	;# 
  2154  029A                     	;# 
  2155  029E                     	;# 
  2156  030C                     	;# 
  2157  030E                     	;# 
  2158  038C                     	;# 
  2159  038E                     	;# 
  2160  0391                     	;# 
  2161  0392                     	;# 
  2162  0393                     	;# 
  2163  0397                     	;# 
  2164  0398                     	;# 
  2165  0399                     	;# 
  2166  0415                     	;# 
  2167  0416                     	;# 
  2168  0417                     	;# 
  2169  041C                     	;# 
  2170  041D                     	;# 
  2171  041E                     	;# 
  2172  0511                     	;# 
  2173  0515                     	;# 
  2174  0617                     	;# 
  2175  0618                     	;# 
  2176  0619                     	;# 
  2177  0619                     	;# 
  2178  061A                     	;# 
  2179  061B                     	;# 
  2180  061C                     	;# 
  2181  061C                     	;# 
  2182  0691                     	;# 
  2183  0692                     	;# 
  2184  0693                     	;# 
  2185  0694                     	;# 
  2186  0695                     	;# 
  2187  0696                     	;# 
  2188  0697                     	;# 
  2189  0698                     	;# 
  2190  0699                     	;# 
  2191  069A                     	;# 
  2192  069B                     	;# 
  2193  069C                     	;# 
  2194  069D                     	;# 
  2195  069E                     	;# 
  2196  069F                     	;# 
  2197  0E0F                     	;# 
  2198  0E10                     	;# 
  2199  0E11                     	;# 
  2200  0E12                     	;# 
  2201  0E13                     	;# 
  2202  0E14                     	;# 
  2203  0E15                     	;# 
  2204  0E17                     	;# 
  2205  0E20                     	;# 
  2206  0E21                     	;# 
  2207  0E22                     	;# 
  2208  0E24                     	;# 
  2209  0E25                     	;# 
  2210  0E28                     	;# 
  2211  0E29                     	;# 
  2212  0E2A                     	;# 
  2213  0E2B                     	;# 
  2214  0E90                     	;# 
  2215  0E91                     	;# 
  2216  0E92                     	;# 
  2217  0E94                     	;# 
  2218  0E95                     	;# 
  2219  0EA0                     	;# 
  2220  0EA1                     	;# 
  2221  0EA2                     	;# 
  2222  0EA3                     	;# 
  2223  0EA4                     	;# 
  2224  0EA5                     	;# 
  2225  0F0F                     	;# 
  2226  0F10                     	;# 
  2227  0F11                     	;# 
  2228  0F12                     	;# 
  2229  0F13                     	;# 
  2230  0F14                     	;# 
  2231  0F15                     	;# 
  2232  0F16                     	;# 
  2233  0F17                     	;# 
  2234  0F18                     	;# 
  2235  0F19                     	;# 
  2236  0F1A                     	;# 
  2237  0F1B                     	;# 
  2238  0F1C                     	;# 
  2239  0F1D                     	;# 
  2240  0F1E                     	;# 
  2241  0F1F                     	;# 
  2242  0F20                     	;# 
  2243  0F21                     	;# 
  2244  0F22                     	;# 
  2245  0F23                     	;# 
  2246  0F24                     	;# 
  2247  0F25                     	;# 
  2248  0F26                     	;# 
  2249  0F27                     	;# 
  2250  0F28                     	;# 
  2251  0F29                     	;# 
  2252  0F2A                     	;# 
  2253  0F2B                     	;# 
  2254  0F2C                     	;# 
  2255  0F2D                     	;# 
  2256  0F9E                     	;# 
  2257  0FE4                     	;# 
  2258  0FE5                     	;# 
  2259  0FE6                     	;# 
  2260  0FE7                     	;# 
  2261  0FE8                     	;# 
  2262  0FE9                     	;# 
  2263  0FEA                     	;# 
  2264  0FEB                     	;# 
  2265  0FED                     	;# 
  2266  0FEE                     	;# 
  2267  0FEF                     	;# 
  2268  0000                     	;# 
  2269  0001                     	;# 
  2270  0002                     	;# 
  2271  0003                     	;# 
  2272  0004                     	;# 
  2273  0005                     	;# 
  2274  0006                     	;# 
  2275  0007                     	;# 
  2276  0008                     	;# 
  2277  0009                     	;# 
  2278  000A                     	;# 
  2279  000B                     	;# 
  2280  000C                     	;# 
  2281  000E                     	;# 
  2282  0011                     	;# 
  2283  0012                     	;# 
  2284  0013                     	;# 
  2285  0015                     	;# 
  2286  0016                     	;# 
  2287  0016                     	;# 
  2288  0017                     	;# 
  2289  0018                     	;# 
  2290  0019                     	;# 
  2291  001A                     	;# 
  2292  001B                     	;# 
  2293  001C                     	;# 
  2294  008C                     	;# 
  2295  008E                     	;# 
  2296  0091                     	;# 
  2297  0092                     	;# 
  2298  0093                     	;# 
  2299  0095                     	;# 
  2300  0096                     	;# 
  2301  0097                     	;# 
  2302  0098                     	;# 
  2303  0099                     	;# 
  2304  009A                     	;# 
  2305  009B                     	;# 
  2306  009B                     	;# 
  2307  009C                     	;# 
  2308  009D                     	;# 
  2309  009E                     	;# 
  2310  009F                     	;# 
  2311  010C                     	;# 
  2312  010E                     	;# 
  2313  0111                     	;# 
  2314  0112                     	;# 
  2315  0113                     	;# 
  2316  0114                     	;# 
  2317  0115                     	;# 
  2318  0116                     	;# 
  2319  0117                     	;# 
  2320  0118                     	;# 
  2321  0119                     	;# 
  2322  011C                     	;# 
  2323  018C                     	;# 
  2324  018E                     	;# 
  2325  0191                     	;# 
  2326  0191                     	;# 
  2327  0192                     	;# 
  2328  0193                     	;# 
  2329  0193                     	;# 
  2330  0194                     	;# 
  2331  0195                     	;# 
  2332  0196                     	;# 
  2333  0197                     	;# 
  2334  0199                     	;# 
  2335  0199                     	;# 
  2336  0199                     	;# 
  2337  019A                     	;# 
  2338  019A                     	;# 
  2339  019A                     	;# 
  2340  019B                     	;# 
  2341  019B                     	;# 
  2342  019B                     	;# 
  2343  019B                     	;# 
  2344  019B                     	;# 
  2345  019C                     	;# 
  2346  019C                     	;# 
  2347  019C                     	;# 
  2348  019D                     	;# 
  2349  019D                     	;# 
  2350  019D                     	;# 
  2351  019E                     	;# 
  2352  019E                     	;# 
  2353  019E                     	;# 
  2354  019F                     	;# 
  2355  019F                     	;# 
  2356  019F                     	;# 
  2357  019F                     	;# 
  2358  019F                     	;# 
  2359  020C                     	;# 
  2360  020E                     	;# 
  2361  0211                     	;# 
  2362  0211                     	;# 
  2363  0212                     	;# 
  2364  0212                     	;# 
  2365  0213                     	;# 
  2366  0213                     	;# 
  2367  0214                     	;# 
  2368  0214                     	;# 
  2369  0215                     	;# 
  2370  0215                     	;# 
  2371  0215                     	;# 
  2372  0215                     	;# 
  2373  0216                     	;# 
  2374  0216                     	;# 
  2375  0217                     	;# 
  2376  0217                     	;# 
  2377  028C                     	;# 
  2378  028E                     	;# 
  2379  0291                     	;# 
  2380  0291                     	;# 
  2381  0292                     	;# 
  2382  0293                     	;# 
  2383  0293                     	;# 
  2384  0298                     	;# 
  2385  0298                     	;# 
  2386  0299                     	;# 
  2387  029A                     	;# 
  2388  029A                     	;# 
  2389  029E                     	;# 
  2390  030C                     	;# 
  2391  030E                     	;# 
  2392  038C                     	;# 
  2393  038E                     	;# 
  2394  0391                     	;# 
  2395  0392                     	;# 
  2396  0393                     	;# 
  2397  0397                     	;# 
  2398  0398                     	;# 
  2399  0399                     	;# 
  2400  0415                     	;# 
  2401  0416                     	;# 
  2402  0417                     	;# 
  2403  041C                     	;# 
  2404  041D                     	;# 
  2405  041E                     	;# 
  2406  0511                     	;# 
  2407  0515                     	;# 
  2408  0617                     	;# 
  2409  0618                     	;# 
  2410  0619                     	;# 
  2411  0619                     	;# 
  2412  061A                     	;# 
  2413  061B                     	;# 
  2414  061C                     	;# 
  2415  061C                     	;# 
  2416  0691                     	;# 
  2417  0692                     	;# 
  2418  0693                     	;# 
  2419  0694                     	;# 
  2420  0695                     	;# 
  2421  0696                     	;# 
  2422  0697                     	;# 
  2423  0698                     	;# 
  2424  0699                     	;# 
  2425  069A                     	;# 
  2426  069B                     	;# 
  2427  069C                     	;# 
  2428  069D                     	;# 
  2429  069E                     	;# 
  2430  069F                     	;# 
  2431  0E0F                     	;# 
  2432  0E10                     	;# 
  2433  0E11                     	;# 
  2434  0E12                     	;# 
  2435  0E13                     	;# 
  2436  0E14                     	;# 
  2437  0E15                     	;# 
  2438  0E17                     	;# 
  2439  0E20                     	;# 
  2440  0E21                     	;# 
  2441  0E22                     	;# 
  2442  0E24                     	;# 
  2443  0E25                     	;# 
  2444  0E28                     	;# 
  2445  0E29                     	;# 
  2446  0E2A                     	;# 
  2447  0E2B                     	;# 
  2448  0E90                     	;# 
  2449  0E91                     	;# 
  2450  0E92                     	;# 
  2451  0E94                     	;# 
  2452  0E95                     	;# 
  2453  0EA0                     	;# 
  2454  0EA1                     	;# 
  2455  0EA2                     	;# 
  2456  0EA3                     	;# 
  2457  0EA4                     	;# 
  2458  0EA5                     	;# 
  2459  0F0F                     	;# 
  2460  0F10                     	;# 
  2461  0F11                     	;# 
  2462  0F12                     	;# 
  2463  0F13                     	;# 
  2464  0F14                     	;# 
  2465  0F15                     	;# 
  2466  0F16                     	;# 
  2467  0F17                     	;# 
  2468  0F18                     	;# 
  2469  0F19                     	;# 
  2470  0F1A                     	;# 
  2471  0F1B                     	;# 
  2472  0F1C                     	;# 
  2473  0F1D                     	;# 
  2474  0F1E                     	;# 
  2475  0F1F                     	;# 
  2476  0F20                     	;# 
  2477  0F21                     	;# 
  2478  0F22                     	;# 
  2479  0F23                     	;# 
  2480  0F24                     	;# 
  2481  0F25                     	;# 
  2482  0F26                     	;# 
  2483  0F27                     	;# 
  2484  0F28                     	;# 
  2485  0F29                     	;# 
  2486  0F2A                     	;# 
  2487  0F2B                     	;# 
  2488  0F2C                     	;# 
  2489  0F2D                     	;# 
  2490  0F9E                     	;# 
  2491  0FE4                     	;# 
  2492  0FE5                     	;# 
  2493  0FE6                     	;# 
  2494  0FE7                     	;# 
  2495  0FE8                     	;# 
  2496  0FE9                     	;# 
  2497  0FEA                     	;# 
  2498  0FEB                     	;# 
  2499  0FED                     	;# 
  2500  0FEE                     	;# 
  2501  0FEF                     	;# 
  2502  0000                     	;# 
  2503  0001                     	;# 
  2504  0002                     	;# 
  2505  0003                     	;# 
  2506  0004                     	;# 
  2507  0005                     	;# 
  2508  0006                     	;# 
  2509  0007                     	;# 
  2510  0008                     	;# 
  2511  0009                     	;# 
  2512  000A                     	;# 
  2513  000B                     	;# 
  2514  000C                     	;# 
  2515  000E                     	;# 
  2516  0011                     	;# 
  2517  0012                     	;# 
  2518  0013                     	;# 
  2519  0015                     	;# 
  2520  0016                     	;# 
  2521  0016                     	;# 
  2522  0017                     	;# 
  2523  0018                     	;# 
  2524  0019                     	;# 
  2525  001A                     	;# 
  2526  001B                     	;# 
  2527  001C                     	;# 
  2528  008C                     	;# 
  2529  008E                     	;# 
  2530  0091                     	;# 
  2531  0092                     	;# 
  2532  0093                     	;# 
  2533  0095                     	;# 
  2534  0096                     	;# 
  2535  0097                     	;# 
  2536  0098                     	;# 
  2537  0099                     	;# 
  2538  009A                     	;# 
  2539  009B                     	;# 
  2540  009B                     	;# 
  2541  009C                     	;# 
  2542  009D                     	;# 
  2543  009E                     	;# 
  2544  009F                     	;# 
  2545  010C                     	;# 
  2546  010E                     	;# 
  2547  0111                     	;# 
  2548  0112                     	;# 
  2549  0113                     	;# 
  2550  0114                     	;# 
  2551  0115                     	;# 
  2552  0116                     	;# 
  2553  0117                     	;# 
  2554  0118                     	;# 
  2555  0119                     	;# 
  2556  011C                     	;# 
  2557  018C                     	;# 
  2558  018E                     	;# 
  2559  0191                     	;# 
  2560  0191                     	;# 
  2561  0192                     	;# 
  2562  0193                     	;# 
  2563  0193                     	;# 
  2564  0194                     	;# 
  2565  0195                     	;# 
  2566  0196                     	;# 
  2567  0197                     	;# 
  2568  0199                     	;# 
  2569  0199                     	;# 
  2570  0199                     	;# 
  2571  019A                     	;# 
  2572  019A                     	;# 
  2573  019A                     	;# 
  2574  019B                     	;# 
  2575  019B                     	;# 
  2576  019B                     	;# 
  2577  019B                     	;# 
  2578  019B                     	;# 
  2579  019C                     	;# 
  2580  019C                     	;# 
  2581  019C                     	;# 
  2582  019D                     	;# 
  2583  019D                     	;# 
  2584  019D                     	;# 
  2585  019E                     	;# 
  2586  019E                     	;# 
  2587  019E                     	;# 
  2588  019F                     	;# 
  2589  019F                     	;# 
  2590  019F                     	;# 
  2591  019F                     	;# 
  2592  019F                     	;# 
  2593  020C                     	;# 
  2594  020E                     	;# 
  2595  0211                     	;# 
  2596  0211                     	;# 
  2597  0212                     	;# 
  2598  0212                     	;# 
  2599  0213                     	;# 
  2600  0213                     	;# 
  2601  0214                     	;# 
  2602  0214                     	;# 
  2603  0215                     	;# 
  2604  0215                     	;# 
  2605  0215                     	;# 
  2606  0215                     	;# 
  2607  0216                     	;# 
  2608  0216                     	;# 
  2609  0217                     	;# 
  2610  0217                     	;# 
  2611  028C                     	;# 
  2612  028E                     	;# 
  2613  0291                     	;# 
  2614  0291                     	;# 
  2615  0292                     	;# 
  2616  0293                     	;# 
  2617  0293                     	;# 
  2618  0298                     	;# 
  2619  0298                     	;# 
  2620  0299                     	;# 
  2621  029A                     	;# 
  2622  029A                     	;# 
  2623  029E                     	;# 
  2624  030C                     	;# 
  2625  030E                     	;# 
  2626  038C                     	;# 
  2627  038E                     	;# 
  2628  0391                     	;# 
  2629  0392                     	;# 
  2630  0393                     	;# 
  2631  0397                     	;# 
  2632  0398                     	;# 
  2633  0399                     	;# 
  2634  0415                     	;# 
  2635  0416                     	;# 
  2636  0417                     	;# 
  2637  041C                     	;# 
  2638  041D                     	;# 
  2639  041E                     	;# 
  2640  0511                     	;# 
  2641  0515                     	;# 
  2642  0617                     	;# 
  2643  0618                     	;# 
  2644  0619                     	;# 
  2645  0619                     	;# 
  2646  061A                     	;# 
  2647  061B                     	;# 
  2648  061C                     	;# 
  2649  061C                     	;# 
  2650  0691                     	;# 
  2651  0692                     	;# 
  2652  0693                     	;# 
  2653  0694                     	;# 
  2654  0695                     	;# 
  2655  0696                     	;# 
  2656  0697                     	;# 
  2657  0698                     	;# 
  2658  0699                     	;# 
  2659  069A                     	;# 
  2660  069B                     	;# 
  2661  069C                     	;# 
  2662  069D                     	;# 
  2663  069E                     	;# 
  2664  069F                     	;# 
  2665  0E0F                     	;# 
  2666  0E10                     	;# 
  2667  0E11                     	;# 
  2668  0E12                     	;# 
  2669  0E13                     	;# 
  2670  0E14                     	;# 
  2671  0E15                     	;# 
  2672  0E17                     	;# 
  2673  0E20                     	;# 
  2674  0E21                     	;# 
  2675  0E22                     	;# 
  2676  0E24                     	;# 
  2677  0E25                     	;# 
  2678  0E28                     	;# 
  2679  0E29                     	;# 
  2680  0E2A                     	;# 
  2681  0E2B                     	;# 
  2682  0E90                     	;# 
  2683  0E91                     	;# 
  2684  0E92                     	;# 
  2685  0E94                     	;# 
  2686  0E95                     	;# 
  2687  0EA0                     	;# 
  2688  0EA1                     	;# 
  2689  0EA2                     	;# 
  2690  0EA3                     	;# 
  2691  0EA4                     	;# 
  2692  0EA5                     	;# 
  2693  0F0F                     	;# 
  2694  0F10                     	;# 
  2695  0F11                     	;# 
  2696  0F12                     	;# 
  2697  0F13                     	;# 
  2698  0F14                     	;# 
  2699  0F15                     	;# 
  2700  0F16                     	;# 
  2701  0F17                     	;# 
  2702  0F18                     	;# 
  2703  0F19                     	;# 
  2704  0F1A                     	;# 
  2705  0F1B                     	;# 
  2706  0F1C                     	;# 
  2707  0F1D                     	;# 
  2708  0F1E                     	;# 
  2709  0F1F                     	;# 
  2710  0F20                     	;# 
  2711  0F21                     	;# 
  2712  0F22                     	;# 
  2713  0F23                     	;# 
  2714  0F24                     	;# 
  2715  0F25                     	;# 
  2716  0F26                     	;# 
  2717  0F27                     	;# 
  2718  0F28                     	;# 
  2719  0F29                     	;# 
  2720  0F2A                     	;# 
  2721  0F2B                     	;# 
  2722  0F2C                     	;# 
  2723  0F2D                     	;# 
  2724  0F9E                     	;# 
  2725  0FE4                     	;# 
  2726  0FE5                     	;# 
  2727  0FE6                     	;# 
  2728  0FE7                     	;# 
  2729  0FE8                     	;# 
  2730  0FE9                     	;# 
  2731  0FEA                     	;# 
  2732  0FEB                     	;# 
  2733  0FED                     	;# 
  2734  0FEE                     	;# 
  2735  0FEF                     	;# 
  2736  0000                     	;# 
  2737  0001                     	;# 
  2738  0002                     	;# 
  2739  0003                     	;# 
  2740  0004                     	;# 
  2741  0005                     	;# 
  2742  0006                     	;# 
  2743  0007                     	;# 
  2744  0008                     	;# 
  2745  0009                     	;# 
  2746  000A                     	;# 
  2747  000B                     	;# 
  2748  000C                     	;# 
  2749  000E                     	;# 
  2750  0011                     	;# 
  2751  0012                     	;# 
  2752  0013                     	;# 
  2753  0015                     	;# 
  2754  0016                     	;# 
  2755  0016                     	;# 
  2756  0017                     	;# 
  2757  0018                     	;# 
  2758  0019                     	;# 
  2759  001A                     	;# 
  2760  001B                     	;# 
  2761  001C                     	;# 
  2762  008C                     	;# 
  2763  008E                     	;# 
  2764  0091                     	;# 
  2765  0092                     	;# 
  2766  0093                     	;# 
  2767  0095                     	;# 
  2768  0096                     	;# 
  2769  0097                     	;# 
  2770  0098                     	;# 
  2771  0099                     	;# 
  2772  009A                     	;# 
  2773  009B                     	;# 
  2774  009B                     	;# 
  2775  009C                     	;# 
  2776  009D                     	;# 
  2777  009E                     	;# 
  2778  009F                     	;# 
  2779  010C                     	;# 
  2780  010E                     	;# 
  2781  0111                     	;# 
  2782  0112                     	;# 
  2783  0113                     	;# 
  2784  0114                     	;# 
  2785  0115                     	;# 
  2786  0116                     	;# 
  2787  0117                     	;# 
  2788  0118                     	;# 
  2789  0119                     	;# 
  2790  011C                     	;# 
  2791  018C                     	;# 
  2792  018E                     	;# 
  2793  0191                     	;# 
  2794  0191                     	;# 
  2795  0192                     	;# 
  2796  0193                     	;# 
  2797  0193                     	;# 
  2798  0194                     	;# 
  2799  0195                     	;# 
  2800  0196                     	;# 
  2801  0197                     	;# 
  2802  0199                     	;# 
  2803  0199                     	;# 
  2804  0199                     	;# 
  2805  019A                     	;# 
  2806  019A                     	;# 
  2807  019A                     	;# 
  2808  019B                     	;# 
  2809  019B                     	;# 
  2810  019B                     	;# 
  2811  019B                     	;# 
  2812  019B                     	;# 
  2813  019C                     	;# 
  2814  019C                     	;# 
  2815  019C                     	;# 
  2816  019D                     	;# 
  2817  019D                     	;# 
  2818  019D                     	;# 
  2819  019E                     	;# 
  2820  019E                     	;# 
  2821  019E                     	;# 
  2822  019F                     	;# 
  2823  019F                     	;# 
  2824  019F                     	;# 
  2825  019F                     	;# 
  2826  019F                     	;# 
  2827  020C                     	;# 
  2828  020E                     	;# 
  2829  0211                     	;# 
  2830  0211                     	;# 
  2831  0212                     	;# 
  2832  0212                     	;# 
  2833  0213                     	;# 
  2834  0213                     	;# 
  2835  0214                     	;# 
  2836  0214                     	;# 
  2837  0215                     	;# 
  2838  0215                     	;# 
  2839  0215                     	;# 
  2840  0215                     	;# 
  2841  0216                     	;# 
  2842  0216                     	;# 
  2843  0217                     	;# 
  2844  0217                     	;# 
  2845  028C                     	;# 
  2846  028E                     	;# 
  2847  0291                     	;# 
  2848  0291                     	;# 
  2849  0292                     	;# 
  2850  0293                     	;# 
  2851  0293                     	;# 
  2852  0298                     	;# 
  2853  0298                     	;# 
  2854  0299                     	;# 
  2855  029A                     	;# 
  2856  029A                     	;# 
  2857  029E                     	;# 
  2858  030C                     	;# 
  2859  030E                     	;# 
  2860  038C                     	;# 
  2861  038E                     	;# 
  2862  0391                     	;# 
  2863  0392                     	;# 
  2864  0393                     	;# 
  2865  0397                     	;# 
  2866  0398                     	;# 
  2867  0399                     	;# 
  2868  0415                     	;# 
  2869  0416                     	;# 
  2870  0417                     	;# 
  2871  041C                     	;# 
  2872  041D                     	;# 
  2873  041E                     	;# 
  2874  0511                     	;# 
  2875  0515                     	;# 
  2876  0617                     	;# 
  2877  0618                     	;# 
  2878  0619                     	;# 
  2879  0619                     	;# 
  2880  061A                     	;# 
  2881  061B                     	;# 
  2882  061C                     	;# 
  2883  061C                     	;# 
  2884  0691                     	;# 
  2885  0692                     	;# 
  2886  0693                     	;# 
  2887  0694                     	;# 
  2888  0695                     	;# 
  2889  0696                     	;# 
  2890  0697                     	;# 
  2891  0698                     	;# 
  2892  0699                     	;# 
  2893  069A                     	;# 
  2894  069B                     	;# 
  2895  069C                     	;# 
  2896  069D                     	;# 
  2897  069E                     	;# 
  2898  069F                     	;# 
  2899  0E0F                     	;# 
  2900  0E10                     	;# 
  2901  0E11                     	;# 
  2902  0E12                     	;# 
  2903  0E13                     	;# 
  2904  0E14                     	;# 
  2905  0E15                     	;# 
  2906  0E17                     	;# 
  2907  0E20                     	;# 
  2908  0E21                     	;# 
  2909  0E22                     	;# 
  2910  0E24                     	;# 
  2911  0E25                     	;# 
  2912  0E28                     	;# 
  2913  0E29                     	;# 
  2914  0E2A                     	;# 
  2915  0E2B                     	;# 
  2916  0E90                     	;# 
  2917  0E91                     	;# 
  2918  0E92                     	;# 
  2919  0E94                     	;# 
  2920  0E95                     	;# 
  2921  0EA0                     	;# 
  2922  0EA1                     	;# 
  2923  0EA2                     	;# 
  2924  0EA3                     	;# 
  2925  0EA4                     	;# 
  2926  0EA5                     	;# 
  2927  0F0F                     	;# 
  2928  0F10                     	;# 
  2929  0F11                     	;# 
  2930  0F12                     	;# 
  2931  0F13                     	;# 
  2932  0F14                     	;# 
  2933  0F15                     	;# 
  2934  0F16                     	;# 
  2935  0F17                     	;# 
  2936  0F18                     	;# 
  2937  0F19                     	;# 
  2938  0F1A                     	;# 
  2939  0F1B                     	;# 
  2940  0F1C                     	;# 
  2941  0F1D                     	;# 
  2942  0F1E                     	;# 
  2943  0F1F                     	;# 
  2944  0F20                     	;# 
  2945  0F21                     	;# 
  2946  0F22                     	;# 
  2947  0F23                     	;# 
  2948  0F24                     	;# 
  2949  0F25                     	;# 
  2950  0F26                     	;# 
  2951  0F27                     	;# 
  2952  0F28                     	;# 
  2953  0F29                     	;# 
  2954  0F2A                     	;# 
  2955  0F2B                     	;# 
  2956  0F2C                     	;# 
  2957  0F2D                     	;# 
  2958  0F9E                     	;# 
  2959  0FE4                     	;# 
  2960  0FE5                     	;# 
  2961  0FE6                     	;# 
  2962  0FE7                     	;# 
  2963  0FE8                     	;# 
  2964  0FE9                     	;# 
  2965  0FEA                     	;# 
  2966  0FEB                     	;# 
  2967  0FED                     	;# 
  2968  0FEE                     	;# 
  2969  0FEF                     	;# 
  2970  0000                     	;# 
  2971  0001                     	;# 
  2972  0002                     	;# 
  2973  0003                     	;# 
  2974  0004                     	;# 
  2975  0005                     	;# 
  2976  0006                     	;# 
  2977  0007                     	;# 
  2978  0008                     	;# 
  2979  0009                     	;# 
  2980  000A                     	;# 
  2981  000B                     	;# 
  2982  000C                     	;# 
  2983  000E                     	;# 
  2984  0011                     	;# 
  2985  0012                     	;# 
  2986  0013                     	;# 
  2987  0015                     	;# 
  2988  0016                     	;# 
  2989  0016                     	;# 
  2990  0017                     	;# 
  2991  0018                     	;# 
  2992  0019                     	;# 
  2993  001A                     	;# 
  2994  001B                     	;# 
  2995  001C                     	;# 
  2996  008C                     	;# 
  2997  008E                     	;# 
  2998  0091                     	;# 
  2999  0092                     	;# 
  3000  0093                     	;# 
  3001  0095                     	;# 
  3002  0096                     	;# 
  3003  0097                     	;# 
  3004  0098                     	;# 
  3005  0099                     	;# 
  3006  009A                     	;# 
  3007  009B                     	;# 
  3008  009B                     	;# 
  3009  009C                     	;# 
  3010  009D                     	;# 
  3011  009E                     	;# 
  3012  009F                     	;# 
  3013  010C                     	;# 
  3014  010E                     	;# 
  3015  0111                     	;# 
  3016  0112                     	;# 
  3017  0113                     	;# 
  3018  0114                     	;# 
  3019  0115                     	;# 
  3020  0116                     	;# 
  3021  0117                     	;# 
  3022  0118                     	;# 
  3023  0119                     	;# 
  3024  011C                     	;# 
  3025  018C                     	;# 
  3026  018E                     	;# 
  3027  0191                     	;# 
  3028  0191                     	;# 
  3029  0192                     	;# 
  3030  0193                     	;# 
  3031  0193                     	;# 
  3032  0194                     	;# 
  3033  0195                     	;# 
  3034  0196                     	;# 
  3035  0197                     	;# 
  3036  0199                     	;# 
  3037  0199                     	;# 
  3038  0199                     	;# 
  3039  019A                     	;# 
  3040  019A                     	;# 
  3041  019A                     	;# 
  3042  019B                     	;# 
  3043  019B                     	;# 
  3044  019B                     	;# 
  3045  019B                     	;# 
  3046  019B                     	;# 
  3047  019C                     	;# 
  3048  019C                     	;# 
  3049  019C                     	;# 
  3050  019D                     	;# 
  3051  019D                     	;# 
  3052  019D                     	;# 
  3053  019E                     	;# 
  3054  019E                     	;# 
  3055  019E                     	;# 
  3056  019F                     	;# 
  3057  019F                     	;# 
  3058  019F                     	;# 
  3059  019F                     	;# 
  3060  019F                     	;# 
  3061  020C                     	;# 
  3062  020E                     	;# 
  3063  0211                     	;# 
  3064  0211                     	;# 
  3065  0212                     	;# 
  3066  0212                     	;# 
  3067  0213                     	;# 
  3068  0213                     	;# 
  3069  0214                     	;# 
  3070  0214                     	;# 
  3071  0215                     	;# 
  3072  0215                     	;# 
  3073  0215                     	;# 
  3074  0215                     	;# 
  3075  0216                     	;# 
  3076  0216                     	;# 
  3077  0217                     	;# 
  3078  0217                     	;# 
  3079  028C                     	;# 
  3080  028E                     	;# 
  3081  0291                     	;# 
  3082  0291                     	;# 
  3083  0292                     	;# 
  3084  0293                     	;# 
  3085  0293                     	;# 
  3086  0298                     	;# 
  3087  0298                     	;# 
  3088  0299                     	;# 
  3089  029A                     	;# 
  3090  029A                     	;# 
  3091  029E                     	;# 
  3092  030C                     	;# 
  3093  030E                     	;# 
  3094  038C                     	;# 
  3095  038E                     	;# 
  3096  0391                     	;# 
  3097  0392                     	;# 
  3098  0393                     	;# 
  3099  0397                     	;# 
  3100  0398                     	;# 
  3101  0399                     	;# 
  3102  0415                     	;# 
  3103  0416                     	;# 
  3104  0417                     	;# 
  3105  041C                     	;# 
  3106  041D                     	;# 
  3107  041E                     	;# 
  3108  0511                     	;# 
  3109  0515                     	;# 
  3110  0617                     	;# 
  3111  0618                     	;# 
  3112  0619                     	;# 
  3113  0619                     	;# 
  3114  061A                     	;# 
  3115  061B                     	;# 
  3116  061C                     	;# 
  3117  061C                     	;# 
  3118  0691                     	;# 
  3119  0692                     	;# 
  3120  0693                     	;# 
  3121  0694                     	;# 
  3122  0695                     	;# 
  3123  0696                     	;# 
  3124  0697                     	;# 
  3125  0698                     	;# 
  3126  0699                     	;# 
  3127  069A                     	;# 
  3128  069B                     	;# 
  3129  069C                     	;# 
  3130  069D                     	;# 
  3131  069E                     	;# 
  3132  069F                     	;# 
  3133  0E0F                     	;# 
  3134  0E10                     	;# 
  3135  0E11                     	;# 
  3136  0E12                     	;# 
  3137  0E13                     	;# 
  3138  0E14                     	;# 
  3139  0E15                     	;# 
  3140  0E17                     	;# 
  3141  0E20                     	;# 
  3142  0E21                     	;# 
  3143  0E22                     	;# 
  3144  0E24                     	;# 
  3145  0E25                     	;# 
  3146  0E28                     	;# 
  3147  0E29                     	;# 
  3148  0E2A                     	;# 
  3149  0E2B                     	;# 
  3150  0E90                     	;# 
  3151  0E91                     	;# 
  3152  0E92                     	;# 
  3153  0E94                     	;# 
  3154  0E95                     	;# 
  3155  0EA0                     	;# 
  3156  0EA1                     	;# 
  3157  0EA2                     	;# 
  3158  0EA3                     	;# 
  3159  0EA4                     	;# 
  3160  0EA5                     	;# 
  3161  0F0F                     	;# 
  3162  0F10                     	;# 
  3163  0F11                     	;# 
  3164  0F12                     	;# 
  3165  0F13                     	;# 
  3166  0F14                     	;# 
  3167  0F15                     	;# 
  3168  0F16                     	;# 
  3169  0F17                     	;# 
  3170  0F18                     	;# 
  3171  0F19                     	;# 
  3172  0F1A                     	;# 
  3173  0F1B                     	;# 
  3174  0F1C                     	;# 
  3175  0F1D                     	;# 
  3176  0F1E                     	;# 
  3177  0F1F                     	;# 
  3178  0F20                     	;# 
  3179  0F21                     	;# 
  3180  0F22                     	;# 
  3181  0F23                     	;# 
  3182  0F24                     	;# 
  3183  0F25                     	;# 
  3184  0F26                     	;# 
  3185  0F27                     	;# 
  3186  0F28                     	;# 
  3187  0F29                     	;# 
  3188  0F2A                     	;# 
  3189  0F2B                     	;# 
  3190  0F2C                     	;# 
  3191  0F2D                     	;# 
  3192  0F9E                     	;# 
  3193  0FE4                     	;# 
  3194  0FE5                     	;# 
  3195  0FE6                     	;# 
  3196  0FE7                     	;# 
  3197  0FE8                     	;# 
  3198  0FE9                     	;# 
  3199  0FEA                     	;# 
  3200  0FEB                     	;# 
  3201  0FED                     	;# 
  3202  0FEE                     	;# 
  3203  0FEF                     	;# 
  3204  0000                     	;# 
  3205  0001                     	;# 
  3206  0002                     	;# 
  3207  0003                     	;# 
  3208  0004                     	;# 
  3209  0005                     	;# 
  3210  0006                     	;# 
  3211  0007                     	;# 
  3212  0008                     	;# 
  3213  0009                     	;# 
  3214  000A                     	;# 
  3215  000B                     	;# 
  3216  000C                     	;# 
  3217  000E                     	;# 
  3218  0011                     	;# 
  3219  0012                     	;# 
  3220  0013                     	;# 
  3221  0015                     	;# 
  3222  0016                     	;# 
  3223  0016                     	;# 
  3224  0017                     	;# 
  3225  0018                     	;# 
  3226  0019                     	;# 
  3227  001A                     	;# 
  3228  001B                     	;# 
  3229  001C                     	;# 
  3230  008C                     	;# 
  3231  008E                     	;# 
  3232  0091                     	;# 
  3233  0092                     	;# 
  3234  0093                     	;# 
  3235  0095                     	;# 
  3236  0096                     	;# 
  3237  0097                     	;# 
  3238  0098                     	;# 
  3239  0099                     	;# 
  3240  009A                     	;# 
  3241  009B                     	;# 
  3242  009B                     	;# 
  3243  009C                     	;# 
  3244  009D                     	;# 
  3245  009E                     	;# 
  3246  009F                     	;# 
  3247  010C                     	;# 
  3248  010E                     	;# 
  3249  0111                     	;# 
  3250  0112                     	;# 
  3251  0113                     	;# 
  3252  0114                     	;# 
  3253  0115                     	;# 
  3254  0116                     	;# 
  3255  0117                     	;# 
  3256  0118                     	;# 
  3257  0119                     	;# 
  3258  011C                     	;# 
  3259  018C                     	;# 
  3260  018E                     	;# 
  3261  0191                     	;# 
  3262  0191                     	;# 
  3263  0192                     	;# 
  3264  0193                     	;# 
  3265  0193                     	;# 
  3266  0194                     	;# 
  3267  0195                     	;# 
  3268  0196                     	;# 
  3269  0197                     	;# 
  3270  0199                     	;# 
  3271  0199                     	;# 
  3272  0199                     	;# 
  3273  019A                     	;# 
  3274  019A                     	;# 
  3275  019A                     	;# 
  3276  019B                     	;# 
  3277  019B                     	;# 
  3278  019B                     	;# 
  3279  019B                     	;# 
  3280  019B                     	;# 
  3281  019C                     	;# 
  3282  019C                     	;# 
  3283  019C                     	;# 
  3284  019D                     	;# 
  3285  019D                     	;# 
  3286  019D                     	;# 
  3287  019E                     	;# 
  3288  019E                     	;# 
  3289  019E                     	;# 
  3290  019F                     	;# 
  3291  019F                     	;# 
  3292  019F                     	;# 
  3293  019F                     	;# 
  3294  019F                     	;# 
  3295  020C                     	;# 
  3296  020E                     	;# 
  3297  0211                     	;# 
  3298  0211                     	;# 
  3299  0212                     	;# 
  3300  0212                     	;# 
  3301  0213                     	;# 
  3302  0213                     	;# 
  3303  0214                     	;# 
  3304  0214                     	;# 
  3305  0215                     	;# 
  3306  0215                     	;# 
  3307  0215                     	;# 
  3308  0215                     	;# 
  3309  0216                     	;# 
  3310  0216                     	;# 
  3311  0217                     	;# 
  3312  0217                     	;# 
  3313  028C                     	;# 
  3314  028E                     	;# 
  3315  0291                     	;# 
  3316  0291                     	;# 
  3317  0292                     	;# 
  3318  0293                     	;# 
  3319  0293                     	;# 
  3320  0298                     	;# 
  3321  0298                     	;# 
  3322  0299                     	;# 
  3323  029A                     	;# 
  3324  029A                     	;# 
  3325  029E                     	;# 
  3326  030C                     	;# 
  3327  030E                     	;# 
  3328  038C                     	;# 
  3329  038E                     	;# 
  3330  0391                     	;# 
  3331  0392                     	;# 
  3332  0393                     	;# 
  3333  0397                     	;# 
  3334  0398                     	;# 
  3335  0399                     	;# 
  3336  0415                     	;# 
  3337  0416                     	;# 
  3338  0417                     	;# 
  3339  041C                     	;# 
  3340  041D                     	;# 
  3341  041E                     	;# 
  3342  0511                     	;# 
  3343  0515                     	;# 
  3344  0617                     	;# 
  3345  0618                     	;# 
  3346  0619                     	;# 
  3347  0619                     	;# 
  3348  061A                     	;# 
  3349  061B                     	;# 
  3350  061C                     	;# 
  3351  061C                     	;# 
  3352  0691                     	;# 
  3353  0692                     	;# 
  3354  0693                     	;# 
  3355  0694                     	;# 
  3356  0695                     	;# 
  3357  0696                     	;# 
  3358  0697                     	;# 
  3359  0698                     	;# 
  3360  0699                     	;# 
  3361  069A                     	;# 
  3362  069B                     	;# 
  3363  069C                     	;# 
  3364  069D                     	;# 
  3365  069E                     	;# 
  3366  069F                     	;# 
  3367  0E0F                     	;# 
  3368  0E10                     	;# 
  3369  0E11                     	;# 
  3370  0E12                     	;# 
  3371  0E13                     	;# 
  3372  0E14                     	;# 
  3373  0E15                     	;# 
  3374  0E17                     	;# 
  3375  0E20                     	;# 
  3376  0E21                     	;# 
  3377  0E22                     	;# 
  3378  0E24                     	;# 
  3379  0E25                     	;# 
  3380  0E28                     	;# 
  3381  0E29                     	;# 
  3382  0E2A                     	;# 
  3383  0E2B                     	;# 
  3384  0E90                     	;# 
  3385  0E91                     	;# 
  3386  0E92                     	;# 
  3387  0E94                     	;# 
  3388  0E95                     	;# 
  3389  0EA0                     	;# 
  3390  0EA1                     	;# 
  3391  0EA2                     	;# 
  3392  0EA3                     	;# 
  3393  0EA4                     	;# 
  3394  0EA5                     	;# 
  3395  0F0F                     	;# 
  3396  0F10                     	;# 
  3397  0F11                     	;# 
  3398  0F12                     	;# 
  3399  0F13                     	;# 
  3400  0F14                     	;# 
  3401  0F15                     	;# 
  3402  0F16                     	;# 
  3403  0F17                     	;# 
  3404  0F18                     	;# 
  3405  0F19                     	;# 
  3406  0F1A                     	;# 
  3407  0F1B                     	;# 
  3408  0F1C                     	;# 
  3409  0F1D                     	;# 
  3410  0F1E                     	;# 
  3411  0F1F                     	;# 
  3412  0F20                     	;# 
  3413  0F21                     	;# 
  3414  0F22                     	;# 
  3415  0F23                     	;# 
  3416  0F24                     	;# 
  3417  0F25                     	;# 
  3418  0F26                     	;# 
  3419  0F27                     	;# 
  3420  0F28                     	;# 
  3421  0F29                     	;# 
  3422  0F2A                     	;# 
  3423  0F2B                     	;# 
  3424  0F2C                     	;# 
  3425  0F2D                     	;# 
  3426  0F9E                     	;# 
  3427  0FE4                     	;# 
  3428  0FE5                     	;# 
  3429  0FE6                     	;# 
  3430  0FE7                     	;# 
  3431  0FE8                     	;# 
  3432  0FE9                     	;# 
  3433  0FEA                     	;# 
  3434  0FEB                     	;# 
  3435  0FED                     	;# 
  3436  0FEE                     	;# 
  3437  0FEF                     	;# 
  3438  0000                     	;# 
  3439  0001                     	;# 
  3440  0002                     	;# 
  3441  0003                     	;# 
  3442  0004                     	;# 
  3443  0005                     	;# 
  3444  0006                     	;# 
  3445  0007                     	;# 
  3446  0008                     	;# 
  3447  0009                     	;# 
  3448  000A                     	;# 
  3449  000B                     	;# 
  3450  000C                     	;# 
  3451  000E                     	;# 
  3452  0011                     	;# 
  3453  0012                     	;# 
  3454  0013                     	;# 
  3455  0015                     	;# 
  3456  0016                     	;# 
  3457  0016                     	;# 
  3458  0017                     	;# 
  3459  0018                     	;# 
  3460  0019                     	;# 
  3461  001A                     	;# 
  3462  001B                     	;# 
  3463  001C                     	;# 
  3464  008C                     	;# 
  3465  008E                     	;# 
  3466  0091                     	;# 
  3467  0092                     	;# 
  3468  0093                     	;# 
  3469  0095                     	;# 
  3470  0096                     	;# 
  3471  0097                     	;# 
  3472  0098                     	;# 
  3473  0099                     	;# 
  3474  009A                     	;# 
  3475  009B                     	;# 
  3476  009B                     	;# 
  3477  009C                     	;# 
  3478  009D                     	;# 
  3479  009E                     	;# 
  3480  009F                     	;# 
  3481  010C                     	;# 
  3482  010E                     	;# 
  3483  0111                     	;# 
  3484  0112                     	;# 
  3485  0113                     	;# 
  3486  0114                     	;# 
  3487  0115                     	;# 
  3488  0116                     	;# 
  3489  0117                     	;# 
  3490  0118                     	;# 
  3491  0119                     	;# 
  3492  011C                     	;# 
  3493  018C                     	;# 
  3494  018E                     	;# 
  3495  0191                     	;# 
  3496  0191                     	;# 
  3497  0192                     	;# 
  3498  0193                     	;# 
  3499  0193                     	;# 
  3500  0194                     	;# 
  3501  0195                     	;# 
  3502  0196                     	;# 
  3503  0197                     	;# 
  3504  0199                     	;# 
  3505  0199                     	;# 
  3506  0199                     	;# 
  3507  019A                     	;# 
  3508  019A                     	;# 
  3509  019A                     	;# 
  3510  019B                     	;# 
  3511  019B                     	;# 
  3512  019B                     	;# 
  3513  019B                     	;# 
  3514  019B                     	;# 
  3515  019C                     	;# 
  3516  019C                     	;# 
  3517  019C                     	;# 
  3518  019D                     	;# 
  3519  019D                     	;# 
  3520  019D                     	;# 
  3521  019E                     	;# 
  3522  019E                     	;# 
  3523  019E                     	;# 
  3524  019F                     	;# 
  3525  019F                     	;# 
  3526  019F                     	;# 
  3527  019F                     	;# 
  3528  019F                     	;# 
  3529  020C                     	;# 
  3530  020E                     	;# 
  3531  0211                     	;# 
  3532  0211                     	;# 
  3533  0212                     	;# 
  3534  0212                     	;# 
  3535  0213                     	;# 
  3536  0213                     	;# 
  3537  0214                     	;# 
  3538  0214                     	;# 
  3539  0215                     	;# 
  3540  0215                     	;# 
  3541  0215                     	;# 
  3542  0215                     	;# 
  3543  0216                     	;# 
  3544  0216                     	;# 
  3545  0217                     	;# 
  3546  0217                     	;# 
  3547  028C                     	;# 
  3548  028E                     	;# 
  3549  0291                     	;# 
  3550  0291                     	;# 
  3551  0292                     	;# 
  3552  0293                     	;# 
  3553  0293                     	;# 
  3554  0298                     	;# 
  3555  0298                     	;# 
  3556  0299                     	;# 
  3557  029A                     	;# 
  3558  029A                     	;# 
  3559  029E                     	;# 
  3560  030C                     	;# 
  3561  030E                     	;# 
  3562  038C                     	;# 
  3563  038E                     	;# 
  3564  0391                     	;# 
  3565  0392                     	;# 
  3566  0393                     	;# 
  3567  0397                     	;# 
  3568  0398                     	;# 
  3569  0399                     	;# 
  3570  0415                     	;# 
  3571  0416                     	;# 
  3572  0417                     	;# 
  3573  041C                     	;# 
  3574  041D                     	;# 
  3575  041E                     	;# 
  3576  0511                     	;# 
  3577  0515                     	;# 
  3578  0617                     	;# 
  3579  0618                     	;# 
  3580  0619                     	;# 
  3581  0619                     	;# 
  3582  061A                     	;# 
  3583  061B                     	;# 
  3584  061C                     	;# 
  3585  061C                     	;# 
  3586  0691                     	;# 
  3587  0692                     	;# 
  3588  0693                     	;# 
  3589  0694                     	;# 
  3590  0695                     	;# 
  3591  0696                     	;# 
  3592  0697                     	;# 
  3593  0698                     	;# 
  3594  0699                     	;# 
  3595  069A                     	;# 
  3596  069B                     	;# 
  3597  069C                     	;# 
  3598  069D                     	;# 
  3599  069E                     	;# 
  3600  069F                     	;# 
  3601  0E0F                     	;# 
  3602  0E10                     	;# 
  3603  0E11                     	;# 
  3604  0E12                     	;# 
  3605  0E13                     	;# 
  3606  0E14                     	;# 
  3607  0E15                     	;# 
  3608  0E17                     	;# 
  3609  0E20                     	;# 
  3610  0E21                     	;# 
  3611  0E22                     	;# 
  3612  0E24                     	;# 
  3613  0E25                     	;# 
  3614  0E28                     	;# 
  3615  0E29                     	;# 
  3616  0E2A                     	;# 
  3617  0E2B                     	;# 
  3618  0E90                     	;# 
  3619  0E91                     	;# 
  3620  0E92                     	;# 
  3621  0E94                     	;# 
  3622  0E95                     	;# 
  3623  0EA0                     	;# 
  3624  0EA1                     	;# 
  3625  0EA2                     	;# 
  3626  0EA3                     	;# 
  3627  0EA4                     	;# 
  3628  0EA5                     	;# 
  3629  0F0F                     	;# 
  3630  0F10                     	;# 
  3631  0F11                     	;# 
  3632  0F12                     	;# 
  3633  0F13                     	;# 
  3634  0F14                     	;# 
  3635  0F15                     	;# 
  3636  0F16                     	;# 
  3637  0F17                     	;# 
  3638  0F18                     	;# 
  3639  0F19                     	;# 
  3640  0F1A                     	;# 
  3641  0F1B                     	;# 
  3642  0F1C                     	;# 
  3643  0F1D                     	;# 
  3644  0F1E                     	;# 
  3645  0F1F                     	;# 
  3646  0F20                     	;# 
  3647  0F21                     	;# 
  3648  0F22                     	;# 
  3649  0F23                     	;# 
  3650  0F24                     	;# 
  3651  0F25                     	;# 
  3652  0F26                     	;# 
  3653  0F27                     	;# 
  3654  0F28                     	;# 
  3655  0F29                     	;# 
  3656  0F2A                     	;# 
  3657  0F2B                     	;# 
  3658  0F2C                     	;# 
  3659  0F2D                     	;# 
  3660  0F9E                     	;# 
  3661  0FE4                     	;# 
  3662  0FE5                     	;# 
  3663  0FE6                     	;# 
  3664  0FE7                     	;# 
  3665  0FE8                     	;# 
  3666  0FE9                     	;# 
  3667  0FEA                     	;# 
  3668  0FEB                     	;# 
  3669  0FED                     	;# 
  3670  0FEE                     	;# 
  3671  0FEF                     	;# 
  3672                           
  3673                           	psect	idataBANK0
  3674  0002                     __pidataBANK0:	
  3675                           
  3676                           ;initializer for _lock_isr
  3677  0002  3401               	retlw	1
  3678                           
  3679                           ;initializer for _init_required
  3680  0003  3401               	retlw	1
  3681                           
  3682                           	psect	idataBANK1
  3683  135B                     __pidataBANK1:	
  3684                           
  3685                           ;initializer for _duty_count_up_max
  3686  135B  3405               	retlw	5
  3687  135C  3400               	retlw	0
  3688                           
  3689                           ;initializer for uart_task@none
  3690  135D  3402               	retlw	2
  3691                           
  3692                           	psect	idataBANK2
  3693  136A                     __pidataBANK2:	
  3694                           
  3695                           ;initializer for _duty_count_down_max
  3696  136A  340A               	retlw	10
  3697  136B  3400               	retlw	0
  3698                           
  3699                           ;initializer for _duty_pwm_dec
  3700  136C  3404               	retlw	4
  3701  136D  3400               	retlw	0
  3702                           
  3703                           	psect	stringtext1
  3704  007F                     __pstringtext1:	
  3705  007F                     _v_table:	
  3706  007F  3400               	retlw	0
  3707  0080  3400               	retlw	0
  3708  0081  3401               	retlw	1
  3709  0082  3400               	retlw	0
  3710  0083  3402               	retlw	2
  3711  0084  3400               	retlw	0
  3712  0085  3402               	retlw	2
  3713  0086  3400               	retlw	0
  3714  0087  3403               	retlw	3
  3715  0088  3400               	retlw	0
  3716  0089  3404               	retlw	4
  3717  008A  3400               	retlw	0
  3718  008B  3405               	retlw	5
  3719  008C  3400               	retlw	0
  3720  008D  3406               	retlw	6
  3721  008E  3400               	retlw	0
  3722  008F  3407               	retlw	7
  3723  0090  3400               	retlw	0
  3724  0091  3407               	retlw	7
  3725  0092  3400               	retlw	0
  3726  0093  3408               	retlw	8
  3727  0094  3400               	retlw	0
  3728  0095  3409               	retlw	9
  3729  0096  3400               	retlw	0
  3730  0097  340A               	retlw	10
  3731  0098  3400               	retlw	0
  3732  0099  340B               	retlw	11
  3733  009A  3400               	retlw	0
  3734  009B  340B               	retlw	11
  3735  009C  3400               	retlw	0
  3736  009D  340C               	retlw	12
  3737  009E  3400               	retlw	0
  3738  009F  340D               	retlw	13
  3739  00A0  3400               	retlw	0
  3740  00A1  340E               	retlw	14
  3741  00A2  3400               	retlw	0
  3742  00A3  340F               	retlw	15
  3743  00A4  3400               	retlw	0
  3744  00A5  3410               	retlw	16
  3745  00A6  3400               	retlw	0
  3746  00A7  3410               	retlw	16
  3747  00A8  3400               	retlw	0
  3748  00A9  3411               	retlw	17
  3749  00AA  3400               	retlw	0
  3750  00AB  3412               	retlw	18
  3751  00AC  3400               	retlw	0
  3752  00AD  3413               	retlw	19
  3753  00AE  3400               	retlw	0
  3754  00AF  3414               	retlw	20
  3755  00B0  3400               	retlw	0
  3756  00B1  3415               	retlw	21
  3757  00B2  3400               	retlw	0
  3758  00B3  3415               	retlw	21
  3759  00B4  3400               	retlw	0
  3760  00B5  3416               	retlw	22
  3761  00B6  3400               	retlw	0
  3762  00B7  3417               	retlw	23
  3763  00B8  3400               	retlw	0
  3764  00B9  3418               	retlw	24
  3765  00BA  3400               	retlw	0
  3766  00BB  3419               	retlw	25
  3767  00BC  3400               	retlw	0
  3768  00BD  3419               	retlw	25
  3769  00BE  3400               	retlw	0
  3770  00BF  341A               	retlw	26
  3771  00C0  3400               	retlw	0
  3772  00C1  341B               	retlw	27
  3773  00C2  3400               	retlw	0
  3774  00C3  341C               	retlw	28
  3775  00C4  3400               	retlw	0
  3776  00C5  341D               	retlw	29
  3777  00C6  3400               	retlw	0
  3778  00C7  341E               	retlw	30
  3779  00C8  3400               	retlw	0
  3780  00C9  341E               	retlw	30
  3781  00CA  3400               	retlw	0
  3782  00CB  341F               	retlw	31
  3783  00CC  3400               	retlw	0
  3784  00CD  3420               	retlw	32
  3785  00CE  3400               	retlw	0
  3786  00CF  3421               	retlw	33
  3787  00D0  3400               	retlw	0
  3788  00D1  3422               	retlw	34
  3789  00D2  3400               	retlw	0
  3790  00D3  3422               	retlw	34
  3791  00D4  3400               	retlw	0
  3792  00D5  3423               	retlw	35
  3793  00D6  3400               	retlw	0
  3794  00D7  3424               	retlw	36
  3795  00D8  3400               	retlw	0
  3796  00D9  3425               	retlw	37
  3797  00DA  3400               	retlw	0
  3798  00DB  3426               	retlw	38
  3799  00DC  3400               	retlw	0
  3800  00DD  3427               	retlw	39
  3801  00DE  3400               	retlw	0
  3802  00DF  3427               	retlw	39
  3803  00E0  3400               	retlw	0
  3804  00E1  3428               	retlw	40
  3805  00E2  3400               	retlw	0
  3806  00E3  3429               	retlw	41
  3807  00E4  3400               	retlw	0
  3808  00E5  342A               	retlw	42
  3809  00E6  3400               	retlw	0
  3810  00E7  342B               	retlw	43
  3811  00E8  3400               	retlw	0
  3812  00E9  342C               	retlw	44
  3813  00EA  3400               	retlw	0
  3814  00EB  342C               	retlw	44
  3815  00EC  3400               	retlw	0
  3816  00ED  342D               	retlw	45
  3817  00EE  3400               	retlw	0
  3818  00EF  342E               	retlw	46
  3819  00F0  3400               	retlw	0
  3820  00F1  342F               	retlw	47
  3821  00F2  3400               	retlw	0
  3822  00F3  3430               	retlw	48
  3823  00F4  3400               	retlw	0
  3824  00F5  3430               	retlw	48
  3825  00F6  3400               	retlw	0
  3826  00F7  3431               	retlw	49
  3827  00F8  3400               	retlw	0
  3828  00F9  3432               	retlw	50
  3829  00FA  3400               	retlw	0
  3830  00FB  3433               	retlw	51
  3831  00FC  3400               	retlw	0
  3832  00FD  3434               	retlw	52
  3833  00FE  3400               	retlw	0
  3834  00FF  3435               	retlw	53
  3835  0100  3400               	retlw	0
  3836  0101  3435               	retlw	53
  3837  0102  3400               	retlw	0
  3838  0103  3436               	retlw	54
  3839  0104  3400               	retlw	0
  3840  0105  3437               	retlw	55
  3841  0106  3400               	retlw	0
  3842  0107  3438               	retlw	56
  3843  0108  3400               	retlw	0
  3844  0109  3439               	retlw	57
  3845  010A  3400               	retlw	0
  3846  010B  3439               	retlw	57
  3847  010C  3400               	retlw	0
  3848  010D  343A               	retlw	58
  3849  010E  3400               	retlw	0
  3850  010F  343B               	retlw	59
  3851  0110  3400               	retlw	0
  3852  0111  343C               	retlw	60
  3853  0112  3400               	retlw	0
  3854  0113  343D               	retlw	61
  3855  0114  3400               	retlw	0
  3856  0115  343E               	retlw	62
  3857  0116  3400               	retlw	0
  3858  0117  343E               	retlw	62
  3859  0118  3400               	retlw	0
  3860  0119  343F               	retlw	63
  3861  011A  3400               	retlw	0
  3862  011B  3440               	retlw	64
  3863  011C  3400               	retlw	0
  3864  011D  3441               	retlw	65
  3865  011E  3400               	retlw	0
  3866  011F  3442               	retlw	66
  3867  0120  3400               	retlw	0
  3868  0121  3443               	retlw	67
  3869  0122  3400               	retlw	0
  3870  0123  3443               	retlw	67
  3871  0124  3400               	retlw	0
  3872  0125  3444               	retlw	68
  3873  0126  3400               	retlw	0
  3874  0127  3445               	retlw	69
  3875  0128  3400               	retlw	0
  3876  0129  3446               	retlw	70
  3877  012A  3400               	retlw	0
  3878  012B  3447               	retlw	71
  3879  012C  3400               	retlw	0
  3880  012D  3447               	retlw	71
  3881  012E  3400               	retlw	0
  3882  012F  3448               	retlw	72
  3883  0130  3400               	retlw	0
  3884  0131  3449               	retlw	73
  3885  0132  3400               	retlw	0
  3886  0133  344A               	retlw	74
  3887  0134  3400               	retlw	0
  3888  0135  344B               	retlw	75
  3889  0136  3400               	retlw	0
  3890  0137  344C               	retlw	76
  3891  0138  3400               	retlw	0
  3892  0139  344C               	retlw	76
  3893  013A  3400               	retlw	0
  3894  013B  344D               	retlw	77
  3895  013C  3400               	retlw	0
  3896  013D  344E               	retlw	78
  3897  013E  3400               	retlw	0
  3898  013F  344F               	retlw	79
  3899  0140  3400               	retlw	0
  3900  0141  3450               	retlw	80
  3901  0142  3400               	retlw	0
  3902  0143  3450               	retlw	80
  3903  0144  3400               	retlw	0
  3904  0145  3451               	retlw	81
  3905  0146  3400               	retlw	0
  3906  0147  3452               	retlw	82
  3907  0148  3400               	retlw	0
  3908  0149  3453               	retlw	83
  3909  014A  3400               	retlw	0
  3910  014B  3454               	retlw	84
  3911  014C  3400               	retlw	0
  3912  014D  3455               	retlw	85
  3913  014E  3400               	retlw	0
  3914  014F  3455               	retlw	85
  3915  0150  3400               	retlw	0
  3916  0151  3456               	retlw	86
  3917  0152  3400               	retlw	0
  3918  0153  3457               	retlw	87
  3919  0154  3400               	retlw	0
  3920  0155  3458               	retlw	88
  3921  0156  3400               	retlw	0
  3922  0157  3459               	retlw	89
  3923  0158  3400               	retlw	0
  3924  0159  3459               	retlw	89
  3925  015A  3400               	retlw	0
  3926  015B  345A               	retlw	90
  3927  015C  3400               	retlw	0
  3928  015D  345B               	retlw	91
  3929  015E  3400               	retlw	0
  3930  015F  345C               	retlw	92
  3931  0160  3400               	retlw	0
  3932  0161  345D               	retlw	93
  3933  0162  3400               	retlw	0
  3934  0163  345E               	retlw	94
  3935  0164  3400               	retlw	0
  3936  0165  345E               	retlw	94
  3937  0166  3400               	retlw	0
  3938  0167  345F               	retlw	95
  3939  0168  3400               	retlw	0
  3940  0169  3460               	retlw	96
  3941  016A  3400               	retlw	0
  3942  016B  3461               	retlw	97
  3943  016C  3400               	retlw	0
  3944  016D  3462               	retlw	98
  3945  016E  3400               	retlw	0
  3946  016F  3463               	retlw	99
  3947  0170  3400               	retlw	0
  3948  0171  3463               	retlw	99
  3949  0172  3400               	retlw	0
  3950  0173  3464               	retlw	100
  3951  0174  3400               	retlw	0
  3952  0175  3465               	retlw	101
  3953  0176  3400               	retlw	0
  3954  0177  3466               	retlw	102
  3955  0178  3400               	retlw	0
  3956  0179  3467               	retlw	103
  3957  017A  3400               	retlw	0
  3958  017B  3467               	retlw	103
  3959  017C  3400               	retlw	0
  3960  017D  3468               	retlw	104
  3961  017E  3400               	retlw	0
  3962  017F  3469               	retlw	105
  3963  0180  3400               	retlw	0
  3964  0181  346A               	retlw	106
  3965  0182  3400               	retlw	0
  3966  0183  346B               	retlw	107
  3967  0184  3400               	retlw	0
  3968  0185  346C               	retlw	108
  3969  0186  3400               	retlw	0
  3970  0187  346C               	retlw	108
  3971  0188  3400               	retlw	0
  3972  0189  346D               	retlw	109
  3973  018A  3400               	retlw	0
  3974  018B  346E               	retlw	110
  3975  018C  3400               	retlw	0
  3976  018D  346F               	retlw	111
  3977  018E  3400               	retlw	0
  3978  018F  3470               	retlw	112
  3979  0190  3400               	retlw	0
  3980  0191  3470               	retlw	112
  3981  0192  3400               	retlw	0
  3982  0193  3471               	retlw	113
  3983  0194  3400               	retlw	0
  3984  0195  3472               	retlw	114
  3985  0196  3400               	retlw	0
  3986  0197  3473               	retlw	115
  3987  0198  3400               	retlw	0
  3988  0199  3474               	retlw	116
  3989  019A  3400               	retlw	0
  3990  019B  3475               	retlw	117
  3991  019C  3400               	retlw	0
  3992  019D  3475               	retlw	117
  3993  019E  3400               	retlw	0
  3994  019F  3476               	retlw	118
  3995  01A0  3400               	retlw	0
  3996  01A1  3477               	retlw	119
  3997  01A2  3400               	retlw	0
  3998  01A3  3478               	retlw	120
  3999  01A4  3400               	retlw	0
  4000  01A5  3479               	retlw	121
  4001  01A6  3400               	retlw	0
  4002  01A7  347A               	retlw	122
  4003  01A8  3400               	retlw	0
  4004  01A9  347A               	retlw	122
  4005  01AA  3400               	retlw	0
  4006  01AB  347B               	retlw	123
  4007  01AC  3400               	retlw	0
  4008  01AD  347C               	retlw	124
  4009  01AE  3400               	retlw	0
  4010  01AF  347D               	retlw	125
  4011  01B0  3400               	retlw	0
  4012  01B1  347E               	retlw	126
  4013  01B2  3400               	retlw	0
  4014  01B3  347E               	retlw	126
  4015  01B4  3400               	retlw	0
  4016  01B5  347F               	retlw	127
  4017  01B6  3400               	retlw	0
  4018  01B7  3480               	retlw	128
  4019  01B8  3400               	retlw	0
  4020  01B9  3481               	retlw	129
  4021  01BA  3400               	retlw	0
  4022  01BB  3482               	retlw	130
  4023  01BC  3400               	retlw	0
  4024  01BD  3483               	retlw	131
  4025  01BE  3400               	retlw	0
  4026  01BF  3483               	retlw	131
  4027  01C0  3400               	retlw	0
  4028  01C1  3484               	retlw	132
  4029  01C2  3400               	retlw	0
  4030  01C3  3485               	retlw	133
  4031  01C4  3400               	retlw	0
  4032  01C5  3486               	retlw	134
  4033  01C6  3400               	retlw	0
  4034  01C7  3487               	retlw	135
  4035  01C8  3400               	retlw	0
  4036  01C9  3487               	retlw	135
  4037  01CA  3400               	retlw	0
  4038  01CB  3488               	retlw	136
  4039  01CC  3400               	retlw	0
  4040  01CD  3489               	retlw	137
  4041  01CE  3400               	retlw	0
  4042  01CF  348A               	retlw	138
  4043  01D0  3400               	retlw	0
  4044  01D1  348B               	retlw	139
  4045  01D2  3400               	retlw	0
  4046  01D3  348C               	retlw	140
  4047  01D4  3400               	retlw	0
  4048  01D5  348C               	retlw	140
  4049  01D6  3400               	retlw	0
  4050  01D7  348D               	retlw	141
  4051  01D8  3400               	retlw	0
  4052  01D9  348E               	retlw	142
  4053  01DA  3400               	retlw	0
  4054  01DB  348F               	retlw	143
  4055  01DC  3400               	retlw	0
  4056  01DD  3490               	retlw	144
  4057  01DE  3400               	retlw	0
  4058  01DF  3491               	retlw	145
  4059  01E0  3400               	retlw	0
  4060  01E1  3491               	retlw	145
  4061  01E2  3400               	retlw	0
  4062  01E3  3492               	retlw	146
  4063  01E4  3400               	retlw	0
  4064  01E5  3493               	retlw	147
  4065  01E6  3400               	retlw	0
  4066  01E7  3494               	retlw	148
  4067  01E8  3400               	retlw	0
  4068  01E9  3495               	retlw	149
  4069  01EA  3400               	retlw	0
  4070  01EB  3495               	retlw	149
  4071  01EC  3400               	retlw	0
  4072  01ED  3496               	retlw	150
  4073  01EE  3400               	retlw	0
  4074  01EF  3497               	retlw	151
  4075  01F0  3400               	retlw	0
  4076  01F1  3498               	retlw	152
  4077  01F2  3400               	retlw	0
  4078  01F3  3499               	retlw	153
  4079  01F4  3400               	retlw	0
  4080  01F5  349A               	retlw	154
  4081  01F6  3400               	retlw	0
  4082  01F7  349A               	retlw	154
  4083  01F8  3400               	retlw	0
  4084  01F9  349B               	retlw	155
  4085  01FA  3400               	retlw	0
  4086  01FB  349C               	retlw	156
  4087  01FC  3400               	retlw	0
  4088  01FD  349D               	retlw	157
  4089  01FE  3400               	retlw	0
  4090  01FF  349E               	retlw	158
  4091  0200  3400               	retlw	0
  4092  0201  349E               	retlw	158
  4093  0202  3400               	retlw	0
  4094  0203  349F               	retlw	159
  4095  0204  3400               	retlw	0
  4096  0205  34A0               	retlw	160
  4097  0206  3400               	retlw	0
  4098  0207  34A1               	retlw	161
  4099  0208  3400               	retlw	0
  4100  0209  34A2               	retlw	162
  4101  020A  3400               	retlw	0
  4102  020B  34A3               	retlw	163
  4103  020C  3400               	retlw	0
  4104  020D  34A3               	retlw	163
  4105  020E  3400               	retlw	0
  4106  020F  34A4               	retlw	164
  4107  0210  3400               	retlw	0
  4108  0211  34A5               	retlw	165
  4109  0212  3400               	retlw	0
  4110  0213  34A6               	retlw	166
  4111  0214  3400               	retlw	0
  4112  0215  34A7               	retlw	167
  4113  0216  3400               	retlw	0
  4114  0217  34A7               	retlw	167
  4115  0218  3400               	retlw	0
  4116  0219  34A8               	retlw	168
  4117  021A  3400               	retlw	0
  4118  021B  34A9               	retlw	169
  4119  021C  3400               	retlw	0
  4120  021D  34AA               	retlw	170
  4121  021E  3400               	retlw	0
  4122  021F  34AB               	retlw	171
  4123  0220  3400               	retlw	0
  4124  0221  34AC               	retlw	172
  4125  0222  3400               	retlw	0
  4126  0223  34AC               	retlw	172
  4127  0224  3400               	retlw	0
  4128  0225  34AD               	retlw	173
  4129  0226  3400               	retlw	0
  4130  0227  34AE               	retlw	174
  4131  0228  3400               	retlw	0
  4132  0229  34AF               	retlw	175
  4133  022A  3400               	retlw	0
  4134  022B  34B0               	retlw	176
  4135  022C  3400               	retlw	0
  4136  022D  34B1               	retlw	177
  4137  022E  3400               	retlw	0
  4138  022F  34B1               	retlw	177
  4139  0230  3400               	retlw	0
  4140  0231  34B2               	retlw	178
  4141  0232  3400               	retlw	0
  4142  0233  34B3               	retlw	179
  4143  0234  3400               	retlw	0
  4144  0235  34B4               	retlw	180
  4145  0236  3400               	retlw	0
  4146  0237  34B5               	retlw	181
  4147  0238  3400               	retlw	0
  4148  0239  34B5               	retlw	181
  4149  023A  3400               	retlw	0
  4150  023B  34B6               	retlw	182
  4151  023C  3400               	retlw	0
  4152  023D  34B7               	retlw	183
  4153  023E  3400               	retlw	0
  4154  023F  34B8               	retlw	184
  4155  0240  3400               	retlw	0
  4156  0241  34B9               	retlw	185
  4157  0242  3400               	retlw	0
  4158  0243  34BA               	retlw	186
  4159  0244  3400               	retlw	0
  4160  0245  34BA               	retlw	186
  4161  0246  3400               	retlw	0
  4162  0247  34BB               	retlw	187
  4163  0248  3400               	retlw	0
  4164  0249  34BC               	retlw	188
  4165  024A  3400               	retlw	0
  4166  024B  34BD               	retlw	189
  4167  024C  3400               	retlw	0
  4168  024D  34BE               	retlw	190
  4169  024E  3400               	retlw	0
  4170  024F  34BE               	retlw	190
  4171  0250  3400               	retlw	0
  4172  0251  34BF               	retlw	191
  4173  0252  3400               	retlw	0
  4174  0253  34C0               	retlw	192
  4175  0254  3400               	retlw	0
  4176  0255  34C1               	retlw	193
  4177  0256  3400               	retlw	0
  4178  0257  34C2               	retlw	194
  4179  0258  3400               	retlw	0
  4180  0259  34C3               	retlw	195
  4181  025A  3400               	retlw	0
  4182  025B  34C3               	retlw	195
  4183  025C  3400               	retlw	0
  4184  025D  34C4               	retlw	196
  4185  025E  3400               	retlw	0
  4186  025F  34C5               	retlw	197
  4187  0260  3400               	retlw	0
  4188  0261  34C6               	retlw	198
  4189  0262  3400               	retlw	0
  4190  0263  34C7               	retlw	199
  4191  0264  3400               	retlw	0
  4192  0265  34C8               	retlw	200
  4193  0266  3400               	retlw	0
  4194  0267  34C8               	retlw	200
  4195  0268  3400               	retlw	0
  4196  0269  34C9               	retlw	201
  4197  026A  3400               	retlw	0
  4198  026B  34CA               	retlw	202
  4199  026C  3400               	retlw	0
  4200  026D  34CB               	retlw	203
  4201  026E  3400               	retlw	0
  4202  026F  34CC               	retlw	204
  4203  0270  3400               	retlw	0
  4204  0271  34CC               	retlw	204
  4205  0272  3400               	retlw	0
  4206  0273  34CD               	retlw	205
  4207  0274  3400               	retlw	0
  4208  0275  34CE               	retlw	206
  4209  0276  3400               	retlw	0
  4210  0277  34CF               	retlw	207
  4211  0278  3400               	retlw	0
  4212  0279  34D0               	retlw	208
  4213  027A  3400               	retlw	0
  4214  027B  34D1               	retlw	209
  4215  027C  3400               	retlw	0
  4216  027D  34D1               	retlw	209
  4217  027E  3400               	retlw	0
  4218  027F  34D2               	retlw	210
  4219  0280  3400               	retlw	0
  4220  0281  34D3               	retlw	211
  4221  0282  3400               	retlw	0
  4222  0283  34D4               	retlw	212
  4223  0284  3400               	retlw	0
  4224  0285  34D5               	retlw	213
  4225  0286  3400               	retlw	0
  4226  0287  34D5               	retlw	213
  4227  0288  3400               	retlw	0
  4228  0289  34D6               	retlw	214
  4229  028A  3400               	retlw	0
  4230  028B  34D7               	retlw	215
  4231  028C  3400               	retlw	0
  4232  028D  34D8               	retlw	216
  4233  028E  3400               	retlw	0
  4234  028F  34D9               	retlw	217
  4235  0290  3400               	retlw	0
  4236  0291  34DA               	retlw	218
  4237  0292  3400               	retlw	0
  4238  0293  34DA               	retlw	218
  4239  0294  3400               	retlw	0
  4240  0295  34DB               	retlw	219
  4241  0296  3400               	retlw	0
  4242  0297  34DC               	retlw	220
  4243  0298  3400               	retlw	0
  4244  0299  34DD               	retlw	221
  4245  029A  3400               	retlw	0
  4246  029B  34DE               	retlw	222
  4247  029C  3400               	retlw	0
  4248  029D  34DF               	retlw	223
  4249  029E  3400               	retlw	0
  4250  029F  34DF               	retlw	223
  4251  02A0  3400               	retlw	0
  4252  02A1  34E0               	retlw	224
  4253  02A2  3400               	retlw	0
  4254  02A3  34E1               	retlw	225
  4255  02A4  3400               	retlw	0
  4256  02A5  34E2               	retlw	226
  4257  02A6  3400               	retlw	0
  4258  02A7  34E3               	retlw	227
  4259  02A8  3400               	retlw	0
  4260  02A9  34E3               	retlw	227
  4261  02AA  3400               	retlw	0
  4262  02AB  34E4               	retlw	228
  4263  02AC  3400               	retlw	0
  4264  02AD  34E5               	retlw	229
  4265  02AE  3400               	retlw	0
  4266  02AF  34E6               	retlw	230
  4267  02B0  3400               	retlw	0
  4268  02B1  34E7               	retlw	231
  4269  02B2  3400               	retlw	0
  4270  02B3  34E8               	retlw	232
  4271  02B4  3400               	retlw	0
  4272  02B5  34E8               	retlw	232
  4273  02B6  3400               	retlw	0
  4274  02B7  34E9               	retlw	233
  4275  02B8  3400               	retlw	0
  4276  02B9  34EA               	retlw	234
  4277  02BA  3400               	retlw	0
  4278  02BB  34EB               	retlw	235
  4279  02BC  3400               	retlw	0
  4280  02BD  34EC               	retlw	236
  4281  02BE  3400               	retlw	0
  4282  02BF  34EC               	retlw	236
  4283  02C0  3400               	retlw	0
  4284  02C1  34ED               	retlw	237
  4285  02C2  3400               	retlw	0
  4286  02C3  34EE               	retlw	238
  4287  02C4  3400               	retlw	0
  4288  02C5  34EF               	retlw	239
  4289  02C6  3400               	retlw	0
  4290  02C7  34F0               	retlw	240
  4291  02C8  3400               	retlw	0
  4292  02C9  34F1               	retlw	241
  4293  02CA  3400               	retlw	0
  4294  02CB  34F1               	retlw	241
  4295  02CC  3400               	retlw	0
  4296  02CD  34F2               	retlw	242
  4297  02CE  3400               	retlw	0
  4298  02CF  34F3               	retlw	243
  4299  02D0  3400               	retlw	0
  4300  02D1  34F4               	retlw	244
  4301  02D2  3400               	retlw	0
  4302  02D3  34F5               	retlw	245
  4303  02D4  3400               	retlw	0
  4304  02D5  34F6               	retlw	246
  4305  02D6  3400               	retlw	0
  4306  02D7  34F6               	retlw	246
  4307  02D8  3400               	retlw	0
  4308  02D9  34F7               	retlw	247
  4309  02DA  3400               	retlw	0
  4310  02DB  34F8               	retlw	248
  4311  02DC  3400               	retlw	0
  4312  02DD  34F9               	retlw	249
  4313  02DE  3400               	retlw	0
  4314  02DF  34FA               	retlw	250
  4315  02E0  3400               	retlw	0
  4316  02E1  34FA               	retlw	250
  4317  02E2  3400               	retlw	0
  4318  02E3  34FB               	retlw	251
  4319  02E4  3400               	retlw	0
  4320  02E5  34FC               	retlw	252
  4321  02E6  3400               	retlw	0
  4322  02E7  34FD               	retlw	253
  4323  02E8  3400               	retlw	0
  4324  02E9  34FE               	retlw	254
  4325  02EA  3400               	retlw	0
  4326  02EB  34FF               	retlw	255
  4327  02EC  3400               	retlw	0
  4328  02ED  34FF               	retlw	255
  4329  02EE  3400               	retlw	0
  4330  02EF  3400               	retlw	0
  4331  02F0  3401               	retlw	1
  4332  02F1  3401               	retlw	1
  4333  02F2  3401               	retlw	1
  4334  02F3  3402               	retlw	2
  4335  02F4  3401               	retlw	1
  4336  02F5  3403               	retlw	3
  4337  02F6  3401               	retlw	1
  4338  02F7  3403               	retlw	3
  4339  02F8  3401               	retlw	1
  4340  02F9  3404               	retlw	4
  4341  02FA  3401               	retlw	1
  4342  02FB  3405               	retlw	5
  4343  02FC  3401               	retlw	1
  4344  02FD  3406               	retlw	6
  4345  02FE  3401               	retlw	1
  4346  02FF  3407               	retlw	7
  4347  0300  3401               	retlw	1
  4348  0301  3408               	retlw	8
  4349  0302  3401               	retlw	1
  4350  0303  3408               	retlw	8
  4351  0304  3401               	retlw	1
  4352  0305  3409               	retlw	9
  4353  0306  3401               	retlw	1
  4354  0307  340A               	retlw	10
  4355  0308  3401               	retlw	1
  4356  0309  340B               	retlw	11
  4357  030A  3401               	retlw	1
  4358  030B  340C               	retlw	12
  4359  030C  3401               	retlw	1
  4360  030D  340C               	retlw	12
  4361  030E  3401               	retlw	1
  4362  030F  340D               	retlw	13
  4363  0310  3401               	retlw	1
  4364  0311  340E               	retlw	14
  4365  0312  3401               	retlw	1
  4366  0313  340F               	retlw	15
  4367  0314  3401               	retlw	1
  4368  0315  3410               	retlw	16
  4369  0316  3401               	retlw	1
  4370  0317  3411               	retlw	17
  4371  0318  3401               	retlw	1
  4372  0319  3411               	retlw	17
  4373  031A  3401               	retlw	1
  4374  031B  3412               	retlw	18
  4375  031C  3401               	retlw	1
  4376  031D  3413               	retlw	19
  4377  031E  3401               	retlw	1
  4378  031F  3414               	retlw	20
  4379  0320  3401               	retlw	1
  4380  0321  3415               	retlw	21
  4381  0322  3401               	retlw	1
  4382  0323  3416               	retlw	22
  4383  0324  3401               	retlw	1
  4384  0325  3416               	retlw	22
  4385  0326  3401               	retlw	1
  4386  0327  3417               	retlw	23
  4387  0328  3401               	retlw	1
  4388  0329  3418               	retlw	24
  4389  032A  3401               	retlw	1
  4390  032B  3419               	retlw	25
  4391  032C  3401               	retlw	1
  4392  032D  341A               	retlw	26
  4393  032E  3401               	retlw	1
  4394  032F  341A               	retlw	26
  4395  0330  3401               	retlw	1
  4396  0331  341B               	retlw	27
  4397  0332  3401               	retlw	1
  4398  0333  341C               	retlw	28
  4399  0334  3401               	retlw	1
  4400  0335  341D               	retlw	29
  4401  0336  3401               	retlw	1
  4402  0337  341E               	retlw	30
  4403  0338  3401               	retlw	1
  4404  0339  341F               	retlw	31
  4405  033A  3401               	retlw	1
  4406  033B  341F               	retlw	31
  4407  033C  3401               	retlw	1
  4408  033D  3420               	retlw	32
  4409  033E  3401               	retlw	1
  4410  033F  3421               	retlw	33
  4411  0340  3401               	retlw	1
  4412  0341  3422               	retlw	34
  4413  0342  3401               	retlw	1
  4414  0343  3423               	retlw	35
  4415  0344  3401               	retlw	1
  4416  0345  3423               	retlw	35
  4417  0346  3401               	retlw	1
  4418  0347  3424               	retlw	36
  4419  0348  3401               	retlw	1
  4420  0349  3425               	retlw	37
  4421  034A  3401               	retlw	1
  4422  034B  3426               	retlw	38
  4423  034C  3401               	retlw	1
  4424  034D  3427               	retlw	39
  4425  034E  3401               	retlw	1
  4426  034F  3428               	retlw	40
  4427  0350  3401               	retlw	1
  4428  0351  3428               	retlw	40
  4429  0352  3401               	retlw	1
  4430  0353  3429               	retlw	41
  4431  0354  3401               	retlw	1
  4432  0355  342A               	retlw	42
  4433  0356  3401               	retlw	1
  4434  0357  342B               	retlw	43
  4435  0358  3401               	retlw	1
  4436  0359  342C               	retlw	44
  4437  035A  3401               	retlw	1
  4438  035B  342D               	retlw	45
  4439  035C  3401               	retlw	1
  4440  035D  342D               	retlw	45
  4441  035E  3401               	retlw	1
  4442  035F  342E               	retlw	46
  4443  0360  3401               	retlw	1
  4444  0361  342F               	retlw	47
  4445  0362  3401               	retlw	1
  4446  0363  3430               	retlw	48
  4447  0364  3401               	retlw	1
  4448  0365  3431               	retlw	49
  4449  0366  3401               	retlw	1
  4450  0367  3431               	retlw	49
  4451  0368  3401               	retlw	1
  4452  0369  3432               	retlw	50
  4453  036A  3401               	retlw	1
  4454  036B  3433               	retlw	51
  4455  036C  3401               	retlw	1
  4456  036D  3434               	retlw	52
  4457  036E  3401               	retlw	1
  4458  036F  3435               	retlw	53
  4459  0370  3401               	retlw	1
  4460  0371  3436               	retlw	54
  4461  0372  3401               	retlw	1
  4462  0373  3436               	retlw	54
  4463  0374  3401               	retlw	1
  4464  0375  3437               	retlw	55
  4465  0376  3401               	retlw	1
  4466  0377  3438               	retlw	56
  4467  0378  3401               	retlw	1
  4468  0379  3439               	retlw	57
  4469  037A  3401               	retlw	1
  4470  037B  343A               	retlw	58
  4471  037C  3401               	retlw	1
  4472  037D  343A               	retlw	58
  4473  037E  3401               	retlw	1
  4474  037F  343B               	retlw	59
  4475  0380  3401               	retlw	1
  4476  0381  343C               	retlw	60
  4477  0382  3401               	retlw	1
  4478  0383  343D               	retlw	61
  4479  0384  3401               	retlw	1
  4480  0385  343E               	retlw	62
  4481  0386  3401               	retlw	1
  4482  0387  343F               	retlw	63
  4483  0388  3401               	retlw	1
  4484  0389  343F               	retlw	63
  4485  038A  3401               	retlw	1
  4486  038B  3440               	retlw	64
  4487  038C  3401               	retlw	1
  4488  038D  3441               	retlw	65
  4489  038E  3401               	retlw	1
  4490  038F  3442               	retlw	66
  4491  0390  3401               	retlw	1
  4492  0391  3443               	retlw	67
  4493  0392  3401               	retlw	1
  4494  0393  3444               	retlw	68
  4495  0394  3401               	retlw	1
  4496  0395  3444               	retlw	68
  4497  0396  3401               	retlw	1
  4498  0397  3445               	retlw	69
  4499  0398  3401               	retlw	1
  4500  0399  3446               	retlw	70
  4501  039A  3401               	retlw	1
  4502  039B  3447               	retlw	71
  4503  039C  3401               	retlw	1
  4504  039D  3448               	retlw	72
  4505  039E  3401               	retlw	1
  4506  039F  3448               	retlw	72
  4507  03A0  3401               	retlw	1
  4508  03A1  3449               	retlw	73
  4509  03A2  3401               	retlw	1
  4510  03A3  344A               	retlw	74
  4511  03A4  3401               	retlw	1
  4512  03A5  344B               	retlw	75
  4513  03A6  3401               	retlw	1
  4514  03A7  344C               	retlw	76
  4515  03A8  3401               	retlw	1
  4516  03A9  344D               	retlw	77
  4517  03AA  3401               	retlw	1
  4518  03AB  344D               	retlw	77
  4519  03AC  3401               	retlw	1
  4520  03AD  344E               	retlw	78
  4521  03AE  3401               	retlw	1
  4522  03AF  344F               	retlw	79
  4523  03B0  3401               	retlw	1
  4524  03B1  3450               	retlw	80
  4525  03B2  3401               	retlw	1
  4526  03B3  3451               	retlw	81
  4527  03B4  3401               	retlw	1
  4528  03B5  3451               	retlw	81
  4529  03B6  3401               	retlw	1
  4530  03B7  3452               	retlw	82
  4531  03B8  3401               	retlw	1
  4532  03B9  3453               	retlw	83
  4533  03BA  3401               	retlw	1
  4534  03BB  3454               	retlw	84
  4535  03BC  3401               	retlw	1
  4536  03BD  3455               	retlw	85
  4537  03BE  3401               	retlw	1
  4538  03BF  3456               	retlw	86
  4539  03C0  3401               	retlw	1
  4540  03C1  3456               	retlw	86
  4541  03C2  3401               	retlw	1
  4542  03C3  3457               	retlw	87
  4543  03C4  3401               	retlw	1
  4544  03C5  3458               	retlw	88
  4545  03C6  3401               	retlw	1
  4546  03C7  3459               	retlw	89
  4547  03C8  3401               	retlw	1
  4548  03C9  345A               	retlw	90
  4549  03CA  3401               	retlw	1
  4550  03CB  345A               	retlw	90
  4551  03CC  3401               	retlw	1
  4552  03CD  345B               	retlw	91
  4553  03CE  3401               	retlw	1
  4554  03CF  345C               	retlw	92
  4555  03D0  3401               	retlw	1
  4556  03D1  345D               	retlw	93
  4557  03D2  3401               	retlw	1
  4558  03D3  345E               	retlw	94
  4559  03D4  3401               	retlw	1
  4560  03D5  345F               	retlw	95
  4561  03D6  3401               	retlw	1
  4562  03D7  345F               	retlw	95
  4563  03D8  3401               	retlw	1
  4564  03D9  3460               	retlw	96
  4565  03DA  3401               	retlw	1
  4566  03DB  3461               	retlw	97
  4567  03DC  3401               	retlw	1
  4568  03DD  3462               	retlw	98
  4569  03DE  3401               	retlw	1
  4570  03DF  3463               	retlw	99
  4571  03E0  3401               	retlw	1
  4572  03E1  3464               	retlw	100
  4573  03E2  3401               	retlw	1
  4574  03E3  3464               	retlw	100
  4575  03E4  3401               	retlw	1
  4576  03E5  3465               	retlw	101
  4577  03E6  3401               	retlw	1
  4578  03E7  3466               	retlw	102
  4579  03E8  3401               	retlw	1
  4580  03E9  3467               	retlw	103
  4581  03EA  3401               	retlw	1
  4582  03EB  3468               	retlw	104
  4583  03EC  3401               	retlw	1
  4584  03ED  3468               	retlw	104
  4585  03EE  3401               	retlw	1
  4586  03EF  3469               	retlw	105
  4587  03F0  3401               	retlw	1
  4588  03F1  346A               	retlw	106
  4589  03F2  3401               	retlw	1
  4590  03F3  346B               	retlw	107
  4591  03F4  3401               	retlw	1
  4592  03F5  346C               	retlw	108
  4593  03F6  3401               	retlw	1
  4594  03F7  346D               	retlw	109
  4595  03F8  3401               	retlw	1
  4596  03F9  346D               	retlw	109
  4597  03FA  3401               	retlw	1
  4598  03FB  346E               	retlw	110
  4599  03FC  3401               	retlw	1
  4600  03FD  346F               	retlw	111
  4601  03FE  3401               	retlw	1
  4602  03FF  3470               	retlw	112
  4603  0400  3401               	retlw	1
  4604  0401  3471               	retlw	113
  4605  0402  3401               	retlw	1
  4606  0403  3471               	retlw	113
  4607  0404  3401               	retlw	1
  4608  0405  3472               	retlw	114
  4609  0406  3401               	retlw	1
  4610  0407  3473               	retlw	115
  4611  0408  3401               	retlw	1
  4612  0409  3474               	retlw	116
  4613  040A  3401               	retlw	1
  4614  040B  3475               	retlw	117
  4615  040C  3401               	retlw	1
  4616  040D  3476               	retlw	118
  4617  040E  3401               	retlw	1
  4618  040F  3476               	retlw	118
  4619  0410  3401               	retlw	1
  4620  0411  3477               	retlw	119
  4621  0412  3401               	retlw	1
  4622  0413  3478               	retlw	120
  4623  0414  3401               	retlw	1
  4624  0415  3479               	retlw	121
  4625  0416  3401               	retlw	1
  4626  0417  347A               	retlw	122
  4627  0418  3401               	retlw	1
  4628  0419  347B               	retlw	123
  4629  041A  3401               	retlw	1
  4630  041B  347B               	retlw	123
  4631  041C  3401               	retlw	1
  4632  041D  347C               	retlw	124
  4633  041E  3401               	retlw	1
  4634  041F  347D               	retlw	125
  4635  0420  3401               	retlw	1
  4636  0421  347E               	retlw	126
  4637  0422  3401               	retlw	1
  4638  0423  347F               	retlw	127
  4639  0424  3401               	retlw	1
  4640  0425  347F               	retlw	127
  4641  0426  3401               	retlw	1
  4642  0427  3480               	retlw	128
  4643  0428  3401               	retlw	1
  4644  0429  3481               	retlw	129
  4645  042A  3401               	retlw	1
  4646  042B  3482               	retlw	130
  4647  042C  3401               	retlw	1
  4648  042D  3483               	retlw	131
  4649  042E  3401               	retlw	1
  4650  042F  3484               	retlw	132
  4651  0430  3401               	retlw	1
  4652  0431  3484               	retlw	132
  4653  0432  3401               	retlw	1
  4654  0433  3485               	retlw	133
  4655  0434  3401               	retlw	1
  4656  0435  3486               	retlw	134
  4657  0436  3401               	retlw	1
  4658  0437  3487               	retlw	135
  4659  0438  3401               	retlw	1
  4660  0439  3488               	retlw	136
  4661  043A  3401               	retlw	1
  4662  043B  3488               	retlw	136
  4663  043C  3401               	retlw	1
  4664  043D  3489               	retlw	137
  4665  043E  3401               	retlw	1
  4666  043F  348A               	retlw	138
  4667  0440  3401               	retlw	1
  4668  0441  348B               	retlw	139
  4669  0442  3401               	retlw	1
  4670  0443  348C               	retlw	140
  4671  0444  3401               	retlw	1
  4672  0445  348D               	retlw	141
  4673  0446  3401               	retlw	1
  4674  0447  348D               	retlw	141
  4675  0448  3401               	retlw	1
  4676  0449  348E               	retlw	142
  4677  044A  3401               	retlw	1
  4678  044B  348F               	retlw	143
  4679  044C  3401               	retlw	1
  4680  044D  3490               	retlw	144
  4681  044E  3401               	retlw	1
  4682  044F  3491               	retlw	145
  4683  0450  3401               	retlw	1
  4684  0451  3492               	retlw	146
  4685  0452  3401               	retlw	1
  4686  0453  3492               	retlw	146
  4687  0454  3401               	retlw	1
  4688  0455  3493               	retlw	147
  4689  0456  3401               	retlw	1
  4690  0457  3494               	retlw	148
  4691  0458  3401               	retlw	1
  4692  0459  3495               	retlw	149
  4693  045A  3401               	retlw	1
  4694  045B  3496               	retlw	150
  4695  045C  3401               	retlw	1
  4696  045D  3496               	retlw	150
  4697  045E  3401               	retlw	1
  4698  045F  3497               	retlw	151
  4699  0460  3401               	retlw	1
  4700  0461  3498               	retlw	152
  4701  0462  3401               	retlw	1
  4702  0463  3499               	retlw	153
  4703  0464  3401               	retlw	1
  4704  0465  349A               	retlw	154
  4705  0466  3401               	retlw	1
  4706  0467  349B               	retlw	155
  4707  0468  3401               	retlw	1
  4708  0469  349B               	retlw	155
  4709  046A  3401               	retlw	1
  4710  046B  349C               	retlw	156
  4711  046C  3401               	retlw	1
  4712  046D  349D               	retlw	157
  4713  046E  3401               	retlw	1
  4714  046F  349E               	retlw	158
  4715  0470  3401               	retlw	1
  4716  0471  349F               	retlw	159
  4717  0472  3401               	retlw	1
  4718  0473  349F               	retlw	159
  4719  0474  3401               	retlw	1
  4720  0475  34A0               	retlw	160
  4721  0476  3401               	retlw	1
  4722  0477  34A1               	retlw	161
  4723  0478  3401               	retlw	1
  4724  0479  34A2               	retlw	162
  4725  047A  3401               	retlw	1
  4726  047B  34A3               	retlw	163
  4727  047C  3401               	retlw	1
  4728  047D  34A4               	retlw	164
  4729  047E  3401               	retlw	1
  4730  047F  34A4               	retlw	164
  4731  0480  3401               	retlw	1
  4732  0481  34A5               	retlw	165
  4733  0482  3401               	retlw	1
  4734  0483  34A6               	retlw	166
  4735  0484  3401               	retlw	1
  4736  0485  34A7               	retlw	167
  4737  0486  3401               	retlw	1
  4738  0487  34A8               	retlw	168
  4739  0488  3401               	retlw	1
  4740  0489  34A8               	retlw	168
  4741  048A  3401               	retlw	1
  4742  048B  34A9               	retlw	169
  4743  048C  3401               	retlw	1
  4744  048D  34AA               	retlw	170
  4745  048E  3401               	retlw	1
  4746  048F  34AB               	retlw	171
  4747  0490  3401               	retlw	1
  4748  0491  34AC               	retlw	172
  4749  0492  3401               	retlw	1
  4750  0493  34AD               	retlw	173
  4751  0494  3401               	retlw	1
  4752  0495  34AD               	retlw	173
  4753  0496  3401               	retlw	1
  4754  0497  34AE               	retlw	174
  4755  0498  3401               	retlw	1
  4756  0499  34AF               	retlw	175
  4757  049A  3401               	retlw	1
  4758  049B  34B0               	retlw	176
  4759  049C  3401               	retlw	1
  4760  049D  34B1               	retlw	177
  4761  049E  3401               	retlw	1
  4762  049F  34B2               	retlw	178
  4763  04A0  3401               	retlw	1
  4764  04A1  34B2               	retlw	178
  4765  04A2  3401               	retlw	1
  4766  04A3  34B3               	retlw	179
  4767  04A4  3401               	retlw	1
  4768  04A5  34B4               	retlw	180
  4769  04A6  3401               	retlw	1
  4770  04A7  34B5               	retlw	181
  4771  04A8  3401               	retlw	1
  4772  04A9  34B6               	retlw	182
  4773  04AA  3401               	retlw	1
  4774  04AB  34B6               	retlw	182
  4775  04AC  3401               	retlw	1
  4776  04AD  34B7               	retlw	183
  4777  04AE  3401               	retlw	1
  4778  04AF  34B8               	retlw	184
  4779  04B0  3401               	retlw	1
  4780  04B1  34B9               	retlw	185
  4781  04B2  3401               	retlw	1
  4782  04B3  34BA               	retlw	186
  4783  04B4  3401               	retlw	1
  4784  04B5  34BB               	retlw	187
  4785  04B6  3401               	retlw	1
  4786  04B7  34BB               	retlw	187
  4787  04B8  3401               	retlw	1
  4788  04B9  34BC               	retlw	188
  4789  04BA  3401               	retlw	1
  4790  04BB  34BD               	retlw	189
  4791  04BC  3401               	retlw	1
  4792  04BD  34BE               	retlw	190
  4793  04BE  3401               	retlw	1
  4794  04BF  34BF               	retlw	191
  4795  04C0  3401               	retlw	1
  4796  04C1  34BF               	retlw	191
  4797  04C2  3401               	retlw	1
  4798  04C3  34C0               	retlw	192
  4799  04C4  3401               	retlw	1
  4800  04C5  34C1               	retlw	193
  4801  04C6  3401               	retlw	1
  4802  04C7  34C2               	retlw	194
  4803  04C8  3401               	retlw	1
  4804  04C9  34C3               	retlw	195
  4805  04CA  3401               	retlw	1
  4806  04CB  34C4               	retlw	196
  4807  04CC  3401               	retlw	1
  4808  04CD  34C4               	retlw	196
  4809  04CE  3401               	retlw	1
  4810  04CF  34C5               	retlw	197
  4811  04D0  3401               	retlw	1
  4812  04D1  34C6               	retlw	198
  4813  04D2  3401               	retlw	1
  4814  04D3  34C7               	retlw	199
  4815  04D4  3401               	retlw	1
  4816  04D5  34C8               	retlw	200
  4817  04D6  3401               	retlw	1
  4818  04D7  34C9               	retlw	201
  4819  04D8  3401               	retlw	1
  4820  04D9  34C9               	retlw	201
  4821  04DA  3401               	retlw	1
  4822  04DB  34CA               	retlw	202
  4823  04DC  3401               	retlw	1
  4824  04DD  34CB               	retlw	203
  4825  04DE  3401               	retlw	1
  4826  04DF  34CC               	retlw	204
  4827  04E0  3401               	retlw	1
  4828  04E1  34CD               	retlw	205
  4829  04E2  3401               	retlw	1
  4830  04E3  34CD               	retlw	205
  4831  04E4  3401               	retlw	1
  4832  04E5  34CE               	retlw	206
  4833  04E6  3401               	retlw	1
  4834  04E7  34CF               	retlw	207
  4835  04E8  3401               	retlw	1
  4836  04E9  34D0               	retlw	208
  4837  04EA  3401               	retlw	1
  4838  04EB  34D1               	retlw	209
  4839  04EC  3401               	retlw	1
  4840  04ED  34D2               	retlw	210
  4841  04EE  3401               	retlw	1
  4842  04EF  34D2               	retlw	210
  4843  04F0  3401               	retlw	1
  4844  04F1  34D3               	retlw	211
  4845  04F2  3401               	retlw	1
  4846  04F3  34D4               	retlw	212
  4847  04F4  3401               	retlw	1
  4848  04F5  34D5               	retlw	213
  4849  04F6  3401               	retlw	1
  4850  04F7  34D6               	retlw	214
  4851  04F8  3401               	retlw	1
  4852  04F9  34D6               	retlw	214
  4853  04FA  3401               	retlw	1
  4854  04FB  34D7               	retlw	215
  4855  04FC  3401               	retlw	1
  4856  04FD  34D8               	retlw	216
  4857  04FE  3401               	retlw	1
  4858  04FF  34D9               	retlw	217
  4859  0500  3401               	retlw	1
  4860  0501  34DA               	retlw	218
  4861  0502  3401               	retlw	1
  4862  0503  34DB               	retlw	219
  4863  0504  3401               	retlw	1
  4864  0505  34DB               	retlw	219
  4865  0506  3401               	retlw	1
  4866  0507  34DC               	retlw	220
  4867  0508  3401               	retlw	1
  4868  0509  34DD               	retlw	221
  4869  050A  3401               	retlw	1
  4870  050B  34DE               	retlw	222
  4871  050C  3401               	retlw	1
  4872  050D  34DF               	retlw	223
  4873  050E  3401               	retlw	1
  4874  050F  34E0               	retlw	224
  4875  0510  3401               	retlw	1
  4876  0511  34E0               	retlw	224
  4877  0512  3401               	retlw	1
  4878  0513  34E1               	retlw	225
  4879  0514  3401               	retlw	1
  4880  0515  34E2               	retlw	226
  4881  0516  3401               	retlw	1
  4882  0517  34E3               	retlw	227
  4883  0518  3401               	retlw	1
  4884  0519  34E4               	retlw	228
  4885  051A  3401               	retlw	1
  4886  051B  34E4               	retlw	228
  4887  051C  3401               	retlw	1
  4888  051D  34E5               	retlw	229
  4889  051E  3401               	retlw	1
  4890  051F  34E6               	retlw	230
  4891  0520  3401               	retlw	1
  4892  0521  34E7               	retlw	231
  4893  0522  3401               	retlw	1
  4894  0523  34E8               	retlw	232
  4895  0524  3401               	retlw	1
  4896  0525  34E9               	retlw	233
  4897  0526  3401               	retlw	1
  4898  0527  34E9               	retlw	233
  4899  0528  3401               	retlw	1
  4900  0529  34EA               	retlw	234
  4901  052A  3401               	retlw	1
  4902  052B  34EB               	retlw	235
  4903  052C  3401               	retlw	1
  4904  052D  34EC               	retlw	236
  4905  052E  3401               	retlw	1
  4906  052F  34ED               	retlw	237
  4907  0530  3401               	retlw	1
  4908  0531  34ED               	retlw	237
  4909  0532  3401               	retlw	1
  4910  0533  34EE               	retlw	238
  4911  0534  3401               	retlw	1
  4912  0535  34EF               	retlw	239
  4913  0536  3401               	retlw	1
  4914  0537  34F0               	retlw	240
  4915  0538  3401               	retlw	1
  4916  0539  34F1               	retlw	241
  4917  053A  3401               	retlw	1
  4918  053B  34F2               	retlw	242
  4919  053C  3401               	retlw	1
  4920  053D  34F2               	retlw	242
  4921  053E  3401               	retlw	1
  4922  053F  34F3               	retlw	243
  4923  0540  3401               	retlw	1
  4924  0541  34F4               	retlw	244
  4925  0542  3401               	retlw	1
  4926  0543  34F5               	retlw	245
  4927  0544  3401               	retlw	1
  4928  0545  34F6               	retlw	246
  4929  0546  3401               	retlw	1
  4930  0547  34F6               	retlw	246
  4931  0548  3401               	retlw	1
  4932  0549  34F7               	retlw	247
  4933  054A  3401               	retlw	1
  4934  054B  34F8               	retlw	248
  4935  054C  3401               	retlw	1
  4936  054D  34F9               	retlw	249
  4937  054E  3401               	retlw	1
  4938  054F  34FA               	retlw	250
  4939  0550  3401               	retlw	1
  4940  0551  34FB               	retlw	251
  4941  0552  3401               	retlw	1
  4942  0553  34FB               	retlw	251
  4943  0554  3401               	retlw	1
  4944  0555  34FC               	retlw	252
  4945  0556  3401               	retlw	1
  4946  0557  34FD               	retlw	253
  4947  0558  3401               	retlw	1
  4948  0559  34FE               	retlw	254
  4949  055A  3401               	retlw	1
  4950  055B  34FF               	retlw	255
  4951  055C  3401               	retlw	1
  4952  055D  3400               	retlw	0
  4953  055E  3402               	retlw	2
  4954  055F  3400               	retlw	0
  4955  0560  3402               	retlw	2
  4956  0561  3401               	retlw	1
  4957  0562  3402               	retlw	2
  4958  0563  3402               	retlw	2
  4959  0564  3402               	retlw	2
  4960  0565  3403               	retlw	3
  4961  0566  3402               	retlw	2
  4962  0567  3404               	retlw	4
  4963  0568  3402               	retlw	2
  4964  0569  3404               	retlw	4
  4965  056A  3402               	retlw	2
  4966  056B  3405               	retlw	5
  4967  056C  3402               	retlw	2
  4968  056D  3406               	retlw	6
  4969  056E  3402               	retlw	2
  4970  056F  3407               	retlw	7
  4971  0570  3402               	retlw	2
  4972  0571  3408               	retlw	8
  4973  0572  3402               	retlw	2
  4974  0573  3409               	retlw	9
  4975  0574  3402               	retlw	2
  4976  0575  3409               	retlw	9
  4977  0576  3402               	retlw	2
  4978  0577  340A               	retlw	10
  4979  0578  3402               	retlw	2
  4980  0579  340B               	retlw	11
  4981  057A  3402               	retlw	2
  4982  057B  340C               	retlw	12
  4983  057C  3402               	retlw	2
  4984  057D  340D               	retlw	13
  4985  057E  3402               	retlw	2
  4986  057F  340D               	retlw	13
  4987  0580  3402               	retlw	2
  4988  0581  340E               	retlw	14
  4989  0582  3402               	retlw	2
  4990  0583  340F               	retlw	15
  4991  0584  3402               	retlw	2
  4992  0585  3410               	retlw	16
  4993  0586  3402               	retlw	2
  4994  0587  3411               	retlw	17
  4995  0588  3402               	retlw	2
  4996  0589  3412               	retlw	18
  4997  058A  3402               	retlw	2
  4998  058B  3412               	retlw	18
  4999  058C  3402               	retlw	2
  5000  058D  3413               	retlw	19
  5001  058E  3402               	retlw	2
  5002  058F  3414               	retlw	20
  5003  0590  3402               	retlw	2
  5004  0591  3415               	retlw	21
  5005  0592  3402               	retlw	2
  5006  0593  3416               	retlw	22
  5007  0594  3402               	retlw	2
  5008  0595  3417               	retlw	23
  5009  0596  3402               	retlw	2
  5010  0597  3417               	retlw	23
  5011  0598  3402               	retlw	2
  5012  0599  3418               	retlw	24
  5013  059A  3402               	retlw	2
  5014  059B  3419               	retlw	25
  5015  059C  3402               	retlw	2
  5016  059D  341A               	retlw	26
  5017  059E  3402               	retlw	2
  5018  059F  341B               	retlw	27
  5019  05A0  3402               	retlw	2
  5020  05A1  341B               	retlw	27
  5021  05A2  3402               	retlw	2
  5022  05A3  341C               	retlw	28
  5023  05A4  3402               	retlw	2
  5024  05A5  341D               	retlw	29
  5025  05A6  3402               	retlw	2
  5026  05A7  341E               	retlw	30
  5027  05A8  3402               	retlw	2
  5028  05A9  341F               	retlw	31
  5029  05AA  3402               	retlw	2
  5030  05AB  3420               	retlw	32
  5031  05AC  3402               	retlw	2
  5032  05AD  3420               	retlw	32
  5033  05AE  3402               	retlw	2
  5034  05AF  3421               	retlw	33
  5035  05B0  3402               	retlw	2
  5036  05B1  3422               	retlw	34
  5037  05B2  3402               	retlw	2
  5038  05B3  3423               	retlw	35
  5039  05B4  3402               	retlw	2
  5040  05B5  3424               	retlw	36
  5041  05B6  3402               	retlw	2
  5042  05B7  3424               	retlw	36
  5043  05B8  3402               	retlw	2
  5044  05B9  3425               	retlw	37
  5045  05BA  3402               	retlw	2
  5046  05BB  3426               	retlw	38
  5047  05BC  3402               	retlw	2
  5048  05BD  3427               	retlw	39
  5049  05BE  3402               	retlw	2
  5050  05BF  3428               	retlw	40
  5051  05C0  3402               	retlw	2
  5052  05C1  3429               	retlw	41
  5053  05C2  3402               	retlw	2
  5054  05C3  3429               	retlw	41
  5055  05C4  3402               	retlw	2
  5056  05C5  342A               	retlw	42
  5057  05C6  3402               	retlw	2
  5058  05C7  342B               	retlw	43
  5059  05C8  3402               	retlw	2
  5060  05C9  342C               	retlw	44
  5061  05CA  3402               	retlw	2
  5062  05CB  342D               	retlw	45
  5063  05CC  3402               	retlw	2
  5064  05CD  342E               	retlw	46
  5065  05CE  3402               	retlw	2
  5066  05CF  342E               	retlw	46
  5067  05D0  3402               	retlw	2
  5068  05D1  342F               	retlw	47
  5069  05D2  3402               	retlw	2
  5070  05D3  3430               	retlw	48
  5071  05D4  3402               	retlw	2
  5072  05D5  3431               	retlw	49
  5073  05D6  3402               	retlw	2
  5074  05D7  3432               	retlw	50
  5075  05D8  3402               	retlw	2
  5076  05D9  3432               	retlw	50
  5077  05DA  3402               	retlw	2
  5078  05DB  3433               	retlw	51
  5079  05DC  3402               	retlw	2
  5080  05DD  3434               	retlw	52
  5081  05DE  3402               	retlw	2
  5082  05DF  3435               	retlw	53
  5083  05E0  3402               	retlw	2
  5084  05E1  3436               	retlw	54
  5085  05E2  3402               	retlw	2
  5086  05E3  3437               	retlw	55
  5087  05E4  3402               	retlw	2
  5088  05E5  3437               	retlw	55
  5089  05E6  3402               	retlw	2
  5090  05E7  3438               	retlw	56
  5091  05E8  3402               	retlw	2
  5092  05E9  3439               	retlw	57
  5093  05EA  3402               	retlw	2
  5094  05EB  343A               	retlw	58
  5095  05EC  3402               	retlw	2
  5096  05ED  343B               	retlw	59
  5097  05EE  3402               	retlw	2
  5098  05EF  343B               	retlw	59
  5099  05F0  3402               	retlw	2
  5100  05F1  343C               	retlw	60
  5101  05F2  3402               	retlw	2
  5102  05F3  343D               	retlw	61
  5103  05F4  3402               	retlw	2
  5104  05F5  343E               	retlw	62
  5105  05F6  3402               	retlw	2
  5106  05F7  343F               	retlw	63
  5107  05F8  3402               	retlw	2
  5108  05F9  3440               	retlw	64
  5109  05FA  3402               	retlw	2
  5110  05FB  3440               	retlw	64
  5111  05FC  3402               	retlw	2
  5112  05FD  3441               	retlw	65
  5113  05FE  3402               	retlw	2
  5114  05FF  3442               	retlw	66
  5115  0600  3402               	retlw	2
  5116  0601  3443               	retlw	67
  5117  0602  3402               	retlw	2
  5118  0603  3444               	retlw	68
  5119  0604  3402               	retlw	2
  5120  0605  3444               	retlw	68
  5121  0606  3402               	retlw	2
  5122  0607  3445               	retlw	69
  5123  0608  3402               	retlw	2
  5124  0609  3446               	retlw	70
  5125  060A  3402               	retlw	2
  5126  060B  3447               	retlw	71
  5127  060C  3402               	retlw	2
  5128  060D  3448               	retlw	72
  5129  060E  3402               	retlw	2
  5130  060F  3449               	retlw	73
  5131  0610  3402               	retlw	2
  5132  0611  3449               	retlw	73
  5133  0612  3402               	retlw	2
  5134  0613  344A               	retlw	74
  5135  0614  3402               	retlw	2
  5136  0615  344B               	retlw	75
  5137  0616  3402               	retlw	2
  5138  0617  344C               	retlw	76
  5139  0618  3402               	retlw	2
  5140  0619  344D               	retlw	77
  5141  061A  3402               	retlw	2
  5142  061B  344E               	retlw	78
  5143  061C  3402               	retlw	2
  5144  061D  344E               	retlw	78
  5145  061E  3402               	retlw	2
  5146  061F  344F               	retlw	79
  5147  0620  3402               	retlw	2
  5148  0621  3450               	retlw	80
  5149  0622  3402               	retlw	2
  5150  0623  3451               	retlw	81
  5151  0624  3402               	retlw	2
  5152  0625  3452               	retlw	82
  5153  0626  3402               	retlw	2
  5154  0627  3452               	retlw	82
  5155  0628  3402               	retlw	2
  5156  0629  3453               	retlw	83
  5157  062A  3402               	retlw	2
  5158  062B  3454               	retlw	84
  5159  062C  3402               	retlw	2
  5160  062D  3455               	retlw	85
  5161  062E  3402               	retlw	2
  5162  062F  3456               	retlw	86
  5163  0630  3402               	retlw	2
  5164  0631  3457               	retlw	87
  5165  0632  3402               	retlw	2
  5166  0633  3457               	retlw	87
  5167  0634  3402               	retlw	2
  5168  0635  3458               	retlw	88
  5169  0636  3402               	retlw	2
  5170  0637  3459               	retlw	89
  5171  0638  3402               	retlw	2
  5172  0639  345A               	retlw	90
  5173  063A  3402               	retlw	2
  5174  063B  345B               	retlw	91
  5175  063C  3402               	retlw	2
  5176  063D  345B               	retlw	91
  5177  063E  3402               	retlw	2
  5178  063F  345C               	retlw	92
  5179  0640  3402               	retlw	2
  5180  0641  345D               	retlw	93
  5181  0642  3402               	retlw	2
  5182  0643  345E               	retlw	94
  5183  0644  3402               	retlw	2
  5184  0645  345F               	retlw	95
  5185  0646  3402               	retlw	2
  5186  0647  3460               	retlw	96
  5187  0648  3402               	retlw	2
  5188  0649  3460               	retlw	96
  5189  064A  3402               	retlw	2
  5190  064B  3461               	retlw	97
  5191  064C  3402               	retlw	2
  5192  064D  3462               	retlw	98
  5193  064E  3402               	retlw	2
  5194  064F  3463               	retlw	99
  5195  0650  3402               	retlw	2
  5196  0651  3464               	retlw	100
  5197  0652  3402               	retlw	2
  5198  0653  3465               	retlw	101
  5199  0654  3402               	retlw	2
  5200  0655  3465               	retlw	101
  5201  0656  3402               	retlw	2
  5202  0657  3466               	retlw	102
  5203  0658  3402               	retlw	2
  5204  0659  3467               	retlw	103
  5205  065A  3402               	retlw	2
  5206  065B  3468               	retlw	104
  5207  065C  3402               	retlw	2
  5208  065D  3469               	retlw	105
  5209  065E  3402               	retlw	2
  5210  065F  3469               	retlw	105
  5211  0660  3402               	retlw	2
  5212  0661  346A               	retlw	106
  5213  0662  3402               	retlw	2
  5214  0663  346B               	retlw	107
  5215  0664  3402               	retlw	2
  5216  0665  346C               	retlw	108
  5217  0666  3402               	retlw	2
  5218  0667  346D               	retlw	109
  5219  0668  3402               	retlw	2
  5220  0669  346E               	retlw	110
  5221  066A  3402               	retlw	2
  5222  066B  346E               	retlw	110
  5223  066C  3402               	retlw	2
  5224  066D  346F               	retlw	111
  5225  066E  3402               	retlw	2
  5226  066F  3470               	retlw	112
  5227  0670  3402               	retlw	2
  5228  0671  3471               	retlw	113
  5229  0672  3402               	retlw	2
  5230  0673  3472               	retlw	114
  5231  0674  3402               	retlw	2
  5232  0675  3472               	retlw	114
  5233  0676  3402               	retlw	2
  5234  0677  3473               	retlw	115
  5235  0678  3402               	retlw	2
  5236  0679  3474               	retlw	116
  5237  067A  3402               	retlw	2
  5238  067B  3475               	retlw	117
  5239  067C  3402               	retlw	2
  5240  067D  3476               	retlw	118
  5241  067E  3402               	retlw	2
  5242  067F  3477               	retlw	119
  5243  0680  3402               	retlw	2
  5244  0681  3477               	retlw	119
  5245  0682  3402               	retlw	2
  5246  0683  3478               	retlw	120
  5247  0684  3402               	retlw	2
  5248  0685  3479               	retlw	121
  5249  0686  3402               	retlw	2
  5250  0687  347A               	retlw	122
  5251  0688  3402               	retlw	2
  5252  0689  347B               	retlw	123
  5253  068A  3402               	retlw	2
  5254  068B  347C               	retlw	124
  5255  068C  3402               	retlw	2
  5256  068D  347C               	retlw	124
  5257  068E  3402               	retlw	2
  5258  068F  347D               	retlw	125
  5259  0690  3402               	retlw	2
  5260  0691  347E               	retlw	126
  5261  0692  3402               	retlw	2
  5262  0693  347F               	retlw	127
  5263  0694  3402               	retlw	2
  5264  0695  3480               	retlw	128
  5265  0696  3402               	retlw	2
  5266  0697  3480               	retlw	128
  5267  0698  3402               	retlw	2
  5268  0699  3481               	retlw	129
  5269  069A  3402               	retlw	2
  5270  069B  3482               	retlw	130
  5271  069C  3402               	retlw	2
  5272  069D  3483               	retlw	131
  5273  069E  3402               	retlw	2
  5274  069F  3484               	retlw	132
  5275  06A0  3402               	retlw	2
  5276  06A1  3485               	retlw	133
  5277  06A2  3402               	retlw	2
  5278  06A3  3485               	retlw	133
  5279  06A4  3402               	retlw	2
  5280  06A5  3486               	retlw	134
  5281  06A6  3402               	retlw	2
  5282  06A7  3487               	retlw	135
  5283  06A8  3402               	retlw	2
  5284  06A9  3488               	retlw	136
  5285  06AA  3402               	retlw	2
  5286  06AB  3489               	retlw	137
  5287  06AC  3402               	retlw	2
  5288  06AD  3489               	retlw	137
  5289  06AE  3402               	retlw	2
  5290  06AF  348A               	retlw	138
  5291  06B0  3402               	retlw	2
  5292  06B1  348B               	retlw	139
  5293  06B2  3402               	retlw	2
  5294  06B3  348C               	retlw	140
  5295  06B4  3402               	retlw	2
  5296  06B5  348D               	retlw	141
  5297  06B6  3402               	retlw	2
  5298  06B7  348E               	retlw	142
  5299  06B8  3402               	retlw	2
  5300  06B9  348E               	retlw	142
  5301  06BA  3402               	retlw	2
  5302  06BB  348F               	retlw	143
  5303  06BC  3402               	retlw	2
  5304  06BD  3490               	retlw	144
  5305  06BE  3402               	retlw	2
  5306  06BF  3491               	retlw	145
  5307  06C0  3402               	retlw	2
  5308  06C1  3492               	retlw	146
  5309  06C2  3402               	retlw	2
  5310  06C3  3492               	retlw	146
  5311  06C4  3402               	retlw	2
  5312  06C5  3493               	retlw	147
  5313  06C6  3402               	retlw	2
  5314  06C7  3494               	retlw	148
  5315  06C8  3402               	retlw	2
  5316  06C9  3495               	retlw	149
  5317  06CA  3402               	retlw	2
  5318  06CB  3496               	retlw	150
  5319  06CC  3402               	retlw	2
  5320  06CD  3497               	retlw	151
  5321  06CE  3402               	retlw	2
  5322  06CF  3497               	retlw	151
  5323  06D0  3402               	retlw	2
  5324  06D1  3498               	retlw	152
  5325  06D2  3402               	retlw	2
  5326  06D3  3499               	retlw	153
  5327  06D4  3402               	retlw	2
  5328  06D5  349A               	retlw	154
  5329  06D6  3402               	retlw	2
  5330  06D7  349B               	retlw	155
  5331  06D8  3402               	retlw	2
  5332  06D9  349C               	retlw	156
  5333  06DA  3402               	retlw	2
  5334  06DB  349C               	retlw	156
  5335  06DC  3402               	retlw	2
  5336  06DD  349D               	retlw	157
  5337  06DE  3402               	retlw	2
  5338  06DF  349E               	retlw	158
  5339  06E0  3402               	retlw	2
  5340  06E1  349F               	retlw	159
  5341  06E2  3402               	retlw	2
  5342  06E3  34A0               	retlw	160
  5343  06E4  3402               	retlw	2
  5344  06E5  34A0               	retlw	160
  5345  06E6  3402               	retlw	2
  5346  06E7  34A1               	retlw	161
  5347  06E8  3402               	retlw	2
  5348  06E9  34A2               	retlw	162
  5349  06EA  3402               	retlw	2
  5350  06EB  34A3               	retlw	163
  5351  06EC  3402               	retlw	2
  5352  06ED  34A4               	retlw	164
  5353  06EE  3402               	retlw	2
  5354  06EF  34A5               	retlw	165
  5355  06F0  3402               	retlw	2
  5356  06F1  34A5               	retlw	165
  5357  06F2  3402               	retlw	2
  5358  06F3  34A6               	retlw	166
  5359  06F4  3402               	retlw	2
  5360  06F5  34A7               	retlw	167
  5361  06F6  3402               	retlw	2
  5362  06F7  34A8               	retlw	168
  5363  06F8  3402               	retlw	2
  5364  06F9  34A9               	retlw	169
  5365  06FA  3402               	retlw	2
  5366  06FB  34A9               	retlw	169
  5367  06FC  3402               	retlw	2
  5368  06FD  34AA               	retlw	170
  5369  06FE  3402               	retlw	2
  5370  06FF  34AB               	retlw	171
  5371  0700  3402               	retlw	2
  5372  0701  34AC               	retlw	172
  5373  0702  3402               	retlw	2
  5374  0703  34AD               	retlw	173
  5375  0704  3402               	retlw	2
  5376  0705  34AE               	retlw	174
  5377  0706  3402               	retlw	2
  5378  0707  34AE               	retlw	174
  5379  0708  3402               	retlw	2
  5380  0709  34AF               	retlw	175
  5381  070A  3402               	retlw	2
  5382  070B  34B0               	retlw	176
  5383  070C  3402               	retlw	2
  5384  070D  34B1               	retlw	177
  5385  070E  3402               	retlw	2
  5386  070F  34B2               	retlw	178
  5387  0710  3402               	retlw	2
  5388  0711  34B3               	retlw	179
  5389  0712  3402               	retlw	2
  5390  0713  34B3               	retlw	179
  5391  0714  3402               	retlw	2
  5392  0715  34B4               	retlw	180
  5393  0716  3402               	retlw	2
  5394  0717  34B5               	retlw	181
  5395  0718  3402               	retlw	2
  5396  0719  34B6               	retlw	182
  5397  071A  3402               	retlw	2
  5398  071B  34B7               	retlw	183
  5399  071C  3402               	retlw	2
  5400  071D  34B7               	retlw	183
  5401  071E  3402               	retlw	2
  5402  071F  34B8               	retlw	184
  5403  0720  3402               	retlw	2
  5404  0721  34B9               	retlw	185
  5405  0722  3402               	retlw	2
  5406  0723  34BA               	retlw	186
  5407  0724  3402               	retlw	2
  5408  0725  34BB               	retlw	187
  5409  0726  3402               	retlw	2
  5410  0727  34BC               	retlw	188
  5411  0728  3402               	retlw	2
  5412  0729  34BC               	retlw	188
  5413  072A  3402               	retlw	2
  5414  072B  34BD               	retlw	189
  5415  072C  3402               	retlw	2
  5416  072D  34BE               	retlw	190
  5417  072E  3402               	retlw	2
  5418  072F  34BF               	retlw	191
  5419  0730  3402               	retlw	2
  5420  0731  34C0               	retlw	192
  5421  0732  3402               	retlw	2
  5422  0733  34C0               	retlw	192
  5423  0734  3402               	retlw	2
  5424  0735  34C1               	retlw	193
  5425  0736  3402               	retlw	2
  5426  0737  34C2               	retlw	194
  5427  0738  3402               	retlw	2
  5428  0739  34C3               	retlw	195
  5429  073A  3402               	retlw	2
  5430  073B  34C4               	retlw	196
  5431  073C  3402               	retlw	2
  5432  073D  34C5               	retlw	197
  5433  073E  3402               	retlw	2
  5434  073F  34C5               	retlw	197
  5435  0740  3402               	retlw	2
  5436  0741  34C6               	retlw	198
  5437  0742  3402               	retlw	2
  5438  0743  34C7               	retlw	199
  5439  0744  3402               	retlw	2
  5440  0745  34C8               	retlw	200
  5441  0746  3402               	retlw	2
  5442  0747  34C9               	retlw	201
  5443  0748  3402               	retlw	2
  5444  0749  34CA               	retlw	202
  5445  074A  3402               	retlw	2
  5446  074B  34CA               	retlw	202
  5447  074C  3402               	retlw	2
  5448  074D  34CB               	retlw	203
  5449  074E  3402               	retlw	2
  5450  074F  34CC               	retlw	204
  5451  0750  3402               	retlw	2
  5452  0751  34CD               	retlw	205
  5453  0752  3402               	retlw	2
  5454  0753  34CE               	retlw	206
  5455  0754  3402               	retlw	2
  5456  0755  34CE               	retlw	206
  5457  0756  3402               	retlw	2
  5458  0757  34CF               	retlw	207
  5459  0758  3402               	retlw	2
  5460  0759  34D0               	retlw	208
  5461  075A  3402               	retlw	2
  5462  075B  34D1               	retlw	209
  5463  075C  3402               	retlw	2
  5464  075D  34D2               	retlw	210
  5465  075E  3402               	retlw	2
  5466  075F  34D3               	retlw	211
  5467  0760  3402               	retlw	2
  5468  0761  34D3               	retlw	211
  5469  0762  3402               	retlw	2
  5470  0763  34D4               	retlw	212
  5471  0764  3402               	retlw	2
  5472  0765  34D5               	retlw	213
  5473  0766  3402               	retlw	2
  5474  0767  34D6               	retlw	214
  5475  0768  3402               	retlw	2
  5476  0769  34D7               	retlw	215
  5477  076A  3402               	retlw	2
  5478  076B  34D7               	retlw	215
  5479  076C  3402               	retlw	2
  5480  076D  34D8               	retlw	216
  5481  076E  3402               	retlw	2
  5482  076F  34D9               	retlw	217
  5483  0770  3402               	retlw	2
  5484  0771  34DA               	retlw	218
  5485  0772  3402               	retlw	2
  5486  0773  34DB               	retlw	219
  5487  0774  3402               	retlw	2
  5488  0775  34DC               	retlw	220
  5489  0776  3402               	retlw	2
  5490  0777  34DC               	retlw	220
  5491  0778  3402               	retlw	2
  5492  0779  34DD               	retlw	221
  5493  077A  3402               	retlw	2
  5494  077B  34DE               	retlw	222
  5495  077C  3402               	retlw	2
  5496  077D  34DF               	retlw	223
  5497  077E  3402               	retlw	2
  5498  077F  34E0               	retlw	224
  5499  0780  3402               	retlw	2
  5500  0781  34E1               	retlw	225
  5501  0782  3402               	retlw	2
  5502  0783  34E1               	retlw	225
  5503  0784  3402               	retlw	2
  5504  0785  34E2               	retlw	226
  5505  0786  3402               	retlw	2
  5506  0787  34E3               	retlw	227
  5507  0788  3402               	retlw	2
  5508  0789  34E4               	retlw	228
  5509  078A  3402               	retlw	2
  5510  078B  34E5               	retlw	229
  5511  078C  3402               	retlw	2
  5512  078D  34E5               	retlw	229
  5513  078E  3402               	retlw	2
  5514  078F  34E6               	retlw	230
  5515  0790  3402               	retlw	2
  5516  0791  34E7               	retlw	231
  5517  0792  3402               	retlw	2
  5518  0793  34E8               	retlw	232
  5519  0794  3402               	retlw	2
  5520  0795  34E9               	retlw	233
  5521  0796  3402               	retlw	2
  5522  0797  34EA               	retlw	234
  5523  0798  3402               	retlw	2
  5524  0799  34EA               	retlw	234
  5525  079A  3402               	retlw	2
  5526  079B  34EB               	retlw	235
  5527  079C  3402               	retlw	2
  5528  079D  34EC               	retlw	236
  5529  079E  3402               	retlw	2
  5530  079F  34ED               	retlw	237
  5531  07A0  3402               	retlw	2
  5532  07A1  34EE               	retlw	238
  5533  07A2  3402               	retlw	2
  5534  07A3  34EE               	retlw	238
  5535  07A4  3402               	retlw	2
  5536  07A5  34EF               	retlw	239
  5537  07A6  3402               	retlw	2
  5538  07A7  34F0               	retlw	240
  5539  07A8  3402               	retlw	2
  5540  07A9  34F1               	retlw	241
  5541  07AA  3402               	retlw	2
  5542  07AB  34F2               	retlw	242
  5543  07AC  3402               	retlw	2
  5544  07AD  34F3               	retlw	243
  5545  07AE  3402               	retlw	2
  5546  07AF  34F3               	retlw	243
  5547  07B0  3402               	retlw	2
  5548  07B1  34F4               	retlw	244
  5549  07B2  3402               	retlw	2
  5550  07B3  34F5               	retlw	245
  5551  07B4  3402               	retlw	2
  5552  07B5  34F6               	retlw	246
  5553  07B6  3402               	retlw	2
  5554  07B7  34F7               	retlw	247
  5555  07B8  3402               	retlw	2
  5556  07B9  34F7               	retlw	247
  5557  07BA  3402               	retlw	2
  5558  07BB  34F8               	retlw	248
  5559  07BC  3402               	retlw	2
  5560  07BD  34F9               	retlw	249
  5561  07BE  3402               	retlw	2
  5562  07BF  34FA               	retlw	250
  5563  07C0  3402               	retlw	2
  5564  07C1  34FB               	retlw	251
  5565  07C2  3402               	retlw	2
  5566  07C3  34FC               	retlw	252
  5567  07C4  3402               	retlw	2
  5568  07C5  34FC               	retlw	252
  5569  07C6  3402               	retlw	2
  5570  07C7  34FD               	retlw	253
  5571  07C8  3402               	retlw	2
  5572  07C9  34FE               	retlw	254
  5573  07CA  3402               	retlw	2
  5574  07CB  34FF               	retlw	255
  5575  07CC  3402               	retlw	2
  5576  07CD  3400               	retlw	0
  5577  07CE  3403               	retlw	3
  5578  07CF  3401               	retlw	1
  5579  07D0  3403               	retlw	3
  5580  07D1  3401               	retlw	1
  5581  07D2  3403               	retlw	3
  5582  07D3  3402               	retlw	2
  5583  07D4  3403               	retlw	3
  5584  07D5  3403               	retlw	3
  5585  07D6  3403               	retlw	3
  5586  07D7  3404               	retlw	4
  5587  07D8  3403               	retlw	3
  5588  07D9  3405               	retlw	5
  5589  07DA  3403               	retlw	3
  5590  07DB  3405               	retlw	5
  5591  07DC  3403               	retlw	3
  5592  07DD  3406               	retlw	6
  5593  07DE  3403               	retlw	3
  5594  07DF  3407               	retlw	7
  5595  07E0  3403               	retlw	3
  5596  07E1  3408               	retlw	8
  5597  07E2  3403               	retlw	3
  5598  07E3  3409               	retlw	9
  5599  07E4  3403               	retlw	3
  5600  07E5  340A               	retlw	10
  5601  07E6  3403               	retlw	3
  5602  07E7  340A               	retlw	10
  5603  07E8  3403               	retlw	3
  5604  07E9  340B               	retlw	11
  5605  07EA  3403               	retlw	3
  5606  07EB  340C               	retlw	12
  5607  07EC  3403               	retlw	3
  5608  07ED  340D               	retlw	13
  5609  07EE  3403               	retlw	3
  5610  07EF  340E               	retlw	14
  5611  07F0  3403               	retlw	3
  5612  07F1  340E               	retlw	14
  5613  07F2  3403               	retlw	3
  5614  07F3  340F               	retlw	15
  5615  07F4  3403               	retlw	3
  5616  07F5  3410               	retlw	16
  5617  07F6  3403               	retlw	3
  5618  07F7  3411               	retlw	17
  5619  07F8  3403               	retlw	3
  5620  07F9  3412               	retlw	18
  5621  07FA  3403               	retlw	3
  5622  07FB  3413               	retlw	19
  5623  07FC  3403               	retlw	3
  5624  07FD  3413               	retlw	19
  5625  07FE  3403               	retlw	3
  5626  07FF  3414               	retlw	20
  5627  0800  3403               	retlw	3
  5628  0801  3415               	retlw	21
  5629  0802  3403               	retlw	3
  5630  0803  3416               	retlw	22
  5631  0804  3403               	retlw	3
  5632  0805  3417               	retlw	23
  5633  0806  3403               	retlw	3
  5634  0807  3418               	retlw	24
  5635  0808  3403               	retlw	3
  5636  0809  3418               	retlw	24
  5637  080A  3403               	retlw	3
  5638  080B  3419               	retlw	25
  5639  080C  3403               	retlw	3
  5640  080D  341A               	retlw	26
  5641  080E  3403               	retlw	3
  5642  080F  341B               	retlw	27
  5643  0810  3403               	retlw	3
  5644  0811  341C               	retlw	28
  5645  0812  3403               	retlw	3
  5646  0813  341C               	retlw	28
  5647  0814  3403               	retlw	3
  5648  0815  341D               	retlw	29
  5649  0816  3403               	retlw	3
  5650  0817  341E               	retlw	30
  5651  0818  3403               	retlw	3
  5652  0819  341F               	retlw	31
  5653  081A  3403               	retlw	3
  5654  081B  3420               	retlw	32
  5655  081C  3403               	retlw	3
  5656  081D  3421               	retlw	33
  5657  081E  3403               	retlw	3
  5658  081F  3421               	retlw	33
  5659  0820  3403               	retlw	3
  5660  0821  3422               	retlw	34
  5661  0822  3403               	retlw	3
  5662  0823  3423               	retlw	35
  5663  0824  3403               	retlw	3
  5664  0825  3424               	retlw	36
  5665  0826  3403               	retlw	3
  5666  0827  3425               	retlw	37
  5667  0828  3403               	retlw	3
  5668  0829  3425               	retlw	37
  5669  082A  3403               	retlw	3
  5670  082B  3426               	retlw	38
  5671  082C  3403               	retlw	3
  5672  082D  3427               	retlw	39
  5673  082E  3403               	retlw	3
  5674  082F  3428               	retlw	40
  5675  0830  3403               	retlw	3
  5676  0831  3429               	retlw	41
  5677  0832  3403               	retlw	3
  5678  0833  342A               	retlw	42
  5679  0834  3403               	retlw	3
  5680  0835  342A               	retlw	42
  5681  0836  3403               	retlw	3
  5682  0837  342B               	retlw	43
  5683  0838  3403               	retlw	3
  5684  0839  342C               	retlw	44
  5685  083A  3403               	retlw	3
  5686  083B  342D               	retlw	45
  5687  083C  3403               	retlw	3
  5688  083D  342E               	retlw	46
  5689  083E  3403               	retlw	3
  5690  083F  342F               	retlw	47
  5691  0840  3403               	retlw	3
  5692  0841  342F               	retlw	47
  5693  0842  3403               	retlw	3
  5694  0843  3430               	retlw	48
  5695  0844  3403               	retlw	3
  5696  0845  3431               	retlw	49
  5697  0846  3403               	retlw	3
  5698  0847  3432               	retlw	50
  5699  0848  3403               	retlw	3
  5700  0849  3433               	retlw	51
  5701  084A  3403               	retlw	3
  5702  084B  3433               	retlw	51
  5703  084C  3403               	retlw	3
  5704  084D  3434               	retlw	52
  5705  084E  3403               	retlw	3
  5706  084F  3435               	retlw	53
  5707  0850  3403               	retlw	3
  5708  0851  3436               	retlw	54
  5709  0852  3403               	retlw	3
  5710  0853  3437               	retlw	55
  5711  0854  3403               	retlw	3
  5712  0855  3438               	retlw	56
  5713  0856  3403               	retlw	3
  5714  0857  3438               	retlw	56
  5715  0858  3403               	retlw	3
  5716  0859  3439               	retlw	57
  5717  085A  3403               	retlw	3
  5718  085B  343A               	retlw	58
  5719  085C  3403               	retlw	3
  5720  085D  343B               	retlw	59
  5721  085E  3403               	retlw	3
  5722  085F  343C               	retlw	60
  5723  0860  3403               	retlw	3
  5724  0861  343C               	retlw	60
  5725  0862  3403               	retlw	3
  5726  0863  343D               	retlw	61
  5727  0864  3403               	retlw	3
  5728  0865  343E               	retlw	62
  5729  0866  3403               	retlw	3
  5730  0867  343F               	retlw	63
  5731  0868  3403               	retlw	3
  5732  0869  3440               	retlw	64
  5733  086A  3403               	retlw	3
  5734  086B  3441               	retlw	65
  5735  086C  3403               	retlw	3
  5736  086D  3441               	retlw	65
  5737  086E  3403               	retlw	3
  5738  086F  3442               	retlw	66
  5739  0870  3403               	retlw	3
  5740  0871  3443               	retlw	67
  5741  0872  3403               	retlw	3
  5742  0873  3444               	retlw	68
  5743  0874  3403               	retlw	3
  5744  0875  3445               	retlw	69
  5745  0876  3403               	retlw	3
  5746  0877  3445               	retlw	69
  5747  0878  3403               	retlw	3
  5748  0879  3446               	retlw	70
  5749  087A  3403               	retlw	3
  5750  087B  3447               	retlw	71
  5751  087C  3403               	retlw	3
  5752  087D  3448               	retlw	72
  5753  087E  3403               	retlw	3
  5754  087F                     __end_of_v_table:	
  5755                           
  5756                           	psect	stringtext2
  5757  18B3                     __pstringtext2:	
  5758  18B3                     _invalid_arg:	
  5759  18B3  3445               	retlw	69
  5760  18B4  3472               	retlw	114
  5761  18B5  3472               	retlw	114
  5762  18B6  346F               	retlw	111
  5763  18B7  3472               	retlw	114
  5764  18B8  343A               	retlw	58
  5765  18B9  3420               	retlw	32
  5766  18BA  3469               	retlw	105
  5767  18BB  346E               	retlw	110
  5768  18BC  3476               	retlw	118
  5769  18BD  3461               	retlw	97
  5770  18BE  346C               	retlw	108
  5771  18BF  3469               	retlw	105
  5772  18C0  3464               	retlw	100
  5773  18C1  3420               	retlw	32
  5774  18C2  3461               	retlw	97
  5775  18C3  3472               	retlw	114
  5776  18C4  3467               	retlw	103
  5777  18C5  342E               	retlw	46
  5778  18C6  340D               	retlw	13
  5779  18C7  340A               	retlw	10
  5780  18C8  3400               	retlw	0
  5781  18C9                     __end_of_invalid_arg:	
  5782                           
  5783                           	psect	stringtext3
  5784  18C9                     __pstringtext3:	
  5785  18C9                     _invalid_com:	
  5786  18C9  3445               	retlw	69
  5787  18CA  3472               	retlw	114
  5788  18CB  3472               	retlw	114
  5789  18CC  346F               	retlw	111
  5790  18CD  3472               	retlw	114
  5791  18CE  343A               	retlw	58
  5792  18CF  3420               	retlw	32
  5793  18D0  3469               	retlw	105
  5794  18D1  346E               	retlw	110
  5795  18D2  3476               	retlw	118
  5796  18D3  3461               	retlw	97
  5797  18D4  346C               	retlw	108
  5798  18D5  3469               	retlw	105
  5799  18D6  3464               	retlw	100
  5800  18D7  3420               	retlw	32
  5801  18D8  3463               	retlw	99
  5802  18D9  346F               	retlw	111
  5803  18DA  346D               	retlw	109
  5804  18DB  342E               	retlw	46
  5805  18DC  340D               	retlw	13
  5806  18DD  340A               	retlw	10
  5807  18DE  3400               	retlw	0
  5808  18DF                     __end_of_invalid_com:	
  5809                           
  5810                           	psect	stringtext4
  5811  1958                     __pstringtext4:	
  5812  1958                     _duty_inc:	
  5813  1958  3408               	retlw	8
  5814  1959  3400               	retlw	0
  5815  195A                     __end_of_duty_inc:	
  5816                           
  5817                           	psect	stringtext5
  5818  195A                     __pstringtext5:	
  5819  195A                     _duty_pwm_inc:	
  5820  195A  3408               	retlw	8
  5821  195B  3400               	retlw	0
  5822  195C                     __end_of_duty_pwm_inc:	
  5823                           
  5824                           	psect	nvBANK2
  5825  015E                     __pnvBANK2:	
  5826  015E                     _TMR1_InterruptHandler:	
  5827  015E                     	ds	2
  5828  0160                     _timer1ReloadVal:	
  5829  0160                     	ds	2
  5830  0162                     _ADC_InterruptHandler:	
  5831  0162                     	ds	2
  5832  0164                     _TMR2_InterruptHandler:	
  5833  0164                     	ds	2
  5834  0166                     _EUSART_OverrunErrorHandler:	
  5835  0166                     	ds	2
  5836  0168                     _EUSART_FramingErrorHandler:	
  5837  0168                     	ds	2
  5838  016A                     _EUSART_RxDefaultInterruptHandler:	
  5839  016A                     	ds	2
  5840                           
  5841                           	psect	nvBANK3
  5842  01CC                     __pnvBANK3:	
  5843  01CC                     _EUSART_ErrorHandler:	
  5844  01CC                     	ds	2
  5845  0018                     _T1CONbits	set	24
  5846  0018                     _T1CON	set	24
  5847  0016                     _TMR1L	set	22
  5848  0017                     _TMR1H	set	23
  5849  0019                     _T1GCON	set	25
  5850  0012                     _PIR2bits	set	18
  5851  001C                     _T2CONbits	set	28
  5852  001C                     _T2CON	set	28
  5853  001A                     _TMR2	set	26
  5854  001B                     _PR2	set	27
  5855  000B                     _INTCONbits	set	11
  5856  0011                     _PIR1bits	set	17
  5857  008C                     _TRISAbits	set	140
  5858  0095                     _OPTION_REGbits	set	149
  5859  008E                     _TRISC	set	142
  5860  008C                     _TRISA	set	140
  5861  0097                     _WDTCON	set	151
  5862  0098                     _OSCTUNE	set	152
  5863  009A                     _OSCSTAT	set	154
  5864  0099                     _OSCCON	set	153
  5865  009D                     _ADCON0bits	set	157
  5866  009C                     _ADRESH	set	156
  5867  009B                     _ADRESL	set	155
  5868  009F                     _ADCON2	set	159
  5869  009E                     _ADCON1	set	158
  5870  009D                     _ADCON0	set	157
  5871  0091                     _PIE1bits	set	145
  5872  010E                     _LATCbits	set	270
  5873  010C                     _LATAbits	set	268
  5874  010E                     _LATC	set	270
  5875  010C                     _LATA	set	268
  5876  0116                     _BORCON	set	278
  5877  018C                     _ANSELA	set	396
  5878  018E                     _ANSELC	set	398
  5879  0196                     _PMCON2	set	406
  5880  0193                     _PMDATL	set	403
  5881  0194                     _PMDATH	set	404
  5882  0195                     _PMCON1bits	set	405
  5883  0192                     _PMADRH	set	402
  5884  0191                     _PMADRL	set	401
  5885  0199                     _RC1REG	set	409
  5886  019D                     _RC1STAbits	set	413
  5887  019A                     _TX1REG	set	410
  5888  019E                     _TX1STAbits	set	414
  5889  019C                     _SP1BRGH	set	412
  5890  019B                     _SP1BRGL	set	411
  5891  019E                     _TX1STA	set	414
  5892  019D                     _RC1STA	set	413
  5893  019F                     _BAUD1CON	set	415
  5894  020E                     _WPUC	set	526
  5895  020C                     _WPUA	set	524
  5896  028E                     _ODCONC	set	654
  5897  028C                     _ODCONA	set	652
  5898  029E                     _CCPTMRSbits	set	670
  5899  030E                     _SLRCONC	set	782
  5900  030C                     _SLRCONA	set	780
  5901  038E                     _INLVLC	set	910
  5902  038C                     _INLVLA	set	908
  5903  0417                     _T4CON	set	1047
  5904  0415                     _TMR4	set	1045
  5905  0416                     _PR4	set	1046
  5906  0617                     _PWM3DCL	set	1559
  5907  0618                     _PWM3DCH	set	1560
  5908  0619                     _PWM3CON	set	1561
  5909  0E24                     _RXPPS	set	3620
  5910  0EA2                     _RC2PPS	set	3746
  5911  0EA1                     _RC1PPS	set	3745
  5912  0EA0                     _RC0PPS	set	3744
  5913                           
  5914                           	psect	stringtext6
  5915  1800                     __pstringtext6:	
  5916  1800                     STR_14:	
  5917  1800  3420               	retlw	32	;' '
  5918  1801  3420               	retlw	32	;' '
  5919  1802  344E               	retlw	78	;'N'
  5920  1803  344E               	retlw	78	;'N'
  5921  1804  344E               	retlw	78	;'N'
  5922  1805  344E               	retlw	78	;'N'
  5923  1806  343A               	retlw	58	;':'
  5924  1807  3420               	retlw	32	;' '
  5925  1808  346E               	retlw	110	;'n'
  5926  1809  3475               	retlw	117	;'u'
  5927  180A  346D               	retlw	109	;'m'
  5928  180B  3462               	retlw	98	;'b'
  5929  180C  3465               	retlw	101	;'e'
  5930  180D  3472               	retlw	114	;'r'
  5931  180E  3420               	retlw	32	;' '
  5932  180F  3466               	retlw	102	;'f'
  5933  1810  3472               	retlw	114	;'r'
  5934  1811  346F               	retlw	111	;'o'
  5935  1812  346D               	retlw	109	;'m'
  5936  1813  3420               	retlw	32	;' '
  5937  1814  3430               	retlw	48	;'0'
  5938  1815  3420               	retlw	32	;' '
  5939  1816  3474               	retlw	116	;'t'
  5940  1817  346F               	retlw	111	;'o'
  5941  1818  3420               	retlw	32	;' '
  5942  1819  3439               	retlw	57	;'9'
  5943  181A  3439               	retlw	57	;'9'
  5944  181B  3439               	retlw	57	;'9'
  5945  181C  3439               	retlw	57	;'9'
  5946  181D  340D               	retlw	13
  5947  181E  340A               	retlw	10
  5948  181F  340D               	retlw	13
  5949  1820  340A               	retlw	10
  5950  1821  3400               	retlw	0
  5951                           
  5952                           	psect	stringtext7
  5953  1822                     __pstringtext7:	
  5954  1822                     STR_8:	
  5955  1822  3445               	retlw	69	;'E'
  5956  1823  3452               	retlw	82	;'R'
  5957  1824  3452               	retlw	82	;'R'
  5958  1825  344F               	retlw	79	;'O'
  5959  1826  3452               	retlw	82	;'R'
  5960  1827  343A               	retlw	58	;':'
  5961  1828  3420               	retlw	32	;' '
  5962  1829  3469               	retlw	105	;'i'
  5963  182A  346E               	retlw	110	;'n'
  5964  182B  3476               	retlw	118	;'v'
  5965  182C  3461               	retlw	97	;'a'
  5966  182D  346C               	retlw	108	;'l'
  5967  182E  3469               	retlw	105	;'i'
  5968  182F  3464               	retlw	100	;'d'
  5969  1830  3420               	retlw	32	;' '
  5970  1831  3473               	retlw	115	;'s'
  5971  1832  3479               	retlw	121	;'y'
  5972  1833  346E               	retlw	110	;'n'
  5973  1834  3474               	retlw	116	;'t'
  5974  1835  3461               	retlw	97	;'a'
  5975  1836  3478               	retlw	120	;'x'
  5976  1837  342E               	retlw	46	;'.'
  5977  1838  340D               	retlw	13
  5978  1839  340A               	retlw	10
  5979  183A  3400               	retlw	0
  5980                           
  5981                           	psect	stringtext8
  5982  183B                     __pstringtext8:	
  5983  183B                     STR_19:	
  5984  183B  3420               	retlw	32	;' '
  5985  183C  3420               	retlw	32	;' '
  5986  183D  3449               	retlw	73	;'I'
  5987  183E  343A               	retlw	58	;':'
  5988  183F  3420               	retlw	32	;' '
  5989  1840  3470               	retlw	112	;'p'
  5990  1841  3472               	retlw	114	;'r'
  5991  1842  3469               	retlw	105	;'i'
  5992  1843  346E               	retlw	110	;'n'
  5993  1844  3474               	retlw	116	;'t'
  5994  1845  3420               	retlw	32	;' '
  5995  1846  3473               	retlw	115	;'s'
  5996  1847  3479               	retlw	121	;'y'
  5997  1848  3473               	retlw	115	;'s'
  5998  1849  3474               	retlw	116	;'t'
  5999  184A  3465               	retlw	101	;'e'
  6000  184B  346D               	retlw	109	;'m'
  6001  184C  3420               	retlw	32	;' '
  6002  184D  3449               	retlw	73	;'I'
  6003  184E  344E               	retlw	78	;'N'
  6004  184F  3446               	retlw	70	;'F'
  6005  1850  344F               	retlw	79	;'O'
  6006  1851  340D               	retlw	13
  6007  1852  340A               	retlw	10
  6008  1853  3400               	retlw	0
  6009                           
  6010                           	psect	stringtext9
  6011  1854                     __pstringtext9:	
  6012  1854                     STR_20:	
  6013  1854  3420               	retlw	32	;' '
  6014  1855  3420               	retlw	32	;' '
  6015  1856  343F               	retlw	63	;'?'
  6016  1857  343A               	retlw	58	;':'
  6017  1858  3420               	retlw	32	;' '
  6018  1859  3470               	retlw	112	;'p'
  6019  185A  3472               	retlw	114	;'r'
  6020  185B  3469               	retlw	105	;'i'
  6021  185C  346E               	retlw	110	;'n'
  6022  185D  3474               	retlw	116	;'t'
  6023  185E  3420               	retlw	32	;' '
  6024  185F  3474               	retlw	116	;'t'
  6025  1860  3468               	retlw	104	;'h'
  6026  1861  3469               	retlw	105	;'i'
  6027  1862  3473               	retlw	115	;'s'
  6028  1863  3420               	retlw	32	;' '
  6029  1864  3473               	retlw	115	;'s'
  6030  1865  3463               	retlw	99	;'c'
  6031  1866  3472               	retlw	114	;'r'
  6032  1867  3465               	retlw	101	;'e'
  6033  1868  3465               	retlw	101	;'e'
  6034  1869  346E               	retlw	110	;'n'
  6035  186A  340D               	retlw	13
  6036  186B  340A               	retlw	10
  6037  186C  3400               	retlw	0
  6038                           
  6039                           	psect	stringtext10
  6040  186D                     __pstringtext10:	
  6041  186D                     STR_17:	
  6042  186D  3420               	retlw	32	;' '
  6043  186E  3420               	retlw	32	;' '
  6044  186F  3448               	retlw	72	;'H'
  6045  1870  343A               	retlw	58	;':'
  6046  1871  3420               	retlw	32	;' '
  6047  1872  3473               	retlw	115	;'s'
  6048  1873  3465               	retlw	101	;'e'
  6049  1874  3474               	retlw	116	;'t'
  6050  1875  3420               	retlw	32	;' '
  6051  1876  3448               	retlw	72	;'H'
  6052  1877  3449               	retlw	73	;'I'
  6053  1878  3447               	retlw	71	;'G'
  6054  1879  3448               	retlw	72	;'H'
  6055  187A  3420               	retlw	32	;' '
  6056  187B  3476               	retlw	118	;'v'
  6057  187C  346F               	retlw	111	;'o'
  6058  187D  346C               	retlw	108	;'l'
  6059  187E  3474               	retlw	116	;'t'
  6060  187F  3461               	retlw	97	;'a'
  6061  1880  3467               	retlw	103	;'g'
  6062  1881  3465               	retlw	101	;'e'
  6063  1882  340D               	retlw	13
  6064  1883  340A               	retlw	10
  6065  1884  3400               	retlw	0
  6066                           
  6067                           	psect	stringtext11
  6068  1885                     __pstringtext11:	
  6069  1885                     STR_10:	
  6070  1885  340D               	retlw	13
  6071  1886  340A               	retlw	10
  6072  1887  340D               	retlw	13
  6073  1888  340A               	retlw	10
  6074  1889  342D               	retlw	45	;'-'
  6075  188A  342D               	retlw	45	;'-'
  6076  188B  342D               	retlw	45	;'-'
  6077  188C  342D               	retlw	45	;'-'
  6078  188D  342D               	retlw	45	;'-'
  6079  188E  342D               	retlw	45	;'-'
  6080  188F  342D               	retlw	45	;'-'
  6081  1890  342D               	retlw	45	;'-'
  6082  1891  342D               	retlw	45	;'-'
  6083  1892  342D               	retlw	45	;'-'
  6084  1893  342D               	retlw	45	;'-'
  6085  1894  342D               	retlw	45	;'-'
  6086  1895  342D               	retlw	45	;'-'
  6087  1896  342D               	retlw	45	;'-'
  6088  1897  342D               	retlw	45	;'-'
  6089  1898  342D               	retlw	45	;'-'
  6090  1899  340D               	retlw	13
  6091  189A  340A               	retlw	10
  6092  189B  3400               	retlw	0
  6093                           
  6094                           	psect	stringtext12
  6095  189C                     __pstringtext12:	
  6096  189C                     STR_16:	
  6097  189C  3420               	retlw	32	;' '
  6098  189D  3420               	retlw	32	;' '
  6099  189E  344C               	retlw	76	;'L'
  6100  189F  343A               	retlw	58	;':'
  6101  18A0  3420               	retlw	32	;' '
  6102  18A1  3473               	retlw	115	;'s'
  6103  18A2  3465               	retlw	101	;'e'
  6104  18A3  3474               	retlw	116	;'t'
  6105  18A4  3420               	retlw	32	;' '
  6106  18A5  344C               	retlw	76	;'L'
  6107  18A6  344F               	retlw	79	;'O'
  6108  18A7  3457               	retlw	87	;'W'
  6109  18A8  3420               	retlw	32	;' '
  6110  18A9  3476               	retlw	118	;'v'
  6111  18AA  346F               	retlw	111	;'o'
  6112  18AB  346C               	retlw	108	;'l'
  6113  18AC  3474               	retlw	116	;'t'
  6114  18AD  3461               	retlw	97	;'a'
  6115  18AE  3467               	retlw	103	;'g'
  6116  18AF  3465               	retlw	101	;'e'
  6117  18B0  340D               	retlw	13
  6118  18B1  340A               	retlw	10
  6119  18B2  3400               	retlw	0
  6120                           
  6121                           	psect	stringtext13
  6122  18DF                     __pstringtext13:	
  6123  18DF                     STR_15:	
  6124  18DF  3441               	retlw	65	;'A'
  6125  18E0  3476               	retlw	118	;'v'
  6126  18E1  3461               	retlw	97	;'a'
  6127  18E2  3469               	retlw	105	;'i'
  6128  18E3  346C               	retlw	108	;'l'
  6129  18E4  3461               	retlw	97	;'a'
  6130  18E5  3462               	retlw	98	;'b'
  6131  18E6  346C               	retlw	108	;'l'
  6132  18E7  3465               	retlw	101	;'e'
  6133  18E8  3420               	retlw	32	;' '
  6134  18E9  3443               	retlw	67	;'C'
  6135  18EA  346F               	retlw	111	;'o'
  6136  18EB  346D               	retlw	109	;'m'
  6137  18EC  346D               	retlw	109	;'m'
  6138  18ED  3461               	retlw	97	;'a'
  6139  18EE  346E               	retlw	110	;'n'
  6140  18EF  3464               	retlw	100	;'d'
  6141  18F0  3473               	retlw	115	;'s'
  6142  18F1  343A               	retlw	58	;':'
  6143  18F2  340D               	retlw	13
  6144  18F3  340A               	retlw	10
  6145  18F4  3400               	retlw	0
  6146                           
  6147                           	psect	stringtext14
  6148  18F5                     __pstringtext14:	
  6149  18F5                     STR_18:	
  6150  18F5  3420               	retlw	32	;' '
  6151  18F6  3420               	retlw	32	;' '
  6152  18F7  3454               	retlw	84	;'T'
  6153  18F8  343A               	retlw	58	;':'
  6154  18F9  3420               	retlw	32	;' '
  6155  18FA  3473               	retlw	115	;'s'
  6156  18FB  3465               	retlw	101	;'e'
  6157  18FC  3474               	retlw	116	;'t'
  6158  18FD  3420               	retlw	32	;' '
  6159  18FE  3464               	retlw	100	;'d'
  6160  18FF  3465               	retlw	101	;'e'
  6161  1900  346C               	retlw	108	;'l'
  6162  1901  3461               	retlw	97	;'a'
  6163  1902  3479               	retlw	121	;'y'
  6164  1903  3420               	retlw	32	;' '
  6165  1904  3454               	retlw	84	;'T'
  6166  1905  3449               	retlw	73	;'I'
  6167  1906  344D               	retlw	77	;'M'
  6168  1907  3445               	retlw	69	;'E'
  6169  1908  340D               	retlw	13
  6170  1909  340A               	retlw	10
  6171  190A  3400               	retlw	0
  6172                           
  6173                           	psect	stringtext15
  6174  190B                     __pstringtext15:	
  6175  190B                     STR_11:	
  6176  190B  3420               	retlw	32	;' '
  6177  190C  3420               	retlw	32	;' '
  6178  190D  3448               	retlw	72	;'H'
  6179  190E  3465               	retlw	101	;'e'
  6180  190F  346C               	retlw	108	;'l'
  6181  1910  3470               	retlw	112	;'p'
  6182  1911  3420               	retlw	32	;' '
  6183  1912  3453               	retlw	83	;'S'
  6184  1913  3463               	retlw	99	;'c'
  6185  1914  3472               	retlw	114	;'r'
  6186  1915  3465               	retlw	101	;'e'
  6187  1916  3465               	retlw	101	;'e'
  6188  1917  346E               	retlw	110	;'n'
  6189  1918  340D               	retlw	13
  6190  1919  340A               	retlw	10
  6191  191A  340D               	retlw	13
  6192  191B  340A               	retlw	10
  6193  191C  3400               	retlw	0
  6194                           
  6195                           	psect	stringtext16
  6196  191D                     __pstringtext16:	
  6197  191D                     STR_12:	
  6198  191D  3453               	retlw	83	;'S'
  6199  191E  3479               	retlw	121	;'y'
  6200  191F  346E               	retlw	110	;'n'
  6201  1920  3474               	retlw	116	;'t'
  6202  1921  3461               	retlw	97	;'a'
  6203  1922  3478               	retlw	120	;'x'
  6204  1923  343A               	retlw	58	;':'
  6205  1924  3420               	retlw	32	;' '
  6206  1925  3443               	retlw	67	;'C'
  6207  1926  344E               	retlw	78	;'N'
  6208  1927  344E               	retlw	78	;'N'
  6209  1928  344E               	retlw	78	;'N'
  6210  1929  344E               	retlw	78	;'N'
  6211  192A  340D               	retlw	13
  6212  192B  340A               	retlw	10
  6213  192C  3400               	retlw	0
  6214                           
  6215                           	psect	stringtext17
  6216  192D                     __pstringtext17:	
  6217  192D                     STR_13:	
  6218  192D  3420               	retlw	32	;' '
  6219  192E  3420               	retlw	32	;' '
  6220  192F  3443               	retlw	67	;'C'
  6221  1930  343A               	retlw	58	;':'
  6222  1931  3420               	retlw	32	;' '
  6223  1932  3463               	retlw	99	;'c'
  6224  1933  346F               	retlw	111	;'o'
  6225  1934  346D               	retlw	109	;'m'
  6226  1935  346D               	retlw	109	;'m'
  6227  1936  3461               	retlw	97	;'a'
  6228  1937  346E               	retlw	110	;'n'
  6229  1938  3464               	retlw	100	;'d'
  6230  1939  340D               	retlw	13
  6231  193A  340A               	retlw	10
  6232  193B  3400               	retlw	0
  6233                           
  6234                           	psect	stringtext18
  6235  193C                     __pstringtext18:	
  6236  193C                     STR_2:	
  6237  193C  3420               	retlw	32	;' '
  6238  193D  3420               	retlw	32	;' '
  6239  193E  3448               	retlw	72	;'H'
  6240  193F  343A               	retlw	58	;':'
  6241  1940  3420               	retlw	32	;' '
  6242  1941  3400               	retlw	0
  6243                           
  6244                           	psect	stringtext19
  6245  1942                     __pstringtext19:	
  6246  1942                     STR_4:	
  6247  1942  3420               	retlw	32	;' '
  6248  1943  3420               	retlw	32	;' '
  6249  1944  344C               	retlw	76	;'L'
  6250  1945  343A               	retlw	58	;':'
  6251  1946  3420               	retlw	32	;' '
  6252  1947  3400               	retlw	0
  6253                           
  6254                           	psect	stringtext20
  6255  1948                     __pstringtext20:	
  6256  1948                     STR_6:	
  6257  1948  3420               	retlw	32	;' '
  6258  1949  3420               	retlw	32	;' '
  6259  194A  3454               	retlw	84	;'T'
  6260  194B  343A               	retlw	58	;':'
  6261  194C  3420               	retlw	32	;' '
  6262  194D  3400               	retlw	0
  6263                           
  6264                           	psect	stringtext21
  6265  194E                     __pstringtext21:	
  6266  194E                     STR_9:	
  6267  194E  344F               	retlw	79	;'O'
  6268  194F  344B               	retlw	75	;'K'
  6269  1950  340D               	retlw	13
  6270  1951  340A               	retlw	10
  6271  1952  3400               	retlw	0
  6272                           
  6273                           	psect	stringtext22
  6274  1953                     __pstringtext22:	
  6275  1953                     STR_1:	
  6276  1953  343E               	retlw	62	;'>'
  6277  1954  343E               	retlw	62	;'>'
  6278  1955  3420               	retlw	32	;' '
  6279  1956  3420               	retlw	32	;' '
  6280  1957  3400               	retlw	0
  6281                           
  6282                           	psect	stringtext23
  6283  0000                     __pstringtext23:	
  6284  181F                     
  6285                           ; #config settings
  6286  0000                     
  6287                           	psect	cinit
  6288  0036                     start_initialization:	
  6289  0036                     __initialization:	
  6290                           
  6291                           ; Initialize objects allocated to BANK0
  6292  0036  3180  2002  3180   	fcall	__pidataBANK0	;fetch initializer
  6293  0039  00DF               	movwf	__pdataBANK0& (0+127)
  6294  003A  3180  2003  3180   	fcall	__pidataBANK0+1	;fetch initializer
  6295  003D  00E0               	movwf	(__pdataBANK0+1)& (0+127)
  6296                           
  6297                           ; Initialize objects allocated to BANK1
  6298  003E  0021               	movlb	1	; select bank1
  6299  003F  3193  235B  3180   	fcall	__pidataBANK1	;fetch initializer
  6300  0042  00EC               	movwf	__pdataBANK1& (0+127)
  6301  0043  3193  235C  3180   	fcall	__pidataBANK1+1	;fetch initializer
  6302  0046  00ED               	movwf	(__pdataBANK1+1)& (0+127)
  6303  0047  3193  235D  3180   	fcall	__pidataBANK1+2	;fetch initializer
  6304  004A  00EE               	movwf	(__pdataBANK1+2)& (0+127)
  6305                           
  6306                           ; Initialize objects allocated to BANK2
  6307  004B  0022               	movlb	2	; select bank2
  6308  004C  3193  236A  3180   	fcall	__pidataBANK2	;fetch initializer
  6309  004F  00EC               	movwf	__pdataBANK2& (0+127)
  6310  0050  3193  236B  3180   	fcall	__pidataBANK2+1	;fetch initializer
  6311  0053  00ED               	movwf	(__pdataBANK2+1)& (0+127)
  6312  0054  3193  236C  3180   	fcall	__pidataBANK2+2	;fetch initializer
  6313  0057  00EE               	movwf	(__pdataBANK2+2)& (0+127)
  6314  0058  3193  236D  3180   	fcall	__pidataBANK2+3	;fetch initializer
  6315  005B  00EF               	movwf	(__pdataBANK2+3)& (0+127)
  6316                           
  6317                           ; Clear objects allocated to BANK0
  6318  005C  3020               	movlw	low __pbssBANK0
  6319  005D  0084               	movwf	4
  6320  005E  3000               	movlw	high __pbssBANK0
  6321  005F  0085               	movwf	5
  6322  0060  3024               	movlw	36
  6323  0061  3193  239B  3180   	fcall	clear_ram0
  6324                           
  6325                           ; Clear objects allocated to BANK1
  6326  0064  30E4               	movlw	low __pbssBANK1
  6327  0065  0084               	movwf	4
  6328  0066  3000               	movlw	high __pbssBANK1
  6329  0067  0085               	movwf	5
  6330  0068  3008               	movlw	8
  6331  0069  3193  239B  3180   	fcall	clear_ram0
  6332                           
  6333                           ; Clear objects allocated to BANK2
  6334  006C  3020               	movlw	low __pbssBANK2
  6335  006D  0084               	movwf	4
  6336  006E  3001               	movlw	high __pbssBANK2
  6337  006F  0085               	movwf	5
  6338  0070  303E               	movlw	62
  6339  0071  3193  239B  3180   	fcall	clear_ram0
  6340                           
  6341                           ; Clear objects allocated to BANK3
  6342  0074  30A0               	movlw	low __pbssBANK3
  6343  0075  0084               	movwf	4
  6344  0076  3001               	movlw	high __pbssBANK3
  6345  0077  0085               	movwf	5
  6346  0078  301D               	movlw	29
  6347  0079  3193  239B         	fcall	clear_ram0
  6348  007B                     end_of_initialization:	
  6349                           ;End of C runtime variable initialization code
  6350                           
  6351  007B                     __end_of__initialization:	
  6352  007B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6353  007C  0020               	movlb	0
  6354  007D  3195  2DA9         	ljmp	_main	;jump to C main() function
  6355                           
  6356                           	psect	bssBANK0
  6357  0020                     __pbssBANK0:	
  6358  0020                     _relay_reset_voltage:	
  6359  0020                     	ds	2
  6360  0022                     _current_duty:	
  6361  0022                     	ds	2
  6362  0024                     _target_duty:	
  6363  0024                     	ds	2
  6364  0026                     _pwm_duty:	
  6365  0026                     	ds	2
  6366  0028                     _local_timer:	
  6367  0028                     	ds	1
  6368  0029                     SolidStateRelay@st:	
  6369  0029                     	ds	1
  6370  002A                     __1000ms_counter:	
  6371  002A                     	ds	1
  6372  002B                     __100ms_counter:	
  6373  002B                     	ds	1
  6374  002C                     UartParser@tx_idx:	
  6375  002C                     	ds	1
  6376  002D                     UartParser@st:	
  6377  002D                     	ds	1
  6378  002E                     _isr_timer:	
  6379  002E                     	ds	1
  6380  002F                     UartParser@rx_idx:	
  6381  002F                     	ds	1
  6382  0030                     _system_counter:	
  6383  0030                     	ds	1
  6384  0031                     _chopper_active:	
  6385  0031                     	ds	1
  6386  0032                     _diff_positive:	
  6387  0032                     	ds	1
  6388  0033                     _tx_idx:	
  6389  0033                     	ds	1
  6390  0034                     _command_error:	
  6391  0034                     	ds	1
  6392  0035                     _command_pending:	
  6393  0035                     	ds	1
  6394  0036                     _rx_idx:	
  6395  0036                     	ds	1
  6396  0037                     _Commands:	
  6397  0037                     	ds	1
  6398  0038                     _eusartRxLastError:	
  6399  0038                     	ds	1
  6400  0039                     _eusartRxCount:	
  6401  0039                     	ds	1
  6402  003A                     _eusartRxTail:	
  6403  003A                     	ds	1
  6404  003B                     _eusartRxHead:	
  6405  003B                     	ds	1
  6406  003C                     _vdc:	
  6407  003C                     	ds	2
  6408  003E                     _vdc_critic:	
  6409  003E                     	ds	2
  6410  0040                     _vdc_max:	
  6411  0040                     	ds	2
  6412  0042                     _vdc_min:	
  6413  0042                     	ds	2
  6414                           
  6415                           	psect	dataBANK0
  6416  005F                     __pdataBANK0:	
  6417  005F                     _lock_isr:	
  6418  005F                     	ds	1
  6419  0060                     _init_required:	
  6420  0060                     	ds	1
  6421                           
  6422                           	psect	bssBANK1
  6423  00E4                     __pbssBANK1:	
  6424  00E4                     _ra_local_timer:	
  6425  00E4                     	ds	1
  6426  00E5                     _st_act:	
  6427  00E5                     	ds	1
  6428  00E6                     _system_minutes:	
  6429  00E6                     	ds	1
  6430  00E7                     _system_seconds:	
  6431  00E7                     	ds	1
  6432  00E8                     _st:	
  6433  00E8                     	ds	1
  6434  00E9                     _vcs_sub_st:	
  6435  00E9                     	ds	1
  6436  00EA                     _vcs_st:	
  6437  00EA                     	ds	1
  6438  00EB                     _tx_len:	
  6439  00EB                     	ds	1
  6440                           
  6441                           	psect	dataBANK1
  6442  00EC                     __pdataBANK1:	
  6443  00EC                     _duty_count_up_max:	
  6444  00EC                     	ds	2
  6445  00EE                     uart_task@none:	
  6446  00EE                     	ds	1
  6447                           
  6448                           	psect	bssBANK2
  6449  0120                     __pbssBANK2:	
  6450  0120                     UartParser@rx_buffer:	
  6451  0120                     	ds	32
  6452  0140                     _eusartRxStatusBuffer:	
  6453  0140                     	ds	8
  6454  0148                     _activation_counter:	
  6455  0148                     	ds	4
  6456  014C                     _reset_duration_ms:	
  6457  014C                     	ds	2
  6458  014E                     _prev_vdc:	
  6459  014E                     	ds	2
  6460  0150                     _reset_duration:	
  6461  0150                     	ds	2
  6462  0152                     _duty_count_down:	
  6463  0152                     	ds	2
  6464  0154                     _duty_count_up:	
  6465  0154                     	ds	2
  6466  0156                     _delta_duty:	
  6467  0156                     	ds	2
  6468  0158                     _vdc_prev:	
  6469  0158                     	ds	2
  6470  015A                     _diff_vdc:	
  6471  015A                     	ds	2
  6472  015C                     _tx_string:	
  6473  015C                     	ds	2
  6474                           
  6475                           	psect	dataBANK2
  6476  016C                     __pdataBANK2:	
  6477  016C                     _duty_count_down_max:	
  6478  016C                     	ds	2
  6479  016E                     _duty_pwm_dec:	
  6480  016E                     	ds	2
  6481                           
  6482                           	psect	bssBANK3
  6483  01A0                     __pbssBANK3:	
  6484  01A0                     _rx_buffer:	
  6485  01A0                     	ds	16
  6486  01B0                     _eusartRxBuffer:	
  6487  01B0                     	ds	8
  6488  01B8                     _num_buffer:	
  6489  01B8                     	ds	5
  6490                           
  6491                           	psect	clrtext
  6492  139B                     clear_ram0:	
  6493                           ;	Called with FSR0 containing the base address, and
  6494                           ;	WREG with the size to clear
  6495                           
  6496  139B  0064               	clrwdt	;clear the watchdog before getting into this loop
  6497  139C                     clrloop0:	
  6498  139C  0180               	clrf	0	;clear RAM location pointed to by FSR
  6499  139D  3101               	addfsr 0,1
  6500  139E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6501  139F  2B9C               	goto	clrloop0	;have we reached the end yet?
  6502  13A0  3400               	retlw	0	;all done for this memory range, return
  6503                           
  6504                           	psect	cstackBANK3
  6505  01BD                     __pcstackBANK3:	
  6506  01BD                     uart_task@xor:	
  6507  01BD                     ApplicationInit@chopper_state:	
  6508                           ; 1 bytes @ 0x0
  6509                           
  6510                           
  6511                           ; 2 bytes @ 0x0
  6512  01BD                     	ds	1
  6513  01BE                     uart_task@xor_1514:	
  6514                           
  6515                           ; 1 bytes @ 0x1
  6516  01BE                     	ds	1
  6517  01BF                     ApplicationInit@invalid_param:	
  6518  01BF                     uart_task@val_1515:	
  6519                           ; 1 bytes @ 0x2
  6520                           
  6521                           
  6522                           ; 2 bytes @ 0x2
  6523  01BF                     	ds	1
  6524  01C0                     ApplicationInit@act_counter:	
  6525                           
  6526                           ; 4 bytes @ 0x3
  6527  01C0                     	ds	1
  6528  01C1                     uart_task@i:	
  6529                           
  6530                           ; 1 bytes @ 0x4
  6531  01C1                     	ds	1
  6532  01C2                     uart_task@i_1513:	
  6533                           
  6534                           ; 1 bytes @ 0x5
  6535  01C2                     	ds	1
  6536  01C3                     uart_task@idx:	
  6537                           
  6538                           ; 1 bytes @ 0x6
  6539  01C3                     	ds	1
  6540  01C4                     ApplicationInit@val:	
  6541  01C4                     uart_task@activation_counter:	
  6542                           ; 2 bytes @ 0x7
  6543                           
  6544                           
  6545                           ; 4 bytes @ 0x7
  6546  01C4                     	ds	4
  6547  01C8                     uart_task@val:	
  6548                           
  6549                           ; 2 bytes @ 0xB
  6550  01C8                     	ds	2
  6551  01CA                     uart_task@val_1507:	
  6552                           
  6553                           ; 2 bytes @ 0xD
  6554  01CA                     	ds	2
  6555                           
  6556                           	psect	cstackBANK1
  6557  00A0                     __pcstackBANK1:	
  6558  00A0                     save_to_flash@buff:	
  6559                           
  6560                           ; 64 bytes @ 0x0
  6561  00A0                     	ds	64
  6562  00E0                     save_to_flash@activation_counter:	
  6563                           
  6564                           ; 4 bytes @ 0x40
  6565  00E0                     	ds	4
  6566                           
  6567                           	psect	cstackCOMMON
  6568  0070                     __pcstackCOMMON:	
  6569  0070                     ?_EUSART_Receive_ISR:	
  6570  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  6571                           ; 1 bytes @ 0x0
  6572                           
  6573  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  6574                           ; 1 bytes @ 0x0
  6575                           
  6576  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  6577                           ; 1 bytes @ 0x0
  6578                           
  6579  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  6580                           ; 1 bytes @ 0x0
  6581                           
  6582  0070                     ?_EUSART_DefaultErrorHandler:	
  6583                           ; 1 bytes @ 0x0
  6584                           
  6585  0070                     ?_EUSART_RxDataHandler:	
  6586                           ; 1 bytes @ 0x0
  6587                           
  6588  0070                     ??_EUSART_RxDataHandler:	
  6589                           ; 1 bytes @ 0x0
  6590                           
  6591  0070                     ?_TMR2_DefaultInterruptHandler:	
  6592                           ; 1 bytes @ 0x0
  6593                           
  6594  0070                     ??_TMR2_DefaultInterruptHandler:	
  6595                           ; 1 bytes @ 0x0
  6596                           
  6597  0070                     ?_TMR2_CallBack:	
  6598                           ; 1 bytes @ 0x0
  6599                           
  6600  0070                     ?_ADC_DefaultInterruptHandler:	
  6601                           ; 1 bytes @ 0x0
  6602                           
  6603  0070                     ??_ADC_DefaultInterruptHandler:	
  6604                           ; 1 bytes @ 0x0
  6605                           
  6606  0070                     ?_PIN_MANAGER_Initialize:	
  6607                           ; 1 bytes @ 0x0
  6608                           
  6609  0070                     ?_OSCILLATOR_Initialize:	
  6610                           ; 1 bytes @ 0x0
  6611                           
  6612  0070                     ?_WDT_Initialize:	
  6613                           ; 1 bytes @ 0x0
  6614                           
  6615  0070                     ?_TMR4_Initialize:	
  6616                           ; 1 bytes @ 0x0
  6617                           
  6618  0070                     ?_TMR1_Initialize:	
  6619                           ; 1 bytes @ 0x0
  6620                           
  6621  0070                     ?_TMR1_ISR:	
  6622                           ; 1 bytes @ 0x0
  6623                           
  6624  0070                     ?_TMR1_DefaultInterruptHandler:	
  6625                           ; 1 bytes @ 0x0
  6626                           
  6627  0070                     ??_TMR1_DefaultInterruptHandler:	
  6628                           ; 1 bytes @ 0x0
  6629                           
  6630  0070                     ?_TMR1_CallBack:	
  6631                           ; 1 bytes @ 0x0
  6632                           
  6633  0070                     ?_ApplicationInit:	
  6634                           ; 1 bytes @ 0x0
  6635                           
  6636  0070                     ?_init_chopper:	
  6637                           ; 1 bytes @ 0x0
  6638                           
  6639  0070                     ?_init_relay_watchdog:	
  6640                           ; 1 bytes @ 0x0
  6641                           
  6642  0070                     ?_uart_start:	
  6643                           ; 1 bytes @ 0x0
  6644                           
  6645  0070                     ?_uart_task:	
  6646                           ; 1 bytes @ 0x0
  6647                           
  6648  0070                     ?_relay_watchdog_task:	
  6649                           ; 1 bytes @ 0x0
  6650                           
  6651  0070                     ?_relay_watchdog_record_activations_task:	
  6652                           ; 1 bytes @ 0x0
  6653                           
  6654  0070                     ?_TMR2_DutyControlHandler_ISR:	
  6655                           ; 1 bytes @ 0x0
  6656                           
  6657  0070                     ?_ADC_VoltageControlHandler_ISR:	
  6658                           ; 1 bytes @ 0x0
  6659                           
  6660  0070                     ?_start_relay_watchdog:	
  6661                           ; 1 bytes @ 0x0
  6662                           
  6663  0070                     ?_stop_relay_watchdog:	
  6664                           ; 1 bytes @ 0x0
  6665                           
  6666  0070                     ?_TMR1_SystemTimer_ISR:	
  6667                           ; 1 bytes @ 0x0
  6668                           
  6669  0070                     ??_TMR1_SystemTimer_ISR:	
  6670                           ; 1 bytes @ 0x0
  6671                           
  6672  0070                     ?_close_relay:	
  6673                           ; 1 bytes @ 0x0
  6674                           
  6675  0070                     ?_PWM3_Initialize:	
  6676                           ; 1 bytes @ 0x0
  6677                           
  6678  0070                     ?_PWM3_LoadDutyValue:	
  6679                           ; 1 bytes @ 0x0
  6680                           
  6681  0070                     ?_EUSART_Initialize:	
  6682                           ; 1 bytes @ 0x0
  6683                           
  6684  0070                     ?_TMR2_Initialize:	
  6685                           ; 1 bytes @ 0x0
  6686                           
  6687  0070                     ?_TMR2_StartTimer:	
  6688                           ; 1 bytes @ 0x0
  6689                           
  6690  0070                     ?_TMR2_ISR:	
  6691                           ; 1 bytes @ 0x0
  6692                           
  6693  0070                     ?_ADC_Initialize:	
  6694                           ; 1 bytes @ 0x0
  6695                           
  6696  0070                     ?_ADC_SelectChannel:	
  6697                           ; 1 bytes @ 0x0
  6698                           
  6699  0070                     ?_ADC_StartConversion:	
  6700                           ; 1 bytes @ 0x0
  6701                           
  6702  0070                     ?_ADC_ISR:	
  6703                           ; 1 bytes @ 0x0
  6704                           
  6705  0070                     ?_SYSTEM_Initialize:	
  6706                           ; 1 bytes @ 0x0
  6707                           
  6708  0070                     ?_INTERRUPT_InterruptManager:	
  6709                           ; 1 bytes @ 0x0
  6710                           
  6711  0070                     ?_TMR1_WriteTimer:	
  6712                           ; 1 bytes @ 0x0
  6713                           
  6714  0070                     ?_main:	
  6715                           ; 1 bytes @ 0x0
  6716                           
  6717  0070                     ?_LoadDutyValue:	
  6718                           ; 1 bytes @ 0x0
  6719                           
  6720  0070                     ?_start_chopper:	
  6721                           ; 1 bytes @ 0x0
  6722                           
  6723  0070                     ?_stop_chopper:	
  6724                           ; 1 bytes @ 0x0
  6725                           
  6726  0070                     ?_is_chopper_active:	
  6727                           ; 1 bytes @ 0x0
  6728                           
  6729  0070                     ?_save_to_flash:	
  6730                           ; 1 bytes @ 0x0
  6731                           
  6732  0070                     ?_EUSART_CommandHandler_ISR:	
  6733                           ; 1 bytes @ 0x0
  6734                           
  6735  0070                     ??_EUSART_CommandHandler_ISR:	
  6736                           ; 1 bytes @ 0x0
  6737                           
  6738  0070                     ?_open_relay:	
  6739                           ; 1 bytes @ 0x0
  6740                           
  6741  0070                     ?_ADC_GetConversionResult:	
  6742                           ; 1 bytes @ 0x0
  6743                           
  6744  0070                     ?___lmul:	
  6745                           ; 2 bytes @ 0x0
  6746                           
  6747  0070                     ?___lldiv:	
  6748                           ; 4 bytes @ 0x0
  6749                           
  6750  0070                     PWM3_LoadDutyValue@dutyValue:	
  6751                           ; 4 bytes @ 0x0
  6752                           
  6753  0070                     TMR1_WriteTimer@timerVal:	
  6754                           ; 2 bytes @ 0x0
  6755                           
  6756  0070                     LoadDutyValue@duty:	
  6757                           ; 2 bytes @ 0x0
  6758                           
  6759  0070                     ___lmul@multiplier:	
  6760                           ; 2 bytes @ 0x0
  6761                           
  6762  0070                     ___lldiv@divisor:	
  6763                           ; 4 bytes @ 0x0
  6764                           
  6765                           
  6766                           ; 4 bytes @ 0x0
  6767  0070                     	ds	1
  6768  0071                     ??_EUSART_Receive_ISR:	
  6769  0071                     ??_EUSART_DefaultErrorHandler:	
  6770                           ; 1 bytes @ 0x1
  6771                           
  6772  0071                     ??_TMR1_CallBack:	
  6773                           ; 1 bytes @ 0x1
  6774                           
  6775  0071                     EUSART_CommandHandler_ISR@rx_data:	
  6776                           ; 1 bytes @ 0x1
  6777                           
  6778                           
  6779                           ; 1 bytes @ 0x1
  6780  0071                     	ds	1
  6781  0072                     ??_TMR1_ISR:	
  6782  0072                     ??_PWM3_LoadDutyValue:	
  6783                           ; 1 bytes @ 0x2
  6784                           
  6785  0072                     ??_ADC_GetConversionResult:	
  6786                           ; 1 bytes @ 0x2
  6787                           
  6788  0072                     ??_TMR1_WriteTimer:	
  6789                           ; 1 bytes @ 0x2
  6790                           
  6791  0072                     ??_LoadDutyValue:	
  6792                           ; 1 bytes @ 0x2
  6793                           
  6794                           
  6795                           ; 1 bytes @ 0x2
  6796  0072                     	ds	2
  6797  0074                     ??_TMR2_DutyControlHandler_ISR:	
  6798  0074                     ___lmul@multiplicand:	
  6799                           ; 1 bytes @ 0x4
  6800                           
  6801  0074                     ___lldiv@dividend:	
  6802                           ; 4 bytes @ 0x4
  6803                           
  6804                           
  6805                           ; 4 bytes @ 0x4
  6806  0074                     	ds	2
  6807  0076                     ??_TMR2_CallBack:	
  6808  0076                     ??_TMR2_ISR:	
  6809                           ; 1 bytes @ 0x6
  6810                           
  6811                           
  6812                           ; 1 bytes @ 0x6
  6813  0076                     	ds	2
  6814  0078                     ??___lmul:	
  6815  0078                     ??___lldiv:	
  6816                           ; 1 bytes @ 0x8
  6817                           
  6818  0078                     ___lmul@product:	
  6819                           ; 1 bytes @ 0x8
  6820                           
  6821                           
  6822                           ; 4 bytes @ 0x8
  6823  0078                     	ds	1
  6824  0079                     ___lldiv@quotient:	
  6825                           
  6826                           ; 4 bytes @ 0x9
  6827  0079                     	ds	4
  6828  007D                     ___lldiv@counter:	
  6829                           
  6830                           ; 1 bytes @ 0xD
  6831  007D                     	ds	1
  6832  007E                     ??_ADC_ISR:	
  6833  007E                     ??_INTERRUPT_InterruptManager:	
  6834                           ; 1 bytes @ 0xE
  6835                           
  6836                           
  6837                           	psect	cstackBANK0
  6838  0044                     __pcstackBANK0:	
  6839                           ; 1 bytes @ 0xE
  6840                           
  6841  0044                     ??_ADC_VoltageControlHandler_ISR:	
  6842                           
  6843                           ; 1 bytes @ 0x0
  6844  0044                     	ds	4
  6845  0048                     ADC_VoltageControlHandler_ISR@force_inc:	
  6846                           
  6847                           ; 1 bytes @ 0x4
  6848  0048                     	ds	1
  6849  0049                     ADC_VoltageControlHandler_ISR@pwm:	
  6850                           
  6851                           ; 4 bytes @ 0x5
  6852  0049                     	ds	4
  6853  004D                     ?_EUSART_SetRxInterruptHandler:	
  6854  004D                     ?_EUSART_SetFramingErrorHandler:	
  6855                           ; 1 bytes @ 0x9
  6856                           
  6857  004D                     ?_EUSART_SetOverrunErrorHandler:	
  6858                           ; 1 bytes @ 0x9
  6859                           
  6860  004D                     ?_EUSART_SetErrorHandler:	
  6861                           ; 1 bytes @ 0x9
  6862                           
  6863  004D                     ?_FLASH_EraseBlock:	
  6864                           ; 1 bytes @ 0x9
  6865                           
  6866  004D                     ?_TMR2_SetInterruptHandler:	
  6867                           ; 1 bytes @ 0x9
  6868                           
  6869  004D                     ?_ADC_SetInterruptHandler:	
  6870                           ; 1 bytes @ 0x9
  6871                           
  6872  004D                     ??_PIN_MANAGER_Initialize:	
  6873                           ; 1 bytes @ 0x9
  6874                           
  6875  004D                     ??_OSCILLATOR_Initialize:	
  6876                           ; 1 bytes @ 0x9
  6877                           
  6878  004D                     ??_WDT_Initialize:	
  6879                           ; 1 bytes @ 0x9
  6880                           
  6881  004D                     ??_TMR4_Initialize:	
  6882                           ; 1 bytes @ 0x9
  6883                           
  6884  004D                     ?_TMR1_SetInterruptHandler:	
  6885                           ; 1 bytes @ 0x9
  6886                           
  6887  004D                     ??_init_relay_watchdog:	
  6888                           ; 1 bytes @ 0x9
  6889                           
  6890  004D                     ??_start_relay_watchdog:	
  6891                           ; 1 bytes @ 0x9
  6892                           
  6893  004D                     ??_stop_relay_watchdog:	
  6894                           ; 1 bytes @ 0x9
  6895                           
  6896  004D                     ?_set_relay_reset_voltage:	
  6897                           ; 1 bytes @ 0x9
  6898                           
  6899  004D                     ??_close_relay:	
  6900                           ; 1 bytes @ 0x9
  6901                           
  6902  004D                     ??_PWM3_Initialize:	
  6903                           ; 1 bytes @ 0x9
  6904                           
  6905  004D                     ??_TMR2_StartTimer:	
  6906                           ; 1 bytes @ 0x9
  6907                           
  6908  004D                     ??_ADC_SelectChannel:	
  6909                           ; 1 bytes @ 0x9
  6910                           
  6911  004D                     ??_ADC_StartConversion:	
  6912                           ; 1 bytes @ 0x9
  6913                           
  6914  004D                     ?_set_vdc_threshold:	
  6915                           ; 1 bytes @ 0x9
  6916                           
  6917  004D                     ??_stop_chopper:	
  6918                           ; 1 bytes @ 0x9
  6919                           
  6920  004D                     ??_is_chopper_active:	
  6921                           ; 1 bytes @ 0x9
  6922                           
  6923  004D                     ?_set_relay_activation_counter:	
  6924                           ; 1 bytes @ 0x9
  6925                           
  6926  004D                     ??_open_relay:	
  6927                           ; 1 bytes @ 0x9
  6928                           
  6929  004D                     ?_get_relay_reset_voltage:	
  6930                           ; 1 bytes @ 0x9
  6931                           
  6932  004D                     ?_get_reset_duration:	
  6933                           ; 2 bytes @ 0x9
  6934                           
  6935  004D                     ?_FLASH_ReadWord:	
  6936                           ; 2 bytes @ 0x9
  6937                           
  6938  004D                     ?_get_vdc_min:	
  6939                           ; 2 bytes @ 0x9
  6940                           
  6941  004D                     ?_get_vdc_max:	
  6942                           ; 2 bytes @ 0x9
  6943                           
  6944  004D                     ?_get_vdc_critic:	
  6945                           ; 2 bytes @ 0x9
  6946                           
  6947  004D                     ?_get_vdc:	
  6948                           ; 2 bytes @ 0x9
  6949                           
  6950  004D                     ?___wmul:	
  6951                           ; 2 bytes @ 0x9
  6952                           
  6953  004D                     ?___lwdiv:	
  6954                           ; 2 bytes @ 0x9
  6955                           
  6956  004D                     ?_get_relay_activation_counter:	
  6957                           ; 2 bytes @ 0x9
  6958                           
  6959  004D                     EUSART_SetFramingErrorHandler@interruptHandler:	
  6960                           ; 4 bytes @ 0x9
  6961                           
  6962  004D                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  6963                           ; 2 bytes @ 0x9
  6964                           
  6965  004D                     EUSART_SetErrorHandler@interruptHandler:	
  6966                           ; 2 bytes @ 0x9
  6967                           
  6968  004D                     EUSART_SetRxInterruptHandler@interruptHandler:	
  6969                           ; 2 bytes @ 0x9
  6970                           
  6971  004D                     FLASH_ReadWord@flashAddr:	
  6972                           ; 2 bytes @ 0x9
  6973                           
  6974  004D                     FLASH_EraseBlock@startAddr:	
  6975                           ; 2 bytes @ 0x9
  6976                           
  6977  004D                     TMR2_SetInterruptHandler@InterruptHandler:	
  6978                           ; 2 bytes @ 0x9
  6979                           
  6980  004D                     ADC_SetInterruptHandler@InterruptHandler:	
  6981                           ; 2 bytes @ 0x9
  6982                           
  6983  004D                     TMR1_SetInterruptHandler@InterruptHandler:	
  6984                           ; 2 bytes @ 0x9
  6985                           
  6986  004D                     set_vdc_threshold@v_val:	
  6987                           ; 2 bytes @ 0x9
  6988                           
  6989  004D                     set_relay_reset_voltage@relay_vthres:	
  6990                           ; 2 bytes @ 0x9
  6991                           
  6992  004D                     ___wmul@multiplier:	
  6993                           ; 2 bytes @ 0x9
  6994                           
  6995  004D                     ___lwdiv@divisor:	
  6996                           ; 2 bytes @ 0x9
  6997                           
  6998  004D                     set_relay_activation_counter@act_count:	
  6999                           ; 2 bytes @ 0x9
  7000                           
  7001                           
  7002                           ; 4 bytes @ 0x9
  7003  004D                     	ds	1
  7004  004E                     ADC_SelectChannel@channel:	
  7005                           
  7006                           ; 1 bytes @ 0xA
  7007  004E                     	ds	1
  7008  004F                     ??_EUSART_SetRxInterruptHandler:	
  7009  004F                     ??_EUSART_SetFramingErrorHandler:	
  7010                           ; 1 bytes @ 0xB
  7011                           
  7012  004F                     ??_EUSART_SetOverrunErrorHandler:	
  7013                           ; 1 bytes @ 0xB
  7014                           
  7015  004F                     ??_EUSART_SetErrorHandler:	
  7016                           ; 1 bytes @ 0xB
  7017                           
  7018  004F                     ??_FLASH_EraseBlock:	
  7019                           ; 1 bytes @ 0xB
  7020                           
  7021  004F                     ??_TMR2_SetInterruptHandler:	
  7022                           ; 1 bytes @ 0xB
  7023                           
  7024  004F                     ??_ADC_SetInterruptHandler:	
  7025                           ; 1 bytes @ 0xB
  7026                           
  7027  004F                     ??_TMR1_Initialize:	
  7028                           ; 1 bytes @ 0xB
  7029                           
  7030  004F                     ??_TMR1_SetInterruptHandler:	
  7031                           ; 1 bytes @ 0xB
  7032                           
  7033  004F                     ??_init_chopper:	
  7034                           ; 1 bytes @ 0xB
  7035                           
  7036  004F                     ??_uart_start:	
  7037                           ; 1 bytes @ 0xB
  7038                           
  7039  004F                     ??_relay_watchdog_task:	
  7040                           ; 1 bytes @ 0xB
  7041                           
  7042  004F                     ??_get_relay_reset_voltage:	
  7043                           ; 1 bytes @ 0xB
  7044                           
  7045  004F                     ??_get_reset_duration:	
  7046                           ; 1 bytes @ 0xB
  7047                           
  7048  004F                     ??_set_relay_reset_voltage:	
  7049                           ; 1 bytes @ 0xB
  7050                           
  7051  004F                     ??_EUSART_Initialize:	
  7052                           ; 1 bytes @ 0xB
  7053                           
  7054  004F                     ??_FLASH_ReadWord:	
  7055                           ; 1 bytes @ 0xB
  7056                           
  7057  004F                     ??_TMR2_Initialize:	
  7058                           ; 1 bytes @ 0xB
  7059                           
  7060  004F                     ??_ADC_Initialize:	
  7061                           ; 1 bytes @ 0xB
  7062                           
  7063  004F                     ??_SYSTEM_Initialize:	
  7064                           ; 1 bytes @ 0xB
  7065                           
  7066  004F                     ??_get_vdc_min:	
  7067                           ; 1 bytes @ 0xB
  7068                           
  7069  004F                     ??_get_vdc_max:	
  7070                           ; 1 bytes @ 0xB
  7071                           
  7072  004F                     ??_get_vdc_critic:	
  7073                           ; 1 bytes @ 0xB
  7074                           
  7075  004F                     ??_get_vdc:	
  7076                           ; 1 bytes @ 0xB
  7077                           
  7078  004F                     FLASH_ReadWord@GIEBitValue:	
  7079                           ; 1 bytes @ 0xB
  7080                           
  7081  004F                     FLASH_EraseBlock@GIEBitValue:	
  7082                           ; 1 bytes @ 0xB
  7083                           
  7084  004F                     set_vdc_threshold@v_target:	
  7085                           ; 1 bytes @ 0xB
  7086                           
  7087  004F                     ___wmul@multiplicand:	
  7088                           ; 1 bytes @ 0xB
  7089                           
  7090  004F                     ___lwdiv@dividend:	
  7091                           ; 2 bytes @ 0xB
  7092                           
  7093                           
  7094                           ; 2 bytes @ 0xB
  7095  004F                     	ds	1
  7096  0050                     ?_FLASH_WriteBlock:	
  7097  0050                     ??_set_vdc_threshold:	
  7098                           ; 1 bytes @ 0xC
  7099                           
  7100  0050                     ??_start_chopper:	
  7101                           ; 1 bytes @ 0xC
  7102                           
  7103  0050                     ?_set_vdc_min:	
  7104                           ; 1 bytes @ 0xC
  7105                           
  7106  0050                     ?_set_vdc_max:	
  7107                           ; 1 bytes @ 0xC
  7108                           
  7109  0050                     ?_set_vdc_critic:	
  7110                           ; 1 bytes @ 0xC
  7111                           
  7112  0050                     FLASH_WriteBlock@writeAddr:	
  7113                           ; 1 bytes @ 0xC
  7114                           
  7115  0050                     set_vdc_min@vmin:	
  7116                           ; 2 bytes @ 0xC
  7117                           
  7118  0050                     set_vdc_max@vmax:	
  7119                           ; 2 bytes @ 0xC
  7120                           
  7121  0050                     set_vdc_critic@vc:	
  7122                           ; 2 bytes @ 0xC
  7123                           
  7124                           
  7125                           ; 2 bytes @ 0xC
  7126  0050                     	ds	1
  7127  0051                     ??_get_relay_activation_counter:	
  7128  0051                     ??_set_relay_activation_counter:	
  7129                           ; 1 bytes @ 0xD
  7130                           
  7131  0051                     ??___wmul:	
  7132                           ; 1 bytes @ 0xD
  7133                           
  7134  0051                     ??___lwdiv:	
  7135                           ; 1 bytes @ 0xD
  7136                           
  7137  0051                     ___wmul@product:	
  7138                           ; 1 bytes @ 0xD
  7139                           
  7140                           
  7141                           ; 2 bytes @ 0xD
  7142  0051                     	ds	1
  7143  0052                     ??_set_vdc_min:	
  7144  0052                     ??_set_vdc_max:	
  7145                           ; 1 bytes @ 0xE
  7146                           
  7147  0052                     ??_set_vdc_critic:	
  7148                           ; 1 bytes @ 0xE
  7149                           
  7150  0052                     FLASH_WriteBlock@flashWordArray:	
  7151                           ; 1 bytes @ 0xE
  7152                           
  7153  0052                     ___lwdiv@counter:	
  7154                           ; 1 bytes @ 0xE
  7155                           
  7156                           
  7157                           ; 1 bytes @ 0xE
  7158  0052                     	ds	1
  7159  0053                     ??_FLASH_WriteBlock:	
  7160  0053                     ?_get_vdc_speed:	
  7161                           ; 1 bytes @ 0xF
  7162                           
  7163  0053                     ___lwdiv@quotient:	
  7164                           ; 2 bytes @ 0xF
  7165                           
  7166                           
  7167                           ; 2 bytes @ 0xF
  7168  0053                     	ds	2
  7169  0055                     ?_set_reset_duration:	
  7170  0055                     ?_set_vdc_speed:	
  7171                           ; 1 bytes @ 0x11
  7172                           
  7173  0055                     ??_get_vdc_speed:	
  7174                           ; 1 bytes @ 0x11
  7175                           
  7176  0055                     set_vdc_speed@msDelay:	
  7177                           ; 1 bytes @ 0x11
  7178                           
  7179  0055                     set_reset_duration@reset_dur_ms:	
  7180                           ; 2 bytes @ 0x11
  7181                           
  7182                           
  7183                           ; 2 bytes @ 0x11
  7184  0055                     	ds	1
  7185  0056                     FLASH_WriteBlock@blockStartAddr:	
  7186                           
  7187                           ; 2 bytes @ 0x12
  7188  0056                     	ds	1
  7189  0057                     ??_set_reset_duration:	
  7190  0057                     ??_set_vdc_speed:	
  7191                           ; 1 bytes @ 0x13
  7192                           
  7193                           
  7194                           ; 1 bytes @ 0x13
  7195  0057                     	ds	1
  7196  0058                     FLASH_WriteBlock@GIEBitValue:	
  7197                           
  7198                           ; 1 bytes @ 0x14
  7199  0058                     	ds	1
  7200  0059                     FLASH_WriteBlock@i:	
  7201                           
  7202                           ; 1 bytes @ 0x15
  7203  0059                     	ds	1
  7204  005A                     ??_save_to_flash:	
  7205                           
  7206                           ; 1 bytes @ 0x16
  7207  005A                     	ds	1
  7208  005B                     ??_ApplicationInit:	
  7209  005B                     ??_uart_task:	
  7210                           ; 1 bytes @ 0x17
  7211                           
  7212  005B                     ??_relay_watchdog_record_activations_task:	
  7213                           ; 1 bytes @ 0x17
  7214                           
  7215                           
  7216                           ; 1 bytes @ 0x17
  7217  005B                     	ds	4
  7218  005F                     ??_main:	
  7219                           
  7220                           	psect	maintext
  7221  15A9                     __pmaintext:	
  7222                           ; 1 bytes @ 0x1B
  7223 ;;
  7224 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  7225 ;;
  7226 ;; *************** function _main *****************
  7227 ;; Defined at:
  7228 ;;		line 54 in file "main.c"
  7229 ;; Parameters:    Size  Location     Type
  7230 ;;		None
  7231 ;; Auto vars:     Size  Location     Type
  7232 ;;		None
  7233 ;; Return value:  Size  Location     Type
  7234 ;;                  1    wreg      void 
  7235 ;; Registers used:
  7236 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7237 ;; Tracked objects:
  7238 ;;		On entry : B1F/0
  7239 ;;		On exit  : 0/0
  7240 ;;		Unchanged: 0/0
  7241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;Total ram usage:        0 bytes
  7247 ;; Hardware stack levels required when called:    9
  7248 ;; This function calls:
  7249 ;;		_ApplicationInit
  7250 ;;		_SYSTEM_Initialize
  7251 ;;		_init_chopper
  7252 ;;		_init_relay_watchdog
  7253 ;;		_relay_watchdog_record_activations_task
  7254 ;;		_relay_watchdog_task
  7255 ;;		_uart_start
  7256 ;;		_uart_task
  7257 ;; This function is called by:
  7258 ;;		Startup code after reset
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           
  7263                           ;psect for function _main
  7264  15A9                     _main:	
  7265                           
  7266                           ;main.c: 57:     SYSTEM_Initialize();
  7267                           
  7268                           ;incstack = 0
  7269                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7270  15A9  3195  2557  3195   	fcall	_SYSTEM_Initialize
  7271                           
  7272                           ;main.c: 73:     ApplicationInit();
  7273  15AC  318B  2382  3195   	fcall	_ApplicationInit
  7274                           
  7275                           ;main.c: 76:     (INTCONbits.GIE = 1);
  7276  15AF  178B               	bsf	11,7	;volatile
  7277                           
  7278                           ;main.c: 78:     (INTCONbits.PEIE = 1);
  7279  15B0  170B               	bsf	11,6	;volatile
  7280                           
  7281                           ;main.c: 80:     init_chopper();
  7282  15B1  3196  266C  3195   	fcall	_init_chopper
  7283                           
  7284                           ;main.c: 81:     init_relay_watchdog();
  7285  15B4  3193  2348  3195   	fcall	_init_relay_watchdog
  7286                           
  7287                           ;main.c: 83:     uart_start();
  7288  15B7  3194  24F5  3195   	fcall	_uart_start
  7289  15BA                     l4632:	
  7290                           
  7291                           ;main.c: 85:     {;main.c: 86:         uart_task();
  7292  15BA  318D  2518  3195   	fcall	_uart_task
  7293                           
  7294                           ;main.c: 87:         relay_watchdog_task();
  7295  15BD  3189  212A  3195   	fcall	_relay_watchdog_task
  7296                           
  7297                           ;main.c: 88:         relay_watchdog_record_activations_task();
  7298  15C0  3197  27BF  3195   	fcall	_relay_watchdog_record_activations_task
  7299  15C3  0064               	clrwdt	;# 
  7300  15C4  2DBA               	goto	l4632
  7301  15C5                     __end_of_main:	
  7302                           
  7303                           	psect	text1
  7304  0D18                     __ptext1:	
  7305 ;; *************** function _uart_task *****************
  7306 ;; Defined at:
  7307 ;;		line 61 in file "UartParser.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;		None
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;  idx             1    6[BANK3 ] unsigned char 
  7312 ;;  activation_c    4    7[BANK3 ] unsigned long 
  7313 ;;  val             2    2[BANK3 ] unsigned short 
  7314 ;;  val             2   13[BANK3 ] unsigned short 
  7315 ;;  i               1    5[BANK3 ] unsigned char 
  7316 ;;  xor             1    1[BANK3 ] unsigned char 
  7317 ;;  val             2   11[BANK3 ] unsigned short 
  7318 ;;  i               1    4[BANK3 ] unsigned char 
  7319 ;;  xor             1    0[BANK3 ] unsigned char 
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  1    wreg      void 
  7322 ;; Registers used:
  7323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 1C/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7330 ;;      Locals:         0       0       0       0      15       0       0       0       0       0       0       0       
      +0       0
  7331 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;      Totals:         0       4       0       0      15       0       0       0       0       0       0       0       
      +0       0
  7333 ;;Total ram usage:       19 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; Hardware stack levels required when called:    8
  7336 ;; This function calls:
  7337 ;;		_get_relay_activation_counter
  7338 ;;		_get_relay_reset_voltage
  7339 ;;		_get_reset_duration
  7340 ;;		_get_vdc
  7341 ;;		_get_vdc_critic
  7342 ;;		_get_vdc_max
  7343 ;;		_get_vdc_min
  7344 ;;		_get_vdc_speed
  7345 ;;		_is_chopper_active
  7346 ;;		_save_to_flash
  7347 ;;		_set_relay_reset_voltage
  7348 ;;		_set_reset_duration
  7349 ;;		_set_vdc_critic
  7350 ;;		_set_vdc_max
  7351 ;;		_set_vdc_min
  7352 ;;		_set_vdc_speed
  7353 ;;		_start_chopper
  7354 ;;		_stop_chopper
  7355 ;; This function is called by:
  7356 ;;		_main
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           
  7361                           ;psect for function _uart_task
  7362  0D18                     _uart_task:	
  7363                           
  7364                           ;UartParser.c: 63:     if( st == SHUTDOWN )
  7365                           
  7366                           ;incstack = 0
  7367                           ; Regs used in _uart_task: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7368  0D18  0020               	movlb	0	; select bank0
  7369  0D19  082D               	movf	UartParser@st,w
  7370  0D1A  1903               	btfsc	3,2
  7371  0D1B  0008               	return
  7372                           
  7373                           ;UartParser.c: 65:     if( st == INIT )
  7374  0D1C  032D               	decf	UartParser@st,w
  7375  0D1D  1D03               	btfss	3,2
  7376  0D1E  2D2A               	goto	l4332
  7377                           
  7378                           ;UartParser.c: 66:     {;UartParser.c: 67:         isr_timer = ((uint8_t)((uint8_t)~syst
      +                          em_counter)+((uint8_t)1));
  7379  0D1F  0330               	decf	_system_counter,w
  7380  0D20  3AFF               	xorlw	255
  7381  0D21  00DB               	movwf	??_uart_task
  7382  0D22  085B               	movf	??_uart_task,w
  7383  0D23  00AE               	movwf	_isr_timer
  7384                           
  7385                           ;UartParser.c: 68:         lock_isr = 0;
  7386  0D24  01DF               	clrf	_lock_isr
  7387                           
  7388                           ;UartParser.c: 69:         st = WAIT_IDLE;
  7389  0D25  3002               	movlw	2
  7390  0D26  00DB               	movwf	??_uart_task
  7391  0D27  085B               	movf	??_uart_task,w
  7392  0D28  00AD               	movwf	UartParser@st
  7393  0D29  0008               	return
  7394  0D2A                     l4332:	
  7395                           
  7396                           ;UartParser.c: 72:     if( st == WAIT_IDLE )
  7397  0D2A  3002               	movlw	2
  7398  0D2B  062D               	xorwf	UartParser@st,w
  7399  0D2C  1D03               	btfss	3,2
  7400  0D2D  2D3B               	goto	l4344
  7401                           
  7402                           ;UartParser.c: 73:     {;UartParser.c: 74:         if( ((uint8_t)(system_counter + isr_t
      +                          imer) >= ((uint8_t)3)) == 0 )
  7403  0D2E  082E               	movf	_isr_timer,w
  7404  0D2F  0730               	addwf	_system_counter,w
  7405  0D30  00DB               	movwf	??_uart_task
  7406  0D31  3003               	movlw	3
  7407  0D32  025B               	subwf	??_uart_task,w
  7408  0D33  1C03               	btfss	3,0
  7409  0D34  0008               	return
  7410                           
  7411                           ;UartParser.c: 76:         rx_idx = 0;
  7412  0D35  01AF               	clrf	UartParser@rx_idx
  7413                           
  7414                           ;UartParser.c: 77:         st = READ_FRAME;
  7415  0D36  3003               	movlw	3
  7416  0D37  00DB               	movwf	??_uart_task
  7417  0D38  085B               	movf	??_uart_task,w
  7418  0D39  00AD               	movwf	UartParser@st
  7419  0D3A  0008               	return
  7420  0D3B                     l4344:	
  7421                           
  7422                           ;UartParser.c: 80:     if( st == READ_FRAME )
  7423  0D3B  3003               	movlw	3
  7424  0D3C  062D               	xorwf	UartParser@st,w
  7425  0D3D  1D03               	btfss	3,2
  7426  0D3E  2D8E               	goto	l4382
  7427                           
  7428                           ;UartParser.c: 81:     {;UartParser.c: 82:         if( rx_idx == 0 )
  7429  0D3F  082F               	movf	UartParser@rx_idx,w
  7430  0D40  1903               	btfsc	3,2
  7431  0D41  0008               	return
  7432                           
  7433                           ;UartParser.c: 84:         if( ((uint8_t)(system_counter + isr_timer) >= ((uint8_t)3)) =
      +                          = 0 )
  7434  0D42  082E               	movf	_isr_timer,w
  7435  0D43  0730               	addwf	_system_counter,w
  7436  0D44  00DB               	movwf	??_uart_task
  7437  0D45  3003               	movlw	3
  7438  0D46  025B               	subwf	??_uart_task,w
  7439  0D47  1C03               	btfss	3,0
  7440  0D48  0008               	return
  7441                           
  7442                           ;UartParser.c: 87:         lock_isr = 1;
  7443  0D49  01DF               	clrf	_lock_isr
  7444  0D4A  0ADF               	incf	_lock_isr,f
  7445                           
  7446                           ;UartParser.c: 89:         uint8_t i;;UartParser.c: 90:         uint8_t xor = rx_buffer[
      +                          0];
  7447  0D4B  0022               	movlb	2	; select bank2
  7448  0D4C  0820               	movf	UartParser@rx_buffer^(0+256),w
  7449  0D4D  0020               	movlb	0	; select bank0
  7450  0D4E  00DB               	movwf	??_uart_task
  7451  0D4F  085B               	movf	??_uart_task,w
  7452  0D50  0023               	movlb	3	; select bank3
  7453  0D51  00BD               	movwf	uart_task@xor^(0+384)
  7454                           
  7455                           ;UartParser.c: 91:         for( i=1 ; i<rx_idx ; i++ )
  7456  0D52  01C1               	clrf	uart_task@i^(0+384)
  7457  0D53  0AC1               	incf	uart_task@i^(0+384),f
  7458  0D54                     l4362:	
  7459  0D54  0020               	movlb	0	; select bank0
  7460  0D55  082F               	movf	UartParser@rx_idx,w
  7461  0D56  0023               	movlb	3	; select bank3
  7462  0D57  0241               	subwf	uart_task@i^(0+384),w
  7463  0D58  1803               	btfsc	3,0
  7464  0D59  2D6C               	goto	l4364
  7465                           
  7466                           ;UartParser.c: 92:             xor ^= rx_buffer[i];
  7467  0D5A  0841               	movf	uart_task@i^(0+384),w
  7468  0D5B  3E20               	addlw	(low (UartParser@rx_buffer| (0+256)))& (0+255)
  7469  0D5C  0086               	movwf	6
  7470  0D5D  3001               	movlw	1	; select bank2/3
  7471  0D5E  0087               	movwf	7
  7472  0D5F  0801               	movf	1,w
  7473  0D60  0020               	movlb	0	; select bank0
  7474  0D61  00DB               	movwf	??_uart_task
  7475  0D62  085B               	movf	??_uart_task,w
  7476  0D63  0023               	movlb	3	; select bank3
  7477  0D64  06BD               	xorwf	uart_task@xor^(0+384),f
  7478  0D65  3001               	movlw	1
  7479  0D66  0020               	movlb	0	; select bank0
  7480  0D67  00DB               	movwf	??_uart_task
  7481  0D68  085B               	movf	??_uart_task,w
  7482  0D69  0023               	movlb	3	; select bank3
  7483  0D6A  07C1               	addwf	uart_task@i^(0+384),f
  7484  0D6B  2D54               	goto	l4362
  7485  0D6C                     l4364:	
  7486                           
  7487                           ;UartParser.c: 93:         if( xor != 0 ||
  7488  0D6C  083D               	movf	uart_task@xor^(0+384),w
  7489  0D6D  1D03               	btfss	3,2
  7490  0D6E  2D85               	goto	l4376
  7491  0D6F  30AA               	movlw	170
  7492  0D70  0022               	movlb	2	; select bank2
  7493  0D71  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7494  0D72  1903               	btfsc	3,2
  7495  0D73  2D7C               	goto	l4372
  7496  0D74  3055               	movlw	85
  7497  0D75  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7498  0D76  1903               	btfsc	3,2
  7499  0D77  2D7C               	goto	l4372
  7500  0D78  30A5               	movlw	165
  7501  0D79  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7502  0D7A  1D03               	btfss	3,2
  7503  0D7B  2D85               	goto	l4376
  7504  0D7C                     l4372:	
  7505  0D7C  300F               	movlw	15
  7506  0D7D  0020               	movlb	0	; select bank0
  7507  0D7E  062F               	xorwf	UartParser@rx_idx,w
  7508  0D7F  1903               	btfsc	3,2
  7509  0D80  2D89               	goto	l4378
  7510  0D81  3002               	movlw	2
  7511  0D82  062F               	xorwf	UartParser@rx_idx,w
  7512  0D83  1903               	btfsc	3,2
  7513  0D84  2D89               	goto	l4378
  7514  0D85                     l4376:	
  7515                           
  7516                           ;UartParser.c: 98:         {;UartParser.c: 99:             rx_idx = 0;
  7517  0D85  0020               	movlb	0	; select bank0
  7518  0D86  01AF               	clrf	UartParser@rx_idx
  7519                           
  7520                           ;UartParser.c: 100:             lock_isr = 0;
  7521  0D87  01DF               	clrf	_lock_isr
  7522                           
  7523                           ;UartParser.c: 101:         }
  7524  0D88  0008               	return
  7525  0D89                     l4378:	
  7526                           
  7527                           ;UartParser.c: 103:             st = PARSE_FRAME;
  7528  0D89  3004               	movlw	4
  7529  0D8A  00DB               	movwf	??_uart_task
  7530  0D8B  085B               	movf	??_uart_task,w
  7531  0D8C  00AD               	movwf	UartParser@st
  7532  0D8D  0008               	return
  7533  0D8E                     l4382:	
  7534                           
  7535                           ;UartParser.c: 106:     if( st == PARSE_FRAME )
  7536  0D8E  3004               	movlw	4
  7537  0D8F  062D               	xorwf	UartParser@st,w
  7538  0D90  1D03               	btfss	3,2
  7539  0D91  2FE6               	goto	l4530
  7540                           
  7541                           ;UartParser.c: 107:     {;UartParser.c: 108:         if( rx_buffer[0] == SET_PARAMS )
  7542  0D92  30AA               	movlw	170
  7543  0D93  0022               	movlb	2	; select bank2
  7544  0D94  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7545  0D95  1D03               	btfss	3,2
  7546  0D96  2D9D               	goto	l988
  7547                           
  7548                           ;UartParser.c: 109:         {;UartParser.c: 110:             static uint8_t none = 2;;Ua
      +                          rtParser.c: 111:             none++;
  7549  0D97  3001               	movlw	1
  7550  0D98  0020               	movlb	0	; select bank0
  7551  0D99  00DB               	movwf	??_uart_task
  7552  0D9A  085B               	movf	??_uart_task,w
  7553  0D9B  0021               	movlb	1	; select bank1
  7554  0D9C  07EE               	addwf	uart_task@none^(0+128),f
  7555  0D9D                     l988:	
  7556                           ;UartParser.c: 112:         }
  7557                           
  7558                           
  7559                           ;UartParser.c: 113:         if( rx_buffer[0] == SET_PARAMS && rx_idx == 15 )
  7560  0D9D  30AA               	movlw	170
  7561  0D9E  0022               	movlb	2	; select bank2
  7562  0D9F  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7563  0DA0  1D03               	btfss	3,2
  7564  0DA1  2EAE               	goto	l4434
  7565  0DA2  300F               	movlw	15
  7566  0DA3  0020               	movlb	0	; select bank0
  7567  0DA4  062F               	xorwf	UartParser@rx_idx,w
  7568  0DA5  1D03               	btfss	3,2
  7569  0DA6  2EAE               	goto	l4434
  7570                           
  7571                           ;UartParser.c: 114:         {;UartParser.c: 115:             uint16_t val;;UartParser.c:
      +                           116:             val = rx_buffer[1];
  7572  0DA7  0022               	movlb	2	; select bank2
  7573  0DA8  0821               	movf	(UartParser@rx_buffer^(0+256)+1),w
  7574  0DA9  0020               	movlb	0	; select bank0
  7575  0DAA  00DB               	movwf	??_uart_task
  7576  0DAB  01DC               	clrf	??_uart_task+1
  7577  0DAC  085B               	movf	??_uart_task,w
  7578  0DAD  0023               	movlb	3	; select bank3
  7579  0DAE  00C8               	movwf	uart_task@val^(0+384)
  7580  0DAF  0020               	movlb	0	; select bank0
  7581  0DB0  085C               	movf	??_uart_task+1,w
  7582  0DB1  0023               	movlb	3	; select bank3
  7583  0DB2  00C9               	movwf	(uart_task@val+1)^(0+384)
  7584                           
  7585                           ;UartParser.c: 117:             val = val<<8 | rx_buffer[2];
  7586  0DB3  0022               	movlb	2	; select bank2
  7587  0DB4  0822               	movf	(UartParser@rx_buffer^(0+256)+2),w
  7588  0DB5  0020               	movlb	0	; select bank0
  7589  0DB6  00DB               	movwf	??_uart_task
  7590  0DB7  01DC               	clrf	??_uart_task+1
  7591  0DB8  0023               	movlb	3	; select bank3
  7592  0DB9  0848               	movf	uart_task@val^(0+384),w
  7593  0DBA  0020               	movlb	0	; select bank0
  7594  0DBB  00DE               	movwf	??_uart_task+3
  7595  0DBC  01DD               	clrf	??_uart_task+2
  7596  0DBD  085B               	movf	??_uart_task,w
  7597  0DBE  045D               	iorwf	??_uart_task+2,w
  7598  0DBF  0023               	movlb	3	; select bank3
  7599  0DC0  00C8               	movwf	uart_task@val^(0+384)
  7600  0DC1  0020               	movlb	0	; select bank0
  7601  0DC2  085C               	movf	??_uart_task+1,w
  7602  0DC3  045E               	iorwf	??_uart_task+3,w
  7603  0DC4  0023               	movlb	3	; select bank3
  7604  0DC5  00C9               	movwf	(uart_task@val+1)^(0+384)
  7605                           
  7606                           ;UartParser.c: 118:             set_vdc_min(val);
  7607  0DC6  0849               	movf	(uart_task@val+1)^(0+384),w
  7608  0DC7  0020               	movlb	0	; select bank0
  7609  0DC8  00D1               	movwf	set_vdc_min@vmin+1
  7610  0DC9  0023               	movlb	3	; select bank3
  7611  0DCA  0848               	movf	uart_task@val^(0+384),w
  7612  0DCB  0020               	movlb	0	; select bank0
  7613  0DCC  00D0               	movwf	set_vdc_min@vmin
  7614  0DCD  3194  2429  318D   	fcall	_set_vdc_min
  7615                           
  7616                           ;UartParser.c: 119:             val = rx_buffer[3];
  7617  0DD0  0022               	movlb	2	; select bank2
  7618  0DD1  0823               	movf	(UartParser@rx_buffer^(0+256)+3),w
  7619  0DD2  0020               	movlb	0	; select bank0
  7620  0DD3  00DB               	movwf	??_uart_task
  7621  0DD4  01DC               	clrf	??_uart_task+1
  7622  0DD5  085B               	movf	??_uart_task,w
  7623  0DD6  0023               	movlb	3	; select bank3
  7624  0DD7  00C8               	movwf	uart_task@val^(0+384)
  7625  0DD8  0020               	movlb	0	; select bank0
  7626  0DD9  085C               	movf	??_uart_task+1,w
  7627  0DDA  0023               	movlb	3	; select bank3
  7628  0DDB  00C9               	movwf	(uart_task@val+1)^(0+384)
  7629                           
  7630                           ;UartParser.c: 120:             val = val<<8 | rx_buffer[4];
  7631  0DDC  0022               	movlb	2	; select bank2
  7632  0DDD  0824               	movf	(UartParser@rx_buffer^(0+256)+4),w
  7633  0DDE  0020               	movlb	0	; select bank0
  7634  0DDF  00DB               	movwf	??_uart_task
  7635  0DE0  01DC               	clrf	??_uart_task+1
  7636  0DE1  0023               	movlb	3	; select bank3
  7637  0DE2  0848               	movf	uart_task@val^(0+384),w
  7638  0DE3  0020               	movlb	0	; select bank0
  7639  0DE4  00DE               	movwf	??_uart_task+3
  7640  0DE5  01DD               	clrf	??_uart_task+2
  7641  0DE6  085B               	movf	??_uart_task,w
  7642  0DE7  045D               	iorwf	??_uart_task+2,w
  7643  0DE8  0023               	movlb	3	; select bank3
  7644  0DE9  00C8               	movwf	uart_task@val^(0+384)
  7645  0DEA  0020               	movlb	0	; select bank0
  7646  0DEB  085C               	movf	??_uart_task+1,w
  7647  0DEC  045E               	iorwf	??_uart_task+3,w
  7648  0DED  0023               	movlb	3	; select bank3
  7649  0DEE  00C9               	movwf	(uart_task@val+1)^(0+384)
  7650                           
  7651                           ;UartParser.c: 121:             set_vdc_max(val);
  7652  0DEF  0849               	movf	(uart_task@val+1)^(0+384),w
  7653  0DF0  0020               	movlb	0	; select bank0
  7654  0DF1  00D1               	movwf	set_vdc_max@vmax+1
  7655  0DF2  0023               	movlb	3	; select bank3
  7656  0DF3  0848               	movf	uart_task@val^(0+384),w
  7657  0DF4  0020               	movlb	0	; select bank0
  7658  0DF5  00D0               	movwf	set_vdc_max@vmax
  7659  0DF6  3194  241E  318D   	fcall	_set_vdc_max
  7660                           
  7661                           ;UartParser.c: 122:             val = rx_buffer[5];
  7662  0DF9  0022               	movlb	2	; select bank2
  7663  0DFA  0825               	movf	(UartParser@rx_buffer^(0+256)+5),w
  7664  0DFB  0020               	movlb	0	; select bank0
  7665  0DFC  00DB               	movwf	??_uart_task
  7666  0DFD  01DC               	clrf	??_uart_task+1
  7667  0DFE  085B               	movf	??_uart_task,w
  7668  0DFF  0023               	movlb	3	; select bank3
  7669  0E00  00C8               	movwf	uart_task@val^(0+384)
  7670  0E01  0020               	movlb	0	; select bank0
  7671  0E02  085C               	movf	??_uart_task+1,w
  7672  0E03  0023               	movlb	3	; select bank3
  7673  0E04  00C9               	movwf	(uart_task@val+1)^(0+384)
  7674                           
  7675                           ;UartParser.c: 123:             val = val<<8 | rx_buffer[6];
  7676  0E05  0022               	movlb	2	; select bank2
  7677  0E06  0826               	movf	(UartParser@rx_buffer^(0+256)+6),w
  7678  0E07  0020               	movlb	0	; select bank0
  7679  0E08  00DB               	movwf	??_uart_task
  7680  0E09  01DC               	clrf	??_uart_task+1
  7681  0E0A  0023               	movlb	3	; select bank3
  7682  0E0B  0848               	movf	uart_task@val^(0+384),w
  7683  0E0C  0020               	movlb	0	; select bank0
  7684  0E0D  00DE               	movwf	??_uart_task+3
  7685  0E0E  01DD               	clrf	??_uart_task+2
  7686  0E0F  085B               	movf	??_uart_task,w
  7687  0E10  045D               	iorwf	??_uart_task+2,w
  7688  0E11  0023               	movlb	3	; select bank3
  7689  0E12  00C8               	movwf	uart_task@val^(0+384)
  7690  0E13  0020               	movlb	0	; select bank0
  7691  0E14  085C               	movf	??_uart_task+1,w
  7692  0E15  045E               	iorwf	??_uart_task+3,w
  7693  0E16  0023               	movlb	3	; select bank3
  7694  0E17  00C9               	movwf	(uart_task@val+1)^(0+384)
  7695                           
  7696                           ;UartParser.c: 124:             set_vdc_critic(val);
  7697  0E18  0849               	movf	(uart_task@val+1)^(0+384),w
  7698  0E19  0020               	movlb	0	; select bank0
  7699  0E1A  00D1               	movwf	set_vdc_critic@vc+1
  7700  0E1B  0023               	movlb	3	; select bank3
  7701  0E1C  0848               	movf	uart_task@val^(0+384),w
  7702  0E1D  0020               	movlb	0	; select bank0
  7703  0E1E  00D0               	movwf	set_vdc_critic@vc
  7704  0E1F  3194  2413  318D   	fcall	_set_vdc_critic
  7705                           
  7706                           ;UartParser.c: 125:             val = rx_buffer[7];
  7707  0E22  0022               	movlb	2	; select bank2
  7708  0E23  0827               	movf	(UartParser@rx_buffer^(0+256)+7),w
  7709  0E24  0020               	movlb	0	; select bank0
  7710  0E25  00DB               	movwf	??_uart_task
  7711  0E26  01DC               	clrf	??_uart_task+1
  7712  0E27  085B               	movf	??_uart_task,w
  7713  0E28  0023               	movlb	3	; select bank3
  7714  0E29  00C8               	movwf	uart_task@val^(0+384)
  7715  0E2A  0020               	movlb	0	; select bank0
  7716  0E2B  085C               	movf	??_uart_task+1,w
  7717  0E2C  0023               	movlb	3	; select bank3
  7718  0E2D  00C9               	movwf	(uart_task@val+1)^(0+384)
  7719                           
  7720                           ;UartParser.c: 126:             val = val<<8 | rx_buffer[8];
  7721  0E2E  0022               	movlb	2	; select bank2
  7722  0E2F  0828               	movf	(UartParser@rx_buffer^(0+256)+8),w
  7723  0E30  0020               	movlb	0	; select bank0
  7724  0E31  00DB               	movwf	??_uart_task
  7725  0E32  01DC               	clrf	??_uart_task+1
  7726  0E33  0023               	movlb	3	; select bank3
  7727  0E34  0848               	movf	uart_task@val^(0+384),w
  7728  0E35  0020               	movlb	0	; select bank0
  7729  0E36  00DE               	movwf	??_uart_task+3
  7730  0E37  01DD               	clrf	??_uart_task+2
  7731  0E38  085B               	movf	??_uart_task,w
  7732  0E39  045D               	iorwf	??_uart_task+2,w
  7733  0E3A  0023               	movlb	3	; select bank3
  7734  0E3B  00C8               	movwf	uart_task@val^(0+384)
  7735  0E3C  0020               	movlb	0	; select bank0
  7736  0E3D  085C               	movf	??_uart_task+1,w
  7737  0E3E  045E               	iorwf	??_uart_task+3,w
  7738  0E3F  0023               	movlb	3	; select bank3
  7739  0E40  00C9               	movwf	(uart_task@val+1)^(0+384)
  7740                           
  7741                           ;UartParser.c: 127:             set_vdc_speed(val);
  7742  0E41  0849               	movf	(uart_task@val+1)^(0+384),w
  7743  0E42  0020               	movlb	0	; select bank0
  7744  0E43  00D6               	movwf	set_vdc_speed@msDelay+1
  7745  0E44  0023               	movlb	3	; select bank3
  7746  0E45  0848               	movf	uart_task@val^(0+384),w
  7747  0E46  0020               	movlb	0	; select bank0
  7748  0E47  00D5               	movwf	set_vdc_speed@msDelay
  7749  0E48  3196  2646  318D   	fcall	_set_vdc_speed
  7750                           
  7751                           ;UartParser.c: 129:             val = rx_buffer[9];
  7752  0E4B  0022               	movlb	2	; select bank2
  7753  0E4C  0829               	movf	(UartParser@rx_buffer^(0+256)+9),w
  7754  0E4D  0020               	movlb	0	; select bank0
  7755  0E4E  00DB               	movwf	??_uart_task
  7756  0E4F  01DC               	clrf	??_uart_task+1
  7757  0E50  085B               	movf	??_uart_task,w
  7758  0E51  0023               	movlb	3	; select bank3
  7759  0E52  00C8               	movwf	uart_task@val^(0+384)
  7760  0E53  0020               	movlb	0	; select bank0
  7761  0E54  085C               	movf	??_uart_task+1,w
  7762  0E55  0023               	movlb	3	; select bank3
  7763  0E56  00C9               	movwf	(uart_task@val+1)^(0+384)
  7764                           
  7765                           ;UartParser.c: 130:             val = val<<8 | rx_buffer[10];
  7766  0E57  0022               	movlb	2	; select bank2
  7767  0E58  082A               	movf	(UartParser@rx_buffer^(0+256)+10),w
  7768  0E59  0020               	movlb	0	; select bank0
  7769  0E5A  00DB               	movwf	??_uart_task
  7770  0E5B  01DC               	clrf	??_uart_task+1
  7771  0E5C  0023               	movlb	3	; select bank3
  7772  0E5D  0848               	movf	uart_task@val^(0+384),w
  7773  0E5E  0020               	movlb	0	; select bank0
  7774  0E5F  00DE               	movwf	??_uart_task+3
  7775  0E60  01DD               	clrf	??_uart_task+2
  7776  0E61  085B               	movf	??_uart_task,w
  7777  0E62  045D               	iorwf	??_uart_task+2,w
  7778  0E63  0023               	movlb	3	; select bank3
  7779  0E64  00C8               	movwf	uart_task@val^(0+384)
  7780  0E65  0020               	movlb	0	; select bank0
  7781  0E66  085C               	movf	??_uart_task+1,w
  7782  0E67  045E               	iorwf	??_uart_task+3,w
  7783  0E68  0023               	movlb	3	; select bank3
  7784  0E69  00C9               	movwf	(uart_task@val+1)^(0+384)
  7785                           
  7786                           ;UartParser.c: 131:             set_relay_reset_voltage(val);
  7787  0E6A  0849               	movf	(uart_task@val+1)^(0+384),w
  7788  0E6B  0020               	movlb	0	; select bank0
  7789  0E6C  00CE               	movwf	set_relay_reset_voltage@relay_vthres+1
  7790  0E6D  0023               	movlb	3	; select bank3
  7791  0E6E  0848               	movf	uart_task@val^(0+384),w
  7792  0E6F  0020               	movlb	0	; select bank0
  7793  0E70  00CD               	movwf	set_relay_reset_voltage@relay_vthres
  7794  0E71  3194  24DF  318D   	fcall	_set_relay_reset_voltage
  7795                           
  7796                           ;UartParser.c: 132:             val = rx_buffer[11];
  7797  0E74  0022               	movlb	2	; select bank2
  7798  0E75  082B               	movf	(UartParser@rx_buffer^(0+256)+11),w
  7799  0E76  0020               	movlb	0	; select bank0
  7800  0E77  00DB               	movwf	??_uart_task
  7801  0E78  01DC               	clrf	??_uart_task+1
  7802  0E79  085B               	movf	??_uart_task,w
  7803  0E7A  0023               	movlb	3	; select bank3
  7804  0E7B  00C8               	movwf	uart_task@val^(0+384)
  7805  0E7C  0020               	movlb	0	; select bank0
  7806  0E7D  085C               	movf	??_uart_task+1,w
  7807  0E7E  0023               	movlb	3	; select bank3
  7808  0E7F  00C9               	movwf	(uart_task@val+1)^(0+384)
  7809                           
  7810                           ;UartParser.c: 133:             val = val<<8 | rx_buffer[12];
  7811  0E80  0022               	movlb	2	; select bank2
  7812  0E81  082C               	movf	(UartParser@rx_buffer^(0+256)+12),w
  7813  0E82  0020               	movlb	0	; select bank0
  7814  0E83  00DB               	movwf	??_uart_task
  7815  0E84  01DC               	clrf	??_uart_task+1
  7816  0E85  0023               	movlb	3	; select bank3
  7817  0E86  0848               	movf	uart_task@val^(0+384),w
  7818  0E87  0020               	movlb	0	; select bank0
  7819  0E88  00DE               	movwf	??_uart_task+3
  7820  0E89  01DD               	clrf	??_uart_task+2
  7821  0E8A  085B               	movf	??_uart_task,w
  7822  0E8B  045D               	iorwf	??_uart_task+2,w
  7823  0E8C  0023               	movlb	3	; select bank3
  7824  0E8D  00C8               	movwf	uart_task@val^(0+384)
  7825  0E8E  0020               	movlb	0	; select bank0
  7826  0E8F  085C               	movf	??_uart_task+1,w
  7827  0E90  045E               	iorwf	??_uart_task+3,w
  7828  0E91  0023               	movlb	3	; select bank3
  7829  0E92  00C9               	movwf	(uart_task@val+1)^(0+384)
  7830                           
  7831                           ;UartParser.c: 134:             set_reset_duration(val);
  7832  0E93  0849               	movf	(uart_task@val+1)^(0+384),w
  7833  0E94  0020               	movlb	0	; select bank0
  7834  0E95  00D6               	movwf	set_reset_duration@reset_dur_ms+1
  7835  0E96  0023               	movlb	3	; select bank3
  7836  0E97  0848               	movf	uart_task@val^(0+384),w
  7837  0E98  0020               	movlb	0	; select bank0
  7838  0E99  00D5               	movwf	set_reset_duration@reset_dur_ms
  7839  0E9A  3196  26EE  318D   	fcall	_set_reset_duration
  7840                           
  7841                           ;UartParser.c: 136:             if( rx_buffer[13] == 0 )
  7842  0E9D  0022               	movlb	2	; select bank2
  7843  0E9E  082D               	movf	(UartParser@rx_buffer^(0+256)+13),w
  7844  0E9F  1D03               	btfss	3,2
  7845  0EA0  2EA5               	goto	l4424
  7846                           
  7847                           ;UartParser.c: 137:                 stop_chopper();
  7848  0EA1  3194  2459  318D   	fcall	_stop_chopper
  7849  0EA4  2EA8               	goto	l4426
  7850  0EA5                     l4424:	
  7851                           
  7852                           ;UartParser.c: 139:                 start_chopper();
  7853  0EA5  3195  2523  318D   	fcall	_start_chopper
  7854  0EA8                     l4426:	
  7855                           
  7856                           ;UartParser.c: 140:             save_to_flash();
  7857  0EA8  3189  217F         	fcall	_save_to_flash
  7858  0EAA                     l4428:	
  7859                           
  7860                           ;UartParser.c: 141:             st = INIT;
  7861  0EAA  0020               	movlb	0	; select bank0
  7862  0EAB  01AD               	clrf	UartParser@st
  7863  0EAC  0AAD               	incf	UartParser@st,f
  7864  0EAD  0008               	return
  7865  0EAE                     l4434:	
  7866                           
  7867                           ;UartParser.c: 145:         {;UartParser.c: 146:             if( rx_buffer[0] == GET_PAR
      +                          AMS && rx_idx == 2 )
  7868  0EAE  3055               	movlw	85
  7869  0EAF  0022               	movlb	2	; select bank2
  7870  0EB0  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7871  0EB1  1D03               	btfss	3,2
  7872  0EB2  2F77               	goto	l4492
  7873  0EB3  3002               	movlw	2
  7874  0EB4  0020               	movlb	0	; select bank0
  7875  0EB5  062F               	xorwf	UartParser@rx_idx,w
  7876  0EB6  1D03               	btfss	3,2
  7877  0EB7  2F77               	goto	l4492
  7878                           
  7879                           ;UartParser.c: 147:             {;UartParser.c: 148:                 uint16_t val;;UartP
      +                          arser.c: 149:                 val = get_vdc_min();
  7880  0EB8  3193  2378  318D   	fcall	_get_vdc_min
  7881  0EBB  084E               	movf	?_get_vdc_min+1,w
  7882  0EBC  0023               	movlb	3	; select bank3
  7883  0EBD  00CB               	movwf	(uart_task@val_1507+1)^(0+384)
  7884  0EBE  0020               	movlb	0	; select bank0
  7885  0EBF  084D               	movf	?_get_vdc_min,w
  7886  0EC0  0023               	movlb	3	; select bank3
  7887  0EC1  00CA               	movwf	uart_task@val_1507^(0+384)
  7888                           
  7889                           ;UartParser.c: 150:                 rx_buffer[1] = (val>>8) & 0xFF;
  7890  0EC2  084B               	movf	(uart_task@val_1507^(0+384)+1),w
  7891  0EC3  0020               	movlb	0	; select bank0
  7892  0EC4  00DB               	movwf	??_uart_task
  7893  0EC5  085B               	movf	??_uart_task,w
  7894  0EC6  0022               	movlb	2	; select bank2
  7895  0EC7  00A1               	movwf	(UartParser@rx_buffer^(0+256)+1)
  7896                           
  7897                           ;UartParser.c: 151:                 rx_buffer[2] = val & 0xFF;
  7898  0EC8  0023               	movlb	3	; select bank3
  7899  0EC9  084A               	movf	uart_task@val_1507^(0+384),w
  7900  0ECA  0020               	movlb	0	; select bank0
  7901  0ECB  00DB               	movwf	??_uart_task
  7902  0ECC  085B               	movf	??_uart_task,w
  7903  0ECD  0022               	movlb	2	; select bank2
  7904  0ECE  00A2               	movwf	(UartParser@rx_buffer^(0+256)+2)
  7905                           
  7906                           ;UartParser.c: 152:                 val = get_vdc_max();
  7907  0ECF  3193  238F  318D   	fcall	_get_vdc_max
  7908  0ED2  084E               	movf	?_get_vdc_max+1,w
  7909  0ED3  0023               	movlb	3	; select bank3
  7910  0ED4  00CB               	movwf	(uart_task@val_1507+1)^(0+384)
  7911  0ED5  0020               	movlb	0	; select bank0
  7912  0ED6  084D               	movf	?_get_vdc_max,w
  7913  0ED7  0023               	movlb	3	; select bank3
  7914  0ED8  00CA               	movwf	uart_task@val_1507^(0+384)
  7915                           
  7916                           ;UartParser.c: 153:                 rx_buffer[3] = (val>>8) & 0xFF;
  7917  0ED9  084B               	movf	(uart_task@val_1507^(0+384)+1),w
  7918  0EDA  0020               	movlb	0	; select bank0
  7919  0EDB  00DB               	movwf	??_uart_task
  7920  0EDC  085B               	movf	??_uart_task,w
  7921  0EDD  0022               	movlb	2	; select bank2
  7922  0EDE  00A3               	movwf	(UartParser@rx_buffer^(0+256)+3)
  7923                           
  7924                           ;UartParser.c: 154:                 rx_buffer[4] = val & 0xFF;
  7925  0EDF  0023               	movlb	3	; select bank3
  7926  0EE0  084A               	movf	uart_task@val_1507^(0+384),w
  7927  0EE1  0020               	movlb	0	; select bank0
  7928  0EE2  00DB               	movwf	??_uart_task
  7929  0EE3  085B               	movf	??_uart_task,w
  7930  0EE4  0022               	movlb	2	; select bank2
  7931  0EE5  00A4               	movwf	(UartParser@rx_buffer^(0+256)+4)
  7932                           
  7933                           ;UartParser.c: 155:                 val = get_vdc_critic();
  7934  0EE6  3193  2389  318D   	fcall	_get_vdc_critic
  7935  0EE9  084E               	movf	?_get_vdc_critic+1,w
  7936  0EEA  0023               	movlb	3	; select bank3
  7937  0EEB  00CB               	movwf	(uart_task@val_1507+1)^(0+384)
  7938  0EEC  0020               	movlb	0	; select bank0
  7939  0EED  084D               	movf	?_get_vdc_critic,w
  7940  0EEE  0023               	movlb	3	; select bank3
  7941  0EEF  00CA               	movwf	uart_task@val_1507^(0+384)
  7942                           
  7943                           ;UartParser.c: 156:                 rx_buffer[5] = (val>>8) & 0xFF;
  7944  0EF0  084B               	movf	(uart_task@val_1507^(0+384)+1),w
  7945  0EF1  0020               	movlb	0	; select bank0
  7946  0EF2  00DB               	movwf	??_uart_task
  7947  0EF3  085B               	movf	??_uart_task,w
  7948  0EF4  0022               	movlb	2	; select bank2
  7949  0EF5  00A5               	movwf	(UartParser@rx_buffer^(0+256)+5)
  7950                           
  7951                           ;UartParser.c: 157:                 rx_buffer[6] = val & 0xFF;
  7952  0EF6  0023               	movlb	3	; select bank3
  7953  0EF7  084A               	movf	uart_task@val_1507^(0+384),w
  7954  0EF8  0020               	movlb	0	; select bank0
  7955  0EF9  00DB               	movwf	??_uart_task
  7956  0EFA  085B               	movf	??_uart_task,w
  7957  0EFB  0022               	movlb	2	; select bank2
  7958  0EFC  00A6               	movwf	(UartParser@rx_buffer^(0+256)+6)
  7959                           
  7960                           ;UartParser.c: 158:                 val = get_vdc_speed();
  7961  0EFD  3188  207F  318D   	fcall	_get_vdc_speed
  7962  0F00  0854               	movf	?_get_vdc_speed+1,w
  7963  0F01  0023               	movlb	3	; select bank3
  7964  0F02  00CB               	movwf	(uart_task@val_1507+1)^(0+384)
  7965  0F03  0020               	movlb	0	; select bank0
  7966  0F04  0853               	movf	?_get_vdc_speed,w
  7967  0F05  0023               	movlb	3	; select bank3
  7968  0F06  00CA               	movwf	uart_task@val_1507^(0+384)
  7969                           
  7970                           ;UartParser.c: 159:                 rx_buffer[7] = (val>>8) & 0xFF;
  7971  0F07  084B               	movf	(uart_task@val_1507^(0+384)+1),w
  7972  0F08  0020               	movlb	0	; select bank0
  7973  0F09  00DB               	movwf	??_uart_task
  7974  0F0A  085B               	movf	??_uart_task,w
  7975  0F0B  0022               	movlb	2	; select bank2
  7976  0F0C  00A7               	movwf	(UartParser@rx_buffer^(0+256)+7)
  7977                           
  7978                           ;UartParser.c: 160:                 rx_buffer[8] = val & 0xFF;
  7979  0F0D  0023               	movlb	3	; select bank3
  7980  0F0E  084A               	movf	uart_task@val_1507^(0+384),w
  7981  0F0F  0020               	movlb	0	; select bank0
  7982  0F10  00DB               	movwf	??_uart_task
  7983  0F11  085B               	movf	??_uart_task,w
  7984  0F12  0022               	movlb	2	; select bank2
  7985  0F13  00A8               	movwf	(UartParser@rx_buffer^(0+256)+8)
  7986                           
  7987                           ;UartParser.c: 162:                 val = get_relay_reset_voltage();
  7988  0F14  3193  2383  318D   	fcall	_get_relay_reset_voltage
  7989  0F17  084E               	movf	?_get_relay_reset_voltage+1,w
  7990  0F18  0023               	movlb	3	; select bank3
  7991  0F19  00CB               	movwf	(uart_task@val_1507+1)^(0+384)
  7992  0F1A  0020               	movlb	0	; select bank0
  7993  0F1B  084D               	movf	?_get_relay_reset_voltage,w
  7994  0F1C  0023               	movlb	3	; select bank3
  7995  0F1D  00CA               	movwf	uart_task@val_1507^(0+384)
  7996                           
  7997                           ;UartParser.c: 163:                 rx_buffer[9] = (val>>8) & 0xFF;
  7998  0F1E  084B               	movf	(uart_task@val_1507^(0+384)+1),w
  7999  0F1F  0020               	movlb	0	; select bank0
  8000  0F20  00DB               	movwf	??_uart_task
  8001  0F21  085B               	movf	??_uart_task,w
  8002  0F22  0022               	movlb	2	; select bank2
  8003  0F23  00A9               	movwf	(UartParser@rx_buffer^(0+256)+9)
  8004                           
  8005                           ;UartParser.c: 164:                 rx_buffer[10] = val & 0xFF;
  8006  0F24  0023               	movlb	3	; select bank3
  8007  0F25  084A               	movf	uart_task@val_1507^(0+384),w
  8008  0F26  0020               	movlb	0	; select bank0
  8009  0F27  00DB               	movwf	??_uart_task
  8010  0F28  085B               	movf	??_uart_task,w
  8011  0F29  0022               	movlb	2	; select bank2
  8012  0F2A  00AA               	movwf	(UartParser@rx_buffer^(0+256)+10)
  8013                           
  8014                           ;UartParser.c: 165:                 val = get_reset_duration();
  8015  0F2B  3193  23E1  318D   	fcall	_get_reset_duration
  8016  0F2E  084E               	movf	?_get_reset_duration+1,w
  8017  0F2F  0023               	movlb	3	; select bank3
  8018  0F30  00CB               	movwf	(uart_task@val_1507+1)^(0+384)
  8019  0F31  0020               	movlb	0	; select bank0
  8020  0F32  084D               	movf	?_get_reset_duration,w
  8021  0F33  0023               	movlb	3	; select bank3
  8022  0F34  00CA               	movwf	uart_task@val_1507^(0+384)
  8023                           
  8024                           ;UartParser.c: 166:                 rx_buffer[11] = (val>>8) & 0xFF;
  8025  0F35  084B               	movf	(uart_task@val_1507^(0+384)+1),w
  8026  0F36  0020               	movlb	0	; select bank0
  8027  0F37  00DB               	movwf	??_uart_task
  8028  0F38  085B               	movf	??_uart_task,w
  8029  0F39  0022               	movlb	2	; select bank2
  8030  0F3A  00AB               	movwf	(UartParser@rx_buffer^(0+256)+11)
  8031                           
  8032                           ;UartParser.c: 167:                 rx_buffer[12] = val & 0xFF;
  8033  0F3B  0023               	movlb	3	; select bank3
  8034  0F3C  084A               	movf	uart_task@val_1507^(0+384),w
  8035  0F3D  0020               	movlb	0	; select bank0
  8036  0F3E  00DB               	movwf	??_uart_task
  8037  0F3F  085B               	movf	??_uart_task,w
  8038  0F40  0022               	movlb	2	; select bank2
  8039  0F41  00AC               	movwf	(UartParser@rx_buffer^(0+256)+12)
  8040                           
  8041                           ;UartParser.c: 169:                 rx_buffer[13] = is_chopper_active();
  8042  0F42  3193  2358  318D   	fcall	_is_chopper_active
  8043  0F45  00DB               	movwf	??_uart_task
  8044  0F46  085B               	movf	??_uart_task,w
  8045  0F47  0022               	movlb	2	; select bank2
  8046  0F48  00AD               	movwf	(UartParser@rx_buffer^(0+256)+13)
  8047                           
  8048                           ;UartParser.c: 170:                 uint8_t i;;UartParser.c: 171:                 uint8_
      +                          t xor = rx_buffer[0];
  8049  0F49  0820               	movf	UartParser@rx_buffer^(0+256),w
  8050  0F4A  0020               	movlb	0	; select bank0
  8051  0F4B  00DB               	movwf	??_uart_task
  8052  0F4C  085B               	movf	??_uart_task,w
  8053  0F4D  0023               	movlb	3	; select bank3
  8054  0F4E  00BE               	movwf	uart_task@xor_1514^(0+384)
  8055                           
  8056                           ;UartParser.c: 172:                 for( i=1 ; i<14 ; i++ )
  8057  0F4F  01C2               	clrf	uart_task@i_1513^(0+384)
  8058  0F50  0AC2               	incf	uart_task@i_1513^(0+384),f
  8059  0F51                     l4480:	
  8060                           
  8061                           ;UartParser.c: 173:                     xor ^= rx_buffer[i];
  8062  0F51  0842               	movf	uart_task@i_1513^(0+384),w
  8063  0F52  3E20               	addlw	(low (UartParser@rx_buffer| (0+256)))& (0+255)
  8064  0F53  0086               	movwf	6
  8065  0F54  3001               	movlw	1	; select bank2/3
  8066  0F55  0087               	movwf	7
  8067  0F56  0801               	movf	1,w
  8068  0F57  0020               	movlb	0	; select bank0
  8069  0F58  00DB               	movwf	??_uart_task
  8070  0F59  085B               	movf	??_uart_task,w
  8071  0F5A  0023               	movlb	3	; select bank3
  8072  0F5B  06BE               	xorwf	uart_task@xor_1514^(0+384),f
  8073  0F5C  3001               	movlw	1
  8074  0F5D  0020               	movlb	0	; select bank0
  8075  0F5E  00DB               	movwf	??_uart_task
  8076  0F5F  085B               	movf	??_uart_task,w
  8077  0F60  0023               	movlb	3	; select bank3
  8078  0F61  07C2               	addwf	uart_task@i_1513^(0+384),f
  8079  0F62  300E               	movlw	14
  8080  0F63  0242               	subwf	uart_task@i_1513^(0+384),w
  8081  0F64  1C03               	skipc
  8082  0F65  2F51               	goto	l4480
  8083                           
  8084                           ;UartParser.c: 174:                 rx_buffer[14] = xor;
  8085  0F66  083E               	movf	uart_task@xor_1514^(0+384),w
  8086  0F67  0020               	movlb	0	; select bank0
  8087  0F68  00DB               	movwf	??_uart_task
  8088  0F69  085B               	movf	??_uart_task,w
  8089  0F6A  0022               	movlb	2	; select bank2
  8090  0F6B  00AE               	movwf	(UartParser@rx_buffer^(0+256)+14)
  8091                           
  8092                           ;UartParser.c: 175:                 rx_idx = 15;
  8093  0F6C  300F               	movlw	15
  8094  0F6D                     L1:	
  8095  0F6D  0020               	movlb	0	; select bank0
  8096  0F6E  00DB               	movwf	??_uart_task
  8097  0F6F  085B               	movf	??_uart_task,w
  8098  0F70  00AF               	movwf	UartParser@rx_idx
  8099                           
  8100                           ;UartParser.c: 176:                 tx_idx = 0;
  8101  0F71  01AC               	clrf	UartParser@tx_idx
  8102                           
  8103                           ;UartParser.c: 177:                 st = SEND_RESPONSE;
  8104  0F72  3005               	movlw	5
  8105  0F73  00DB               	movwf	??_uart_task
  8106  0F74  085B               	movf	??_uart_task,w
  8107  0F75  00AD               	movwf	UartParser@st
  8108                           
  8109                           ;UartParser.c: 178:             }
  8110  0F76  0008               	return
  8111  0F77                     l4492:	
  8112                           
  8113                           ;UartParser.c: 180:             {;UartParser.c: 181:                 if( rx_buffer[0] ==
      +                           GET_VDC && rx_idx == 2 )
  8114  0F77  30A5               	movlw	165
  8115  0F78  0022               	movlb	2	; select bank2
  8116  0F79  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  8117  0F7A  1D03               	btfss	3,2
  8118  0F7B  2EAA               	goto	l4428
  8119  0F7C  3002               	movlw	2
  8120  0F7D  0020               	movlb	0	; select bank0
  8121  0F7E  062F               	xorwf	UartParser@rx_idx,w
  8122  0F7F  1D03               	btfss	3,2
  8123  0F80  2EAA               	goto	l4428
  8124                           
  8125                           ;UartParser.c: 182:                 {;UartParser.c: 183:                     uint16_t va
      +                          l;;UartParser.c: 184:                     val = get_vdc();
  8126  0F81  3193  2373  318D   	fcall	_get_vdc
  8127  0F84  084E               	movf	?_get_vdc+1,w
  8128  0F85  0023               	movlb	3	; select bank3
  8129  0F86  00C0               	movwf	(uart_task@val_1515+1)^(0+384)
  8130  0F87  0020               	movlb	0	; select bank0
  8131  0F88  084D               	movf	?_get_vdc,w
  8132  0F89  0023               	movlb	3	; select bank3
  8133  0F8A  00BF               	movwf	uart_task@val_1515^(0+384)
  8134                           
  8135                           ;UartParser.c: 185:                     rx_buffer[1] = (val>>8) & 0xFF;
  8136  0F8B  0840               	movf	(uart_task@val_1515^(0+384)+1),w
  8137  0F8C  0020               	movlb	0	; select bank0
  8138  0F8D  00DB               	movwf	??_uart_task
  8139  0F8E  085B               	movf	??_uart_task,w
  8140  0F8F  0022               	movlb	2	; select bank2
  8141  0F90  00A1               	movwf	(UartParser@rx_buffer^(0+256)+1)
  8142                           
  8143                           ;UartParser.c: 186:                     rx_buffer[2] = val & 0xFF;
  8144  0F91  0023               	movlb	3	; select bank3
  8145  0F92  083F               	movf	uart_task@val_1515^(0+384),w
  8146  0F93  0020               	movlb	0	; select bank0
  8147  0F94  00DB               	movwf	??_uart_task
  8148  0F95  085B               	movf	??_uart_task,w
  8149  0F96  0022               	movlb	2	; select bank2
  8150  0F97  00A2               	movwf	(UartParser@rx_buffer^(0+256)+2)
  8151                           
  8152                           ;UartParser.c: 187:                     uint32_t activation_counter = get_relay_activati
      +                          on_counter();
  8153  0F98  3194  2495  318D   	fcall	_get_relay_activation_counter
  8154  0F9B  0850               	movf	?_get_relay_activation_counter+3,w
  8155  0F9C  0023               	movlb	3	; select bank3
  8156  0F9D  00C7               	movwf	(uart_task@activation_counter+3)^(0+384)
  8157  0F9E  0020               	movlb	0	; select bank0
  8158  0F9F  084F               	movf	?_get_relay_activation_counter+2,w
  8159  0FA0  0023               	movlb	3	; select bank3
  8160  0FA1  00C6               	movwf	(uart_task@activation_counter+2)^(0+384)
  8161  0FA2  0020               	movlb	0	; select bank0
  8162  0FA3  084E               	movf	?_get_relay_activation_counter+1,w
  8163  0FA4  0023               	movlb	3	; select bank3
  8164  0FA5  00C5               	movwf	(uart_task@activation_counter+1)^(0+384)
  8165  0FA6  0020               	movlb	0	; select bank0
  8166  0FA7  084D               	movf	?_get_relay_activation_counter,w
  8167  0FA8  0023               	movlb	3	; select bank3
  8168  0FA9  00C4               	movwf	uart_task@activation_counter^(0+384)
  8169                           
  8170                           ;UartParser.c: 188:                     rx_buffer[3] = (activation_counter >> 24) & 0xFF
      +                          ;
  8171  0FAA  0847               	movf	(uart_task@activation_counter^(0+384)+3),w
  8172  0FAB  0020               	movlb	0	; select bank0
  8173  0FAC  00DB               	movwf	??_uart_task
  8174  0FAD  085B               	movf	??_uart_task,w
  8175  0FAE  0022               	movlb	2	; select bank2
  8176  0FAF  00A3               	movwf	(UartParser@rx_buffer^(0+256)+3)
  8177                           
  8178                           ;UartParser.c: 189:                     rx_buffer[4] = (activation_counter >> 16) & 0xFF
      +                          ;
  8179  0FB0  0023               	movlb	3	; select bank3
  8180  0FB1  0846               	movf	(uart_task@activation_counter^(0+384)+2),w
  8181  0FB2  0020               	movlb	0	; select bank0
  8182  0FB3  00DB               	movwf	??_uart_task
  8183  0FB4  085B               	movf	??_uart_task,w
  8184  0FB5  0022               	movlb	2	; select bank2
  8185  0FB6  00A4               	movwf	(UartParser@rx_buffer^(0+256)+4)
  8186                           
  8187                           ;UartParser.c: 190:                     rx_buffer[5] = (activation_counter >> 8) & 0xFF;
  8188  0FB7  0023               	movlb	3	; select bank3
  8189  0FB8  0845               	movf	(uart_task@activation_counter^(0+384)+1),w
  8190  0FB9  0020               	movlb	0	; select bank0
  8191  0FBA  00DB               	movwf	??_uart_task
  8192  0FBB  085B               	movf	??_uart_task,w
  8193  0FBC  0022               	movlb	2	; select bank2
  8194  0FBD  00A5               	movwf	(UartParser@rx_buffer^(0+256)+5)
  8195                           
  8196                           ;UartParser.c: 191:                     rx_buffer[6] = activation_counter & 0xFF;
  8197  0FBE  0023               	movlb	3	; select bank3
  8198  0FBF  0844               	movf	uart_task@activation_counter^(0+384),w
  8199  0FC0  0020               	movlb	0	; select bank0
  8200  0FC1  00DB               	movwf	??_uart_task
  8201  0FC2  085B               	movf	??_uart_task,w
  8202  0FC3  0022               	movlb	2	; select bank2
  8203  0FC4  00A6               	movwf	(UartParser@rx_buffer^(0+256)+6)
  8204                           
  8205                           ;UartParser.c: 192:                     rx_buffer[7] = rx_buffer[0];
  8206  0FC5  0820               	movf	UartParser@rx_buffer^(0+256),w
  8207  0FC6  0020               	movlb	0	; select bank0
  8208  0FC7  00DB               	movwf	??_uart_task
  8209  0FC8  085B               	movf	??_uart_task,w
  8210  0FC9  0022               	movlb	2	; select bank2
  8211  0FCA  00A7               	movwf	(UartParser@rx_buffer^(0+256)+7)
  8212                           
  8213                           ;UartParser.c: 193:                     for( uint8_t idx=1 ; idx<7 ; idx++ )
  8214  0FCB  0023               	movlb	3	; select bank3
  8215  0FCC  01C3               	clrf	uart_task@idx^(0+384)
  8216  0FCD  0AC3               	incf	uart_task@idx^(0+384),f
  8217  0FCE                     l4514:	
  8218  0FCE  3007               	movlw	7
  8219  0FCF  0243               	subwf	uart_task@idx^(0+384),w
  8220  0FD0  1803               	btfsc	3,0
  8221  0FD1  2FE4               	goto	l4524
  8222                           
  8223                           ;UartParser.c: 194:                         rx_buffer[7] ^= rx_buffer[idx];
  8224  0FD2  0843               	movf	uart_task@idx^(0+384),w
  8225  0FD3  3E20               	addlw	(low (UartParser@rx_buffer| (0+256)))& (0+255)
  8226  0FD4  0086               	movwf	6
  8227  0FD5  3001               	movlw	1	; select bank2/3
  8228  0FD6  0087               	movwf	7
  8229  0FD7  0801               	movf	1,w
  8230  0FD8  0020               	movlb	0	; select bank0
  8231  0FD9  00DB               	movwf	??_uart_task
  8232  0FDA  085B               	movf	??_uart_task,w
  8233  0FDB  0022               	movlb	2	; select bank2
  8234  0FDC  06A7               	xorwf	(UartParser@rx_buffer^(0+256)+7),f
  8235  0FDD  3001               	movlw	1
  8236  0FDE  0020               	movlb	0	; select bank0
  8237  0FDF  00DB               	movwf	??_uart_task
  8238  0FE0  085B               	movf	??_uart_task,w
  8239  0FE1  0023               	movlb	3	; select bank3
  8240  0FE2  07C3               	addwf	uart_task@idx^(0+384),f
  8241  0FE3  2FCE               	goto	l4514
  8242  0FE4                     l4524:	
  8243                           
  8244                           ;UartParser.c: 195:                     rx_idx = 8;
  8245  0FE4  3008               	movlw	8
  8246  0FE5  2F6D               	goto	L1
  8247  0FE6                     l4530:	
  8248                           
  8249                           ;UartParser.c: 206:     if( st == SEND_RESPONSE )
  8250  0FE6  3005               	movlw	5
  8251  0FE7  062D               	xorwf	UartParser@st,w
  8252  0FE8  1D03               	btfss	3,2
  8253  0FE9  0008               	return
  8254                           
  8255                           ;UartParser.c: 207:     {;UartParser.c: 208:         if( TX1STAbits.TRMT == 0 )
  8256  0FEA  0023               	movlb	3	; select bank3
  8257  0FEB  1C9E               	btfss	30,1	;volatile
  8258  0FEC  0008               	return
  8259                           
  8260                           ;UartParser.c: 210:         if( tx_idx < rx_idx )
  8261  0FED  0020               	movlb	0	; select bank0
  8262  0FEE  082F               	movf	UartParser@rx_idx,w
  8263  0FEF  022C               	subwf	UartParser@tx_idx,w
  8264  0FF0  1803               	skipnc
  8265  0FF1  2EAA               	goto	l4428
  8266                           
  8267                           ;UartParser.c: 211:             TX1REG = rx_buffer[tx_idx++];
  8268  0FF2  082C               	movf	UartParser@tx_idx,w
  8269  0FF3  3E20               	addlw	(low (UartParser@rx_buffer| (0+256)))& (0+255)
  8270  0FF4  0086               	movwf	6
  8271  0FF5  3001               	movlw	1	; select bank2/3
  8272  0FF6  0087               	movwf	7
  8273  0FF7  0801               	movf	1,w
  8274  0FF8  0023               	movlb	3	; select bank3
  8275  0FF9  009A               	movwf	26	;volatile
  8276  0FFA  3001               	movlw	1
  8277  0FFB  0020               	movlb	0	; select bank0
  8278  0FFC  00DB               	movwf	??_uart_task
  8279  0FFD  085B               	movf	??_uart_task,w
  8280  0FFE  07AC               	addwf	UartParser@tx_idx,f
  8281  0FFF  0008               	return
  8282  1000                     __end_of_uart_task:	
  8283                           
  8284                           	psect	text2
  8285  1459                     __ptext2:	
  8286 ;; *************** function _stop_chopper *****************
  8287 ;; Defined at:
  8288 ;;		line 243 in file "vcontrol.c"
  8289 ;; Parameters:    Size  Location     Type
  8290 ;;		None
  8291 ;; Auto vars:     Size  Location     Type
  8292 ;;		None
  8293 ;; Return value:  Size  Location     Type
  8294 ;;                  1    wreg      void 
  8295 ;; Registers used:
  8296 ;;		wreg, status,2, status,0, pclath, cstack
  8297 ;; Tracked objects:
  8298 ;;		On entry : 1F/2
  8299 ;;		On exit  : 1F/0
  8300 ;;		Unchanged: 0/0
  8301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8306 ;;Total ram usage:        0 bytes
  8307 ;; Hardware stack levels used:    1
  8308 ;; Hardware stack levels required when called:    7
  8309 ;; This function calls:
  8310 ;;		_stop_relay_watchdog
  8311 ;; This function is called by:
  8312 ;;		_uart_task
  8313 ;; This function uses a non-reentrant model
  8314 ;;
  8315                           
  8316                           
  8317                           ;psect for function _stop_chopper
  8318  1459                     _stop_chopper:	
  8319                           
  8320                           ;vcontrol.c: 245:     if( chopper_active == 0 )
  8321                           
  8322                           ;incstack = 0
  8323                           ; Regs used in _stop_chopper: [wreg+status,2+status,0+pclath+cstack]
  8324  1459  0020               	movlb	0	; select bank0
  8325  145A  0831               	movf	_chopper_active,w
  8326  145B  1903               	btfsc	3,2
  8327  145C  0008               	return
  8328                           
  8329                           ;vcontrol.c: 248:     stop_relay_watchdog();
  8330  145D  3193  2395         	fcall	_stop_relay_watchdog
  8331                           
  8332                           ;vcontrol.c: 250:     TRISAbits.TRISA5 = 1;
  8333  145F  0021               	movlb	1	; select bank1
  8334  1460  168C               	bsf	12,5	;volatile
  8335                           
  8336                           ;vcontrol.c: 251:     TRISAbits.TRISA4 = 1;
  8337  1461  160C               	bsf	12,4	;volatile
  8338                           
  8339                           ;vcontrol.c: 252:     target_duty = 0;
  8340  1462  0020               	movlb	0	; select bank0
  8341  1463  01A4               	clrf	_target_duty
  8342  1464  01A5               	clrf	_target_duty+1
  8343                           
  8344                           ;vcontrol.c: 253:     chopper_active = 0;
  8345  1465  01B1               	clrf	_chopper_active
  8346  1466  0008               	return
  8347  1467                     __end_of_stop_chopper:	
  8348                           
  8349                           	psect	text3
  8350  1395                     __ptext3:	
  8351 ;; *************** function _stop_relay_watchdog *****************
  8352 ;; Defined at:
  8353 ;;		line 46 in file "SolidStateRelay.c"
  8354 ;; Parameters:    Size  Location     Type
  8355 ;;		None
  8356 ;; Auto vars:     Size  Location     Type
  8357 ;;		None
  8358 ;; Return value:  Size  Location     Type
  8359 ;;                  1    wreg      void 
  8360 ;; Registers used:
  8361 ;;		status,2, status,0, pclath, cstack
  8362 ;; Tracked objects:
  8363 ;;		On entry : 1F/0
  8364 ;;		On exit  : 1F/2
  8365 ;;		Unchanged: 0/0
  8366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8371 ;;Total ram usage:        0 bytes
  8372 ;; Hardware stack levels used:    1
  8373 ;; Hardware stack levels required when called:    6
  8374 ;; This function calls:
  8375 ;;		_close_relay
  8376 ;; This function is called by:
  8377 ;;		_stop_chopper
  8378 ;; This function uses a non-reentrant model
  8379 ;;
  8380                           
  8381                           
  8382                           ;psect for function _stop_relay_watchdog
  8383  1395                     _stop_relay_watchdog:	
  8384                           
  8385                           ;SolidStateRelay.c: 48:     st = SHUTDOWN;
  8386                           
  8387                           ;incstack = 0
  8388                           ; Regs used in _stop_relay_watchdog: [status,2+status,0+pclath+cstack]
  8389  1395  01A9               	clrf	SolidStateRelay@st
  8390                           
  8391                           ;SolidStateRelay.c: 49:     st_act = RA_SHUTDOWN;
  8392  1396  0021               	movlb	1	; select bank1
  8393  1397  01E5               	clrf	_st_act^(0+128)
  8394                           
  8395                           ;SolidStateRelay.c: 50:     close_relay();
  8396  1398  3193  2352         	fcall	_close_relay
  8397  139A  0008               	return
  8398  139B                     __end_of_stop_relay_watchdog:	
  8399                           
  8400                           	psect	text4
  8401  1358                     __ptext4:	
  8402 ;; *************** function _is_chopper_active *****************
  8403 ;; Defined at:
  8404 ;;		line 257 in file "vcontrol.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;		None
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;		None
  8409 ;; Return value:  Size  Location     Type
  8410 ;;                  1    wreg      _Bool 
  8411 ;; Registers used:
  8412 ;;		wreg
  8413 ;; Tracked objects:
  8414 ;;		On entry : 1F/2
  8415 ;;		On exit  : 1F/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8422 ;;Total ram usage:        0 bytes
  8423 ;; Hardware stack levels used:    1
  8424 ;; Hardware stack levels required when called:    5
  8425 ;; This function calls:
  8426 ;;		Nothing
  8427 ;; This function is called by:
  8428 ;;		_uart_task
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           
  8433                           ;psect for function _is_chopper_active
  8434  1358                     _is_chopper_active:	
  8435                           
  8436                           ;vcontrol.c: 259:     return chopper_active;
  8437                           
  8438                           ;incstack = 0
  8439                           ; Regs used in _is_chopper_active: [wreg]
  8440  1358  0020               	movlb	0	; select bank0
  8441  1359  0831               	movf	_chopper_active,w
  8442  135A  0008               	return
  8443  135B                     __end_of_is_chopper_active:	
  8444                           
  8445                           	psect	text5
  8446  087F                     __ptext5:	
  8447 ;; *************** function _get_vdc_speed *****************
  8448 ;; Defined at:
  8449 ;;		line 322 in file "vcontrol.c"
  8450 ;; Parameters:    Size  Location     Type
  8451 ;;		None
  8452 ;; Auto vars:     Size  Location     Type
  8453 ;;		None
  8454 ;; Return value:  Size  Location     Type
  8455 ;;                  2   15[BANK0 ] unsigned short 
  8456 ;; Registers used:
  8457 ;;		wreg, status,2, status,0, pclath, cstack
  8458 ;; Tracked objects:
  8459 ;;		On entry : 1F/2
  8460 ;;		On exit  : 1F/0
  8461 ;;		Unchanged: 0/0
  8462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8463 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8466 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8467 ;;Total ram usage:        2 bytes
  8468 ;; Hardware stack levels used:    1
  8469 ;; Hardware stack levels required when called:    6
  8470 ;; This function calls:
  8471 ;;		___wmul
  8472 ;; This function is called by:
  8473 ;;		_uart_task
  8474 ;; This function uses a non-reentrant model
  8475 ;;
  8476                           
  8477                           
  8478                           ;psect for function _get_vdc_speed
  8479  087F                     _get_vdc_speed:	
  8480                           
  8481                           ;vcontrol.c: 325:     return (duty_count_up_max + 1)*100;
  8482                           
  8483                           ;incstack = 0
  8484                           ; Regs used in _get_vdc_speed: [wreg+status,2+status,0+pclath+cstack]
  8485  087F  0021               	movlb	1	; select bank1
  8486  0880  086C               	movf	_duty_count_up_max^(0+128),w
  8487  0881  3E01               	addlw	1
  8488  0882  0020               	movlb	0	; select bank0
  8489  0883  00CD               	movwf	___wmul@multiplier
  8490  0884  3000               	movlw	0
  8491  0885  0021               	movlb	1	; select bank1
  8492  0886  3D6D               	addwfc	(_duty_count_up_max+1)^(0+128),w
  8493  0887  0020               	movlb	0	; select bank0
  8494  0888  00CE               	movwf	___wmul@multiplier+1
  8495  0889  3064               	movlw	100
  8496  088A  00CF               	movwf	___wmul@multiplicand
  8497  088B  3000               	movlw	0
  8498  088C  00D0               	movwf	___wmul@multiplicand+1
  8499  088D  3195  2572         	fcall	___wmul
  8500  088F  084E               	movf	?___wmul+1,w
  8501  0890  00D4               	movwf	?_get_vdc_speed+1
  8502  0891  084D               	movf	?___wmul,w
  8503  0892  00D3               	movwf	?_get_vdc_speed
  8504  0893  0008               	return
  8505  0894                     __end_of_get_vdc_speed:	
  8506                           
  8507                           	psect	text6
  8508  1572                     __ptext6:	
  8509 ;; *************** function ___wmul *****************
  8510 ;; Defined at:
  8511 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  8512 ;; Parameters:    Size  Location     Type
  8513 ;;  multiplier      2    9[BANK0 ] unsigned int 
  8514 ;;  multiplicand    2   11[BANK0 ] unsigned int 
  8515 ;; Auto vars:     Size  Location     Type
  8516 ;;  product         2   13[BANK0 ] unsigned int 
  8517 ;; Return value:  Size  Location     Type
  8518 ;;                  2    9[BANK0 ] unsigned int 
  8519 ;; Registers used:
  8520 ;;		wreg, status,2, status,0
  8521 ;; Tracked objects:
  8522 ;;		On entry : 1F/0
  8523 ;;		On exit  : 1F/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8526 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8529 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8530 ;;Total ram usage:        6 bytes
  8531 ;; Hardware stack levels used:    1
  8532 ;; Hardware stack levels required when called:    5
  8533 ;; This function calls:
  8534 ;;		Nothing
  8535 ;; This function is called by:
  8536 ;;		_get_vdc_speed
  8537 ;; This function uses a non-reentrant model
  8538 ;;
  8539                           
  8540                           
  8541                           ;psect for function ___wmul
  8542  1572                     ___wmul:	
  8543                           
  8544                           ;incstack = 0
  8545                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8546  1572  01D1               	clrf	___wmul@product
  8547  1573  01D2               	clrf	___wmul@product+1
  8548  1574                     l4038:	
  8549  1574  1C4D               	btfss	___wmul@multiplier,0
  8550  1575  2D7A               	goto	l1232
  8551  1576  084F               	movf	___wmul@multiplicand,w
  8552  1577  07D1               	addwf	___wmul@product,f
  8553  1578  0850               	movf	___wmul@multiplicand+1,w
  8554  1579  3DD2               	addwfc	___wmul@product+1,f
  8555  157A                     l1232:	
  8556  157A  3001               	movlw	1
  8557  157B                     u2705:	
  8558  157B  35CF               	lslf	___wmul@multiplicand,f
  8559  157C  0DD0               	rlf	___wmul@multiplicand+1,f
  8560  157D  0B89               	decfsz	9,f
  8561  157E  2D7B               	goto	u2705
  8562  157F  3001               	movlw	1
  8563  1580                     u2715:	
  8564  1580  36CE               	lsrf	___wmul@multiplier+1,f
  8565  1581  0CCD               	rrf	___wmul@multiplier,f
  8566  1582  0B89               	decfsz	9,f
  8567  1583  2D80               	goto	u2715
  8568  1584  084D               	movf	___wmul@multiplier,w
  8569  1585  044E               	iorwf	___wmul@multiplier+1,w
  8570  1586  1D03               	btfss	3,2
  8571  1587  2D74               	goto	l4038
  8572  1588  0852               	movf	___wmul@product+1,w
  8573  1589  00CE               	movwf	?___wmul+1
  8574  158A  0851               	movf	___wmul@product,w
  8575  158B  00CD               	movwf	?___wmul
  8576  158C  0008               	return
  8577  158D                     __end_of___wmul:	
  8578                           
  8579                           	psect	text7
  8580  1378                     __ptext7:	
  8581 ;; *************** function _get_vdc_min *****************
  8582 ;; Defined at:
  8583 ;;		line 307 in file "vcontrol.c"
  8584 ;; Parameters:    Size  Location     Type
  8585 ;;		None
  8586 ;; Auto vars:     Size  Location     Type
  8587 ;;		None
  8588 ;; Return value:  Size  Location     Type
  8589 ;;                  2    9[BANK0 ] unsigned short 
  8590 ;; Registers used:
  8591 ;;		wreg
  8592 ;; Tracked objects:
  8593 ;;		On entry : 1F/0
  8594 ;;		On exit  : 1F/0
  8595 ;;		Unchanged: 0/0
  8596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8597 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;Total ram usage:        2 bytes
  8602 ;; Hardware stack levels used:    1
  8603 ;; Hardware stack levels required when called:    5
  8604 ;; This function calls:
  8605 ;;		Nothing
  8606 ;; This function is called by:
  8607 ;;		_uart_task
  8608 ;; This function uses a non-reentrant model
  8609 ;;
  8610                           
  8611                           
  8612                           ;psect for function _get_vdc_min
  8613  1378                     _get_vdc_min:	
  8614                           
  8615                           ;vcontrol.c: 309:     return vdc_min;
  8616                           
  8617                           ;incstack = 0
  8618                           ; Regs used in _get_vdc_min: [wreg]
  8619  1378  0843               	movf	_vdc_min+1,w
  8620  1379  00CE               	movwf	?_get_vdc_min+1
  8621  137A  0842               	movf	_vdc_min,w
  8622  137B  00CD               	movwf	?_get_vdc_min
  8623  137C  0008               	return
  8624  137D                     __end_of_get_vdc_min:	
  8625                           
  8626                           	psect	text8
  8627  138F                     __ptext8:	
  8628 ;; *************** function _get_vdc_max *****************
  8629 ;; Defined at:
  8630 ;;		line 312 in file "vcontrol.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;		None
  8633 ;; Auto vars:     Size  Location     Type
  8634 ;;		None
  8635 ;; Return value:  Size  Location     Type
  8636 ;;                  2    9[BANK0 ] unsigned short 
  8637 ;; Registers used:
  8638 ;;		wreg
  8639 ;; Tracked objects:
  8640 ;;		On entry : 1F/2
  8641 ;;		On exit  : 1F/0
  8642 ;;		Unchanged: 0/0
  8643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8644 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8647 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;Total ram usage:        2 bytes
  8649 ;; Hardware stack levels used:    1
  8650 ;; Hardware stack levels required when called:    5
  8651 ;; This function calls:
  8652 ;;		Nothing
  8653 ;; This function is called by:
  8654 ;;		_uart_task
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           
  8659                           ;psect for function _get_vdc_max
  8660  138F                     _get_vdc_max:	
  8661                           
  8662                           ;vcontrol.c: 314:     return vdc_max;
  8663                           
  8664                           ;incstack = 0
  8665                           ; Regs used in _get_vdc_max: [wreg]
  8666  138F  0020               	movlb	0	; select bank0
  8667  1390  0841               	movf	_vdc_max+1,w
  8668  1391  00CE               	movwf	?_get_vdc_max+1
  8669  1392  0840               	movf	_vdc_max,w
  8670  1393  00CD               	movwf	?_get_vdc_max
  8671  1394  0008               	return
  8672  1395                     __end_of_get_vdc_max:	
  8673                           
  8674                           	psect	text9
  8675  1389                     __ptext9:	
  8676 ;; *************** function _get_vdc_critic *****************
  8677 ;; Defined at:
  8678 ;;		line 317 in file "vcontrol.c"
  8679 ;; Parameters:    Size  Location     Type
  8680 ;;		None
  8681 ;; Auto vars:     Size  Location     Type
  8682 ;;		None
  8683 ;; Return value:  Size  Location     Type
  8684 ;;                  2    9[BANK0 ] unsigned short 
  8685 ;; Registers used:
  8686 ;;		wreg
  8687 ;; Tracked objects:
  8688 ;;		On entry : 1F/2
  8689 ;;		On exit  : 1F/0
  8690 ;;		Unchanged: 0/0
  8691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8692 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8695 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8696 ;;Total ram usage:        2 bytes
  8697 ;; Hardware stack levels used:    1
  8698 ;; Hardware stack levels required when called:    5
  8699 ;; This function calls:
  8700 ;;		Nothing
  8701 ;; This function is called by:
  8702 ;;		_uart_task
  8703 ;; This function uses a non-reentrant model
  8704 ;;
  8705                           
  8706                           
  8707                           ;psect for function _get_vdc_critic
  8708  1389                     _get_vdc_critic:	
  8709                           
  8710                           ;vcontrol.c: 319:     return vdc_critic;
  8711                           
  8712                           ;incstack = 0
  8713                           ; Regs used in _get_vdc_critic: [wreg]
  8714  1389  0020               	movlb	0	; select bank0
  8715  138A  083F               	movf	_vdc_critic+1,w
  8716  138B  00CE               	movwf	?_get_vdc_critic+1
  8717  138C  083E               	movf	_vdc_critic,w
  8718  138D  00CD               	movwf	?_get_vdc_critic
  8719  138E  0008               	return
  8720  138F                     __end_of_get_vdc_critic:	
  8721                           
  8722                           	psect	text10
  8723  14F5                     __ptext10:	
  8724 ;; *************** function _uart_start *****************
  8725 ;; Defined at:
  8726 ;;		line 44 in file "UartParser.c"
  8727 ;; Parameters:    Size  Location     Type
  8728 ;;		None
  8729 ;; Auto vars:     Size  Location     Type
  8730 ;;		None
  8731 ;; Return value:  Size  Location     Type
  8732 ;;                  1    wreg      void 
  8733 ;; Registers used:
  8734 ;;		wreg, status,2, status,0, pclath, cstack
  8735 ;; Tracked objects:
  8736 ;;		On entry : 1D/0
  8737 ;;		On exit  : 1F/0
  8738 ;;		Unchanged: 0/0
  8739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8744 ;;Total ram usage:        0 bytes
  8745 ;; Hardware stack levels used:    1
  8746 ;; Hardware stack levels required when called:    6
  8747 ;; This function calls:
  8748 ;;		_EUSART_SetRxInterruptHandler
  8749 ;;		_TMR1_SetInterruptHandler
  8750 ;; This function is called by:
  8751 ;;		_main
  8752 ;; This function uses a non-reentrant model
  8753 ;;
  8754                           
  8755                           
  8756                           ;psect for function _uart_start
  8757  14F5                     _uart_start:	
  8758                           
  8759                           ;UartParser.c: 46:     if( st == SHUTDOWN )
  8760                           
  8761                           ;incstack = 0
  8762                           ; Regs used in _uart_start: [wreg+status,2+status,0+pclath+cstack]
  8763  14F5  0020               	movlb	0	; select bank0
  8764  14F6  082D               	movf	UartParser@st,w
  8765  14F7  1D03               	btfss	3,2
  8766  14F8  0008               	return
  8767                           
  8768                           ;UartParser.c: 47:     {;UartParser.c: 48:         TMR1_SetInterruptHandler(TMR1_SystemT
      +                          imer_ISR);
  8769  14F9  3023               	movlw	low _TMR1_SystemTimer_ISR
  8770  14FA  00CD               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  8771  14FB  3016               	movlw	high _TMR1_SystemTimer_ISR
  8772  14FC  00CE               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  8773  14FD  3193  23D9  3194   	fcall	_TMR1_SetInterruptHandler
  8774                           
  8775                           ;UartParser.c: 49:         EUSART_SetRxInterruptHandler(EUSART_CommandHandler_ISR);
  8776  1500  3003               	movlw	low _EUSART_CommandHandler_ISR
  8777  1501  0020               	movlb	0	; select bank0
  8778  1502  00CD               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  8779  1503  3016               	movlw	high _EUSART_CommandHandler_ISR
  8780  1504  00CE               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  8781  1505  3193  23C9         	fcall	_EUSART_SetRxInterruptHandler
  8782                           
  8783                           ;UartParser.c: 50:         st = INIT;
  8784  1507  0020               	movlb	0	; select bank0
  8785  1508  01AD               	clrf	UartParser@st
  8786  1509  0AAD               	incf	UartParser@st,f
  8787  150A  0008               	return
  8788  150B                     __end_of_uart_start:	
  8789                           
  8790                           	psect	text11
  8791  092A                     __ptext11:	
  8792 ;; *************** function _relay_watchdog_task *****************
  8793 ;; Defined at:
  8794 ;;		line 117 in file "SolidStateRelay.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;		None
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;		None
  8799 ;; Return value:  Size  Location     Type
  8800 ;;                  1    wreg      void 
  8801 ;; Registers used:
  8802 ;;		wreg, status,2, status,0, pclath, cstack
  8803 ;; Tracked objects:
  8804 ;;		On entry : 1C/0
  8805 ;;		On exit  : 1F/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;Total ram usage:        1 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; Hardware stack levels required when called:    6
  8815 ;; This function calls:
  8816 ;;		_close_relay
  8817 ;;		_get_vdc
  8818 ;;		_open_relay
  8819 ;; This function is called by:
  8820 ;;		_main
  8821 ;; This function uses a non-reentrant model
  8822 ;;
  8823                           
  8824                           
  8825                           ;psect for function _relay_watchdog_task
  8826  092A                     _relay_watchdog_task:	
  8827                           
  8828                           ;SolidStateRelay.c: 119:     if( st == SHUTDOWN )
  8829                           
  8830                           ;incstack = 0
  8831                           ; Regs used in _relay_watchdog_task: [wreg+status,2+status,0+pclath+cstack]
  8832  092A  0020               	movlb	0	; select bank0
  8833  092B  0829               	movf	SolidStateRelay@st,w
  8834  092C  1903               	btfsc	3,2
  8835  092D  0008               	return
  8836                           
  8837                           ;SolidStateRelay.c: 121:     if( st == INIT )
  8838  092E  0329               	decf	SolidStateRelay@st,w
  8839  092F  1D03               	btfss	3,2
  8840  0930  2939               	goto	l4554
  8841  0931                     l4548:	
  8842                           
  8843                           ;SolidStateRelay.c: 122:     {;SolidStateRelay.c: 124:         close_relay();
  8844  0931  3193  2352         	fcall	_close_relay
  8845                           
  8846                           ;SolidStateRelay.c: 125:         st = WAIT_VOLTAGE_RISE;
  8847  0933  3002               	movlw	2
  8848  0934  0020               	movlb	0	; select bank0
  8849  0935  00CF               	movwf	??_relay_watchdog_task
  8850  0936  084F               	movf	??_relay_watchdog_task,w
  8851  0937  00A9               	movwf	SolidStateRelay@st
  8852  0938  0008               	return
  8853  0939                     l4554:	
  8854                           
  8855                           ;SolidStateRelay.c: 128:     if( st == WAIT_VOLTAGE_RISE )
  8856  0939  3002               	movlw	2
  8857  093A  0629               	xorwf	SolidStateRelay@st,w
  8858  093B  1D03               	btfss	3,2
  8859  093C  294D               	goto	l4564
  8860                           
  8861                           ;SolidStateRelay.c: 129:     {;SolidStateRelay.c: 131:         if( get_vdc() <= relay_re
      +                          set_voltage )
  8862  093D  3193  2373  3189   	fcall	_get_vdc
  8863  0940  084E               	movf	?_get_vdc+1,w
  8864  0941  0221               	subwf	_relay_reset_voltage+1,w
  8865  0942  1D03               	skipz
  8866  0943  2946               	goto	u3335
  8867  0944  084D               	movf	?_get_vdc,w
  8868  0945  0220               	subwf	_relay_reset_voltage,w
  8869  0946                     u3335:	
  8870  0946  1803               	btfsc	3,0
  8871  0947  0008               	return
  8872                           
  8873                           ;SolidStateRelay.c: 136:         st = WAIT_VOLTAGE_FALL;
  8874  0948  3003               	movlw	3
  8875  0949  00CF               	movwf	??_relay_watchdog_task
  8876  094A  084F               	movf	??_relay_watchdog_task,w
  8877  094B  00A9               	movwf	SolidStateRelay@st
  8878  094C  0008               	return
  8879  094D                     l4564:	
  8880                           
  8881                           ;SolidStateRelay.c: 139:     if( st == WAIT_VOLTAGE_FALL )
  8882  094D  3003               	movlw	3
  8883  094E  0629               	xorwf	SolidStateRelay@st,w
  8884  094F  1D03               	btfss	3,2
  8885  0950  2971               	goto	l4580
  8886                           
  8887                           ;SolidStateRelay.c: 140:     {;SolidStateRelay.c: 142:         if( get_vdc() >= relay_re
      +                          set_voltage )
  8888  0951  3193  2373  3189   	fcall	_get_vdc
  8889  0954  0821               	movf	_relay_reset_voltage+1,w
  8890  0955  024E               	subwf	?_get_vdc+1,w
  8891  0956  1D03               	skipz
  8892  0957  295A               	goto	u3355
  8893  0958  0820               	movf	_relay_reset_voltage,w
  8894  0959  024D               	subwf	?_get_vdc,w
  8895  095A                     u3355:	
  8896  095A  1803               	btfsc	3,0
  8897  095B  0008               	return
  8898                           
  8899                           ;SolidStateRelay.c: 146:         open_relay();
  8900  095C  3193  2355         	fcall	_open_relay
  8901                           
  8902                           ;SolidStateRelay.c: 147:         activation_counter++;
  8903  095E  3001               	movlw	1
  8904  095F  07C8               	addwf	_activation_counter^(0+256),f
  8905  0960  3000               	movlw	0
  8906  0961  3DC9               	addwfc	(_activation_counter+1)^(0+256),f
  8907  0962  3000               	movlw	0
  8908  0963  3DCA               	addwfc	(_activation_counter+2)^(0+256),f
  8909  0964  3000               	movlw	0
  8910  0965  3DCB               	addwfc	(_activation_counter+3)^(0+256),f
  8911                           
  8912                           ;SolidStateRelay.c: 148:         local_timer = ((uint8_t)((uint8_t)~system_counter)+((ui
      +                          nt8_t)1));
  8913  0966  0020               	movlb	0	; select bank0
  8914  0967  0330               	decf	_system_counter,w
  8915  0968  3AFF               	xorlw	255
  8916  0969  00CF               	movwf	??_relay_watchdog_task
  8917  096A  084F               	movf	??_relay_watchdog_task,w
  8918  096B  00A8               	movwf	_local_timer
  8919                           
  8920                           ;SolidStateRelay.c: 149:         st = WAIT_RESET_DURATION;
  8921  096C  3004               	movlw	4
  8922  096D  00CF               	movwf	??_relay_watchdog_task
  8923  096E  084F               	movf	??_relay_watchdog_task,w
  8924  096F  00A9               	movwf	SolidStateRelay@st
  8925  0970  0008               	return
  8926  0971                     l4580:	
  8927                           
  8928                           ;SolidStateRelay.c: 152:     if( st == WAIT_RESET_DURATION )
  8929  0971  3004               	movlw	4
  8930  0972  0629               	xorwf	SolidStateRelay@st,w
  8931  0973  1D03               	btfss	3,2
  8932  0974  0008               	return
  8933                           
  8934                           ;SolidStateRelay.c: 153:     {;SolidStateRelay.c: 155:         if( !((uint8_t)(system_co
      +                          unter + local_timer) >= ((uint8_t)reset_duration_ms)) )
  8935  0975  0828               	movf	_local_timer,w
  8936  0976  0730               	addwf	_system_counter,w
  8937  0977  00CF               	movwf	??_relay_watchdog_task
  8938  0978  0022               	movlb	2	; select bank2
  8939  0979  084C               	movf	_reset_duration_ms^(0+256),w
  8940  097A  0020               	movlb	0	; select bank0
  8941  097B  024F               	subwf	??_relay_watchdog_task,w
  8942  097C  1C03               	btfss	3,0
  8943  097D  0008               	return
  8944  097E  2931               	goto	l4548
  8945  097F                     __end_of_relay_watchdog_task:	
  8946                           
  8947                           	psect	text12
  8948  1355                     __ptext12:	
  8949 ;; *************** function _open_relay *****************
  8950 ;; Defined at:
  8951 ;;		line 107 in file "SolidStateRelay.c"
  8952 ;; Parameters:    Size  Location     Type
  8953 ;;		None
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;		None
  8956 ;; Return value:  Size  Location     Type
  8957 ;;                  1    wreg      void 
  8958 ;; Registers used:
  8959 ;;		None
  8960 ;; Tracked objects:
  8961 ;;		On entry : 1F/0
  8962 ;;		On exit  : 1F/2
  8963 ;;		Unchanged: 0/0
  8964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8969 ;;Total ram usage:        0 bytes
  8970 ;; Hardware stack levels used:    1
  8971 ;; Hardware stack levels required when called:    5
  8972 ;; This function calls:
  8973 ;;		Nothing
  8974 ;; This function is called by:
  8975 ;;		_relay_watchdog_task
  8976 ;; This function uses a non-reentrant model
  8977 ;;
  8978                           
  8979                           
  8980                           ;psect for function _open_relay
  8981  1355                     _open_relay:	
  8982                           
  8983                           ;incstack = 0
  8984                           ; Regs used in _open_relay: []
  8985                           ;SolidStateRelay.c: 109:     do { LATCbits.LATC5 = 1; } while(0);
  8986  1355  0022               	movlb	2	; select bank2
  8987  1356  168E               	bsf	14,5	;volatile
  8988  1357  0008               	return
  8989  1358                     __end_of_open_relay:	
  8990                           
  8991                           	psect	text13
  8992  1373                     __ptext13:	
  8993 ;; *************** function _get_vdc *****************
  8994 ;; Defined at:
  8995 ;;		line 328 in file "vcontrol.c"
  8996 ;; Parameters:    Size  Location     Type
  8997 ;;		None
  8998 ;; Auto vars:     Size  Location     Type
  8999 ;;		None
  9000 ;; Return value:  Size  Location     Type
  9001 ;;                  2    9[BANK0 ] unsigned short 
  9002 ;; Registers used:
  9003 ;;		wreg
  9004 ;; Tracked objects:
  9005 ;;		On entry : 1F/0
  9006 ;;		On exit  : 1F/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9009 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9013 ;;Total ram usage:        2 bytes
  9014 ;; Hardware stack levels used:    1
  9015 ;; Hardware stack levels required when called:    5
  9016 ;; This function calls:
  9017 ;;		Nothing
  9018 ;; This function is called by:
  9019 ;;		_uart_task
  9020 ;;		_relay_watchdog_task
  9021 ;; This function uses a non-reentrant model
  9022 ;;
  9023                           
  9024                           
  9025                           ;psect for function _get_vdc
  9026  1373                     _get_vdc:	
  9027                           
  9028                           ;vcontrol.c: 330:     return vdc;
  9029                           
  9030                           ;incstack = 0
  9031                           ; Regs used in _get_vdc: [wreg]
  9032  1373  083D               	movf	_vdc+1,w
  9033  1374  00CE               	movwf	?_get_vdc+1
  9034  1375  083C               	movf	_vdc,w
  9035  1376  00CD               	movwf	?_get_vdc
  9036  1377  0008               	return
  9037  1378                     __end_of_get_vdc:	
  9038                           
  9039                           	psect	text14
  9040  1352                     __ptext14:	
  9041 ;; *************** function _close_relay *****************
  9042 ;; Defined at:
  9043 ;;		line 112 in file "SolidStateRelay.c"
  9044 ;; Parameters:    Size  Location     Type
  9045 ;;		None
  9046 ;; Auto vars:     Size  Location     Type
  9047 ;;		None
  9048 ;; Return value:  Size  Location     Type
  9049 ;;                  1    wreg      void 
  9050 ;; Registers used:
  9051 ;;		None
  9052 ;; Tracked objects:
  9053 ;;		On entry : 1C/1
  9054 ;;		On exit  : 1F/2
  9055 ;;		Unchanged: 0/0
  9056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;Total ram usage:        0 bytes
  9062 ;; Hardware stack levels used:    1
  9063 ;; Hardware stack levels required when called:    5
  9064 ;; This function calls:
  9065 ;;		Nothing
  9066 ;; This function is called by:
  9067 ;;		_stop_relay_watchdog
  9068 ;;		_relay_watchdog_task
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           
  9073                           ;psect for function _close_relay
  9074  1352                     _close_relay:	
  9075                           
  9076                           ;incstack = 0
  9077                           ; Regs used in _close_relay: []
  9078                           ;SolidStateRelay.c: 114:     do { LATCbits.LATC5 = 0; } while(0);
  9079  1352  0022               	movlb	2	; select bank2
  9080  1353  128E               	bcf	14,5	;volatile
  9081  1354  0008               	return
  9082  1355                     __end_of_close_relay:	
  9083                           
  9084                           	psect	text15
  9085  17BF                     __ptext15:	
  9086 ;; *************** function _relay_watchdog_record_activations_task *****************
  9087 ;; Defined at:
  9088 ;;		line 168 in file "SolidStateRelay.c"
  9089 ;; Parameters:    Size  Location     Type
  9090 ;;		None
  9091 ;; Auto vars:     Size  Location     Type
  9092 ;;		None
  9093 ;; Return value:  Size  Location     Type
  9094 ;;                  1    wreg      void 
  9095 ;; Registers used:
  9096 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9097 ;; Tracked objects:
  9098 ;;		On entry : 1F/0
  9099 ;;		On exit  : 1E/0
  9100 ;;		Unchanged: 0/0
  9101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;Total ram usage:        1 bytes
  9107 ;; Hardware stack levels used:    1
  9108 ;; Hardware stack levels required when called:    8
  9109 ;; This function calls:
  9110 ;;		_save_to_flash
  9111 ;; This function is called by:
  9112 ;;		_main
  9113 ;; This function uses a non-reentrant model
  9114 ;;
  9115                           
  9116                           
  9117                           ;psect for function _relay_watchdog_record_activations_task
  9118  17BF                     _relay_watchdog_record_activations_task:	
  9119                           
  9120                           ;SolidStateRelay.c: 170:     if( st_act == RA_SHUTDOWN )
  9121                           
  9122                           ;incstack = 0
  9123                           ; Regs used in _relay_watchdog_record_activations_task: [wreg+fsr1l+fsr1h+status,2+statu
      +                          s,0+pclath+cstack]
  9124  17BF  0021               	movlb	1	; select bank1
  9125  17C0  0865               	movf	_st_act^(0+128),w
  9126  17C1  1903               	btfsc	3,2
  9127  17C2  0008               	return
  9128                           
  9129                           ;SolidStateRelay.c: 172:     if( st_act == RA_INIT )
  9130  17C3  0365               	decf	_st_act^(0+128),w
  9131  17C4  1D03               	btfss	3,2
  9132  17C5  2FD4               	goto	l4604
  9133                           
  9134                           ;SolidStateRelay.c: 173:     {;SolidStateRelay.c: 175:         ra_local_timer = ((uint8_
      +                          t)((uint8_t)~system_minutes)+((uint8_t)1));
  9135  17C6  0366               	decf	_system_minutes^(0+128),w
  9136  17C7  3AFF               	xorlw	255
  9137  17C8  0020               	movlb	0	; select bank0
  9138  17C9  00DB               	movwf	??_relay_watchdog_record_activations_task
  9139  17CA  085B               	movf	??_relay_watchdog_record_activations_task,w
  9140  17CB  0021               	movlb	1	; select bank1
  9141  17CC  00E4               	movwf	_ra_local_timer^(0+128)
  9142                           
  9143                           ;SolidStateRelay.c: 176:         st_act = RA_WAIT_INTERVAL;
  9144  17CD  3002               	movlw	2
  9145  17CE  0020               	movlb	0	; select bank0
  9146  17CF  00DB               	movwf	??_relay_watchdog_record_activations_task
  9147  17D0  085B               	movf	??_relay_watchdog_record_activations_task,w
  9148  17D1  0021               	movlb	1	; select bank1
  9149  17D2  00E5               	movwf	_st_act^(0+128)
  9150  17D3  0008               	return
  9151  17D4                     l4604:	
  9152                           
  9153                           ;SolidStateRelay.c: 179:     if( st_act == RA_WAIT_INTERVAL )
  9154  17D4  3002               	movlw	2
  9155  17D5  0665               	xorwf	_st_act^(0+128),w
  9156  17D6  1D03               	btfss	3,2
  9157  17D7  0008               	return
  9158                           
  9159                           ;SolidStateRelay.c: 180:     {;SolidStateRelay.c: 182:         if( !((uint8_t)(system_mi
      +                          nutes + ra_local_timer) >= ((uint8_t)60)) )
  9160  17D8  0864               	movf	_ra_local_timer^(0+128),w
  9161  17D9  0766               	addwf	_system_minutes^(0+128),w
  9162  17DA  0020               	movlb	0	; select bank0
  9163  17DB  00DB               	movwf	??_relay_watchdog_record_activations_task
  9164  17DC  303C               	movlw	60
  9165  17DD  025B               	subwf	??_relay_watchdog_record_activations_task,w
  9166  17DE  1C03               	btfss	3,0
  9167  17DF  0008               	return
  9168                           
  9169                           ;SolidStateRelay.c: 186:         ra_local_timer = ((uint8_t)((uint8_t)~system_minutes)+(
      +                          (uint8_t)1));
  9170  17E0  0021               	movlb	1	; select bank1
  9171  17E1  0366               	decf	_system_minutes^(0+128),w
  9172  17E2  3AFF               	xorlw	255
  9173  17E3  0020               	movlb	0	; select bank0
  9174  17E4  00DB               	movwf	??_relay_watchdog_record_activations_task
  9175  17E5  085B               	movf	??_relay_watchdog_record_activations_task,w
  9176  17E6  0021               	movlb	1	; select bank1
  9177  17E7  00E4               	movwf	_ra_local_timer^(0+128)
  9178                           
  9179                           ;SolidStateRelay.c: 192:         if( activation_counter == 0x3FFF3FFF )
  9180  17E8  0022               	movlb	2	; select bank2
  9181  17E9  0A48               	incf	_activation_counter^(0+256),w
  9182  17EA  303F               	movlw	63
  9183  17EB  1903               	skipnz
  9184  17EC  0649               	xorwf	(_activation_counter+1)^(0+256),w
  9185  17ED  1D03               	skipz
  9186  17EE  2FFD               	goto	l4614
  9187  17EF  0A4A               	incf	(_activation_counter+2)^(0+256),w
  9188  17F0  303F               	movlw	63
  9189  17F1  1903               	skipnz
  9190  17F2  064B               	xorwf	(_activation_counter+3)^(0+256),w
  9191  17F3  1D03               	btfss	3,2
  9192  17F4  2FFD               	goto	l4614
  9193                           
  9194                           ;SolidStateRelay.c: 193:             activation_counter++;
  9195  17F5  3001               	movlw	1
  9196  17F6  07C8               	addwf	_activation_counter^(0+256),f
  9197  17F7  3000               	movlw	0
  9198  17F8  3DC9               	addwfc	(_activation_counter+1)^(0+256),f
  9199  17F9  3000               	movlw	0
  9200  17FA  3DCA               	addwfc	(_activation_counter+2)^(0+256),f
  9201  17FB  3000               	movlw	0
  9202  17FC  3DCB               	addwfc	(_activation_counter+3)^(0+256),f
  9203  17FD                     l4614:	
  9204                           
  9205                           ;SolidStateRelay.c: 194:         save_to_flash();
  9206  17FD  3189  217F         	fcall	_save_to_flash
  9207  17FF  0008               	return
  9208  1800                     __end_of_relay_watchdog_record_activations_task:	
  9209                           
  9210                           	psect	text16
  9211  1348                     __ptext16:	
  9212 ;; *************** function _init_relay_watchdog *****************
  9213 ;; Defined at:
  9214 ;;		line 32 in file "SolidStateRelay.c"
  9215 ;; Parameters:    Size  Location     Type
  9216 ;;		None
  9217 ;; Auto vars:     Size  Location     Type
  9218 ;;		None
  9219 ;; Return value:  Size  Location     Type
  9220 ;;                  1    wreg      void 
  9221 ;; Registers used:
  9222 ;;		None
  9223 ;; Tracked objects:
  9224 ;;		On entry : 1D/0
  9225 ;;		On exit  : 1D/0
  9226 ;;		Unchanged: 1D/0
  9227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9232 ;;Total ram usage:        0 bytes
  9233 ;; Hardware stack levels used:    1
  9234 ;; Hardware stack levels required when called:    5
  9235 ;; This function calls:
  9236 ;;		Nothing
  9237 ;; This function is called by:
  9238 ;;		_main
  9239 ;; This function uses a non-reentrant model
  9240 ;;
  9241                           
  9242                           
  9243                           ;psect for function _init_relay_watchdog
  9244  1348                     _init_relay_watchdog:	
  9245                           
  9246                           ;incstack = 0
  9247                           ; Regs used in _init_relay_watchdog: []
  9248  1348  0008               	return
  9249  1349                     __end_of_init_relay_watchdog:	
  9250                           
  9251                           	psect	text17
  9252  1557                     __ptext17:	
  9253 ;; *************** function _SYSTEM_Initialize *****************
  9254 ;; Defined at:
  9255 ;;		line 50 in file "mcc_generated_files/mcc.c"
  9256 ;; Parameters:    Size  Location     Type
  9257 ;;		None
  9258 ;; Auto vars:     Size  Location     Type
  9259 ;;		None
  9260 ;; Return value:  Size  Location     Type
  9261 ;;                  1    wreg      void 
  9262 ;; Registers used:
  9263 ;;		wreg, status,2, status,0, pclath, cstack
  9264 ;; Tracked objects:
  9265 ;;		On entry : B1F/0
  9266 ;;		On exit  : 1F/1
  9267 ;;		Unchanged: 0/0
  9268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;Total ram usage:        0 bytes
  9274 ;; Hardware stack levels used:    1
  9275 ;; Hardware stack levels required when called:    7
  9276 ;; This function calls:
  9277 ;;		_ADC_Initialize
  9278 ;;		_EUSART_Initialize
  9279 ;;		_OSCILLATOR_Initialize
  9280 ;;		_PIN_MANAGER_Initialize
  9281 ;;		_PWM3_Initialize
  9282 ;;		_TMR1_Initialize
  9283 ;;		_TMR2_Initialize
  9284 ;;		_TMR4_Initialize
  9285 ;;		_WDT_Initialize
  9286 ;; This function is called by:
  9287 ;;		_main
  9288 ;; This function uses a non-reentrant model
  9289 ;;
  9290                           
  9291                           
  9292                           ;psect for function _SYSTEM_Initialize
  9293  1557                     _SYSTEM_Initialize:	
  9294                           
  9295                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  9296                           
  9297                           ;incstack = 0
  9298                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9299  1557  3196  2693  3195   	fcall	_PIN_MANAGER_Initialize
  9300                           
  9301                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  9302  155A  3193  23D1  3195   	fcall	_OSCILLATOR_Initialize
  9303                           
  9304                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  9305  155D  3193  2366  3195   	fcall	_WDT_Initialize
  9306                           
  9307                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  9308  1560  3194  24A6  3195   	fcall	_ADC_Initialize
  9309                           
  9310                           ;mcc_generated_files/mcc.c: 57:     TMR4_Initialize();
  9311  1563  3193  23F3  3195   	fcall	_TMR4_Initialize
  9312                           
  9313                           ;mcc_generated_files/mcc.c: 58:     PWM3_Initialize();
  9314  1566  3194  244C  3195   	fcall	_PWM3_Initialize
  9315                           
  9316                           ;mcc_generated_files/mcc.c: 59:     TMR2_Initialize();
  9317  1569  3194  24B7  3195   	fcall	_TMR2_Initialize
  9318                           
  9319                           ;mcc_generated_files/mcc.c: 60:     TMR1_Initialize();
  9320  156C  3195  253D  3195   	fcall	_TMR1_Initialize
  9321                           
  9322                           ;mcc_generated_files/mcc.c: 61:     EUSART_Initialize();
  9323  156F  3197  271E         	fcall	_EUSART_Initialize
  9324  1571  0008               	return
  9325  1572                     __end_of_SYSTEM_Initialize:	
  9326                           
  9327                           	psect	text18
  9328  1366                     __ptext18:	
  9329 ;; *************** function _WDT_Initialize *****************
  9330 ;; Defined at:
  9331 ;;		line 76 in file "mcc_generated_files/mcc.c"
  9332 ;; Parameters:    Size  Location     Type
  9333 ;;		None
  9334 ;; Auto vars:     Size  Location     Type
  9335 ;;		None
  9336 ;; Return value:  Size  Location     Type
  9337 ;;                  1    wreg      void 
  9338 ;; Registers used:
  9339 ;;		wreg
  9340 ;; Tracked objects:
  9341 ;;		On entry : B1F/2
  9342 ;;		On exit  : B1F/1
  9343 ;;		Unchanged: B00/0
  9344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;Total ram usage:        0 bytes
  9350 ;; Hardware stack levels used:    1
  9351 ;; Hardware stack levels required when called:    5
  9352 ;; This function calls:
  9353 ;;		Nothing
  9354 ;; This function is called by:
  9355 ;;		_SYSTEM_Initialize
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           
  9360                           ;psect for function _WDT_Initialize
  9361  1366                     _WDT_Initialize:	
  9362                           
  9363                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x16;
  9364                           
  9365                           ;incstack = 0
  9366                           ; Regs used in _WDT_Initialize: [wreg]
  9367  1366  3016               	movlw	22
  9368  1367  0021               	movlb	1	; select bank1
  9369  1368  0097               	movwf	23	;volatile
  9370  1369  0008               	return
  9371  136A                     __end_of_WDT_Initialize:	
  9372                           
  9373                           	psect	text19
  9374  13F3                     __ptext19:	
  9375 ;; *************** function _TMR4_Initialize *****************
  9376 ;; Defined at:
  9377 ;;		line 62 in file "mcc_generated_files/tmr4.c"
  9378 ;; Parameters:    Size  Location     Type
  9379 ;;		None
  9380 ;; Auto vars:     Size  Location     Type
  9381 ;;		None
  9382 ;; Return value:  Size  Location     Type
  9383 ;;                  1    wreg      void 
  9384 ;; Registers used:
  9385 ;;		wreg, status,2
  9386 ;; Tracked objects:
  9387 ;;		On entry : 1F/2
  9388 ;;		On exit  : 1F/8
  9389 ;;		Unchanged: 0/0
  9390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;Total ram usage:        0 bytes
  9396 ;; Hardware stack levels used:    1
  9397 ;; Hardware stack levels required when called:    5
  9398 ;; This function calls:
  9399 ;;		Nothing
  9400 ;; This function is called by:
  9401 ;;		_SYSTEM_Initialize
  9402 ;; This function uses a non-reentrant model
  9403 ;;
  9404                           
  9405                           
  9406                           ;psect for function _TMR4_Initialize
  9407  13F3                     _TMR4_Initialize:	
  9408                           
  9409                           ;mcc_generated_files/tmr4.c: 67:     PR4 = 0xC7;
  9410                           
  9411                           ;incstack = 0
  9412                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
  9413  13F3  30C7               	movlw	199
  9414  13F4  0028               	movlb	8	; select bank8
  9415  13F5  0096               	movwf	22	;volatile
  9416                           
  9417                           ;mcc_generated_files/tmr4.c: 70:     TMR4 = 0x00;
  9418  13F6  0195               	clrf	21	;volatile
  9419                           
  9420                           ;mcc_generated_files/tmr4.c: 73:     PIR2bits.TMR4IF = 0;
  9421  13F7  0020               	movlb	0	; select bank0
  9422  13F8  1092               	bcf	18,1	;volatile
  9423                           
  9424                           ;mcc_generated_files/tmr4.c: 76:     T4CON = 0x05;
  9425  13F9  3005               	movlw	5
  9426  13FA  0028               	movlb	8	; select bank8
  9427  13FB  0097               	movwf	23	;volatile
  9428  13FC  0008               	return
  9429  13FD                     __end_of_TMR4_Initialize:	
  9430                           
  9431                           	psect	text20
  9432  14B7                     __ptext20:	
  9433 ;; *************** function _TMR2_Initialize *****************
  9434 ;; Defined at:
  9435 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;		None
  9438 ;; Auto vars:     Size  Location     Type
  9439 ;;		None
  9440 ;; Return value:  Size  Location     Type
  9441 ;;                  1    wreg      void 
  9442 ;; Registers used:
  9443 ;;		wreg, status,2, status,0, pclath, cstack
  9444 ;; Tracked objects:
  9445 ;;		On entry : 1F/5
  9446 ;;		On exit  : 1F/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;Total ram usage:        0 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; Hardware stack levels required when called:    6
  9456 ;; This function calls:
  9457 ;;		_TMR2_SetInterruptHandler
  9458 ;; This function is called by:
  9459 ;;		_SYSTEM_Initialize
  9460 ;; This function uses a non-reentrant model
  9461 ;;
  9462                           
  9463                           
  9464                           ;psect for function _TMR2_Initialize
  9465  14B7                     _TMR2_Initialize:	
  9466                           
  9467                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x3E;
  9468                           
  9469                           ;incstack = 0
  9470                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9471  14B7  303E               	movlw	62
  9472  14B8  0020               	movlb	0	; select bank0
  9473  14B9  009B               	movwf	27	;volatile
  9474                           
  9475                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  9476  14BA  019A               	clrf	26	;volatile
  9477                           
  9478                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  9479  14BB  1091               	bcf	17,1	;volatile
  9480                           
  9481                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  9482  14BC  0021               	movlb	1	; select bank1
  9483  14BD  1491               	bsf	17,1	;volatile
  9484                           
  9485                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  9486  14BE  3047               	movlw	low _TMR2_DefaultInterruptHandler
  9487  14BF  0020               	movlb	0	; select bank0
  9488  14C0  00CD               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  9489  14C1  3013               	movlw	high _TMR2_DefaultInterruptHandler
  9490  14C2  00CE               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  9491  14C3  3193  23A9         	fcall	_TMR2_SetInterruptHandler
  9492                           
  9493                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x07;
  9494  14C5  3007               	movlw	7
  9495  14C6  0020               	movlb	0	; select bank0
  9496  14C7  009C               	movwf	28	;volatile
  9497  14C8  0008               	return
  9498  14C9                     __end_of_TMR2_Initialize:	
  9499                           
  9500                           	psect	text21
  9501  153D                     __ptext21:	
  9502 ;; *************** function _TMR1_Initialize *****************
  9503 ;; Defined at:
  9504 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;		None
  9507 ;; Auto vars:     Size  Location     Type
  9508 ;;		None
  9509 ;; Return value:  Size  Location     Type
  9510 ;;                  1    wreg      void 
  9511 ;; Registers used:
  9512 ;;		wreg, status,2, status,0, pclath, cstack
  9513 ;; Tracked objects:
  9514 ;;		On entry : 1F/0
  9515 ;;		On exit  : 1F/0
  9516 ;;		Unchanged: 0/0
  9517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9522 ;;Total ram usage:        0 bytes
  9523 ;; Hardware stack levels used:    1
  9524 ;; Hardware stack levels required when called:    6
  9525 ;; This function calls:
  9526 ;;		_TMR1_SetInterruptHandler
  9527 ;; This function is called by:
  9528 ;;		_SYSTEM_Initialize
  9529 ;; This function uses a non-reentrant model
  9530 ;;
  9531                           
  9532                           
  9533                           ;psect for function _TMR1_Initialize
  9534  153D                     _TMR1_Initialize:	
  9535                           
  9536                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  9537                           
  9538                           ;incstack = 0
  9539                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9540  153D  0199               	clrf	25	;volatile
  9541                           
  9542                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x3C;
  9543  153E  303C               	movlw	60
  9544  153F  0097               	movwf	23	;volatile
  9545                           
  9546                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xB0;
  9547  1540  30B0               	movlw	176
  9548  1541  0096               	movwf	22	;volatile
  9549                           
  9550                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  9551  1542  1011               	bcf	17,0	;volatile
  9552                           
  9553                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  9554  1543  0817               	movf	23,w	;volatile
  9555  1544  0022               	movlb	2	; select bank2
  9556  1545  00E1               	movwf	(_timer1ReloadVal+1)^(0+256)	;volatile
  9557  1546  0020               	movlb	0	; select bank0
  9558  1547  0816               	movf	22,w	;volatile
  9559  1548  0022               	movlb	2	; select bank2
  9560  1549  00E0               	movwf	_timer1ReloadVal^(0+256)	;volatile
  9561                           
  9562                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  9563  154A  0021               	movlb	1	; select bank1
  9564  154B  1411               	bsf	17,0	;volatile
  9565                           
  9566                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  9567  154C  3046               	movlw	low _TMR1_DefaultInterruptHandler
  9568  154D  0020               	movlb	0	; select bank0
  9569  154E  00CD               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9570  154F  3013               	movlw	high _TMR1_DefaultInterruptHandler
  9571  1550  00CE               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9572  1551  3193  23D9         	fcall	_TMR1_SetInterruptHandler
  9573                           
  9574                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x31;
  9575  1553  3031               	movlw	49
  9576  1554  0020               	movlb	0	; select bank0
  9577  1555  0098               	movwf	24	;volatile
  9578  1556  0008               	return
  9579  1557                     __end_of_TMR1_Initialize:	
  9580                           
  9581                           	psect	text22
  9582  13D9                     __ptext22:	
  9583 ;; *************** function _TMR1_SetInterruptHandler *****************
  9584 ;; Defined at:
  9585 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  9586 ;; Parameters:    Size  Location     Type
  9587 ;;  InterruptHan    2    9[BANK0 ] PTR FTN()void 
  9588 ;;		 -> TMR1_SystemTimer_ISR(1), TMR1_DefaultInterruptHandler(1), 
  9589 ;; Auto vars:     Size  Location     Type
  9590 ;;		None
  9591 ;; Return value:  Size  Location     Type
  9592 ;;                  1    wreg      void 
  9593 ;; Registers used:
  9594 ;;		wreg
  9595 ;; Tracked objects:
  9596 ;;		On entry : 1F/0
  9597 ;;		On exit  : 1F/2
  9598 ;;		Unchanged: 0/0
  9599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9600 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9603 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9604 ;;Total ram usage:        2 bytes
  9605 ;; Hardware stack levels used:    1
  9606 ;; Hardware stack levels required when called:    5
  9607 ;; This function calls:
  9608 ;;		Nothing
  9609 ;; This function is called by:
  9610 ;;		_TMR1_Initialize
  9611 ;;		_uart_start
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           
  9616                           ;psect for function _TMR1_SetInterruptHandler
  9617  13D9                     _TMR1_SetInterruptHandler:	
  9618                           
  9619                           ;mcc_generated_files/tmr1.c: 179:     TMR1_InterruptHandler = InterruptHandler;
  9620                           
  9621                           ;incstack = 0
  9622                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  9623  13D9  084E               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  9624  13DA  0022               	movlb	2	; select bank2
  9625  13DB  00DF               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
  9626  13DC  0020               	movlb	0	; select bank0
  9627  13DD  084D               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  9628  13DE  0022               	movlb	2	; select bank2
  9629  13DF  00DE               	movwf	_TMR1_InterruptHandler^(0+256)
  9630  13E0  0008               	return
  9631  13E1                     __end_of_TMR1_SetInterruptHandler:	
  9632                           
  9633                           	psect	text23
  9634  144C                     __ptext23:	
  9635 ;; *************** function _PWM3_Initialize *****************
  9636 ;; Defined at:
  9637 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  9638 ;; Parameters:    Size  Location     Type
  9639 ;;		None
  9640 ;; Auto vars:     Size  Location     Type
  9641 ;;		None
  9642 ;; Return value:  Size  Location     Type
  9643 ;;                  1    wreg      void 
  9644 ;; Registers used:
  9645 ;;		wreg, status,2, status,0
  9646 ;; Tracked objects:
  9647 ;;		On entry : 1F/8
  9648 ;;		On exit  : 1F/5
  9649 ;;		Unchanged: 0/0
  9650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;Total ram usage:        0 bytes
  9656 ;; Hardware stack levels used:    1
  9657 ;; Hardware stack levels required when called:    5
  9658 ;; This function calls:
  9659 ;;		Nothing
  9660 ;; This function is called by:
  9661 ;;		_SYSTEM_Initialize
  9662 ;; This function uses a non-reentrant model
  9663 ;;
  9664                           
  9665                           
  9666                           ;psect for function _PWM3_Initialize
  9667  144C                     _PWM3_Initialize:	
  9668                           
  9669                           ;mcc_generated_files/pwm3.c: 62:     PWM3CON = 0x80;
  9670                           
  9671                           ;incstack = 0
  9672                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  9673  144C  3080               	movlw	128
  9674  144D  002C               	movlb	12	; select bank12
  9675  144E  0099               	movwf	25	;volatile
  9676                           
  9677                           ;mcc_generated_files/pwm3.c: 65:     PWM3DCH = 0xBD;
  9678  144F  30BD               	movlw	189
  9679  1450  0098               	movwf	24	;volatile
  9680                           
  9681                           ;mcc_generated_files/pwm3.c: 68:     PWM3DCL = 0xC0;
  9682  1451  30C0               	movlw	192
  9683  1452  0097               	movwf	23	;volatile
  9684                           
  9685                           ;mcc_generated_files/pwm3.c: 71:     CCPTMRSbits.P3TSEL = 1;
  9686  1453  0025               	movlb	5	; select bank5
  9687  1454  081E               	movf	30,w	;volatile
  9688  1455  39CF               	andlw	-49
  9689  1456  3810               	iorlw	16
  9690  1457  009E               	movwf	30	;volatile
  9691  1458  0008               	return
  9692  1459                     __end_of_PWM3_Initialize:	
  9693                           
  9694                           	psect	text24
  9695  1693                     __ptext24:	
  9696 ;; *************** function _PIN_MANAGER_Initialize *****************
  9697 ;; Defined at:
  9698 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  9699 ;; Parameters:    Size  Location     Type
  9700 ;;		None
  9701 ;; Auto vars:     Size  Location     Type
  9702 ;;		None
  9703 ;; Return value:  Size  Location     Type
  9704 ;;                  1    wreg      void 
  9705 ;; Registers used:
  9706 ;;		wreg, status,2
  9707 ;; Tracked objects:
  9708 ;;		On entry : B1F/0
  9709 ;;		On exit  : B1F/1D
  9710 ;;		Unchanged: B00/0
  9711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9716 ;;Total ram usage:        0 bytes
  9717 ;; Hardware stack levels used:    1
  9718 ;; Hardware stack levels required when called:    5
  9719 ;; This function calls:
  9720 ;;		Nothing
  9721 ;; This function is called by:
  9722 ;;		_SYSTEM_Initialize
  9723 ;; This function uses a non-reentrant model
  9724 ;;
  9725                           
  9726                           
  9727                           ;psect for function _PIN_MANAGER_Initialize
  9728  1693                     _PIN_MANAGER_Initialize:	
  9729                           
  9730                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  9731                           
  9732                           ;incstack = 0
  9733                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  9734  1693  0022               	movlb	2	; select bank2
  9735  1694  018C               	clrf	12	;volatile
  9736                           
  9737                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x01;
  9738  1695  3001               	movlw	1
  9739  1696  008E               	movwf	14	;volatile
  9740                           
  9741                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x07;
  9742  1697  3007               	movlw	7
  9743  1698  0021               	movlb	1	; select bank1
  9744  1699  008C               	movwf	12	;volatile
  9745                           
  9746                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x18;
  9747  169A  3018               	movlw	24
  9748  169B  008E               	movwf	14	;volatile
  9749                           
  9750                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x18;
  9751  169C  3018               	movlw	24
  9752  169D  0023               	movlb	3	; select bank3
  9753  169E  008E               	movwf	14	;volatile
  9754                           
  9755                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x03;
  9756  169F  3003               	movlw	3
  9757  16A0  008C               	movwf	12	;volatile
  9758                           
  9759                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
  9760  16A1  0024               	movlb	4	; select bank4
  9761  16A2  018C               	clrf	12	;volatile
  9762                           
  9763                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
  9764  16A3  018E               	clrf	14	;volatile
  9765                           
  9766                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 1;
  9767  16A4  0021               	movlb	1	; select bank1
  9768  16A5  1795               	bsf	21,7	;volatile
  9769                           
  9770                           ;mcc_generated_files/pin_manager.c: 85:     ODCONA = 0x00;
  9771  16A6  0025               	movlb	5	; select bank5
  9772  16A7  018C               	clrf	12	;volatile
  9773                           
  9774                           ;mcc_generated_files/pin_manager.c: 86:     ODCONC = 0x00;
  9775  16A8  018E               	clrf	14	;volatile
  9776                           
  9777                           ;mcc_generated_files/pin_manager.c: 91:     SLRCONA = 0x37;
  9778  16A9  3037               	movlw	55
  9779  16AA  0026               	movlb	6	; select bank6
  9780  16AB  008C               	movwf	12	;volatile
  9781                           
  9782                           ;mcc_generated_files/pin_manager.c: 92:     SLRCONC = 0x3F;
  9783  16AC  303F               	movlw	63
  9784  16AD  008E               	movwf	14	;volatile
  9785                           
  9786                           ;mcc_generated_files/pin_manager.c: 97:     INLVLA = 0x3F;
  9787  16AE  303F               	movlw	63
  9788  16AF  0027               	movlb	7	; select bank7
  9789  16B0  008C               	movwf	12	;volatile
  9790                           
  9791                           ;mcc_generated_files/pin_manager.c: 98:     INLVLC = 0x3F;
  9792  16B1  303F               	movlw	63
  9793  16B2  008E               	movwf	14	;volatile
  9794                           
  9795                           ;mcc_generated_files/pin_manager.c: 107:     RC0PPS = 0x14;
  9796  16B3  3014               	movlw	20
  9797  16B4  003D               	movlb	29	; select bank29
  9798  16B5  00A0               	movwf	32	;volatile
  9799                           
  9800                           ;mcc_generated_files/pin_manager.c: 108:     RXPPS = 0x02;
  9801  16B6  3002               	movlw	2
  9802  16B7  003C               	movlb	28	; select bank28
  9803  16B8  00A4               	movwf	36	;volatile
  9804                           
  9805                           ;mcc_generated_files/pin_manager.c: 109:     RC1PPS = 0x0E;
  9806  16B9  300E               	movlw	14
  9807  16BA  003D               	movlb	29	; select bank29
  9808  16BB  00A1               	movwf	33	;volatile
  9809                           
  9810                           ;mcc_generated_files/pin_manager.c: 110:     RC2PPS = 0x0E;
  9811  16BC  300E               	movlw	14
  9812  16BD  00A2               	movwf	34	;volatile
  9813  16BE  0008               	return
  9814  16BF                     __end_of_PIN_MANAGER_Initialize:	
  9815                           
  9816                           	psect	text25
  9817  13D1                     __ptext25:	
  9818 ;; *************** function _OSCILLATOR_Initialize *****************
  9819 ;; Defined at:
  9820 ;;		line 64 in file "mcc_generated_files/mcc.c"
  9821 ;; Parameters:    Size  Location     Type
  9822 ;;		None
  9823 ;; Auto vars:     Size  Location     Type
  9824 ;;		None
  9825 ;; Return value:  Size  Location     Type
  9826 ;;                  1    wreg      void 
  9827 ;; Registers used:
  9828 ;;		wreg, status,2
  9829 ;; Tracked objects:
  9830 ;;		On entry : B1F/1D
  9831 ;;		On exit  : B1F/2
  9832 ;;		Unchanged: B00/0
  9833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;Total ram usage:        0 bytes
  9839 ;; Hardware stack levels used:    1
  9840 ;; Hardware stack levels required when called:    5
  9841 ;; This function calls:
  9842 ;;		Nothing
  9843 ;; This function is called by:
  9844 ;;		_SYSTEM_Initialize
  9845 ;; This function uses a non-reentrant model
  9846 ;;
  9847                           
  9848                           
  9849                           ;psect for function _OSCILLATOR_Initialize
  9850  13D1                     _OSCILLATOR_Initialize:	
  9851                           
  9852                           ;mcc_generated_files/mcc.c: 67:     OSCCON = 0x7A;
  9853                           
  9854                           ;incstack = 0
  9855                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  9856  13D1  307A               	movlw	122
  9857  13D2  0021               	movlb	1	; select bank1
  9858  13D3  0099               	movwf	25	;volatile
  9859                           
  9860                           ;mcc_generated_files/mcc.c: 69:     OSCSTAT = 0x00;
  9861  13D4  019A               	clrf	26	;volatile
  9862                           
  9863                           ;mcc_generated_files/mcc.c: 71:     OSCTUNE = 0x00;
  9864  13D5  0198               	clrf	24	;volatile
  9865                           
  9866                           ;mcc_generated_files/mcc.c: 73:     BORCON = 0x00;
  9867  13D6  0022               	movlb	2	; select bank2
  9868  13D7  0196               	clrf	22	;volatile
  9869  13D8  0008               	return
  9870  13D9                     __end_of_OSCILLATOR_Initialize:	
  9871                           
  9872                           	psect	text26
  9873  171E                     __ptext26:	
  9874 ;; *************** function _EUSART_Initialize *****************
  9875 ;; Defined at:
  9876 ;;		line 83 in file "mcc_generated_files/eusart.c"
  9877 ;; Parameters:    Size  Location     Type
  9878 ;;		None
  9879 ;; Auto vars:     Size  Location     Type
  9880 ;;		None
  9881 ;; Return value:  Size  Location     Type
  9882 ;;                  1    wreg      void 
  9883 ;; Registers used:
  9884 ;;		wreg, status,2, status,0, pclath, cstack
  9885 ;; Tracked objects:
  9886 ;;		On entry : 1F/0
  9887 ;;		On exit  : 1F/1
  9888 ;;		Unchanged: 0/0
  9889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;Total ram usage:        0 bytes
  9895 ;; Hardware stack levels used:    1
  9896 ;; Hardware stack levels required when called:    6
  9897 ;; This function calls:
  9898 ;;		_EUSART_SetErrorHandler
  9899 ;;		_EUSART_SetFramingErrorHandler
  9900 ;;		_EUSART_SetOverrunErrorHandler
  9901 ;;		_EUSART_SetRxInterruptHandler
  9902 ;; This function is called by:
  9903 ;;		_SYSTEM_Initialize
  9904 ;; This function uses a non-reentrant model
  9905 ;;
  9906                           
  9907                           
  9908                           ;psect for function _EUSART_Initialize
  9909  171E                     _EUSART_Initialize:	
  9910                           
  9911                           ;mcc_generated_files/eusart.c: 86:     PIE1bits.RCIE = 0;
  9912                           
  9913                           ;incstack = 0
  9914                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9915  171E  0021               	movlb	1	; select bank1
  9916  171F  1291               	bcf	17,5	;volatile
  9917                           
  9918                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  9919  1720  3085               	movlw	low _EUSART_Receive_ISR
  9920  1721  0020               	movlb	0	; select bank0
  9921  1722  00CD               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  9922  1723  3017               	movlw	high _EUSART_Receive_ISR
  9923  1724  00CE               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  9924  1725  3193  23C9  3197   	fcall	_EUSART_SetRxInterruptHandler
  9925                           
  9926                           ;mcc_generated_files/eusart.c: 91:     BAUD1CON = 0x08;
  9927  1728  3008               	movlw	8
  9928  1729  0023               	movlb	3	; select bank3
  9929  172A  009F               	movwf	31	;volatile
  9930                           
  9931                           ;mcc_generated_files/eusart.c: 94:     RC1STA = 0x90;
  9932  172B  3090               	movlw	144
  9933  172C  009D               	movwf	29	;volatile
  9934                           
  9935                           ;mcc_generated_files/eusart.c: 97:     TX1STA = 0x24;
  9936  172D  3024               	movlw	36
  9937  172E  009E               	movwf	30	;volatile
  9938                           
  9939                           ;mcc_generated_files/eusart.c: 100:     SP1BRGL = 0x22;
  9940  172F  3022               	movlw	34
  9941  1730  009B               	movwf	27	;volatile
  9942                           
  9943                           ;mcc_generated_files/eusart.c: 103:     SP1BRGH = 0x00;
  9944  1731  019C               	clrf	28	;volatile
  9945                           
  9946                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  9947  1732  3045               	movlw	low _EUSART_DefaultFramingErrorHandler
  9948  1733  0020               	movlb	0	; select bank0
  9949  1734  00CD               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  9950  1735  3013               	movlw	high _EUSART_DefaultFramingErrorHandler
  9951  1736  00CE               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  9952  1737  3193  23B9  3197   	fcall	_EUSART_SetFramingErrorHandler
  9953                           
  9954                           ;mcc_generated_files/eusart.c: 107:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  9955  173A  305E               	movlw	low _EUSART_DefaultOverrunErrorHandler
  9956  173B  0020               	movlb	0	; select bank0
  9957  173C  00CD               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  9958  173D  3013               	movlw	high _EUSART_DefaultOverrunErrorHandler
  9959  173E  00CE               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  9960  173F  3193  23C1  3197   	fcall	_EUSART_SetOverrunErrorHandler
  9961                           
  9962                           ;mcc_generated_files/eusart.c: 108:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  9963  1742  3049               	movlw	low _EUSART_DefaultErrorHandler
  9964  1743  0020               	movlb	0	; select bank0
  9965  1744  00CD               	movwf	EUSART_SetErrorHandler@interruptHandler
  9966  1745  3013               	movlw	high _EUSART_DefaultErrorHandler
  9967  1746  00CE               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  9968  1747  3193  23B1         	fcall	_EUSART_SetErrorHandler
  9969                           
  9970                           ;mcc_generated_files/eusart.c: 110:     eusartRxLastError.status = 0;
  9971  1749  0020               	movlb	0	; select bank0
  9972  174A  01B8               	clrf	_eusartRxLastError	;volatile
  9973                           
  9974                           ;mcc_generated_files/eusart.c: 113:     eusartRxHead = 0;
  9975  174B  01BB               	clrf	_eusartRxHead	;volatile
  9976                           
  9977                           ;mcc_generated_files/eusart.c: 114:     eusartRxTail = 0;
  9978  174C  01BA               	clrf	_eusartRxTail	;volatile
  9979                           
  9980                           ;mcc_generated_files/eusart.c: 115:     eusartRxCount = 0;
  9981  174D  01B9               	clrf	_eusartRxCount	;volatile
  9982                           
  9983                           ;mcc_generated_files/eusart.c: 118:     PIE1bits.RCIE = 1;
  9984  174E  0021               	movlb	1	; select bank1
  9985  174F  1691               	bsf	17,5	;volatile
  9986  1750  0008               	return
  9987  1751                     __end_of_EUSART_Initialize:	
  9988                           
  9989                           	psect	text27
  9990  13C9                     __ptext27:	
  9991 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  9992 ;; Defined at:
  9993 ;;		line 236 in file "mcc_generated_files/eusart.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
  9996 ;;		 -> EUSART_CommandHandler_ISR(1), EUSART_Receive_ISR(1), 
  9997 ;; Auto vars:     Size  Location     Type
  9998 ;;		None
  9999 ;; Return value:  Size  Location     Type
 10000 ;;                  1    wreg      void 
 10001 ;; Registers used:
 10002 ;;		wreg
 10003 ;; Tracked objects:
 10004 ;;		On entry : 1F/0
 10005 ;;		On exit  : 1F/2
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10008 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10012 ;;Total ram usage:        2 bytes
 10013 ;; Hardware stack levels used:    1
 10014 ;; Hardware stack levels required when called:    5
 10015 ;; This function calls:
 10016 ;;		Nothing
 10017 ;; This function is called by:
 10018 ;;		_EUSART_Initialize
 10019 ;;		_uart_start
 10020 ;; This function uses a non-reentrant model
 10021 ;;
 10022                           
 10023                           
 10024                           ;psect for function _EUSART_SetRxInterruptHandler
 10025  13C9                     _EUSART_SetRxInterruptHandler:	
 10026                           
 10027                           ;mcc_generated_files/eusart.c: 237:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
 10028                           
 10029                           ;incstack = 0
 10030                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 10031  13C9  084E               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 10032  13CA  0022               	movlb	2	; select bank2
 10033  13CB  00EB               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
 10034  13CC  0020               	movlb	0	; select bank0
 10035  13CD  084D               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 10036  13CE  0022               	movlb	2	; select bank2
 10037  13CF  00EA               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
 10038  13D0  0008               	return
 10039  13D1                     __end_of_EUSART_SetRxInterruptHandler:	
 10040                           
 10041                           	psect	text28
 10042  13C1                     __ptext28:	
 10043 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 10044 ;; Defined at:
 10045 ;;		line 227 in file "mcc_generated_files/eusart.c"
 10046 ;; Parameters:    Size  Location     Type
 10047 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
 10048 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 10049 ;; Auto vars:     Size  Location     Type
 10050 ;;		None
 10051 ;; Return value:  Size  Location     Type
 10052 ;;                  1    wreg      void 
 10053 ;; Registers used:
 10054 ;;		wreg
 10055 ;; Tracked objects:
 10056 ;;		On entry : 1F/0
 10057 ;;		On exit  : 1F/2
 10058 ;;		Unchanged: 0/0
 10059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10060 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;Total ram usage:        2 bytes
 10065 ;; Hardware stack levels used:    1
 10066 ;; Hardware stack levels required when called:    5
 10067 ;; This function calls:
 10068 ;;		Nothing
 10069 ;; This function is called by:
 10070 ;;		_EUSART_Initialize
 10071 ;; This function uses a non-reentrant model
 10072 ;;
 10073                           
 10074                           
 10075                           ;psect for function _EUSART_SetOverrunErrorHandler
 10076  13C1                     _EUSART_SetOverrunErrorHandler:	
 10077                           
 10078                           ;mcc_generated_files/eusart.c: 228:     EUSART_OverrunErrorHandler = interruptHandler;
 10079                           
 10080                           ;incstack = 0
 10081                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 10082  13C1  084E               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 10083  13C2  0022               	movlb	2	; select bank2
 10084  13C3  00E7               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
 10085  13C4  0020               	movlb	0	; select bank0
 10086  13C5  084D               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 10087  13C6  0022               	movlb	2	; select bank2
 10088  13C7  00E6               	movwf	_EUSART_OverrunErrorHandler^(0+256)
 10089  13C8  0008               	return
 10090  13C9                     __end_of_EUSART_SetOverrunErrorHandler:	
 10091                           
 10092                           	psect	text29
 10093  13B9                     __ptext29:	
 10094 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 10095 ;; Defined at:
 10096 ;;		line 223 in file "mcc_generated_files/eusart.c"
 10097 ;; Parameters:    Size  Location     Type
 10098 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
 10099 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 10100 ;; Auto vars:     Size  Location     Type
 10101 ;;		None
 10102 ;; Return value:  Size  Location     Type
 10103 ;;                  1    wreg      void 
 10104 ;; Registers used:
 10105 ;;		wreg
 10106 ;; Tracked objects:
 10107 ;;		On entry : 1F/0
 10108 ;;		On exit  : 1F/2
 10109 ;;		Unchanged: 0/0
 10110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10111 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;Total ram usage:        2 bytes
 10116 ;; Hardware stack levels used:    1
 10117 ;; Hardware stack levels required when called:    5
 10118 ;; This function calls:
 10119 ;;		Nothing
 10120 ;; This function is called by:
 10121 ;;		_EUSART_Initialize
 10122 ;; This function uses a non-reentrant model
 10123 ;;
 10124                           
 10125                           
 10126                           ;psect for function _EUSART_SetFramingErrorHandler
 10127  13B9                     _EUSART_SetFramingErrorHandler:	
 10128                           
 10129                           ;mcc_generated_files/eusart.c: 224:     EUSART_FramingErrorHandler = interruptHandler;
 10130                           
 10131                           ;incstack = 0
 10132                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 10133  13B9  084E               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 10134  13BA  0022               	movlb	2	; select bank2
 10135  13BB  00E9               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
 10136  13BC  0020               	movlb	0	; select bank0
 10137  13BD  084D               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 10138  13BE  0022               	movlb	2	; select bank2
 10139  13BF  00E8               	movwf	_EUSART_FramingErrorHandler^(0+256)
 10140  13C0  0008               	return
 10141  13C1                     __end_of_EUSART_SetFramingErrorHandler:	
 10142                           
 10143                           	psect	text30
 10144  13B1                     __ptext30:	
 10145 ;; *************** function _EUSART_SetErrorHandler *****************
 10146 ;; Defined at:
 10147 ;;		line 231 in file "mcc_generated_files/eusart.c"
 10148 ;; Parameters:    Size  Location     Type
 10149 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
 10150 ;;		 -> EUSART_DefaultErrorHandler(1), 
 10151 ;; Auto vars:     Size  Location     Type
 10152 ;;		None
 10153 ;; Return value:  Size  Location     Type
 10154 ;;                  1    wreg      void 
 10155 ;; Registers used:
 10156 ;;		wreg
 10157 ;; Tracked objects:
 10158 ;;		On entry : 1F/0
 10159 ;;		On exit  : 1F/3
 10160 ;;		Unchanged: 0/0
 10161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10162 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10165 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10166 ;;Total ram usage:        2 bytes
 10167 ;; Hardware stack levels used:    1
 10168 ;; Hardware stack levels required when called:    5
 10169 ;; This function calls:
 10170 ;;		Nothing
 10171 ;; This function is called by:
 10172 ;;		_EUSART_Initialize
 10173 ;; This function uses a non-reentrant model
 10174 ;;
 10175                           
 10176                           
 10177                           ;psect for function _EUSART_SetErrorHandler
 10178  13B1                     _EUSART_SetErrorHandler:	
 10179                           
 10180                           ;mcc_generated_files/eusart.c: 232:     EUSART_ErrorHandler = interruptHandler;
 10181                           
 10182                           ;incstack = 0
 10183                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 10184  13B1  084E               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 10185  13B2  0023               	movlb	3	; select bank3
 10186  13B3  00CD               	movwf	(_EUSART_ErrorHandler+1)^(0+384)
 10187  13B4  0020               	movlb	0	; select bank0
 10188  13B5  084D               	movf	EUSART_SetErrorHandler@interruptHandler,w
 10189  13B6  0023               	movlb	3	; select bank3
 10190  13B7  00CC               	movwf	_EUSART_ErrorHandler^(0+384)
 10191  13B8  0008               	return
 10192  13B9                     __end_of_EUSART_SetErrorHandler:	
 10193                           
 10194                           	psect	text31
 10195  14A6                     __ptext31:	
 10196 ;; *************** function _ADC_Initialize *****************
 10197 ;; Defined at:
 10198 ;;		line 67 in file "mcc_generated_files/adc.c"
 10199 ;; Parameters:    Size  Location     Type
 10200 ;;		None
 10201 ;; Auto vars:     Size  Location     Type
 10202 ;;		None
 10203 ;; Return value:  Size  Location     Type
 10204 ;;                  1    wreg      void 
 10205 ;; Registers used:
 10206 ;;		wreg, status,2, status,0, pclath, cstack
 10207 ;; Tracked objects:
 10208 ;;		On entry : B1F/1
 10209 ;;		On exit  : 1F/2
 10210 ;;		Unchanged: 0/0
 10211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;Total ram usage:        0 bytes
 10217 ;; Hardware stack levels used:    1
 10218 ;; Hardware stack levels required when called:    6
 10219 ;; This function calls:
 10220 ;;		_ADC_SetInterruptHandler
 10221 ;; This function is called by:
 10222 ;;		_SYSTEM_Initialize
 10223 ;; This function uses a non-reentrant model
 10224 ;;
 10225                           
 10226                           
 10227                           ;psect for function _ADC_Initialize
 10228  14A6                     _ADC_Initialize:	
 10229                           
 10230                           ;mcc_generated_files/adc.c: 72:     ADCON0 = 0x01;
 10231                           
 10232                           ;incstack = 0
 10233                           ; Regs used in _ADC_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10234  14A6  3001               	movlw	1
 10235  14A7  009D               	movwf	29	;volatile
 10236                           
 10237                           ;mcc_generated_files/adc.c: 75:     ADCON1 = 0xE0;
 10238  14A8  30E0               	movlw	224
 10239  14A9  009E               	movwf	30	;volatile
 10240                           
 10241                           ;mcc_generated_files/adc.c: 78:     ADCON2 = 0x50;
 10242  14AA  3050               	movlw	80
 10243  14AB  009F               	movwf	31	;volatile
 10244                           
 10245                           ;mcc_generated_files/adc.c: 81:     ADRESL = 0x00;
 10246  14AC  019B               	clrf	27	;volatile
 10247                           
 10248                           ;mcc_generated_files/adc.c: 84:     ADRESH = 0x00;
 10249  14AD  019C               	clrf	28	;volatile
 10250                           
 10251                           ;mcc_generated_files/adc.c: 87:     PIE1bits.ADIE = 1;
 10252  14AE  1711               	bsf	17,6	;volatile
 10253                           
 10254                           ;mcc_generated_files/adc.c: 90:     ADC_SetInterruptHandler(ADC_DefaultInterruptHandler)
      +                          ;
 10255  14AF  3044               	movlw	low _ADC_DefaultInterruptHandler
 10256  14B0  0020               	movlb	0	; select bank0
 10257  14B1  00CD               	movwf	ADC_SetInterruptHandler@InterruptHandler
 10258  14B2  3013               	movlw	high _ADC_DefaultInterruptHandler
 10259  14B3  00CE               	movwf	ADC_SetInterruptHandler@InterruptHandler+1
 10260  14B4  3193  23A1         	fcall	_ADC_SetInterruptHandler
 10261  14B6  0008               	return
 10262  14B7                     __end_of_ADC_Initialize:	
 10263                           
 10264                           	psect	text32
 10265  0B82                     __ptext32:	
 10266 ;; *************** function _ApplicationInit *****************
 10267 ;; Defined at:
 10268 ;;		line 13 in file "GlobalSystem.c"
 10269 ;; Parameters:    Size  Location     Type
 10270 ;;		None
 10271 ;; Auto vars:     Size  Location     Type
 10272 ;;  act_counter     4    3[BANK3 ] unsigned long 
 10273 ;;  val             2    7[BANK3 ] unsigned short 
 10274 ;;  chopper_stat    2    0[BANK3 ] unsigned short 
 10275 ;;  invalid_para    1    2[BANK3 ] _Bool 
 10276 ;; Return value:  Size  Location     Type
 10277 ;;                  1    wreg      void 
 10278 ;; Registers used:
 10279 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10280 ;; Tracked objects:
 10281 ;;		On entry : 1F/1
 10282 ;;		On exit  : 1D/0
 10283 ;;		Unchanged: 0/0
 10284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10286 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0
 10287 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10288 ;;      Totals:         0       4       0       0       9       0       0       0       0       0       0       0       
      +0       0
 10289 ;;Total ram usage:       13 bytes
 10290 ;; Hardware stack levels used:    1
 10291 ;; Hardware stack levels required when called:    8
 10292 ;; This function calls:
 10293 ;;		_FLASH_ReadWord
 10294 ;;		_save_to_flash
 10295 ;;		_set_relay_activation_counter
 10296 ;;		_set_relay_reset_voltage
 10297 ;;		_set_reset_duration
 10298 ;;		_set_vdc_critic
 10299 ;;		_set_vdc_max
 10300 ;;		_set_vdc_min
 10301 ;;		_set_vdc_speed
 10302 ;;		_start_chopper
 10303 ;; This function is called by:
 10304 ;;		_main
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           
 10309                           ;psect for function _ApplicationInit
 10310  0B82                     _ApplicationInit:	
 10311                           
 10312                           ;GlobalSystem.c: 15:     _Bool invalid_param = 0;
 10313                           
 10314                           ;incstack = 0
 10315                           ; Regs used in _ApplicationInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10316  0B82  0023               	movlb	3	; select bank3
 10317  0B83  01BF               	clrf	ApplicationInit@invalid_param^(0+384)
 10318                           
 10319                           ;GlobalSystem.c: 16:     uint16_t chopper_state = FLASH_ReadWord(0x1F00);
 10320  0B84  3000               	movlw	0
 10321  0B85  0020               	movlb	0	; select bank0
 10322  0B86  00CD               	movwf	FLASH_ReadWord@flashAddr
 10323  0B87  301F               	movlw	31
 10324  0B88  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10325  0B89  3195  25C5  318B   	fcall	_FLASH_ReadWord
 10326  0B8C  084E               	movf	?_FLASH_ReadWord+1,w
 10327  0B8D  0023               	movlb	3	; select bank3
 10328  0B8E  00BE               	movwf	(ApplicationInit@chopper_state+1)^(0+384)
 10329  0B8F  0020               	movlb	0	; select bank0
 10330  0B90  084D               	movf	?_FLASH_ReadWord,w
 10331  0B91  0023               	movlb	3	; select bank3
 10332  0B92  00BD               	movwf	ApplicationInit@chopper_state^(0+384)
 10333                           
 10334                           ;GlobalSystem.c: 17:     uint16_t val = FLASH_ReadWord(0x1F00 +1);
 10335  0B93  3001               	movlw	1
 10336  0B94  0020               	movlb	0	; select bank0
 10337  0B95  00CD               	movwf	FLASH_ReadWord@flashAddr
 10338  0B96  301F               	movlw	31
 10339  0B97  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10340  0B98  3195  25C5  318B   	fcall	_FLASH_ReadWord
 10341  0B9B  084E               	movf	?_FLASH_ReadWord+1,w
 10342  0B9C  0023               	movlb	3	; select bank3
 10343  0B9D  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10344  0B9E  0020               	movlb	0	; select bank0
 10345  0B9F  084D               	movf	?_FLASH_ReadWord,w
 10346  0BA0  0023               	movlb	3	; select bank3
 10347  0BA1  00C4               	movwf	ApplicationInit@val^(0+384)
 10348                           
 10349                           ;GlobalSystem.c: 18:     if( val <= 800 )
 10350  0BA2  3003               	movlw	3
 10351  0BA3  0245               	subwf	(ApplicationInit@val+1)^(0+384),w
 10352  0BA4  3021               	movlw	33
 10353  0BA5  1903               	skipnz
 10354  0BA6  0244               	subwf	ApplicationInit@val^(0+384),w
 10355  0BA7  1803               	skipnc
 10356  0BA8  2BB4               	goto	l1143
 10357                           
 10358                           ;GlobalSystem.c: 19:         set_vdc_min(val);
 10359  0BA9  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10360  0BAA  0020               	movlb	0	; select bank0
 10361  0BAB  00D1               	movwf	set_vdc_min@vmin+1
 10362  0BAC  0023               	movlb	3	; select bank3
 10363  0BAD  0844               	movf	ApplicationInit@val^(0+384),w
 10364  0BAE  0020               	movlb	0	; select bank0
 10365  0BAF  00D0               	movwf	set_vdc_min@vmin
 10366  0BB0  3194  2429  318B   	fcall	_set_vdc_min
 10367  0BB3  2BB6               	goto	l4250
 10368  0BB4                     l1143:	
 10369                           ;GlobalSystem.c: 20:     else
 10370                           
 10371                           
 10372                           ;GlobalSystem.c: 21:         invalid_param = 1;
 10373  0BB4  01BF               	clrf	ApplicationInit@invalid_param^(0+384)
 10374  0BB5  0ABF               	incf	ApplicationInit@invalid_param^(0+384),f
 10375  0BB6                     l4250:	
 10376                           
 10377                           ;GlobalSystem.c: 23:     val = FLASH_ReadWord(0x1F00 +2);
 10378  0BB6  3002               	movlw	2
 10379  0BB7  0020               	movlb	0	; select bank0
 10380  0BB8  00CD               	movwf	FLASH_ReadWord@flashAddr
 10381  0BB9  301F               	movlw	31
 10382  0BBA  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10383  0BBB  3195  25C5  318B   	fcall	_FLASH_ReadWord
 10384  0BBE  084E               	movf	?_FLASH_ReadWord+1,w
 10385  0BBF  0023               	movlb	3	; select bank3
 10386  0BC0  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10387  0BC1  0020               	movlb	0	; select bank0
 10388  0BC2  084D               	movf	?_FLASH_ReadWord,w
 10389  0BC3  0023               	movlb	3	; select bank3
 10390  0BC4  00C4               	movwf	ApplicationInit@val^(0+384)
 10391                           
 10392                           ;GlobalSystem.c: 24:     if( val <= 800 )
 10393  0BC5  3003               	movlw	3
 10394  0BC6  0245               	subwf	(ApplicationInit@val+1)^(0+384),w
 10395  0BC7  3021               	movlw	33
 10396  0BC8  1903               	skipnz
 10397  0BC9  0244               	subwf	ApplicationInit@val^(0+384),w
 10398  0BCA  1803               	skipnc
 10399  0BCB  2BD7               	goto	l1145
 10400                           
 10401                           ;GlobalSystem.c: 25:         set_vdc_max(val);
 10402  0BCC  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10403  0BCD  0020               	movlb	0	; select bank0
 10404  0BCE  00D1               	movwf	set_vdc_max@vmax+1
 10405  0BCF  0023               	movlb	3	; select bank3
 10406  0BD0  0844               	movf	ApplicationInit@val^(0+384),w
 10407  0BD1  0020               	movlb	0	; select bank0
 10408  0BD2  00D0               	movwf	set_vdc_max@vmax
 10409  0BD3  3194  241E  318B   	fcall	_set_vdc_max
 10410  0BD6  2BD9               	goto	l4256
 10411  0BD7                     l1145:	
 10412                           ;GlobalSystem.c: 26:     else
 10413                           
 10414                           
 10415                           ;GlobalSystem.c: 27:         invalid_param = 1;
 10416  0BD7  01BF               	clrf	ApplicationInit@invalid_param^(0+384)
 10417  0BD8  0ABF               	incf	ApplicationInit@invalid_param^(0+384),f
 10418  0BD9                     l4256:	
 10419                           
 10420                           ;GlobalSystem.c: 29:     val = FLASH_ReadWord(0x1F00 +3);
 10421  0BD9  3003               	movlw	3
 10422  0BDA  0020               	movlb	0	; select bank0
 10423  0BDB  00CD               	movwf	FLASH_ReadWord@flashAddr
 10424  0BDC  301F               	movlw	31
 10425  0BDD  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10426  0BDE  3195  25C5  318B   	fcall	_FLASH_ReadWord
 10427  0BE1  084E               	movf	?_FLASH_ReadWord+1,w
 10428  0BE2  0023               	movlb	3	; select bank3
 10429  0BE3  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10430  0BE4  0020               	movlb	0	; select bank0
 10431  0BE5  084D               	movf	?_FLASH_ReadWord,w
 10432  0BE6  0023               	movlb	3	; select bank3
 10433  0BE7  00C4               	movwf	ApplicationInit@val^(0+384)
 10434                           
 10435                           ;GlobalSystem.c: 30:     if( val <= 800 )
 10436  0BE8  3003               	movlw	3
 10437  0BE9  0245               	subwf	(ApplicationInit@val+1)^(0+384),w
 10438  0BEA  3021               	movlw	33
 10439  0BEB  1903               	skipnz
 10440  0BEC  0244               	subwf	ApplicationInit@val^(0+384),w
 10441  0BED  1803               	skipnc
 10442  0BEE  2BFA               	goto	l1147
 10443                           
 10444                           ;GlobalSystem.c: 31:         set_vdc_critic(val);
 10445  0BEF  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10446  0BF0  0020               	movlb	0	; select bank0
 10447  0BF1  00D1               	movwf	set_vdc_critic@vc+1
 10448  0BF2  0023               	movlb	3	; select bank3
 10449  0BF3  0844               	movf	ApplicationInit@val^(0+384),w
 10450  0BF4  0020               	movlb	0	; select bank0
 10451  0BF5  00D0               	movwf	set_vdc_critic@vc
 10452  0BF6  3194  2413  318B   	fcall	_set_vdc_critic
 10453  0BF9  2BFC               	goto	l4262
 10454  0BFA                     l1147:	
 10455                           ;GlobalSystem.c: 32:     else
 10456                           
 10457                           
 10458                           ;GlobalSystem.c: 33:         invalid_param = 1;
 10459  0BFA  01BF               	clrf	ApplicationInit@invalid_param^(0+384)
 10460  0BFB  0ABF               	incf	ApplicationInit@invalid_param^(0+384),f
 10461  0BFC                     l4262:	
 10462                           
 10463                           ;GlobalSystem.c: 35:     val = FLASH_ReadWord(0x1F00 +4);
 10464  0BFC  3004               	movlw	4
 10465  0BFD  0020               	movlb	0	; select bank0
 10466  0BFE  00CD               	movwf	FLASH_ReadWord@flashAddr
 10467  0BFF  301F               	movlw	31
 10468  0C00  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10469  0C01  3195  25C5  318B   	fcall	_FLASH_ReadWord
 10470  0C04  084E               	movf	?_FLASH_ReadWord+1,w
 10471  0C05  0023               	movlb	3	; select bank3
 10472  0C06  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10473  0C07  0020               	movlb	0	; select bank0
 10474  0C08  084D               	movf	?_FLASH_ReadWord,w
 10475  0C09  0023               	movlb	3	; select bank3
 10476  0C0A  00C4               	movwf	ApplicationInit@val^(0+384)
 10477                           
 10478                           ;GlobalSystem.c: 36:     if( val <= 10000 )
 10479  0C0B  3027               	movlw	39
 10480  0C0C  0245               	subwf	(ApplicationInit@val+1)^(0+384),w
 10481  0C0D  3011               	movlw	17
 10482  0C0E  1903               	skipnz
 10483  0C0F  0244               	subwf	ApplicationInit@val^(0+384),w
 10484  0C10  1803               	skipnc
 10485  0C11  2C1D               	goto	l1149
 10486                           
 10487                           ;GlobalSystem.c: 37:         set_vdc_speed(val);
 10488  0C12  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10489  0C13  0020               	movlb	0	; select bank0
 10490  0C14  00D6               	movwf	set_vdc_speed@msDelay+1
 10491  0C15  0023               	movlb	3	; select bank3
 10492  0C16  0844               	movf	ApplicationInit@val^(0+384),w
 10493  0C17  0020               	movlb	0	; select bank0
 10494  0C18  00D5               	movwf	set_vdc_speed@msDelay
 10495  0C19  3196  2646  318B   	fcall	_set_vdc_speed
 10496  0C1C  2C1F               	goto	l4268
 10497  0C1D                     l1149:	
 10498                           ;GlobalSystem.c: 38:     else
 10499                           
 10500                           
 10501                           ;GlobalSystem.c: 39:         invalid_param = 1;
 10502  0C1D  01BF               	clrf	ApplicationInit@invalid_param^(0+384)
 10503  0C1E  0ABF               	incf	ApplicationInit@invalid_param^(0+384),f
 10504  0C1F                     l4268:	
 10505                           
 10506                           ;GlobalSystem.c: 41:     val = FLASH_ReadWord(0x1F00 +5);
 10507  0C1F  3005               	movlw	5
 10508  0C20  0020               	movlb	0	; select bank0
 10509  0C21  00CD               	movwf	FLASH_ReadWord@flashAddr
 10510  0C22  301F               	movlw	31
 10511  0C23  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10512  0C24  3195  25C5  318B   	fcall	_FLASH_ReadWord
 10513  0C27  084E               	movf	?_FLASH_ReadWord+1,w
 10514  0C28  0023               	movlb	3	; select bank3
 10515  0C29  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10516  0C2A  0020               	movlb	0	; select bank0
 10517  0C2B  084D               	movf	?_FLASH_ReadWord,w
 10518  0C2C  0023               	movlb	3	; select bank3
 10519  0C2D  00C4               	movwf	ApplicationInit@val^(0+384)
 10520                           
 10521                           ;GlobalSystem.c: 42:     if( val <= 800 )
 10522  0C2E  3003               	movlw	3
 10523  0C2F  0245               	subwf	(ApplicationInit@val+1)^(0+384),w
 10524  0C30  3021               	movlw	33
 10525  0C31  1903               	skipnz
 10526  0C32  0244               	subwf	ApplicationInit@val^(0+384),w
 10527  0C33  1803               	skipnc
 10528  0C34  2C40               	goto	l1151
 10529                           
 10530                           ;GlobalSystem.c: 43:         set_relay_reset_voltage(val);
 10531  0C35  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10532  0C36  0020               	movlb	0	; select bank0
 10533  0C37  00CE               	movwf	set_relay_reset_voltage@relay_vthres+1
 10534  0C38  0023               	movlb	3	; select bank3
 10535  0C39  0844               	movf	ApplicationInit@val^(0+384),w
 10536  0C3A  0020               	movlb	0	; select bank0
 10537  0C3B  00CD               	movwf	set_relay_reset_voltage@relay_vthres
 10538  0C3C  3194  24DF  318B   	fcall	_set_relay_reset_voltage
 10539  0C3F  2C42               	goto	l4274
 10540  0C40                     l1151:	
 10541                           ;GlobalSystem.c: 44:     else
 10542                           
 10543                           
 10544                           ;GlobalSystem.c: 45:         invalid_param = 1;
 10545  0C40  01BF               	clrf	ApplicationInit@invalid_param^(0+384)
 10546  0C41  0ABF               	incf	ApplicationInit@invalid_param^(0+384),f
 10547  0C42                     l4274:	
 10548                           
 10549                           ;GlobalSystem.c: 47:     val = FLASH_ReadWord(0x1F00 +6);
 10550  0C42  3006               	movlw	6
 10551  0C43  0020               	movlb	0	; select bank0
 10552  0C44  00CD               	movwf	FLASH_ReadWord@flashAddr
 10553  0C45  301F               	movlw	31
 10554  0C46  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10555  0C47  3195  25C5  318B   	fcall	_FLASH_ReadWord
 10556  0C4A  084E               	movf	?_FLASH_ReadWord+1,w
 10557  0C4B  0023               	movlb	3	; select bank3
 10558  0C4C  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10559  0C4D  0020               	movlb	0	; select bank0
 10560  0C4E  084D               	movf	?_FLASH_ReadWord,w
 10561  0C4F  0023               	movlb	3	; select bank3
 10562  0C50  00C4               	movwf	ApplicationInit@val^(0+384)
 10563                           
 10564                           ;GlobalSystem.c: 48:     if( val <= 25500 )
 10565  0C51  3063               	movlw	99
 10566  0C52  0245               	subwf	(ApplicationInit@val+1)^(0+384),w
 10567  0C53  309D               	movlw	157
 10568  0C54  1903               	skipnz
 10569  0C55  0244               	subwf	ApplicationInit@val^(0+384),w
 10570  0C56  1803               	skipnc
 10571  0C57  2C63               	goto	l1153
 10572                           
 10573                           ;GlobalSystem.c: 49:         set_reset_duration(val);
 10574  0C58  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10575  0C59  0020               	movlb	0	; select bank0
 10576  0C5A  00D6               	movwf	set_reset_duration@reset_dur_ms+1
 10577  0C5B  0023               	movlb	3	; select bank3
 10578  0C5C  0844               	movf	ApplicationInit@val^(0+384),w
 10579  0C5D  0020               	movlb	0	; select bank0
 10580  0C5E  00D5               	movwf	set_reset_duration@reset_dur_ms
 10581  0C5F  3196  26EE  318B   	fcall	_set_reset_duration
 10582  0C62  2C65               	goto	l4280
 10583  0C63                     l1153:	
 10584                           ;GlobalSystem.c: 50:     else
 10585                           
 10586                           
 10587                           ;GlobalSystem.c: 51:         invalid_param = 1;
 10588  0C63  01BF               	clrf	ApplicationInit@invalid_param^(0+384)
 10589  0C64  0ABF               	incf	ApplicationInit@invalid_param^(0+384),f
 10590  0C65                     l4280:	
 10591                           
 10592                           ;GlobalSystem.c: 53:     if( invalid_param == 0 )
 10593  0C65  0023               	movlb	3	; select bank3
 10594  0C66  083F               	movf	ApplicationInit@invalid_param^(0+384),w
 10595  0C67  1D03               	btfss	3,2
 10596  0C68  2C82               	goto	l4290
 10597                           
 10598                           ;GlobalSystem.c: 54:     {;GlobalSystem.c: 57:         if( chopper_state == 0x0ABC || ch
      +                          opper_state == 0x0CBA )
 10599  0C69  30BC               	movlw	188
 10600  0C6A  063D               	xorwf	ApplicationInit@chopper_state^(0+384),w
 10601  0C6B  300A               	movlw	10
 10602  0C6C  1903               	skipnz
 10603  0C6D  063E               	xorwf	(ApplicationInit@chopper_state+1)^(0+384),w
 10604  0C6E  1903               	btfsc	3,2
 10605  0C6F  2C77               	goto	l4286
 10606  0C70  30BA               	movlw	186
 10607  0C71  063D               	xorwf	ApplicationInit@chopper_state^(0+384),w
 10608  0C72  300C               	movlw	12
 10609  0C73  1903               	skipnz
 10610  0C74  063E               	xorwf	(ApplicationInit@chopper_state+1)^(0+384),w
 10611  0C75  1D03               	btfss	3,2
 10612  0C76  2CA8               	goto	l4298
 10613  0C77                     l4286:	
 10614                           
 10615                           ;GlobalSystem.c: 58:         {;GlobalSystem.c: 59:             if( chopper_state == 0x0A
      +                          BC )
 10616  0C77  30BC               	movlw	188
 10617  0C78  063D               	xorwf	ApplicationInit@chopper_state^(0+384),w
 10618  0C79  300A               	movlw	10
 10619  0C7A  1903               	skipnz
 10620  0C7B  063E               	xorwf	(ApplicationInit@chopper_state+1)^(0+384),w
 10621  0C7C  1D03               	btfss	3,2
 10622  0C7D  2CA8               	goto	l4298
 10623                           
 10624                           ;GlobalSystem.c: 60:                 start_chopper();
 10625  0C7E  3195  2523  318B   	fcall	_start_chopper
 10626                           
 10627                           ;GlobalSystem.c: 62:         else
 10628  0C81  2CA8               	goto	l4298
 10629  0C82                     l4290:	
 10630                           
 10631                           ;GlobalSystem.c: 66:     {;GlobalSystem.c: 69:         set_vdc_min(0);
 10632  0C82  3000               	movlw	0
 10633  0C83  0020               	movlb	0	; select bank0
 10634  0C84  00D0               	movwf	set_vdc_min@vmin
 10635  0C85  00D1               	movwf	set_vdc_min@vmin+1
 10636  0C86  3194  2429  318B   	fcall	_set_vdc_min
 10637                           
 10638                           ;GlobalSystem.c: 70:         set_vdc_max(0);
 10639  0C89  3000               	movlw	0
 10640  0C8A  00D0               	movwf	set_vdc_max@vmax
 10641  0C8B  00D1               	movwf	set_vdc_max@vmax+1
 10642  0C8C  3194  241E  318B   	fcall	_set_vdc_max
 10643                           
 10644                           ;GlobalSystem.c: 71:         set_vdc_critic(0);
 10645  0C8F  3000               	movlw	0
 10646  0C90  00D0               	movwf	set_vdc_critic@vc
 10647  0C91  00D1               	movwf	set_vdc_critic@vc+1
 10648  0C92  3194  2413  318B   	fcall	_set_vdc_critic
 10649                           
 10650                           ;GlobalSystem.c: 72:         set_vdc_speed(0);
 10651  0C95  3000               	movlw	0
 10652  0C96  00D5               	movwf	set_vdc_speed@msDelay
 10653  0C97  00D6               	movwf	set_vdc_speed@msDelay+1
 10654  0C98  3196  2646  318B   	fcall	_set_vdc_speed
 10655                           
 10656                           ;GlobalSystem.c: 73:         set_relay_reset_voltage(0);
 10657  0C9B  3000               	movlw	0
 10658  0C9C  0020               	movlb	0	; select bank0
 10659  0C9D  00CD               	movwf	set_relay_reset_voltage@relay_vthres
 10660  0C9E  00CE               	movwf	set_relay_reset_voltage@relay_vthres+1
 10661  0C9F  3194  24DF  318B   	fcall	_set_relay_reset_voltage
 10662                           
 10663                           ;GlobalSystem.c: 74:         set_reset_duration(0);
 10664  0CA2  3000               	movlw	0
 10665  0CA3  00D5               	movwf	set_reset_duration@reset_dur_ms
 10666  0CA4  00D6               	movwf	set_reset_duration@reset_dur_ms+1
 10667  0CA5  3196  26EE  318B   	fcall	_set_reset_duration
 10668  0CA8                     l4298:	
 10669                           
 10670                           ;GlobalSystem.c: 76:     val = FLASH_ReadWord(0x1F00 +7);
 10671  0CA8  3007               	movlw	7
 10672  0CA9  0020               	movlb	0	; select bank0
 10673  0CAA  00CD               	movwf	FLASH_ReadWord@flashAddr
 10674  0CAB  301F               	movlw	31
 10675  0CAC  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10676  0CAD  3195  25C5  318B   	fcall	_FLASH_ReadWord
 10677  0CB0  084E               	movf	?_FLASH_ReadWord+1,w
 10678  0CB1  0023               	movlb	3	; select bank3
 10679  0CB2  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10680  0CB3  0020               	movlb	0	; select bank0
 10681  0CB4  084D               	movf	?_FLASH_ReadWord,w
 10682  0CB5  0023               	movlb	3	; select bank3
 10683  0CB6  00C4               	movwf	ApplicationInit@val^(0+384)
 10684                           
 10685                           ;GlobalSystem.c: 77:     uint32_t act_counter = val;
 10686  0CB7  0844               	movf	ApplicationInit@val^(0+384),w
 10687  0CB8  00C0               	movwf	ApplicationInit@act_counter^(0+384)
 10688  0CB9  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10689  0CBA  00C1               	movwf	(ApplicationInit@act_counter^(0+384)+1)
 10690  0CBB  01C2               	clrf	(ApplicationInit@act_counter^(0+384)+2)
 10691  0CBC  01C3               	clrf	(ApplicationInit@act_counter^(0+384)+3)
 10692                           
 10693                           ;GlobalSystem.c: 78:     act_counter <<= 16;
 10694  0CBD  3010               	movlw	16
 10695  0CBE                     u3005:	
 10696  0CBE  35C0               	lslf	ApplicationInit@act_counter^(0+384),f
 10697  0CBF  0DC1               	rlf	(ApplicationInit@act_counter+1)^(0+384),f
 10698  0CC0  0DC2               	rlf	(ApplicationInit@act_counter+2)^(0+384),f
 10699  0CC1  0DC3               	rlf	(ApplicationInit@act_counter+3)^(0+384),f
 10700  0CC2  0B89               	decfsz	9,f
 10701  0CC3  2CBE               	goto	u3005
 10702                           
 10703                           ;GlobalSystem.c: 79:     val = FLASH_ReadWord(0x1F00 +8);
 10704  0CC4  3008               	movlw	8
 10705  0CC5  0020               	movlb	0	; select bank0
 10706  0CC6  00CD               	movwf	FLASH_ReadWord@flashAddr
 10707  0CC7  301F               	movlw	31
 10708  0CC8  00CE               	movwf	FLASH_ReadWord@flashAddr+1
 10709  0CC9  3195  25C5  318B   	fcall	_FLASH_ReadWord
 10710  0CCC  084E               	movf	?_FLASH_ReadWord+1,w
 10711  0CCD  0023               	movlb	3	; select bank3
 10712  0CCE  00C5               	movwf	(ApplicationInit@val+1)^(0+384)
 10713  0CCF  0020               	movlb	0	; select bank0
 10714  0CD0  084D               	movf	?_FLASH_ReadWord,w
 10715  0CD1  0023               	movlb	3	; select bank3
 10716  0CD2  00C4               	movwf	ApplicationInit@val^(0+384)
 10717                           
 10718                           ;GlobalSystem.c: 80:     act_counter |= val;
 10719  0CD3  0844               	movf	ApplicationInit@val^(0+384),w
 10720  0CD4  0020               	movlb	0	; select bank0
 10721  0CD5  00DB               	movwf	??_ApplicationInit
 10722  0CD6  0023               	movlb	3	; select bank3
 10723  0CD7  0845               	movf	(ApplicationInit@val+1)^(0+384),w
 10724  0CD8  0020               	movlb	0	; select bank0
 10725  0CD9  00DC               	movwf	??_ApplicationInit+1
 10726  0CDA  01DD               	clrf	??_ApplicationInit+2
 10727  0CDB  01DE               	clrf	??_ApplicationInit+3
 10728  0CDC  085B               	movf	??_ApplicationInit,w
 10729  0CDD  0023               	movlb	3	; select bank3
 10730  0CDE  04C0               	iorwf	ApplicationInit@act_counter^(0+384),f
 10731  0CDF  0020               	movlb	0	; select bank0
 10732  0CE0  085C               	movf	??_ApplicationInit+1,w
 10733  0CE1  0023               	movlb	3	; select bank3
 10734  0CE2  04C1               	iorwf	(ApplicationInit@act_counter+1)^(0+384),f
 10735  0CE3  0020               	movlb	0	; select bank0
 10736  0CE4  085D               	movf	??_ApplicationInit+2,w
 10737  0CE5  0023               	movlb	3	; select bank3
 10738  0CE6  04C2               	iorwf	(ApplicationInit@act_counter+2)^(0+384),f
 10739  0CE7  0020               	movlb	0	; select bank0
 10740  0CE8  085E               	movf	??_ApplicationInit+3,w
 10741  0CE9  0023               	movlb	3	; select bank3
 10742  0CEA  04C3               	iorwf	(ApplicationInit@act_counter+3)^(0+384),f
 10743                           
 10744                           ;GlobalSystem.c: 81:     if( act_counter == 0x3FFF3FFF )
 10745  0CEB  0A40               	incf	ApplicationInit@act_counter^(0+384),w
 10746  0CEC  303F               	movlw	63
 10747  0CED  1903               	skipnz
 10748  0CEE  0641               	xorwf	(ApplicationInit@act_counter+1)^(0+384),w
 10749  0CEF  1D03               	skipz
 10750  0CF0  2D06               	goto	l4316
 10751  0CF1  0A42               	incf	(ApplicationInit@act_counter+2)^(0+384),w
 10752  0CF2  303F               	movlw	63
 10753  0CF3  1903               	skipnz
 10754  0CF4  0643               	xorwf	(ApplicationInit@act_counter+3)^(0+384),w
 10755  0CF5  1D03               	btfss	3,2
 10756  0CF6  2D06               	goto	l4316
 10757                           
 10758                           ;GlobalSystem.c: 84:         set_relay_activation_counter(act_counter);
 10759  0CF7  3000               	movlw	0
 10760  0CF8  0020               	movlb	0	; select bank0
 10761  0CF9  00D0               	movwf	set_relay_activation_counter@act_count+3
 10762  0CFA  3000               	movlw	0
 10763  0CFB  00CF               	movwf	set_relay_activation_counter@act_count+2
 10764  0CFC  3000               	movlw	0
 10765  0CFD  00CE               	movwf	set_relay_activation_counter@act_count+1
 10766  0CFE  3000               	movlw	0
 10767  0CFF  00CD               	movwf	set_relay_activation_counter@act_count
 10768  0D00  3194  2485  318B   	fcall	_set_relay_activation_counter
 10769                           
 10770                           ;GlobalSystem.c: 85:         save_to_flash();
 10771  0D03  3189  217F         	fcall	_save_to_flash
 10772                           
 10773                           ;GlobalSystem.c: 86:     }
 10774  0D05  0008               	return
 10775  0D06                     l4316:	
 10776                           
 10777                           ;GlobalSystem.c: 88:         set_relay_activation_counter(act_counter);
 10778  0D06  0843               	movf	(ApplicationInit@act_counter+3)^(0+384),w
 10779  0D07  0020               	movlb	0	; select bank0
 10780  0D08  00D0               	movwf	set_relay_activation_counter@act_count+3
 10781  0D09  0023               	movlb	3	; select bank3
 10782  0D0A  0842               	movf	(ApplicationInit@act_counter+2)^(0+384),w
 10783  0D0B  0020               	movlb	0	; select bank0
 10784  0D0C  00CF               	movwf	set_relay_activation_counter@act_count+2
 10785  0D0D  0023               	movlb	3	; select bank3
 10786  0D0E  0841               	movf	(ApplicationInit@act_counter+1)^(0+384),w
 10787  0D0F  0020               	movlb	0	; select bank0
 10788  0D10  00CE               	movwf	set_relay_activation_counter@act_count+1
 10789  0D11  0023               	movlb	3	; select bank3
 10790  0D12  0840               	movf	ApplicationInit@act_counter^(0+384),w
 10791  0D13  0020               	movlb	0	; select bank0
 10792  0D14  00CD               	movwf	set_relay_activation_counter@act_count
 10793  0D15  3194  2485         	fcall	_set_relay_activation_counter
 10794  0D17  0008               	return
 10795  0D18                     __end_of_ApplicationInit:	
 10796                           
 10797                           	psect	text33
 10798  1523                     __ptext33:	
 10799 ;; *************** function _start_chopper *****************
 10800 ;; Defined at:
 10801 ;;		line 224 in file "vcontrol.c"
 10802 ;; Parameters:    Size  Location     Type
 10803 ;;		None
 10804 ;; Auto vars:     Size  Location     Type
 10805 ;;		None
 10806 ;; Return value:  Size  Location     Type
 10807 ;;                  1    wreg      void 
 10808 ;; Registers used:
 10809 ;;		wreg, status,2, status,0, pclath, cstack
 10810 ;; Tracked objects:
 10811 ;;		On entry : 1E/2
 10812 ;;		On exit  : 1F/0
 10813 ;;		Unchanged: 0/0
 10814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;Total ram usage:        0 bytes
 10820 ;; Hardware stack levels used:    1
 10821 ;; Hardware stack levels required when called:    7
 10822 ;; This function calls:
 10823 ;;		_init_chopper
 10824 ;;		_start_relay_watchdog
 10825 ;; This function is called by:
 10826 ;;		_uart_task
 10827 ;;		_ApplicationInit
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           
 10832                           ;psect for function _start_chopper
 10833  1523                     _start_chopper:	
 10834                           
 10835                           ;vcontrol.c: 226:     if( chopper_active == 1 )
 10836                           
 10837                           ;incstack = 0
 10838                           ; Regs used in _start_chopper: [wreg+status,2+status,0+pclath+cstack]
 10839  1523  0020               	movlb	0	; select bank0
 10840  1524  0331               	decf	_chopper_active,w
 10841  1525  1903               	btfsc	3,2
 10842  1526  0008               	return
 10843                           
 10844                           ;vcontrol.c: 229:     start_relay_watchdog();
 10845  1527  3193  23EA  3195   	fcall	_start_relay_watchdog
 10846                           
 10847                           ;vcontrol.c: 231:     TRISAbits.TRISA5 = 0;
 10848  152A  0021               	movlb	1	; select bank1
 10849  152B  128C               	bcf	12,5	;volatile
 10850                           
 10851                           ;vcontrol.c: 232:     TRISAbits.TRISA4 = 0;
 10852  152C  120C               	bcf	12,4	;volatile
 10853                           
 10854                           ;vcontrol.c: 233:     pwm_duty = 0;
 10855  152D  0020               	movlb	0	; select bank0
 10856  152E  01A6               	clrf	_pwm_duty
 10857  152F  01A7               	clrf	_pwm_duty+1
 10858                           
 10859                           ;vcontrol.c: 234:     current_duty = 0;
 10860  1530  01A2               	clrf	_current_duty
 10861  1531  01A3               	clrf	_current_duty+1
 10862                           
 10863                           ;vcontrol.c: 235:     target_duty = 0;
 10864  1532  01A4               	clrf	_target_duty
 10865  1533  01A5               	clrf	_target_duty+1
 10866                           
 10867                           ;vcontrol.c: 237:     if( init_required == 1 )
 10868  1534  0360               	decf	_init_required,w
 10869  1535  1D03               	btfss	3,2
 10870  1536  2D39               	goto	l4140
 10871                           
 10872                           ;vcontrol.c: 238:         init_chopper();
 10873  1537  3196  266C         	fcall	_init_chopper
 10874  1539                     l4140:	
 10875                           
 10876                           ;vcontrol.c: 240:     chopper_active = 1;
 10877  1539  0020               	movlb	0	; select bank0
 10878  153A  01B1               	clrf	_chopper_active
 10879  153B  0AB1               	incf	_chopper_active,f
 10880  153C  0008               	return
 10881  153D                     __end_of_start_chopper:	
 10882                           
 10883                           	psect	text34
 10884  13EA                     __ptext34:	
 10885 ;; *************** function _start_relay_watchdog *****************
 10886 ;; Defined at:
 10887 ;;		line 37 in file "SolidStateRelay.c"
 10888 ;; Parameters:    Size  Location     Type
 10889 ;;		None
 10890 ;; Auto vars:     Size  Location     Type
 10891 ;;		None
 10892 ;; Return value:  Size  Location     Type
 10893 ;;                  1    wreg      void 
 10894 ;; Registers used:
 10895 ;;		wreg, status,2, status,0
 10896 ;; Tracked objects:
 10897 ;;		On entry : 1F/0
 10898 ;;		On exit  : 1E/0
 10899 ;;		Unchanged: 0/0
 10900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10905 ;;Total ram usage:        0 bytes
 10906 ;; Hardware stack levels used:    1
 10907 ;; Hardware stack levels required when called:    5
 10908 ;; This function calls:
 10909 ;;		Nothing
 10910 ;; This function is called by:
 10911 ;;		_start_chopper
 10912 ;; This function uses a non-reentrant model
 10913 ;;
 10914                           
 10915                           
 10916                           ;psect for function _start_relay_watchdog
 10917  13EA                     _start_relay_watchdog:	
 10918                           
 10919                           ;SolidStateRelay.c: 39:     if( st == SHUTDOWN )
 10920                           
 10921                           ;incstack = 0
 10922                           ; Regs used in _start_relay_watchdog: [wreg+status,2+status,0]
 10923  13EA  0829               	movf	SolidStateRelay@st,w
 10924  13EB  1D03               	btfss	3,2
 10925  13EC  0008               	return
 10926                           
 10927                           ;SolidStateRelay.c: 40:     {;SolidStateRelay.c: 41:         st = INIT;
 10928  13ED  01A9               	clrf	SolidStateRelay@st
 10929  13EE  0AA9               	incf	SolidStateRelay@st,f
 10930                           
 10931                           ;SolidStateRelay.c: 42:         st_act = RA_INIT;
 10932  13EF  0021               	movlb	1	; select bank1
 10933  13F0  01E5               	clrf	_st_act^(0+128)
 10934  13F1  0AE5               	incf	_st_act^(0+128),f
 10935  13F2  0008               	return
 10936  13F3                     __end_of_start_relay_watchdog:	
 10937                           
 10938                           	psect	text35
 10939  166C                     __ptext35:	
 10940 ;; *************** function _init_chopper *****************
 10941 ;; Defined at:
 10942 ;;		line 210 in file "vcontrol.c"
 10943 ;; Parameters:    Size  Location     Type
 10944 ;;		None
 10945 ;; Auto vars:     Size  Location     Type
 10946 ;;		None
 10947 ;; Return value:  Size  Location     Type
 10948 ;;                  1    wreg      void 
 10949 ;; Registers used:
 10950 ;;		wreg, status,2, status,0, pclath, cstack
 10951 ;; Tracked objects:
 10952 ;;		On entry : 1D/0
 10953 ;;		On exit  : 1D/0
 10954 ;;		Unchanged: 0/0
 10955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10959 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;Total ram usage:        1 bytes
 10961 ;; Hardware stack levels used:    1
 10962 ;; Hardware stack levels required when called:    6
 10963 ;; This function calls:
 10964 ;;		_ADC_SelectChannel
 10965 ;;		_ADC_SetInterruptHandler
 10966 ;;		_ADC_StartConversion
 10967 ;;		_TMR2_SetInterruptHandler
 10968 ;;		_TMR2_StartTimer
 10969 ;; This function is called by:
 10970 ;;		_main
 10971 ;;		_start_chopper
 10972 ;; This function uses a non-reentrant model
 10973 ;;
 10974                           
 10975                           
 10976                           ;psect for function _init_chopper
 10977  166C                     _init_chopper:	
 10978                           
 10979                           ;vcontrol.c: 212:     if( init_required == 0 )
 10980                           
 10981                           ;incstack = 0
 10982                           ; Regs used in _init_chopper: [wreg+status,2+status,0+pclath+cstack]
 10983  166C  0020               	movlb	0	; select bank0
 10984  166D  0860               	movf	_init_required,w
 10985  166E  1903               	btfsc	3,2
 10986  166F  0008               	return
 10987                           
 10988                           ;vcontrol.c: 214:     init_required = 0;
 10989  1670  01E0               	clrf	_init_required
 10990                           
 10991                           ;vcontrol.c: 215:     ADC_SelectChannel(V_BUSDC);
 10992  1671  3007               	movlw	7
 10993  1672  3194  2476  3196   	fcall	_ADC_SelectChannel
 10994                           
 10995                           ;vcontrol.c: 216:     _delay((unsigned long)((1)*(16000000/4000.0)));
 10996  1675  3006               	movlw	6
 10997  1676  0020               	movlb	0	; select bank0
 10998  1677  00CF               	movwf	??_init_chopper
 10999  1678  3030               	movlw	48
 11000  1679                     u3437:	
 11001  1679  0B89               	decfsz	9,f
 11002  167A  2E79               	goto	u3437
 11003  167B  0BCF               	decfsz	??_init_chopper,f
 11004  167C  2E79               	goto	u3437
 11005  167D  0000               	nop
 11006                           
 11007                           ;vcontrol.c: 217:     ADC_StartConversion();
 11008  167E  3193  234C  3196   	fcall	_ADC_StartConversion
 11009                           
 11010                           ;vcontrol.c: 218:     TMR2_StartTimer();
 11011  1681  3193  234F  3196   	fcall	_TMR2_StartTimer
 11012                           
 11013                           ;vcontrol.c: 220:     TMR2_SetInterruptHandler(TMR2_DutyControlHandler_ISR);
 11014  1684  3094               	movlw	low _TMR2_DutyControlHandler_ISR
 11015  1685  00CD               	movwf	TMR2_SetInterruptHandler@InterruptHandler
 11016  1686  3008               	movlw	high _TMR2_DutyControlHandler_ISR
 11017  1687  00CE               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
 11018  1688  3193  23A9  3196   	fcall	_TMR2_SetInterruptHandler
 11019                           
 11020                           ;vcontrol.c: 221:     ADC_SetInterruptHandler(ADC_VoltageControlHandler_ISR);
 11021  168B  3049               	movlw	low _ADC_VoltageControlHandler_ISR
 11022  168C  0020               	movlb	0	; select bank0
 11023  168D  00CD               	movwf	ADC_SetInterruptHandler@InterruptHandler
 11024  168E  300A               	movlw	high _ADC_VoltageControlHandler_ISR
 11025  168F  00CE               	movwf	ADC_SetInterruptHandler@InterruptHandler+1
 11026  1690  3193  23A1         	fcall	_ADC_SetInterruptHandler
 11027  1692  0008               	return
 11028  1693                     __end_of_init_chopper:	
 11029                           
 11030                           	psect	text36
 11031  134F                     __ptext36:	
 11032 ;; *************** function _TMR2_StartTimer *****************
 11033 ;; Defined at:
 11034 ;;		line 87 in file "mcc_generated_files/tmr2.c"
 11035 ;; Parameters:    Size  Location     Type
 11036 ;;		None
 11037 ;; Auto vars:     Size  Location     Type
 11038 ;;		None
 11039 ;; Return value:  Size  Location     Type
 11040 ;;                  1    wreg      void 
 11041 ;; Registers used:
 11042 ;;		None
 11043 ;; Tracked objects:
 11044 ;;		On entry : 1F/1
 11045 ;;		On exit  : 1F/0
 11046 ;;		Unchanged: 0/0
 11047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;Total ram usage:        0 bytes
 11053 ;; Hardware stack levels used:    1
 11054 ;; Hardware stack levels required when called:    5
 11055 ;; This function calls:
 11056 ;;		Nothing
 11057 ;; This function is called by:
 11058 ;;		_init_chopper
 11059 ;; This function uses a non-reentrant model
 11060 ;;
 11061                           
 11062                           
 11063                           ;psect for function _TMR2_StartTimer
 11064  134F                     _TMR2_StartTimer:	
 11065                           
 11066                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
 11067                           
 11068                           ;incstack = 0
 11069                           ; Regs used in _TMR2_StartTimer: []
 11070  134F  0020               	movlb	0	; select bank0
 11071  1350  151C               	bsf	28,2	;volatile
 11072  1351  0008               	return
 11073  1352                     __end_of_TMR2_StartTimer:	
 11074                           
 11075                           	psect	text37
 11076  13A9                     __ptext37:	
 11077 ;; *************** function _TMR2_SetInterruptHandler *****************
 11078 ;; Defined at:
 11079 ;;		line 140 in file "mcc_generated_files/tmr2.c"
 11080 ;; Parameters:    Size  Location     Type
 11081 ;;  InterruptHan    2    9[BANK0 ] PTR FTN()void 
 11082 ;;		 -> TMR2_DutyControlHandler_ISR(1), TMR2_DefaultInterruptHandler(1), 
 11083 ;; Auto vars:     Size  Location     Type
 11084 ;;		None
 11085 ;; Return value:  Size  Location     Type
 11086 ;;                  1    wreg      void 
 11087 ;; Registers used:
 11088 ;;		wreg
 11089 ;; Tracked objects:
 11090 ;;		On entry : 1F/0
 11091 ;;		On exit  : 1F/2
 11092 ;;		Unchanged: 0/0
 11093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11094 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11097 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11098 ;;Total ram usage:        2 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; Hardware stack levels required when called:    5
 11101 ;; This function calls:
 11102 ;;		Nothing
 11103 ;; This function is called by:
 11104 ;;		_TMR2_Initialize
 11105 ;;		_init_chopper
 11106 ;; This function uses a non-reentrant model
 11107 ;;
 11108                           
 11109                           
 11110                           ;psect for function _TMR2_SetInterruptHandler
 11111  13A9                     _TMR2_SetInterruptHandler:	
 11112                           
 11113                           ;mcc_generated_files/tmr2.c: 141:     TMR2_InterruptHandler = InterruptHandler;
 11114                           
 11115                           ;incstack = 0
 11116                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
 11117  13A9  084E               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
 11118  13AA  0022               	movlb	2	; select bank2
 11119  13AB  00E5               	movwf	(_TMR2_InterruptHandler+1)^(0+256)
 11120  13AC  0020               	movlb	0	; select bank0
 11121  13AD  084D               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
 11122  13AE  0022               	movlb	2	; select bank2
 11123  13AF  00E4               	movwf	_TMR2_InterruptHandler^(0+256)
 11124  13B0  0008               	return
 11125  13B1                     __end_of_TMR2_SetInterruptHandler:	
 11126                           
 11127                           	psect	text38
 11128  134C                     __ptext38:	
 11129 ;; *************** function _ADC_StartConversion *****************
 11130 ;; Defined at:
 11131 ;;		line 101 in file "mcc_generated_files/adc.c"
 11132 ;; Parameters:    Size  Location     Type
 11133 ;;		None
 11134 ;; Auto vars:     Size  Location     Type
 11135 ;;		None
 11136 ;; Return value:  Size  Location     Type
 11137 ;;                  1    wreg      void 
 11138 ;; Registers used:
 11139 ;;		None
 11140 ;; Tracked objects:
 11141 ;;		On entry : 0/1
 11142 ;;		On exit  : 1F/1
 11143 ;;		Unchanged: 0/0
 11144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11149 ;;Total ram usage:        0 bytes
 11150 ;; Hardware stack levels used:    1
 11151 ;; Hardware stack levels required when called:    5
 11152 ;; This function calls:
 11153 ;;		Nothing
 11154 ;; This function is called by:
 11155 ;;		_init_chopper
 11156 ;; This function uses a non-reentrant model
 11157 ;;
 11158                           
 11159                           
 11160                           ;psect for function _ADC_StartConversion
 11161  134C                     _ADC_StartConversion:	
 11162                           
 11163                           ;mcc_generated_files/adc.c: 104:     ADCON0bits.GO_nDONE = 1;
 11164                           
 11165                           ;incstack = 0
 11166                           ; Regs used in _ADC_StartConversion: []
 11167  134C  0021               	movlb	1	; select bank1
 11168  134D  149D               	bsf	29,1	;volatile
 11169  134E  0008               	return
 11170  134F                     __end_of_ADC_StartConversion:	
 11171                           
 11172                           	psect	text39
 11173  13A1                     __ptext39:	
 11174 ;; *************** function _ADC_SetInterruptHandler *****************
 11175 ;; Defined at:
 11176 ;;		line 160 in file "mcc_generated_files/adc.c"
 11177 ;; Parameters:    Size  Location     Type
 11178 ;;  InterruptHan    2    9[BANK0 ] PTR FTN()void 
 11179 ;;		 -> ADC_VoltageControlHandler_ISR(1), ADC_DefaultInterruptHandler(1), 
 11180 ;; Auto vars:     Size  Location     Type
 11181 ;;		None
 11182 ;; Return value:  Size  Location     Type
 11183 ;;                  1    wreg      void 
 11184 ;; Registers used:
 11185 ;;		wreg
 11186 ;; Tracked objects:
 11187 ;;		On entry : 1F/0
 11188 ;;		On exit  : 1F/2
 11189 ;;		Unchanged: 0/0
 11190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11191 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11194 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11195 ;;Total ram usage:        2 bytes
 11196 ;; Hardware stack levels used:    1
 11197 ;; Hardware stack levels required when called:    5
 11198 ;; This function calls:
 11199 ;;		Nothing
 11200 ;; This function is called by:
 11201 ;;		_ADC_Initialize
 11202 ;;		_init_chopper
 11203 ;; This function uses a non-reentrant model
 11204 ;;
 11205                           
 11206                           
 11207                           ;psect for function _ADC_SetInterruptHandler
 11208  13A1                     _ADC_SetInterruptHandler:	
 11209                           
 11210                           ;mcc_generated_files/adc.c: 161:     ADC_InterruptHandler = InterruptHandler;
 11211                           
 11212                           ;incstack = 0
 11213                           ; Regs used in _ADC_SetInterruptHandler: [wreg]
 11214  13A1  084E               	movf	ADC_SetInterruptHandler@InterruptHandler+1,w
 11215  13A2  0022               	movlb	2	; select bank2
 11216  13A3  00E3               	movwf	(_ADC_InterruptHandler+1)^(0+256)
 11217  13A4  0020               	movlb	0	; select bank0
 11218  13A5  084D               	movf	ADC_SetInterruptHandler@InterruptHandler,w
 11219  13A6  0022               	movlb	2	; select bank2
 11220  13A7  00E2               	movwf	_ADC_InterruptHandler^(0+256)
 11221  13A8  0008               	return
 11222  13A9                     __end_of_ADC_SetInterruptHandler:	
 11223                           
 11224                           	psect	text40
 11225  1476                     __ptext40:	
 11226 ;; *************** function _ADC_SelectChannel *****************
 11227 ;; Defined at:
 11228 ;;		line 93 in file "mcc_generated_files/adc.c"
 11229 ;; Parameters:    Size  Location     Type
 11230 ;;  channel         1    wreg     enum E4137
 11231 ;; Auto vars:     Size  Location     Type
 11232 ;;  channel         1   10[BANK0 ] enum E4137
 11233 ;; Return value:  Size  Location     Type
 11234 ;;                  1    wreg      void 
 11235 ;; Registers used:
 11236 ;;		wreg, status,2, status,0
 11237 ;; Tracked objects:
 11238 ;;		On entry : 1F/0
 11239 ;;		On exit  : 1F/1
 11240 ;;		Unchanged: 0/0
 11241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11245 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11246 ;;Total ram usage:        2 bytes
 11247 ;; Hardware stack levels used:    1
 11248 ;; Hardware stack levels required when called:    5
 11249 ;; This function calls:
 11250 ;;		Nothing
 11251 ;; This function is called by:
 11252 ;;		_init_chopper
 11253 ;; This function uses a non-reentrant model
 11254 ;;
 11255                           
 11256                           
 11257                           ;psect for function _ADC_SelectChannel
 11258  1476                     _ADC_SelectChannel:	
 11259                           
 11260                           ;incstack = 0
 11261                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
 11262                           ;ADC_SelectChannel@channel stored from wreg
 11263  1476  00CE               	movwf	ADC_SelectChannel@channel
 11264                           
 11265                           ;mcc_generated_files/adc.c: 93: void ADC_SelectChannel(adc_channel_t channel);mcc_genera
      +                          ted_files/adc.c: 94: {;mcc_generated_files/adc.c: 96:     ADCON0bits.CHS = channel;
 11266  1477  084E               	movf	ADC_SelectChannel@channel,w
 11267  1478  00CD               	movwf	??_ADC_SelectChannel
 11268  1479  0DCD               	rlf	??_ADC_SelectChannel,f
 11269  147A  0DCD               	rlf	??_ADC_SelectChannel,f
 11270  147B  0021               	movlb	1	; select bank1
 11271  147C  081D               	movf	29,w	;volatile
 11272  147D  0020               	movlb	0	; select bank0
 11273  147E  064D               	xorwf	??_ADC_SelectChannel,w
 11274  147F  3983               	andlw	-125
 11275  1480  064D               	xorwf	??_ADC_SelectChannel,w
 11276  1481  0021               	movlb	1	; select bank1
 11277  1482  009D               	movwf	29	;volatile
 11278                           
 11279                           ;mcc_generated_files/adc.c: 98:     ADCON0bits.ADON = 1;
 11280  1483  141D               	bsf	29,0	;volatile
 11281  1484  0008               	return
 11282  1485                     __end_of_ADC_SelectChannel:	
 11283                           
 11284                           	psect	text41
 11285  1646                     __ptext41:	
 11286 ;; *************** function _set_vdc_speed *****************
 11287 ;; Defined at:
 11288 ;;		line 277 in file "vcontrol.c"
 11289 ;; Parameters:    Size  Location     Type
 11290 ;;  msDelay         2   17[BANK0 ] unsigned short 
 11291 ;; Auto vars:     Size  Location     Type
 11292 ;;		None
 11293 ;; Return value:  Size  Location     Type
 11294 ;;                  1    wreg      void 
 11295 ;; Registers used:
 11296 ;;		wreg, status,2, status,0, pclath, cstack
 11297 ;; Tracked objects:
 11298 ;;		On entry : 1F/0
 11299 ;;		On exit  : 1E/0
 11300 ;;		Unchanged: 0/0
 11301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11302 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11306 ;;Total ram usage:        2 bytes
 11307 ;; Hardware stack levels used:    1
 11308 ;; Hardware stack levels required when called:    6
 11309 ;; This function calls:
 11310 ;;		___lwdiv
 11311 ;; This function is called by:
 11312 ;;		_uart_task
 11313 ;;		_ApplicationInit
 11314 ;; This function uses a non-reentrant model
 11315 ;;
 11316                           
 11317                           
 11318                           ;psect for function _set_vdc_speed
 11319  1646                     _set_vdc_speed:	
 11320                           
 11321                           ;vcontrol.c: 277: void set_vdc_speed(uint16_t msDelay);vcontrol.c: 278: {;vcontrol.c: 27
      +                          9:     if( msDelay == 0xFFFF )
 11322                           
 11323                           ;incstack = 0
 11324                           ; Regs used in _set_vdc_speed: [wreg+status,2+status,0+pclath+cstack]
 11325  1646  0A55               	incf	set_vdc_speed@msDelay,w
 11326  1647  1903               	btfsc	3,2
 11327  1648  0A56               	incf	set_vdc_speed@msDelay+1,w
 11328  1649  1903               	btfsc	3,2
 11329  164A  0008               	return
 11330                           
 11331                           ;vcontrol.c: 281:     if( msDelay > 25500 )
 11332  164B  3063               	movlw	99
 11333  164C  0256               	subwf	set_vdc_speed@msDelay+1,w
 11334  164D  309D               	movlw	157
 11335  164E  1903               	skipnz
 11336  164F  0255               	subwf	set_vdc_speed@msDelay,w
 11337  1650  1C03               	skipc
 11338  1651  2E57               	goto	l4174
 11339                           
 11340                           ;vcontrol.c: 282:         duty_count_up_max = 255;
 11341  1652  30FF               	movlw	255
 11342  1653  0021               	movlb	1	; select bank1
 11343  1654  00EC               	movwf	_duty_count_up_max^(0+128)
 11344  1655  3000               	movlw	0
 11345  1656  00ED               	movwf	(_duty_count_up_max^(0+128)+1)
 11346  1657                     l4174:	
 11347                           
 11348                           ;vcontrol.c: 283:     duty_count_up_max = msDelay/100 - 1;
 11349  1657  3064               	movlw	100
 11350  1658  0020               	movlb	0	; select bank0
 11351  1659  00CD               	movwf	___lwdiv@divisor
 11352  165A  3000               	movlw	0
 11353  165B  00CE               	movwf	___lwdiv@divisor+1
 11354  165C  0856               	movf	set_vdc_speed@msDelay+1,w
 11355  165D  00D0               	movwf	___lwdiv@dividend+1
 11356  165E  0855               	movf	set_vdc_speed@msDelay,w
 11357  165F  00CF               	movwf	___lwdiv@dividend
 11358  1660  3197  2751         	fcall	___lwdiv
 11359  1662  084D               	movf	?___lwdiv,w
 11360  1663  3EFF               	addlw	255
 11361  1664  0021               	movlb	1	; select bank1
 11362  1665  00EC               	movwf	_duty_count_up_max^(0+128)
 11363  1666  30FF               	movlw	255
 11364  1667  0020               	movlb	0	; select bank0
 11365  1668  3D4E               	addwfc	?___lwdiv+1,w
 11366  1669  0021               	movlb	1	; select bank1
 11367  166A  00ED               	movwf	(_duty_count_up_max+1)^(0+128)
 11368  166B  0008               	return
 11369  166C                     __end_of_set_vdc_speed:	
 11370                           
 11371                           	psect	text42
 11372  1429                     __ptext42:	
 11373 ;; *************** function _set_vdc_min *****************
 11374 ;; Defined at:
 11375 ;;		line 262 in file "vcontrol.c"
 11376 ;; Parameters:    Size  Location     Type
 11377 ;;  vmin            2   12[BANK0 ] unsigned short 
 11378 ;; Auto vars:     Size  Location     Type
 11379 ;;		None
 11380 ;; Return value:  Size  Location     Type
 11381 ;;                  1    wreg      void 
 11382 ;; Registers used:
 11383 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11384 ;; Tracked objects:
 11385 ;;		On entry : 1F/0
 11386 ;;		On exit  : 1F/0
 11387 ;;		Unchanged: 0/0
 11388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11389 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11391 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11392 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11393 ;;Total ram usage:        3 bytes
 11394 ;; Hardware stack levels used:    1
 11395 ;; Hardware stack levels required when called:    6
 11396 ;; This function calls:
 11397 ;;		_set_vdc_threshold
 11398 ;; This function is called by:
 11399 ;;		_uart_task
 11400 ;;		_ApplicationInit
 11401 ;; This function uses a non-reentrant model
 11402 ;;
 11403                           
 11404                           
 11405                           ;psect for function _set_vdc_min
 11406  1429                     _set_vdc_min:	
 11407                           
 11408                           ;vcontrol.c: 262: void set_vdc_min(uint16_t vmin);vcontrol.c: 263: {;vcontrol.c: 264:   
      +                            set_vdc_threshold(vmin,&vdc_min);
 11409                           
 11410                           ;incstack = 0
 11411                           ; Regs used in _set_vdc_min: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11412  1429  0851               	movf	set_vdc_min@vmin+1,w
 11413  142A  00CE               	movwf	set_vdc_threshold@v_val+1
 11414  142B  0850               	movf	set_vdc_min@vmin,w
 11415  142C  00CD               	movwf	set_vdc_threshold@v_val
 11416  142D  3042               	movlw	(low (_vdc_min| 0))& (0+255)
 11417  142E  00D2               	movwf	??_set_vdc_min
 11418  142F  0852               	movf	??_set_vdc_min,w
 11419  1430  00CF               	movwf	set_vdc_threshold@v_target
 11420  1431  3195  258D         	fcall	_set_vdc_threshold
 11421  1433  0008               	return
 11422  1434                     __end_of_set_vdc_min:	
 11423                           
 11424                           	psect	text43
 11425  141E                     __ptext43:	
 11426 ;; *************** function _set_vdc_max *****************
 11427 ;; Defined at:
 11428 ;;		line 267 in file "vcontrol.c"
 11429 ;; Parameters:    Size  Location     Type
 11430 ;;  vmax            2   12[BANK0 ] unsigned short 
 11431 ;; Auto vars:     Size  Location     Type
 11432 ;;		None
 11433 ;; Return value:  Size  Location     Type
 11434 ;;                  1    wreg      void 
 11435 ;; Registers used:
 11436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11437 ;; Tracked objects:
 11438 ;;		On entry : 1F/0
 11439 ;;		On exit  : 1F/0
 11440 ;;		Unchanged: 0/0
 11441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11442 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11445 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11446 ;;Total ram usage:        3 bytes
 11447 ;; Hardware stack levels used:    1
 11448 ;; Hardware stack levels required when called:    6
 11449 ;; This function calls:
 11450 ;;		_set_vdc_threshold
 11451 ;; This function is called by:
 11452 ;;		_uart_task
 11453 ;;		_ApplicationInit
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           
 11458                           ;psect for function _set_vdc_max
 11459  141E                     _set_vdc_max:	
 11460                           
 11461                           ;vcontrol.c: 267: void set_vdc_max(uint16_t vmax);vcontrol.c: 268: {;vcontrol.c: 269:   
      +                            set_vdc_threshold(vmax,&vdc_max);
 11462                           
 11463                           ;incstack = 0
 11464                           ; Regs used in _set_vdc_max: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11465  141E  0851               	movf	set_vdc_max@vmax+1,w
 11466  141F  00CE               	movwf	set_vdc_threshold@v_val+1
 11467  1420  0850               	movf	set_vdc_max@vmax,w
 11468  1421  00CD               	movwf	set_vdc_threshold@v_val
 11469  1422  3040               	movlw	(low (_vdc_max| 0))& (0+255)
 11470  1423  00D2               	movwf	??_set_vdc_max
 11471  1424  0852               	movf	??_set_vdc_max,w
 11472  1425  00CF               	movwf	set_vdc_threshold@v_target
 11473  1426  3195  258D         	fcall	_set_vdc_threshold
 11474  1428  0008               	return
 11475  1429                     __end_of_set_vdc_max:	
 11476                           
 11477                           	psect	text44
 11478  1413                     __ptext44:	
 11479 ;; *************** function _set_vdc_critic *****************
 11480 ;; Defined at:
 11481 ;;		line 272 in file "vcontrol.c"
 11482 ;; Parameters:    Size  Location     Type
 11483 ;;  vc              2   12[BANK0 ] unsigned short 
 11484 ;; Auto vars:     Size  Location     Type
 11485 ;;		None
 11486 ;; Return value:  Size  Location     Type
 11487 ;;                  1    wreg      void 
 11488 ;; Registers used:
 11489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11490 ;; Tracked objects:
 11491 ;;		On entry : 1F/0
 11492 ;;		On exit  : 1F/0
 11493 ;;		Unchanged: 0/0
 11494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11495 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;Total ram usage:        3 bytes
 11500 ;; Hardware stack levels used:    1
 11501 ;; Hardware stack levels required when called:    6
 11502 ;; This function calls:
 11503 ;;		_set_vdc_threshold
 11504 ;; This function is called by:
 11505 ;;		_uart_task
 11506 ;;		_ApplicationInit
 11507 ;; This function uses a non-reentrant model
 11508 ;;
 11509                           
 11510                           
 11511                           ;psect for function _set_vdc_critic
 11512  1413                     _set_vdc_critic:	
 11513                           
 11514                           ;vcontrol.c: 272: void set_vdc_critic(uint16_t vc);vcontrol.c: 273: {;vcontrol.c: 274:  
      +                             set_vdc_threshold(vc,&vdc_critic);
 11515                           
 11516                           ;incstack = 0
 11517                           ; Regs used in _set_vdc_critic: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11518  1413  0851               	movf	set_vdc_critic@vc+1,w
 11519  1414  00CE               	movwf	set_vdc_threshold@v_val+1
 11520  1415  0850               	movf	set_vdc_critic@vc,w
 11521  1416  00CD               	movwf	set_vdc_threshold@v_val
 11522  1417  303E               	movlw	(low (_vdc_critic| 0))& (0+255)
 11523  1418  00D2               	movwf	??_set_vdc_critic
 11524  1419  0852               	movf	??_set_vdc_critic,w
 11525  141A  00CF               	movwf	set_vdc_threshold@v_target
 11526  141B  3195  258D         	fcall	_set_vdc_threshold
 11527  141D  0008               	return
 11528  141E                     __end_of_set_vdc_critic:	
 11529                           
 11530                           	psect	text45
 11531  158D                     __ptext45:	
 11532 ;; *************** function _set_vdc_threshold *****************
 11533 ;; Defined at:
 11534 ;;		line 195 in file "vcontrol.c"
 11535 ;; Parameters:    Size  Location     Type
 11536 ;;  v_val           2    9[BANK0 ] unsigned short 
 11537 ;;  v_target        1   11[BANK0 ] PTR unsigned short 
 11538 ;;		 -> vdc_critic(2), vdc_max(2), vdc_min(2), 
 11539 ;; Auto vars:     Size  Location     Type
 11540 ;;		None
 11541 ;; Return value:  Size  Location     Type
 11542 ;;                  1    wreg      void 
 11543 ;; Registers used:
 11544 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11545 ;; Tracked objects:
 11546 ;;		On entry : 1F/0
 11547 ;;		On exit  : 1F/0
 11548 ;;		Unchanged: 0/0
 11549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11550 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11554 ;;Total ram usage:        3 bytes
 11555 ;; Hardware stack levels used:    1
 11556 ;; Hardware stack levels required when called:    5
 11557 ;; This function calls:
 11558 ;;		Nothing
 11559 ;; This function is called by:
 11560 ;;		_set_vdc_min
 11561 ;;		_set_vdc_max
 11562 ;;		_set_vdc_critic
 11563 ;; This function uses a non-reentrant model
 11564 ;;
 11565                           
 11566                           
 11567                           ;psect for function _set_vdc_threshold
 11568  158D                     _set_vdc_threshold:	
 11569                           
 11570                           ;vcontrol.c: 195: static void set_vdc_threshold(uint16_t v_val,uint16_t *v_target);vcont
      +                          rol.c: 196: {;vcontrol.c: 197:     if( v_val == 0xFFFF )
 11571                           
 11572                           ;incstack = 0
 11573                           ; Regs used in _set_vdc_threshold: [wreg+fsr1l+fsr1h+status,2+status,0]
 11574  158D  0A4D               	incf	set_vdc_threshold@v_val,w
 11575  158E  1903               	btfsc	3,2
 11576  158F  0A4E               	incf	set_vdc_threshold@v_val+1,w
 11577  1590  1903               	btfsc	3,2
 11578  1591  0008               	return
 11579                           
 11580                           ;vcontrol.c: 199:     if( v_val >= 800 )
 11581  1592  3003               	movlw	3
 11582  1593  024E               	subwf	set_vdc_threshold@v_val+1,w
 11583  1594  3020               	movlw	32
 11584  1595  1903               	skipnz
 11585  1596  024D               	subwf	set_vdc_threshold@v_val,w
 11586  1597  1C03               	skipc
 11587  1598  2DA1               	goto	l4014
 11588                           
 11589                           ;vcontrol.c: 200:         *v_target = 800;
 11590  1599  084F               	movf	set_vdc_threshold@v_target,w
 11591  159A  0086               	movwf	6
 11592  159B  0187               	clrf	7
 11593  159C  3020               	movlw	32
 11594  159D  3FC0               	movwi [0]fsr1
 11595  159E  3003               	movlw	3
 11596  159F  3FC1               	movwi [1]fsr1
 11597  15A0  0008               	return
 11598  15A1                     l4014:	
 11599                           
 11600                           ;vcontrol.c: 202:         *v_target = v_val;
 11601  15A1  084F               	movf	set_vdc_threshold@v_target,w
 11602  15A2  0086               	movwf	6
 11603  15A3  0187               	clrf	7
 11604  15A4  084D               	movf	set_vdc_threshold@v_val,w
 11605  15A5  3FC0               	movwi [0]fsr1
 11606  15A6  084E               	movf	set_vdc_threshold@v_val+1,w
 11607  15A7  3FC1               	movwi [1]fsr1
 11608  15A8  0008               	return
 11609  15A9                     __end_of_set_vdc_threshold:	
 11610                           
 11611                           	psect	text46
 11612  16EE                     __ptext46:	
 11613 ;; *************** function _set_reset_duration *****************
 11614 ;; Defined at:
 11615 ;;		line 68 in file "SolidStateRelay.c"
 11616 ;; Parameters:    Size  Location     Type
 11617 ;;  reset_dur_ms    2   17[BANK0 ] unsigned short 
 11618 ;; Auto vars:     Size  Location     Type
 11619 ;;		None
 11620 ;; Return value:  Size  Location     Type
 11621 ;;                  1    wreg      void 
 11622 ;; Registers used:
 11623 ;;		wreg, status,2, status,0, pclath, cstack
 11624 ;; Tracked objects:
 11625 ;;		On entry : 1F/0
 11626 ;;		On exit  : 1D/0
 11627 ;;		Unchanged: 0/0
 11628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11629 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;Total ram usage:        2 bytes
 11634 ;; Hardware stack levels used:    1
 11635 ;; Hardware stack levels required when called:    6
 11636 ;; This function calls:
 11637 ;;		___lwdiv
 11638 ;; This function is called by:
 11639 ;;		_uart_task
 11640 ;;		_ApplicationInit
 11641 ;; This function uses a non-reentrant model
 11642 ;;
 11643                           
 11644                           
 11645                           ;psect for function _set_reset_duration
 11646  16EE                     _set_reset_duration:	
 11647                           
 11648                           ;SolidStateRelay.c: 68: void set_reset_duration(uint16_t reset_dur_ms);SolidStateRelay.c
      +                          : 69: {;SolidStateRelay.c: 70:     if( reset_dur_ms == 0xFFFF )
 11649                           
 11650                           ;incstack = 0
 11651                           ; Regs used in _set_reset_duration: [wreg+status,2+status,0+pclath+cstack]
 11652  16EE  0A55               	incf	set_reset_duration@reset_dur_ms,w
 11653  16EF  1903               	btfsc	3,2
 11654  16F0  0A56               	incf	set_reset_duration@reset_dur_ms+1,w
 11655  16F1  1903               	btfsc	3,2
 11656  16F2  0008               	return
 11657                           
 11658                           ;SolidStateRelay.c: 72:     if( reset_dur_ms > 25500 )
 11659  16F3  3063               	movlw	99
 11660  16F4  0256               	subwf	set_reset_duration@reset_dur_ms+1,w
 11661  16F5  309D               	movlw	157
 11662  16F6  1903               	skipnz
 11663  16F7  0255               	subwf	set_reset_duration@reset_dur_ms,w
 11664  16F8  1C03               	skipc
 11665  16F9  2F00               	goto	l4232
 11666                           
 11667                           ;SolidStateRelay.c: 73:         reset_duration = 25500;
 11668  16FA  309C               	movlw	156
 11669  16FB  0022               	movlb	2	; select bank2
 11670  16FC  00D0               	movwf	_reset_duration^(0+256)
 11671  16FD  3063               	movlw	99
 11672  16FE  00D1               	movwf	(_reset_duration^(0+256)+1)
 11673  16FF  2F07               	goto	l4234
 11674  1700                     l4232:	
 11675                           
 11676                           ;SolidStateRelay.c: 75:         reset_duration = reset_dur_ms;
 11677  1700  0856               	movf	set_reset_duration@reset_dur_ms+1,w
 11678  1701  0022               	movlb	2	; select bank2
 11679  1702  00D1               	movwf	(_reset_duration+1)^(0+256)
 11680  1703  0020               	movlb	0	; select bank0
 11681  1704  0855               	movf	set_reset_duration@reset_dur_ms,w
 11682  1705  0022               	movlb	2	; select bank2
 11683  1706  00D0               	movwf	_reset_duration^(0+256)
 11684  1707                     l4234:	
 11685                           
 11686                           ;SolidStateRelay.c: 79:     reset_duration_ms = reset_duration/100;
 11687  1707  3064               	movlw	100
 11688  1708  0020               	movlb	0	; select bank0
 11689  1709  00CD               	movwf	___lwdiv@divisor
 11690  170A  3000               	movlw	0
 11691  170B  00CE               	movwf	___lwdiv@divisor+1
 11692  170C  0022               	movlb	2	; select bank2
 11693  170D  0851               	movf	(_reset_duration+1)^(0+256),w
 11694  170E  0020               	movlb	0	; select bank0
 11695  170F  00D0               	movwf	___lwdiv@dividend+1
 11696  1710  0022               	movlb	2	; select bank2
 11697  1711  0850               	movf	_reset_duration^(0+256),w
 11698  1712  0020               	movlb	0	; select bank0
 11699  1713  00CF               	movwf	___lwdiv@dividend
 11700  1714  3197  2751         	fcall	___lwdiv
 11701  1716  084E               	movf	?___lwdiv+1,w
 11702  1717  0022               	movlb	2	; select bank2
 11703  1718  00CD               	movwf	(_reset_duration_ms+1)^(0+256)
 11704  1719  0020               	movlb	0	; select bank0
 11705  171A  084D               	movf	?___lwdiv,w
 11706  171B  0022               	movlb	2	; select bank2
 11707  171C  00CC               	movwf	_reset_duration_ms^(0+256)
 11708  171D  0008               	return
 11709  171E                     __end_of_set_reset_duration:	
 11710                           
 11711                           	psect	text47
 11712  1751                     __ptext47:	
 11713 ;; *************** function ___lwdiv *****************
 11714 ;; Defined at:
 11715 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwdiv.c"
 11716 ;; Parameters:    Size  Location     Type
 11717 ;;  divisor         2    9[BANK0 ] unsigned int 
 11718 ;;  dividend        2   11[BANK0 ] unsigned int 
 11719 ;; Auto vars:     Size  Location     Type
 11720 ;;  quotient        2   15[BANK0 ] unsigned int 
 11721 ;;  counter         1   14[BANK0 ] unsigned char 
 11722 ;; Return value:  Size  Location     Type
 11723 ;;                  2    9[BANK0 ] unsigned int 
 11724 ;; Registers used:
 11725 ;;		wreg, status,2, status,0
 11726 ;; Tracked objects:
 11727 ;;		On entry : 1F/0
 11728 ;;		On exit  : 1F/0
 11729 ;;		Unchanged: 0/0
 11730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11731 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11732 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11733 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11734 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11735 ;;Total ram usage:        8 bytes
 11736 ;; Hardware stack levels used:    1
 11737 ;; Hardware stack levels required when called:    5
 11738 ;; This function calls:
 11739 ;;		Nothing
 11740 ;; This function is called by:
 11741 ;;		_set_vdc_speed
 11742 ;;		_set_reset_duration
 11743 ;; This function uses a non-reentrant model
 11744 ;;
 11745                           
 11746                           
 11747                           ;psect for function ___lwdiv
 11748  1751                     ___lwdiv:	
 11749                           
 11750                           ;incstack = 0
 11751                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11752  1751  01D3               	clrf	___lwdiv@quotient
 11753  1752  01D4               	clrf	___lwdiv@quotient+1
 11754  1753  084D               	movf	___lwdiv@divisor,w
 11755  1754  044E               	iorwf	___lwdiv@divisor+1,w
 11756  1755  1903               	btfsc	3,2
 11757  1756  2F80               	goto	l4072
 11758  1757  01D2               	clrf	___lwdiv@counter
 11759  1758  0AD2               	incf	___lwdiv@counter,f
 11760  1759                     l4060:	
 11761  1759  1BCE               	btfsc	___lwdiv@divisor+1,7
 11762  175A  2F65               	goto	l4062
 11763  175B  3001               	movlw	1
 11764  175C                     u2745:	
 11765  175C  35CD               	lslf	___lwdiv@divisor,f
 11766  175D  0DCE               	rlf	___lwdiv@divisor+1,f
 11767  175E  0B89               	decfsz	9,f
 11768  175F  2F5C               	goto	u2745
 11769  1760  3001               	movlw	1
 11770  1761  00D1               	movwf	??___lwdiv
 11771  1762  0851               	movf	??___lwdiv,w
 11772  1763  07D2               	addwf	___lwdiv@counter,f
 11773  1764  2F59               	goto	l4060
 11774  1765                     l4062:	
 11775  1765  3001               	movlw	1
 11776  1766                     u2765:	
 11777  1766  35D3               	lslf	___lwdiv@quotient,f
 11778  1767  0DD4               	rlf	___lwdiv@quotient+1,f
 11779  1768  0B89               	decfsz	9,f
 11780  1769  2F66               	goto	u2765
 11781  176A  084E               	movf	___lwdiv@divisor+1,w
 11782  176B  0250               	subwf	___lwdiv@dividend+1,w
 11783  176C  1D03               	skipz
 11784  176D  2F70               	goto	u2775
 11785  176E  084D               	movf	___lwdiv@divisor,w
 11786  176F  024F               	subwf	___lwdiv@dividend,w
 11787  1770                     u2775:	
 11788  1770  1C03               	skipc
 11789  1771  2F77               	goto	l4068
 11790  1772  084D               	movf	___lwdiv@divisor,w
 11791  1773  02CF               	subwf	___lwdiv@dividend,f
 11792  1774  084E               	movf	___lwdiv@divisor+1,w
 11793  1775  3BD0               	subwfb	___lwdiv@dividend+1,f
 11794  1776  1453               	bsf	___lwdiv@quotient,0
 11795  1777                     l4068:	
 11796  1777  3001               	movlw	1
 11797  1778                     u2785:	
 11798  1778  36CE               	lsrf	___lwdiv@divisor+1,f
 11799  1779  0CCD               	rrf	___lwdiv@divisor,f
 11800  177A  0B89               	decfsz	9,f
 11801  177B  2F78               	goto	u2785
 11802  177C  3001               	movlw	1
 11803  177D  02D2               	subwf	___lwdiv@counter,f
 11804  177E  1D03               	btfss	3,2
 11805  177F  2F65               	goto	l4062
 11806  1780                     l4072:	
 11807  1780  0854               	movf	___lwdiv@quotient+1,w
 11808  1781  00CE               	movwf	?___lwdiv+1
 11809  1782  0853               	movf	___lwdiv@quotient,w
 11810  1783  00CD               	movwf	?___lwdiv
 11811  1784  0008               	return
 11812  1785                     __end_of___lwdiv:	
 11813                           
 11814                           	psect	text48
 11815  14DF                     __ptext48:	
 11816 ;; *************** function _set_relay_reset_voltage *****************
 11817 ;; Defined at:
 11818 ;;		line 58 in file "SolidStateRelay.c"
 11819 ;; Parameters:    Size  Location     Type
 11820 ;;  relay_vthres    2    9[BANK0 ] unsigned short 
 11821 ;; Auto vars:     Size  Location     Type
 11822 ;;		None
 11823 ;; Return value:  Size  Location     Type
 11824 ;;                  1    wreg      void 
 11825 ;; Registers used:
 11826 ;;		wreg, status,2, status,0
 11827 ;; Tracked objects:
 11828 ;;		On entry : 1F/0
 11829 ;;		On exit  : 1F/0
 11830 ;;		Unchanged: 0/0
 11831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11832 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11835 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11836 ;;Total ram usage:        2 bytes
 11837 ;; Hardware stack levels used:    1
 11838 ;; Hardware stack levels required when called:    5
 11839 ;; This function calls:
 11840 ;;		Nothing
 11841 ;; This function is called by:
 11842 ;;		_uart_task
 11843 ;;		_ApplicationInit
 11844 ;; This function uses a non-reentrant model
 11845 ;;
 11846                           
 11847                           
 11848                           ;psect for function _set_relay_reset_voltage
 11849  14DF                     _set_relay_reset_voltage:	
 11850                           
 11851                           ;SolidStateRelay.c: 58: void set_relay_reset_voltage(uint16_t relay_vthres);SolidStateRe
      +                          lay.c: 59: {;SolidStateRelay.c: 60:     if( relay_vthres == 0xFFFF )
 11852                           
 11853                           ;incstack = 0
 11854                           ; Regs used in _set_relay_reset_voltage: [wreg+status,2+status,0]
 11855  14DF  0A4D               	incf	set_relay_reset_voltage@relay_vthres,w
 11856  14E0  1903               	btfsc	3,2
 11857  14E1  0A4E               	incf	set_relay_reset_voltage@relay_vthres+1,w
 11858  14E2  1903               	btfsc	3,2
 11859  14E3  0008               	return
 11860                           
 11861                           ;SolidStateRelay.c: 62:     if( relay_vthres > 800 )
 11862  14E4  3003               	movlw	3
 11863  14E5  024E               	subwf	set_relay_reset_voltage@relay_vthres+1,w
 11864  14E6  3021               	movlw	33
 11865  14E7  1903               	skipnz
 11866  14E8  024D               	subwf	set_relay_reset_voltage@relay_vthres,w
 11867  14E9  1C03               	skipc
 11868  14EA  2CF0               	goto	l4222
 11869                           
 11870                           ;SolidStateRelay.c: 63:         relay_reset_voltage = 800;
 11871  14EB  3020               	movlw	32
 11872  14EC  00A0               	movwf	_relay_reset_voltage
 11873  14ED  3003               	movlw	3
 11874  14EE  00A1               	movwf	_relay_reset_voltage+1
 11875  14EF  0008               	return
 11876  14F0                     l4222:	
 11877                           
 11878                           ;SolidStateRelay.c: 65:         relay_reset_voltage = relay_vthres;
 11879  14F0  084E               	movf	set_relay_reset_voltage@relay_vthres+1,w
 11880  14F1  00A1               	movwf	_relay_reset_voltage+1
 11881  14F2  084D               	movf	set_relay_reset_voltage@relay_vthres,w
 11882  14F3  00A0               	movwf	_relay_reset_voltage
 11883  14F4  0008               	return
 11884  14F5                     __end_of_set_relay_reset_voltage:	
 11885                           
 11886                           	psect	text49
 11887  1485                     __ptext49:	
 11888 ;; *************** function _set_relay_activation_counter *****************
 11889 ;; Defined at:
 11890 ;;		line 102 in file "SolidStateRelay.c"
 11891 ;; Parameters:    Size  Location     Type
 11892 ;;  act_count       4    9[BANK0 ] unsigned long 
 11893 ;; Auto vars:     Size  Location     Type
 11894 ;;		None
 11895 ;; Return value:  Size  Location     Type
 11896 ;;                  1    wreg      void 
 11897 ;; Registers used:
 11898 ;;		wreg
 11899 ;; Tracked objects:
 11900 ;;		On entry : 1F/0
 11901 ;;		On exit  : 1F/2
 11902 ;;		Unchanged: 0/0
 11903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11904 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11908 ;;Total ram usage:        4 bytes
 11909 ;; Hardware stack levels used:    1
 11910 ;; Hardware stack levels required when called:    5
 11911 ;; This function calls:
 11912 ;;		Nothing
 11913 ;; This function is called by:
 11914 ;;		_ApplicationInit
 11915 ;; This function uses a non-reentrant model
 11916 ;;
 11917                           
 11918                           
 11919                           ;psect for function _set_relay_activation_counter
 11920  1485                     _set_relay_activation_counter:	
 11921                           
 11922                           ;SolidStateRelay.c: 102: void set_relay_activation_counter(uint32_t act_count);SolidStat
      +                          eRelay.c: 103: {;SolidStateRelay.c: 104:     activation_counter = act_count;
 11923                           
 11924                           ;incstack = 0
 11925                           ; Regs used in _set_relay_activation_counter: [wreg]
 11926  1485  0850               	movf	set_relay_activation_counter@act_count+3,w
 11927  1486  0022               	movlb	2	; select bank2
 11928  1487  00CB               	movwf	(_activation_counter+3)^(0+256)
 11929  1488  0020               	movlb	0	; select bank0
 11930  1489  084F               	movf	set_relay_activation_counter@act_count+2,w
 11931  148A  0022               	movlb	2	; select bank2
 11932  148B  00CA               	movwf	(_activation_counter+2)^(0+256)
 11933  148C  0020               	movlb	0	; select bank0
 11934  148D  084E               	movf	set_relay_activation_counter@act_count+1,w
 11935  148E  0022               	movlb	2	; select bank2
 11936  148F  00C9               	movwf	(_activation_counter+1)^(0+256)
 11937  1490  0020               	movlb	0	; select bank0
 11938  1491  084D               	movf	set_relay_activation_counter@act_count,w
 11939  1492  0022               	movlb	2	; select bank2
 11940  1493  00C8               	movwf	_activation_counter^(0+256)
 11941  1494  0008               	return
 11942  1495                     __end_of_set_relay_activation_counter:	
 11943                           
 11944                           	psect	text50
 11945  097F                     __ptext50:	
 11946 ;; *************** function _save_to_flash *****************
 11947 ;; Defined at:
 11948 ;;		line 286 in file "vcontrol.c"
 11949 ;; Parameters:    Size  Location     Type
 11950 ;;		None
 11951 ;; Auto vars:     Size  Location     Type
 11952 ;;  buff           64    0[BANK1 ] unsigned short [32]
 11953 ;;  activation_c    4   64[BANK1 ] unsigned long 
 11954 ;; Return value:  Size  Location     Type
 11955 ;;                  1    wreg      void 
 11956 ;; Registers used:
 11957 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11958 ;; Tracked objects:
 11959 ;;		On entry : 1D/0
 11960 ;;		On exit  : 1F/0
 11961 ;;		Unchanged: 0/0
 11962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11964 ;;      Locals:         0       0      68       0       0       0       0       0       0       0       0       0       
      +0       0
 11965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11966 ;;      Totals:         0       1      68       0       0       0       0       0       0       0       0       0       
      +0       0
 11967 ;;Total ram usage:       69 bytes
 11968 ;; Hardware stack levels used:    1
 11969 ;; Hardware stack levels required when called:    7
 11970 ;; This function calls:
 11971 ;;		_FLASH_WriteBlock
 11972 ;;		_get_relay_activation_counter
 11973 ;;		_get_relay_reset_voltage
 11974 ;;		_get_reset_duration
 11975 ;; This function is called by:
 11976 ;;		_uart_task
 11977 ;;		_relay_watchdog_record_activations_task
 11978 ;;		_ApplicationInit
 11979 ;; This function uses a non-reentrant model
 11980 ;;
 11981                           
 11982                           
 11983                           ;psect for function _save_to_flash
 11984  097F                     _save_to_flash:	
 11985                           
 11986                           ;vcontrol.c: 288:     uint16_t buff[32];;vcontrol.c: 289:     if( chopper_active == 1 )
 11987                           
 11988                           ;incstack = 0
 11989                           ; Regs used in _save_to_flash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11990  097F  0020               	movlb	0	; select bank0
 11991  0980  0331               	decf	_chopper_active,w
 11992  0981  1D03               	btfss	3,2
 11993  0982  2988               	goto	l4180
 11994                           
 11995                           ;vcontrol.c: 290:         buff[0] = 0x0ABC;
 11996  0983  30BC               	movlw	188
 11997  0984  0021               	movlb	1	; select bank1
 11998  0985  00A0               	movwf	save_to_flash@buff^(0+128)
 11999  0986  300A               	movlw	10
 12000  0987  298C               	goto	L2
 12001  0988                     l4180:	
 12002                           
 12003                           ;vcontrol.c: 292:         buff[0] = 0x0CBA;
 12004  0988  30BA               	movlw	186
 12005  0989  0021               	movlb	1	; select bank1
 12006  098A  00A0               	movwf	save_to_flash@buff^(0+128)
 12007  098B  300C               	movlw	12
 12008  098C                     L2:	
 12009  098C  00A1               	movwf	(save_to_flash@buff^(0+128)+1)
 12010                           
 12011                           ;vcontrol.c: 293:     buff[1] = vdc_min;
 12012  098D  0020               	movlb	0	; select bank0
 12013  098E  0843               	movf	_vdc_min+1,w
 12014  098F  0021               	movlb	1	; select bank1
 12015  0990  00A3               	movwf	((save_to_flash@buff+1)^(0+128)+2)
 12016  0991  0020               	movlb	0	; select bank0
 12017  0992  0842               	movf	_vdc_min,w
 12018  0993  0021               	movlb	1	; select bank1
 12019  0994  00A2               	movwf	(save_to_flash@buff^(0+128)+2)
 12020                           
 12021                           ;vcontrol.c: 294:     buff[2] = vdc_max;
 12022  0995  0020               	movlb	0	; select bank0
 12023  0996  0841               	movf	_vdc_max+1,w
 12024  0997  0021               	movlb	1	; select bank1
 12025  0998  00A5               	movwf	((save_to_flash@buff+1)^(0+128)+4)
 12026  0999  0020               	movlb	0	; select bank0
 12027  099A  0840               	movf	_vdc_max,w
 12028  099B  0021               	movlb	1	; select bank1
 12029  099C  00A4               	movwf	(save_to_flash@buff^(0+128)+4)
 12030                           
 12031                           ;vcontrol.c: 295:     buff[3] = vdc_critic;
 12032  099D  0020               	movlb	0	; select bank0
 12033  099E  083F               	movf	_vdc_critic+1,w
 12034  099F  0021               	movlb	1	; select bank1
 12035  09A0  00A7               	movwf	((save_to_flash@buff+1)^(0+128)+6)
 12036  09A1  0020               	movlb	0	; select bank0
 12037  09A2  083E               	movf	_vdc_critic,w
 12038  09A3  0021               	movlb	1	; select bank1
 12039  09A4  00A6               	movwf	(save_to_flash@buff^(0+128)+6)
 12040                           
 12041                           ;vcontrol.c: 296:     buff[4] = duty_count_up_max;
 12042  09A5  086D               	movf	(_duty_count_up_max+1)^(0+128),w
 12043  09A6  00A9               	movwf	((save_to_flash@buff+1)^(0+128)+8)
 12044  09A7  086C               	movf	_duty_count_up_max^(0+128),w
 12045  09A8  00A8               	movwf	(save_to_flash@buff^(0+128)+8)
 12046                           
 12047                           ;vcontrol.c: 297:     buff[5] = get_relay_reset_voltage();
 12048  09A9  3193  2383  3189   	fcall	_get_relay_reset_voltage
 12049  09AC  084E               	movf	?_get_relay_reset_voltage+1,w
 12050  09AD  0021               	movlb	1	; select bank1
 12051  09AE  00AB               	movwf	((save_to_flash@buff+1)^(0+128)+10)
 12052  09AF  0020               	movlb	0	; select bank0
 12053  09B0  084D               	movf	?_get_relay_reset_voltage,w
 12054  09B1  0021               	movlb	1	; select bank1
 12055  09B2  00AA               	movwf	(save_to_flash@buff^(0+128)+10)
 12056                           
 12057                           ;vcontrol.c: 298:     buff[6] = get_reset_duration();
 12058  09B3  3193  23E1  3189   	fcall	_get_reset_duration
 12059  09B6  084E               	movf	?_get_reset_duration+1,w
 12060  09B7  0021               	movlb	1	; select bank1
 12061  09B8  00AD               	movwf	((save_to_flash@buff+1)^(0+128)+12)
 12062  09B9  0020               	movlb	0	; select bank0
 12063  09BA  084D               	movf	?_get_reset_duration,w
 12064  09BB  0021               	movlb	1	; select bank1
 12065  09BC  00AC               	movwf	(save_to_flash@buff^(0+128)+12)
 12066                           
 12067                           ;vcontrol.c: 300:     uint32_t activation_counter = get_relay_activation_counter();
 12068  09BD  3194  2495  3189   	fcall	_get_relay_activation_counter
 12069  09C0  0850               	movf	?_get_relay_activation_counter+3,w
 12070  09C1  0021               	movlb	1	; select bank1
 12071  09C2  00E3               	movwf	(save_to_flash@activation_counter+3)^(0+128)
 12072  09C3  0020               	movlb	0	; select bank0
 12073  09C4  084F               	movf	?_get_relay_activation_counter+2,w
 12074  09C5  0021               	movlb	1	; select bank1
 12075  09C6  00E2               	movwf	(save_to_flash@activation_counter+2)^(0+128)
 12076  09C7  0020               	movlb	0	; select bank0
 12077  09C8  084E               	movf	?_get_relay_activation_counter+1,w
 12078  09C9  0021               	movlb	1	; select bank1
 12079  09CA  00E1               	movwf	(save_to_flash@activation_counter+1)^(0+128)
 12080  09CB  0020               	movlb	0	; select bank0
 12081  09CC  084D               	movf	?_get_relay_activation_counter,w
 12082  09CD  0021               	movlb	1	; select bank1
 12083  09CE  00E0               	movwf	save_to_flash@activation_counter^(0+128)
 12084                           
 12085                           ;vcontrol.c: 301:     buff[7] = (activation_counter>>16) & 0xFFFF;
 12086  09CF  0863               	movf	((save_to_flash@activation_counter+1)^(0+128)+2),w
 12087  09D0  00AF               	movwf	((save_to_flash@buff+1)^(0+128)+14)
 12088  09D1  0862               	movf	(save_to_flash@activation_counter^(0+128)+2),w
 12089  09D2  00AE               	movwf	(save_to_flash@buff^(0+128)+14)
 12090                           
 12091                           ;vcontrol.c: 302:     buff[8] = activation_counter & 0xFFFF;
 12092  09D3  0861               	movf	(save_to_flash@activation_counter+1)^(0+128),w
 12093  09D4  00B1               	movwf	((save_to_flash@buff+1)^(0+128)+16)
 12094  09D5  0860               	movf	save_to_flash@activation_counter^(0+128),w
 12095  09D6  00B0               	movwf	(save_to_flash@buff^(0+128)+16)
 12096                           
 12097                           ;vcontrol.c: 304:     FLASH_WriteBlock(0x1F00,buff);
 12098  09D7  3000               	movlw	0
 12099  09D8  0020               	movlb	0	; select bank0
 12100  09D9  00D0               	movwf	FLASH_WriteBlock@writeAddr
 12101  09DA  301F               	movlw	31
 12102  09DB  00D1               	movwf	FLASH_WriteBlock@writeAddr+1
 12103  09DC  30A0               	movlw	(low (save_to_flash@buff| 0))& (0+255)
 12104  09DD  00DA               	movwf	??_save_to_flash
 12105  09DE  085A               	movf	??_save_to_flash,w
 12106  09DF  00D2               	movwf	FLASH_WriteBlock@flashWordArray
 12107  09E0  3189  21E3         	fcall	_FLASH_WriteBlock
 12108  09E2  0008               	return
 12109  09E3                     __end_of_save_to_flash:	
 12110                           
 12111                           	psect	text51
 12112  13E1                     __ptext51:	
 12113 ;; *************** function _get_reset_duration *****************
 12114 ;; Defined at:
 12115 ;;		line 87 in file "SolidStateRelay.c"
 12116 ;; Parameters:    Size  Location     Type
 12117 ;;		None
 12118 ;; Auto vars:     Size  Location     Type
 12119 ;;		None
 12120 ;; Return value:  Size  Location     Type
 12121 ;;                  2    9[BANK0 ] unsigned short 
 12122 ;; Registers used:
 12123 ;;		wreg
 12124 ;; Tracked objects:
 12125 ;;		On entry : 1C/2
 12126 ;;		On exit  : 1F/0
 12127 ;;		Unchanged: 0/0
 12128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12129 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12133 ;;Total ram usage:        2 bytes
 12134 ;; Hardware stack levels used:    1
 12135 ;; Hardware stack levels required when called:    5
 12136 ;; This function calls:
 12137 ;;		Nothing
 12138 ;; This function is called by:
 12139 ;;		_save_to_flash
 12140 ;;		_uart_task
 12141 ;; This function uses a non-reentrant model
 12142 ;;
 12143                           
 12144                           
 12145                           ;psect for function _get_reset_duration
 12146  13E1                     _get_reset_duration:	
 12147                           
 12148                           ;SolidStateRelay.c: 89:     return reset_duration;
 12149                           
 12150                           ;incstack = 0
 12151                           ; Regs used in _get_reset_duration: [wreg]
 12152  13E1  0022               	movlb	2	; select bank2
 12153  13E2  0851               	movf	(_reset_duration+1)^(0+256),w
 12154  13E3  0020               	movlb	0	; select bank0
 12155  13E4  00CE               	movwf	?_get_reset_duration+1
 12156  13E5  0022               	movlb	2	; select bank2
 12157  13E6  0850               	movf	_reset_duration^(0+256),w
 12158  13E7  0020               	movlb	0	; select bank0
 12159  13E8  00CD               	movwf	?_get_reset_duration
 12160  13E9  0008               	return
 12161  13EA                     __end_of_get_reset_duration:	
 12162                           
 12163                           	psect	text52
 12164  1383                     __ptext52:	
 12165 ;; *************** function _get_relay_reset_voltage *****************
 12166 ;; Defined at:
 12167 ;;		line 82 in file "SolidStateRelay.c"
 12168 ;; Parameters:    Size  Location     Type
 12169 ;;		None
 12170 ;; Auto vars:     Size  Location     Type
 12171 ;;		None
 12172 ;; Return value:  Size  Location     Type
 12173 ;;                  2    9[BANK0 ] unsigned short 
 12174 ;; Registers used:
 12175 ;;		wreg
 12176 ;; Tracked objects:
 12177 ;;		On entry : 1C/2
 12178 ;;		On exit  : 1F/0
 12179 ;;		Unchanged: 0/0
 12180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12181 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12184 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12185 ;;Total ram usage:        2 bytes
 12186 ;; Hardware stack levels used:    1
 12187 ;; Hardware stack levels required when called:    5
 12188 ;; This function calls:
 12189 ;;		Nothing
 12190 ;; This function is called by:
 12191 ;;		_save_to_flash
 12192 ;;		_uart_task
 12193 ;; This function uses a non-reentrant model
 12194 ;;
 12195                           
 12196                           
 12197                           ;psect for function _get_relay_reset_voltage
 12198  1383                     _get_relay_reset_voltage:	
 12199                           
 12200                           ;SolidStateRelay.c: 84:     return relay_reset_voltage;
 12201                           
 12202                           ;incstack = 0
 12203                           ; Regs used in _get_relay_reset_voltage: [wreg]
 12204  1383  0020               	movlb	0	; select bank0
 12205  1384  0821               	movf	_relay_reset_voltage+1,w
 12206  1385  00CE               	movwf	?_get_relay_reset_voltage+1
 12207  1386  0820               	movf	_relay_reset_voltage,w
 12208  1387  00CD               	movwf	?_get_relay_reset_voltage
 12209  1388  0008               	return
 12210  1389                     __end_of_get_relay_reset_voltage:	
 12211                           
 12212                           	psect	text53
 12213  1495                     __ptext53:	
 12214 ;; *************** function _get_relay_activation_counter *****************
 12215 ;; Defined at:
 12216 ;;		line 97 in file "SolidStateRelay.c"
 12217 ;; Parameters:    Size  Location     Type
 12218 ;;		None
 12219 ;; Auto vars:     Size  Location     Type
 12220 ;;		None
 12221 ;; Return value:  Size  Location     Type
 12222 ;;                  4    9[BANK0 ] unsigned long 
 12223 ;; Registers used:
 12224 ;;		wreg
 12225 ;; Tracked objects:
 12226 ;;		On entry : 1C/2
 12227 ;;		On exit  : 1F/0
 12228 ;;		Unchanged: 0/0
 12229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12230 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12233 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12234 ;;Total ram usage:        4 bytes
 12235 ;; Hardware stack levels used:    1
 12236 ;; Hardware stack levels required when called:    5
 12237 ;; This function calls:
 12238 ;;		Nothing
 12239 ;; This function is called by:
 12240 ;;		_save_to_flash
 12241 ;;		_uart_task
 12242 ;; This function uses a non-reentrant model
 12243 ;;
 12244                           
 12245                           
 12246                           ;psect for function _get_relay_activation_counter
 12247  1495                     _get_relay_activation_counter:	
 12248                           
 12249                           ;SolidStateRelay.c: 99:     return activation_counter;
 12250                           
 12251                           ;incstack = 0
 12252                           ; Regs used in _get_relay_activation_counter: [wreg]
 12253  1495  0022               	movlb	2	; select bank2
 12254  1496  084B               	movf	(_activation_counter+3)^(0+256),w
 12255  1497  0020               	movlb	0	; select bank0
 12256  1498  00D0               	movwf	?_get_relay_activation_counter+3
 12257  1499  0022               	movlb	2	; select bank2
 12258  149A  084A               	movf	(_activation_counter+2)^(0+256),w
 12259  149B  0020               	movlb	0	; select bank0
 12260  149C  00CF               	movwf	?_get_relay_activation_counter+2
 12261  149D  0022               	movlb	2	; select bank2
 12262  149E  0849               	movf	(_activation_counter+1)^(0+256),w
 12263  149F  0020               	movlb	0	; select bank0
 12264  14A0  00CE               	movwf	?_get_relay_activation_counter+1
 12265  14A1  0022               	movlb	2	; select bank2
 12266  14A2  0848               	movf	_activation_counter^(0+256),w
 12267  14A3  0020               	movlb	0	; select bank0
 12268  14A4  00CD               	movwf	?_get_relay_activation_counter
 12269  14A5  0008               	return
 12270  14A6                     __end_of_get_relay_activation_counter:	
 12271                           
 12272                           	psect	text54
 12273  09E3                     __ptext54:	
 12274 ;; *************** function _FLASH_WriteBlock *****************
 12275 ;; Defined at:
 12276 ;;		line 95 in file "mcc_generated_files/memory.c"
 12277 ;; Parameters:    Size  Location     Type
 12278 ;;  writeAddr       2   12[BANK0 ] unsigned short 
 12279 ;;  flashWordArr    1   14[BANK0 ] PTR unsigned short 
 12280 ;;		 -> save_to_flash@buff(64), 
 12281 ;; Auto vars:     Size  Location     Type
 12282 ;;  blockStartAd    2   18[BANK0 ] unsigned short 
 12283 ;;  i               1   21[BANK0 ] unsigned char 
 12284 ;;  GIEBitValue     1   20[BANK0 ] unsigned char 
 12285 ;; Return value:  Size  Location     Type
 12286 ;;                  1    wreg      char 
 12287 ;; Registers used:
 12288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12289 ;; Tracked objects:
 12290 ;;		On entry : 1F/0
 12291 ;;		On exit  : 1F/0
 12292 ;;		Unchanged: 0/0
 12293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12294 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12295 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12296 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12297 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12298 ;;Total ram usage:       10 bytes
 12299 ;; Hardware stack levels used:    1
 12300 ;; Hardware stack levels required when called:    6
 12301 ;; This function calls:
 12302 ;;		_FLASH_EraseBlock
 12303 ;; This function is called by:
 12304 ;;		_save_to_flash
 12305 ;; This function uses a non-reentrant model
 12306 ;;
 12307                           
 12308                           
 12309                           ;psect for function _FLASH_WriteBlock
 12310  09E3                     _FLASH_WriteBlock:	
 12311                           
 12312                           ;mcc_generated_files/memory.c: 95: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 96: {;mcc_generated_files/memory.c: 97:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x2000 -1) ^ (32 -1)));
 12313                           
 12314                           ;incstack = 0
 12315                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12316  09E3  30E0               	movlw	224
 12317  09E4  0550               	andwf	FLASH_WriteBlock@writeAddr,w
 12318  09E5  00D6               	movwf	FLASH_WriteBlock@blockStartAddr
 12319  09E6  301F               	movlw	31
 12320  09E7  0551               	andwf	FLASH_WriteBlock@writeAddr+1,w
 12321  09E8  00D7               	movwf	FLASH_WriteBlock@blockStartAddr+1
 12322                           
 12323                           ;mcc_generated_files/memory.c: 98:     uint8_t GIEBitValue = INTCONbits.GIE;
 12324  09E9  3000               	movlw	0
 12325  09EA  1B8B               	btfsc	11,7	;volatile
 12326  09EB  3001               	movlw	1
 12327  09EC  00D8               	movwf	FLASH_WriteBlock@GIEBitValue
 12328                           
 12329                           ;mcc_generated_files/memory.c: 99:     uint8_t i;;mcc_generated_files/memory.c: 102:    
      +                           if( writeAddr != blockStartAddr )
 12330  09ED  0857               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 12331  09EE  0651               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 12332  09EF  1D03               	skipz
 12333  09F0  29F3               	goto	u2625
 12334  09F1  0856               	movf	FLASH_WriteBlock@blockStartAddr,w
 12335  09F2  0650               	xorwf	FLASH_WriteBlock@writeAddr,w
 12336  09F3                     u2625:	
 12337  09F3  1D03               	btfss	3,2
 12338  09F4  0008               	return
 12339                           
 12340                           ;mcc_generated_files/memory.c: 107:     INTCONbits.GIE = 0;
 12341                           
 12342                           ;mcc_generated_files/memory.c: 105:     }
 12343  09F5  138B               	bcf	11,7	;volatile
 12344                           
 12345                           ;mcc_generated_files/memory.c: 110:     FLASH_EraseBlock(writeAddr);
 12346  09F6  0851               	movf	FLASH_WriteBlock@writeAddr+1,w
 12347  09F7  00CE               	movwf	FLASH_EraseBlock@startAddr+1
 12348  09F8  0850               	movf	FLASH_WriteBlock@writeAddr,w
 12349  09F9  00CD               	movwf	FLASH_EraseBlock@startAddr
 12350  09FA  3195  25E4  3189   	fcall	_FLASH_EraseBlock
 12351                           
 12352                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.CFGS = 0;
 12353  09FD  0023               	movlb	3	; select bank3
 12354  09FE  1315               	bcf	21,6	;volatile
 12355                           
 12356                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.WREN = 1;
 12357  09FF  1515               	bsf	21,2	;volatile
 12358                           
 12359                           ;mcc_generated_files/memory.c: 115:     PMCON1bits.LWLO = 1;
 12360  0A00  1695               	bsf	21,5	;volatile
 12361                           
 12362                           ;mcc_generated_files/memory.c: 117:     for (i=0; i<32; i++)
 12363  0A01  0020               	movlb	0	; select bank0
 12364  0A02  01D9               	clrf	FLASH_WriteBlock@i
 12365  0A03                     l3962:	
 12366                           
 12367                           ;mcc_generated_files/memory.c: 118:     {;mcc_generated_files/memory.c: 120:         PMA
      +                          DRL = (writeAddr & 0xFF);
 12368  0A03  0850               	movf	FLASH_WriteBlock@writeAddr,w
 12369  0A04  0023               	movlb	3	; select bank3
 12370  0A05  0091               	movwf	17	;volatile
 12371                           
 12372                           ;mcc_generated_files/memory.c: 122:         PMADRH = ((writeAddr & 0xFF00) >> 8);
 12373  0A06  0020               	movlb	0	; select bank0
 12374  0A07  0851               	movf	FLASH_WriteBlock@writeAddr+1,w
 12375  0A08  0023               	movlb	3	; select bank3
 12376  0A09  0092               	movwf	18	;volatile
 12377                           
 12378                           ;mcc_generated_files/memory.c: 125:         PMDATL = flashWordArray[i];
 12379  0A0A  0020               	movlb	0	; select bank0
 12380  0A0B  3559               	lslf	FLASH_WriteBlock@i,w
 12381  0A0C  0752               	addwf	FLASH_WriteBlock@flashWordArray,w
 12382  0A0D  00D3               	movwf	??_FLASH_WriteBlock
 12383  0A0E  0853               	movf	??_FLASH_WriteBlock,w
 12384  0A0F  0086               	movwf	6
 12385  0A10  0187               	clrf	7
 12386  0A11  0801               	movf	1,w
 12387  0A12  0023               	movlb	3	; select bank3
 12388  0A13  0093               	movwf	19	;volatile
 12389                           
 12390                           ;mcc_generated_files/memory.c: 126:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
 12391  0A14  0020               	movlb	0	; select bank0
 12392  0A15  3559               	lslf	FLASH_WriteBlock@i,w
 12393  0A16  0752               	addwf	FLASH_WriteBlock@flashWordArray,w
 12394  0A17  00D3               	movwf	??_FLASH_WriteBlock
 12395  0A18  0853               	movf	??_FLASH_WriteBlock,w
 12396  0A19  0086               	movwf	6
 12397  0A1A  0187               	clrf	7
 12398  0A1B  3F40               	moviw [0]fsr1
 12399  0A1C  00D4               	movwf	??_FLASH_WriteBlock+1
 12400  0A1D  3F41               	moviw [1]fsr1
 12401  0A1E  00D5               	movwf	??_FLASH_WriteBlock+2
 12402  0A1F  0855               	movf	??_FLASH_WriteBlock+2,w
 12403  0A20  0023               	movlb	3	; select bank3
 12404  0A21  0094               	movwf	20	;volatile
 12405                           
 12406                           ;mcc_generated_files/memory.c: 128:         if(i == (32 -1))
 12407  0A22  301F               	movlw	31
 12408  0A23  0020               	movlb	0	; select bank0
 12409  0A24  0659               	xorwf	FLASH_WriteBlock@i,w
 12410  0A25  1D03               	btfss	3,2
 12411  0A26  2A29               	goto	l3972
 12412                           
 12413                           ;mcc_generated_files/memory.c: 129:         {;mcc_generated_files/memory.c: 131:        
      +                               PMCON1bits.LWLO = 0;
 12414  0A27  0023               	movlb	3	; select bank3
 12415  0A28  1295               	bcf	21,5	;volatile
 12416  0A29                     l3972:	
 12417                           
 12418                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0x55;
 12419  0A29  3055               	movlw	85
 12420  0A2A  0023               	movlb	3	; select bank3
 12421  0A2B  0096               	movwf	22	;volsfr
 12422                           
 12423                           ;mcc_generated_files/memory.c: 135:         PMCON2 = 0xAA;
 12424  0A2C  30AA               	movlw	170
 12425  0A2D  0096               	movwf	22	;volsfr
 12426                           
 12427                           ;mcc_generated_files/memory.c: 136:         PMCON1bits.WR = 1;
 12428  0A2E  1495               	bsf	21,1	;volatile
 12429                           
 12430                           ;mcc_generated_files/memory.c: 137:         __nop();
 12431  0A2F  0000               	nop
 12432                           
 12433                           ;mcc_generated_files/memory.c: 138:         __nop();
 12434  0A30  0000               	nop
 12435                           
 12436                           ;mcc_generated_files/memory.c: 140:  writeAddr++;
 12437  0A31  3001               	movlw	1
 12438  0A32  0020               	movlb	0	; select bank0
 12439  0A33  07D0               	addwf	FLASH_WriteBlock@writeAddr,f
 12440  0A34  3000               	movlw	0
 12441  0A35  3DD1               	addwfc	FLASH_WriteBlock@writeAddr+1,f
 12442  0A36  0064               	clrwdt	;# 
 12443                           
 12444                           ;mcc_generated_files/memory.c: 142:     }
 12445  0A37  3001               	movlw	1
 12446  0A38  0020               	movlb	0	; select bank0
 12447  0A39  00D3               	movwf	??_FLASH_WriteBlock
 12448  0A3A  0853               	movf	??_FLASH_WriteBlock,w
 12449  0A3B  07D9               	addwf	FLASH_WriteBlock@i,f
 12450  0A3C  3020               	movlw	32
 12451  0A3D  0259               	subwf	FLASH_WriteBlock@i,w
 12452  0A3E  1C03               	skipc
 12453  0A3F  2A03               	goto	l3962
 12454                           
 12455                           ;mcc_generated_files/memory.c: 144:     PMCON1bits.WREN = 0;
 12456  0A40  0023               	movlb	3	; select bank3
 12457  0A41  1115               	bcf	21,2	;volatile
 12458                           
 12459                           ;mcc_generated_files/memory.c: 145:     INTCONbits.GIE = GIEBitValue;
 12460  0A42  0020               	movlb	0	; select bank0
 12461  0A43  0C58               	rrf	FLASH_WriteBlock@GIEBitValue,w
 12462  0A44  1C03               	skipc
 12463  0A45  138B               	bcf	11,7	;volatile
 12464  0A46  1803               	skipnc
 12465  0A47  178B               	bsf	11,7	;volatile
 12466  0A48  0008               	return
 12467  0A49                     __end_of_FLASH_WriteBlock:	
 12468                           
 12469                           	psect	text55
 12470  15E4                     __ptext55:	
 12471 ;; *************** function _FLASH_EraseBlock *****************
 12472 ;; Defined at:
 12473 ;;		line 150 in file "mcc_generated_files/memory.c"
 12474 ;; Parameters:    Size  Location     Type
 12475 ;;  startAddr       2    9[BANK0 ] unsigned short 
 12476 ;; Auto vars:     Size  Location     Type
 12477 ;;  GIEBitValue     1   11[BANK0 ] unsigned char 
 12478 ;; Return value:  Size  Location     Type
 12479 ;;                  1    wreg      void 
 12480 ;; Registers used:
 12481 ;;		wreg, status,2, status,0
 12482 ;; Tracked objects:
 12483 ;;		On entry : 1F/0
 12484 ;;		On exit  : 1F/0
 12485 ;;		Unchanged: 0/0
 12486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12487 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12490 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12491 ;;Total ram usage:        3 bytes
 12492 ;; Hardware stack levels used:    1
 12493 ;; Hardware stack levels required when called:    5
 12494 ;; This function calls:
 12495 ;;		Nothing
 12496 ;; This function is called by:
 12497 ;;		_FLASH_WriteBlock
 12498 ;; This function uses a non-reentrant model
 12499 ;;
 12500                           
 12501                           
 12502                           ;psect for function _FLASH_EraseBlock
 12503  15E4                     _FLASH_EraseBlock:	
 12504                           
 12505                           ;mcc_generated_files/memory.c: 150: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 151: {;mcc_generated_files/memory.c: 152:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
 12506                           
 12507                           ;incstack = 0
 12508                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 12509  15E4  3000               	movlw	0
 12510  15E5  1B8B               	btfsc	11,7	;volatile
 12511  15E6  3001               	movlw	1
 12512  15E7  00CF               	movwf	FLASH_EraseBlock@GIEBitValue
 12513                           
 12514                           ;mcc_generated_files/memory.c: 155:     INTCONbits.GIE = 0;
 12515  15E8  138B               	bcf	11,7	;volatile
 12516                           
 12517                           ;mcc_generated_files/memory.c: 157:     PMADRL = (startAddr & 0xFF);
 12518  15E9  084D               	movf	FLASH_EraseBlock@startAddr,w
 12519  15EA  0023               	movlb	3	; select bank3
 12520  15EB  0091               	movwf	17	;volatile
 12521                           
 12522                           ;mcc_generated_files/memory.c: 159:     PMADRH = ((startAddr & 0xFF00) >> 8);
 12523  15EC  0020               	movlb	0	; select bank0
 12524  15ED  084E               	movf	FLASH_EraseBlock@startAddr+1,w
 12525  15EE  0023               	movlb	3	; select bank3
 12526  15EF  0092               	movwf	18	;volatile
 12527                           
 12528                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.CFGS = 0;
 12529  15F0  1315               	bcf	21,6	;volatile
 12530                           
 12531                           ;mcc_generated_files/memory.c: 163:     PMCON1bits.FREE = 1;
 12532  15F1  1615               	bsf	21,4	;volatile
 12533                           
 12534                           ;mcc_generated_files/memory.c: 164:     PMCON1bits.WREN = 1;
 12535  15F2  1515               	bsf	21,2	;volatile
 12536                           
 12537                           ;mcc_generated_files/memory.c: 167:     PMCON2 = 0x55;
 12538  15F3  3055               	movlw	85
 12539  15F4  0096               	movwf	22	;volsfr
 12540                           
 12541                           ;mcc_generated_files/memory.c: 168:     PMCON2 = 0xAA;
 12542  15F5  30AA               	movlw	170
 12543  15F6  0096               	movwf	22	;volsfr
 12544                           
 12545                           ;mcc_generated_files/memory.c: 169:     PMCON1bits.WR = 1;
 12546  15F7  1495               	bsf	21,1	;volatile
 12547                           
 12548                           ;mcc_generated_files/memory.c: 170:     __nop();
 12549  15F8  0000               	nop
 12550                           
 12551                           ;mcc_generated_files/memory.c: 171:     __nop();
 12552  15F9  0000               	nop
 12553                           
 12554                           ;mcc_generated_files/memory.c: 173:     PMCON1bits.WREN = 0;
 12555  15FA  0023               	movlb	3	; select bank3
 12556  15FB  1115               	bcf	21,2	;volatile
 12557                           
 12558                           ;mcc_generated_files/memory.c: 174:     INTCONbits.GIE = GIEBitValue;
 12559  15FC  0020               	movlb	0	; select bank0
 12560  15FD  0C4F               	rrf	FLASH_EraseBlock@GIEBitValue,w
 12561  15FE  1C03               	skipc
 12562  15FF  138B               	bcf	11,7	;volatile
 12563  1600  1803               	skipnc
 12564  1601  178B               	bsf	11,7	;volatile
 12565  1602  0008               	return
 12566  1603                     __end_of_FLASH_EraseBlock:	
 12567                           
 12568                           	psect	text56
 12569  15C5                     __ptext56:	
 12570 ;; *************** function _FLASH_ReadWord *****************
 12571 ;; Defined at:
 12572 ;;		line 58 in file "mcc_generated_files/memory.c"
 12573 ;; Parameters:    Size  Location     Type
 12574 ;;  flashAddr       2    9[BANK0 ] unsigned short 
 12575 ;; Auto vars:     Size  Location     Type
 12576 ;;  GIEBitValue     1   11[BANK0 ] unsigned char 
 12577 ;; Return value:  Size  Location     Type
 12578 ;;                  2    9[BANK0 ] unsigned short 
 12579 ;; Registers used:
 12580 ;;		wreg, status,2, status,0
 12581 ;; Tracked objects:
 12582 ;;		On entry : 1F/0
 12583 ;;		On exit  : 1F/0
 12584 ;;		Unchanged: 0/0
 12585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12586 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12589 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12590 ;;Total ram usage:        3 bytes
 12591 ;; Hardware stack levels used:    1
 12592 ;; Hardware stack levels required when called:    5
 12593 ;; This function calls:
 12594 ;;		Nothing
 12595 ;; This function is called by:
 12596 ;;		_ApplicationInit
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           
 12601                           ;psect for function _FLASH_ReadWord
 12602  15C5                     _FLASH_ReadWord:	
 12603                           
 12604                           ;mcc_generated_files/memory.c: 58: uint16_t FLASH_ReadWord(uint16_t flashAddr);mcc_gener
      +                          ated_files/memory.c: 59: {;mcc_generated_files/memory.c: 60:     uint8_t GIEBitValue = I
      +                          NTCONbits.GIE;
 12605                           
 12606                           ;incstack = 0
 12607                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12608  15C5  3000               	movlw	0
 12609  15C6  1B8B               	btfsc	11,7	;volatile
 12610  15C7  3001               	movlw	1
 12611  15C8  00CF               	movwf	FLASH_ReadWord@GIEBitValue
 12612                           
 12613                           ;mcc_generated_files/memory.c: 62:     INTCONbits.GIE = 0;
 12614  15C9  138B               	bcf	11,7	;volatile
 12615                           
 12616                           ;mcc_generated_files/memory.c: 63:     PMADRL = (flashAddr & 0x00FF);
 12617  15CA  084D               	movf	FLASH_ReadWord@flashAddr,w
 12618  15CB  0023               	movlb	3	; select bank3
 12619  15CC  0091               	movwf	17	;volatile
 12620                           
 12621                           ;mcc_generated_files/memory.c: 64:     PMADRH = ((flashAddr & 0xFF00) >> 8);
 12622  15CD  0020               	movlb	0	; select bank0
 12623  15CE  084E               	movf	FLASH_ReadWord@flashAddr+1,w
 12624  15CF  0023               	movlb	3	; select bank3
 12625  15D0  0092               	movwf	18	;volatile
 12626                           
 12627                           ;mcc_generated_files/memory.c: 66:     PMCON1bits.CFGS = 0;
 12628  15D1  1315               	bcf	21,6	;volatile
 12629                           
 12630                           ;mcc_generated_files/memory.c: 67:     PMCON1bits.RD = 1;
 12631  15D2  1415               	bsf	21,0	;volatile
 12632                           
 12633                           ;mcc_generated_files/memory.c: 68:     __nop();
 12634  15D3  0000               	nop
 12635                           
 12636                           ;mcc_generated_files/memory.c: 69:     __nop();
 12637  15D4  0000               	nop
 12638                           
 12639                           ;mcc_generated_files/memory.c: 70:     INTCONbits.GIE = GIEBitValue;
 12640  15D5  0020               	movlb	0	; select bank0
 12641  15D6  0C4F               	rrf	FLASH_ReadWord@GIEBitValue,w
 12642  15D7  1C03               	skipc
 12643  15D8  138B               	bcf	11,7	;volatile
 12644  15D9  1803               	skipnc
 12645  15DA  178B               	bsf	11,7	;volatile
 12646                           
 12647                           ;mcc_generated_files/memory.c: 72:     return ((uint16_t)((PMDATH << 8) | PMDATL));
 12648  15DB  0023               	movlb	3	; select bank3
 12649  15DC  0814               	movf	20,w	;volatile
 12650  15DD  0020               	movlb	0	; select bank0
 12651  15DE  00CE               	movwf	?_FLASH_ReadWord+1
 12652  15DF  0023               	movlb	3	; select bank3
 12653  15E0  0813               	movf	19,w	;volatile
 12654  15E1  0020               	movlb	0	; select bank0
 12655  15E2  00CD               	movwf	?_FLASH_ReadWord
 12656  15E3  0008               	return
 12657  15E4                     __end_of_FLASH_ReadWord:	
 12658                           
 12659                           	psect	intentry
 12660  0004                     __pintentry:	
 12661 ;; *************** function _INTERRUPT_InterruptManager *****************
 12662 ;; Defined at:
 12663 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12664 ;; Parameters:    Size  Location     Type
 12665 ;;		None
 12666 ;; Auto vars:     Size  Location     Type
 12667 ;;		None
 12668 ;; Return value:  Size  Location     Type
 12669 ;;                  1    wreg      void 
 12670 ;; Registers used:
 12671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12672 ;; Tracked objects:
 12673 ;;		On entry : 0/0
 12674 ;;		On exit  : 0/0
 12675 ;;		Unchanged: 0/0
 12676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12681 ;;Total ram usage:        0 bytes
 12682 ;; Hardware stack levels used:    1
 12683 ;; Hardware stack levels required when called:    4
 12684 ;; This function calls:
 12685 ;;		Absolute function
 12686 ;;		_ADC_ISR
 12687 ;;		_EUSART_CommandHandler_ISR
 12688 ;;		_EUSART_Receive_ISR
 12689 ;;		_TMR1_ISR
 12690 ;;		_TMR2_ISR
 12691 ;; This function is called by:
 12692 ;;		Interrupt level 1
 12693 ;; This function uses a non-reentrant model
 12694 ;;
 12695                           
 12696  0004                     _INTERRUPT_InterruptManager:	
 12697                           
 12698                           ;incstack = 0
 12699  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12700                           
 12701                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12702  0005  3180               	pagesel	$
 12703  0006  0064               	clrwdt	;# 
 12704                           
 12705                           ;mcc_generated_files/interrupt_manager.c: 56:     if(INTCONbits.PEIE == 1)
 12706  0007  1F0B               	btfss	11,6	;volatile
 12707  0008  2832               	goto	i1l393
 12708                           
 12709                           ;mcc_generated_files/interrupt_manager.c: 57:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 58:         if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 12710  0009  0021               	movlb	1	; select bank1
 12711  000A  1F11               	btfss	17,6	;volatile
 12712  000B  2813               	goto	i1l384
 12713  000C  0020               	movlb	0	; select bank0
 12714  000D  1F11               	btfss	17,6	;volatile
 12715  000E  2813               	goto	i1l384
 12716                           
 12717                           ;mcc_generated_files/interrupt_manager.c: 59:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 60:             ADC_ISR();
 12718  000F  3194  2434  3180   	fcall	_ADC_ISR
 12719                           
 12720                           ;mcc_generated_files/interrupt_manager.c: 61:         }
 12721  0012  2832               	goto	i1l393
 12722  0013                     i1l384:	
 12723                           ;mcc_generated_files/interrupt_manager.c: 62:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 12724                           
 12725  0013  0021               	movlb	1	; select bank1
 12726  0014  1E91               	btfss	17,5	;volatile
 12727  0015  2820               	goto	i1l386
 12728  0016  0020               	movlb	0	; select bank0
 12729  0017  1E91               	btfss	17,5	;volatile
 12730  0018  2820               	goto	i1l386
 12731                           
 12732                           ;mcc_generated_files/interrupt_manager.c: 63:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 64:             EUSART_RxDefaultInterruptHandler();
 12733  0019  0022               	movlb	2	; select bank2
 12734  001A  086B               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
 12735  001B  008A               	movwf	10
 12736  001C  086A               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
 12737  001D  000A               	callw
 12738  001E  3180               	pagesel	$
 12739                           
 12740                           ;mcc_generated_files/interrupt_manager.c: 65:         }
 12741  001F  2832               	goto	i1l393
 12742  0020                     i1l386:	
 12743                           ;mcc_generated_files/interrupt_manager.c: 66:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
 12744                           
 12745  0020  0021               	movlb	1	; select bank1
 12746  0021  1C91               	btfss	17,1	;volatile
 12747  0022  282A               	goto	i1l388
 12748  0023  0020               	movlb	0	; select bank0
 12749  0024  1C91               	btfss	17,1	;volatile
 12750  0025  282A               	goto	i1l388
 12751                           
 12752                           ;mcc_generated_files/interrupt_manager.c: 67:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 68:             TMR2_ISR();
 12753  0026  3193  2362  3180   	fcall	_TMR2_ISR
 12754                           
 12755                           ;mcc_generated_files/interrupt_manager.c: 69:         }
 12756  0029  2832               	goto	i1l393
 12757  002A                     i1l388:	
 12758                           ;mcc_generated_files/interrupt_manager.c: 70:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
 12759                           
 12760  002A  0021               	movlb	1	; select bank1
 12761  002B  1C11               	btfss	17,0	;volatile
 12762  002C  2832               	goto	i1l393
 12763  002D  0020               	movlb	0	; select bank0
 12764  002E  1C11               	btfss	17,0	;volatile
 12765  002F  2832               	goto	i1l393
 12766                           
 12767                           ;mcc_generated_files/interrupt_manager.c: 71:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 72:             TMR1_ISR();
 12768  0030  3194  2440         	fcall	_TMR1_ISR
 12769  0032                     i1l393:	
 12770                           ;mcc_generated_files/interrupt_manager.c: 73:         }
 12771                           
 12772  0032  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12773  0033  0009               	retfie
 12774  0034                     __end_of_INTERRUPT_InterruptManager:	
 12775                           
 12776                           	psect	text58
 12777  1362                     __ptext58:	
 12778 ;; *************** function _TMR2_ISR *****************
 12779 ;; Defined at:
 12780 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 12781 ;; Parameters:    Size  Location     Type
 12782 ;;		None
 12783 ;; Auto vars:     Size  Location     Type
 12784 ;;		None
 12785 ;; Return value:  Size  Location     Type
 12786 ;;                  1    wreg      void 
 12787 ;; Registers used:
 12788 ;;		wreg, status,2, status,0, pclath, cstack
 12789 ;; Tracked objects:
 12790 ;;		On entry : 1F/0
 12791 ;;		On exit  : 0/0
 12792 ;;		Unchanged: 0/0
 12793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12798 ;;Total ram usage:        0 bytes
 12799 ;; Hardware stack levels used:    1
 12800 ;; Hardware stack levels required when called:    3
 12801 ;; This function calls:
 12802 ;;		_TMR2_CallBack
 12803 ;; This function is called by:
 12804 ;;		_INTERRUPT_InterruptManager
 12805 ;; This function uses a non-reentrant model
 12806 ;;
 12807                           
 12808                           
 12809                           ;psect for function _TMR2_ISR
 12810  1362                     _TMR2_ISR:	
 12811                           
 12812                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 12813                           
 12814                           ;incstack = 0
 12815                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 12816  1362  1091               	bcf	17,1	;volatile
 12817                           
 12818                           ;mcc_generated_files/tmr2.c: 127:     TMR2_CallBack();
 12819  1363  3194  2408         	fcall	_TMR2_CallBack
 12820  1365  0008               	return
 12821  1366                     __end_of_TMR2_ISR:	
 12822                           
 12823                           	psect	text59
 12824  1408                     __ptext59:	
 12825 ;; *************** function _TMR2_CallBack *****************
 12826 ;; Defined at:
 12827 ;;		line 130 in file "mcc_generated_files/tmr2.c"
 12828 ;; Parameters:    Size  Location     Type
 12829 ;;		None
 12830 ;; Auto vars:     Size  Location     Type
 12831 ;;		None
 12832 ;; Return value:  Size  Location     Type
 12833 ;;                  1    wreg      void 
 12834 ;; Registers used:
 12835 ;;		wreg, status,2, status,0, pclath, cstack
 12836 ;; Tracked objects:
 12837 ;;		On entry : 1F/0
 12838 ;;		On exit  : 0/0
 12839 ;;		Unchanged: 0/0
 12840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12845 ;;Total ram usage:        0 bytes
 12846 ;; Hardware stack levels used:    1
 12847 ;; Hardware stack levels required when called:    2
 12848 ;; This function calls:
 12849 ;;		Absolute function
 12850 ;;		_TMR2_DefaultInterruptHandler
 12851 ;;		_TMR2_DutyControlHandler_ISR
 12852 ;; This function is called by:
 12853 ;;		_TMR2_ISR
 12854 ;; This function uses a non-reentrant model
 12855 ;;
 12856                           
 12857                           
 12858                           ;psect for function _TMR2_CallBack
 12859  1408                     _TMR2_CallBack:	
 12860                           
 12861                           ;mcc_generated_files/tmr2.c: 134:     if(TMR2_InterruptHandler)
 12862                           
 12863                           ;incstack = 0
 12864                           ; Regs used in _TMR2_CallBack: [wreg+status,2+status,0+pclath+cstack]
 12865  1408  0022               	movlb	2	; select bank2
 12866  1409  0864               	movf	_TMR2_InterruptHandler^(0+256),w
 12867  140A  0465               	iorwf	(_TMR2_InterruptHandler+1)^(0+256),w
 12868  140B  1903               	btfsc	3,2
 12869  140C  0008               	return
 12870                           
 12871                           ;mcc_generated_files/tmr2.c: 135:     {;mcc_generated_files/tmr2.c: 136:         TMR2_In
      +                          terruptHandler();
 12872  140D  0865               	movf	(_TMR2_InterruptHandler+1)^(0+256),w
 12873  140E  008A               	movwf	10
 12874  140F  0864               	movf	_TMR2_InterruptHandler^(0+256),w
 12875  1410  000A               	callw
 12876  1411  3194               	pagesel	$
 12877  1412  0008               	return
 12878  1413                     __end_of_TMR2_CallBack:	
 12879                           
 12880                           	psect	text60
 12881  1347                     __ptext60:	
 12882 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 12883 ;; Defined at:
 12884 ;;		line 144 in file "mcc_generated_files/tmr2.c"
 12885 ;; Parameters:    Size  Location     Type
 12886 ;;		None
 12887 ;; Auto vars:     Size  Location     Type
 12888 ;;		None
 12889 ;; Return value:  Size  Location     Type
 12890 ;;                  1    wreg      void 
 12891 ;; Registers used:
 12892 ;;		None
 12893 ;; Tracked objects:
 12894 ;;		On entry : 1F/2
 12895 ;;		On exit  : 1F/2
 12896 ;;		Unchanged: 1F/0
 12897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12902 ;;Total ram usage:        0 bytes
 12903 ;; Hardware stack levels used:    1
 12904 ;; This function calls:
 12905 ;;		Nothing
 12906 ;; This function is called by:
 12907 ;;		_TMR2_Initialize
 12908 ;;		_TMR2_CallBack
 12909 ;; This function uses a non-reentrant model
 12910 ;;
 12911                           
 12912                           
 12913                           ;psect for function _TMR2_DefaultInterruptHandler
 12914  1347                     _TMR2_DefaultInterruptHandler:	
 12915                           
 12916                           ;incstack = 0
 12917                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 12918  1347  0008               	return
 12919  1348                     __end_of_TMR2_DefaultInterruptHandler:	
 12920                           
 12921                           	psect	text61
 12922  0894                     __ptext61:	
 12923 ;; *************** function _TMR2_DutyControlHandler_ISR *****************
 12924 ;; Defined at:
 12925 ;;		line 430 in file "vcontrol.c"
 12926 ;; Parameters:    Size  Location     Type
 12927 ;;		None
 12928 ;; Auto vars:     Size  Location     Type
 12929 ;;		None
 12930 ;; Return value:  Size  Location     Type
 12931 ;;                  1    wreg      void 
 12932 ;; Registers used:
 12933 ;;		wreg, status,2, status,0, pclath, cstack
 12934 ;; Tracked objects:
 12935 ;;		On entry : 1F/2
 12936 ;;		On exit  : 1F/C
 12937 ;;		Unchanged: 0/0
 12938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12941 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12943 ;;Total ram usage:        2 bytes
 12944 ;; Hardware stack levels used:    1
 12945 ;; Hardware stack levels required when called:    1
 12946 ;; This function calls:
 12947 ;;		_PWM3_LoadDutyValue
 12948 ;; This function is called by:
 12949 ;;		_init_chopper
 12950 ;;		_TMR2_CallBack
 12951 ;; This function uses a non-reentrant model
 12952 ;;
 12953                           
 12954                           
 12955                           ;psect for function _TMR2_DutyControlHandler_ISR
 12956  0894                     _TMR2_DutyControlHandler_ISR:	
 12957                           
 12958                           ;vcontrol.c: 432:     if( current_duty > target_duty )
 12959                           
 12960                           ;incstack = 0
 12961                           ; Regs used in _TMR2_DutyControlHandler_ISR: [wreg+status,2+status,0+pclath+cstack]
 12962  0894  0020               	movlb	0	; select bank0
 12963  0895  0823               	movf	_current_duty+1,w
 12964  0896  0225               	subwf	_target_duty+1,w
 12965  0897  1D03               	skipz
 12966  0898  289B               	goto	u139_25
 12967  0899  0822               	movf	_current_duty,w
 12968  089A  0224               	subwf	_target_duty,w
 12969  089B                     u139_25:	
 12970  089B  1803               	skipnc
 12971  089C  28B3               	goto	i1l883
 12972                           
 12973                           ;vcontrol.c: 433:     {;vcontrol.c: 434:         if( current_duty - target_duty > duty_i
      +                          nc )
 12974  089D  0824               	movf	_target_duty,w
 12975  089E  0222               	subwf	_current_duty,w
 12976  089F  00F4               	movwf	??_TMR2_DutyControlHandler_ISR
 12977  08A0  0825               	movf	_target_duty+1,w
 12978  08A1  3B23               	subwfb	_current_duty+1,w
 12979  08A2  00F5               	movwf	??_TMR2_DutyControlHandler_ISR+1
 12980  08A3  3000               	movlw	0
 12981  08A4  0275               	subwf	??_TMR2_DutyControlHandler_ISR+1,w
 12982  08A5  3009               	movlw	9
 12983  08A6  1903               	skipnz
 12984  08A7  0274               	subwf	??_TMR2_DutyControlHandler_ISR,w
 12985  08A8  1C03               	skipc
 12986  08A9  28AF               	goto	i1l2964
 12987                           
 12988                           ;vcontrol.c: 435:             current_duty -= duty_inc;
 12989  08AA  3008               	movlw	8
 12990  08AB  02A2               	subwf	_current_duty,f
 12991  08AC  3000               	movlw	0
 12992  08AD  3BA3               	subwfb	_current_duty+1,f
 12993  08AE  28B3               	goto	i1l883
 12994  08AF                     i1l2964:	
 12995                           
 12996                           ;vcontrol.c: 437:             current_duty = target_duty;
 12997  08AF  0825               	movf	_target_duty+1,w
 12998  08B0  00A3               	movwf	_current_duty+1
 12999  08B1  0824               	movf	_target_duty,w
 13000  08B2  00A2               	movwf	_current_duty
 13001  08B3                     i1l883:	
 13002                           ;vcontrol.c: 438:     }
 13003                           
 13004                           
 13005                           ;vcontrol.c: 439:     if( current_duty < target_duty )
 13006  08B3  0825               	movf	_target_duty+1,w
 13007  08B4  0223               	subwf	_current_duty+1,w
 13008  08B5  1D03               	skipz
 13009  08B6  28B9               	goto	u141_25
 13010  08B7  0824               	movf	_target_duty,w
 13011  08B8  0222               	subwf	_current_duty,w
 13012  08B9                     u141_25:	
 13013  08B9  1803               	skipnc
 13014  08BA  28D1               	goto	i1l2972
 13015                           
 13016                           ;vcontrol.c: 440:     {;vcontrol.c: 441:         if( target_duty - current_duty > duty_i
      +                          nc )
 13017  08BB  0822               	movf	_current_duty,w
 13018  08BC  0224               	subwf	_target_duty,w
 13019  08BD  00F4               	movwf	??_TMR2_DutyControlHandler_ISR
 13020  08BE  0823               	movf	_current_duty+1,w
 13021  08BF  3B25               	subwfb	_target_duty+1,w
 13022  08C0  00F5               	movwf	??_TMR2_DutyControlHandler_ISR+1
 13023  08C1  3000               	movlw	0
 13024  08C2  0275               	subwf	??_TMR2_DutyControlHandler_ISR+1,w
 13025  08C3  3009               	movlw	9
 13026  08C4  1903               	skipnz
 13027  08C5  0274               	subwf	??_TMR2_DutyControlHandler_ISR,w
 13028  08C6  1C03               	skipc
 13029  08C7  28CD               	goto	i1l2970
 13030                           
 13031                           ;vcontrol.c: 443:             current_duty += duty_inc;
 13032  08C8  3008               	movlw	8
 13033  08C9  07A2               	addwf	_current_duty,f
 13034  08CA  3000               	movlw	0
 13035  08CB  3DA3               	addwfc	_current_duty+1,f
 13036  08CC  28D1               	goto	i1l2972
 13037  08CD                     i1l2970:	
 13038                           
 13039                           ;vcontrol.c: 445:             current_duty = target_duty;
 13040  08CD  0825               	movf	_target_duty+1,w
 13041  08CE  00A3               	movwf	_current_duty+1
 13042  08CF  0824               	movf	_target_duty,w
 13043  08D0  00A2               	movwf	_current_duty
 13044  08D1                     i1l2972:	
 13045                           
 13046                           ;vcontrol.c: 447:     PWM3_LoadDutyValue(current_duty);
 13047  08D1  0823               	movf	_current_duty+1,w
 13048  08D2  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 13049  08D3  0822               	movf	_current_duty,w
 13050  08D4  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
 13051  08D5  3194  24C9         	fcall	_PWM3_LoadDutyValue
 13052  08D7  0008               	return
 13053  08D8                     __end_of_TMR2_DutyControlHandler_ISR:	
 13054                           
 13055                           	psect	text62
 13056  1440                     __ptext62:	
 13057 ;; *************** function _TMR1_ISR *****************
 13058 ;; Defined at:
 13059 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 13060 ;; Parameters:    Size  Location     Type
 13061 ;;		None
 13062 ;; Auto vars:     Size  Location     Type
 13063 ;;		None
 13064 ;; Return value:  Size  Location     Type
 13065 ;;                  1    wreg      void 
 13066 ;; Registers used:
 13067 ;;		wreg, status,2, status,0, pclath, cstack
 13068 ;; Tracked objects:
 13069 ;;		On entry : 1F/0
 13070 ;;		On exit  : 0/0
 13071 ;;		Unchanged: 0/0
 13072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13077 ;;Total ram usage:        0 bytes
 13078 ;; Hardware stack levels used:    1
 13079 ;; Hardware stack levels required when called:    2
 13080 ;; This function calls:
 13081 ;;		_TMR1_CallBack
 13082 ;;		_TMR1_WriteTimer
 13083 ;; This function is called by:
 13084 ;;		_INTERRUPT_InterruptManager
 13085 ;; This function uses a non-reentrant model
 13086 ;;
 13087                           
 13088                           
 13089                           ;psect for function _TMR1_ISR
 13090  1440                     _TMR1_ISR:	
 13091                           
 13092                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
 13093                           
 13094                           ;incstack = 0
 13095                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 13096  1440  1011               	bcf	17,0	;volatile
 13097                           
 13098                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
 13099  1441  0022               	movlb	2	; select bank2
 13100  1442  0861               	movf	(_timer1ReloadVal+1)^(0+256),w	;volatile
 13101  1443  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 13102  1444  0860               	movf	_timer1ReloadVal^(0+256),w	;volatile
 13103  1445  00F0               	movwf	TMR1_WriteTimer@timerVal
 13104  1446  3194  2467  3194   	fcall	_TMR1_WriteTimer
 13105                           
 13106                           ;mcc_generated_files/tmr1.c: 166:     TMR1_CallBack();
 13107  1449  3193  23FD         	fcall	_TMR1_CallBack
 13108  144B  0008               	return
 13109  144C                     __end_of_TMR1_ISR:	
 13110                           
 13111                           	psect	text63
 13112  1467                     __ptext63:	
 13113 ;; *************** function _TMR1_WriteTimer *****************
 13114 ;; Defined at:
 13115 ;;		line 120 in file "mcc_generated_files/tmr1.c"
 13116 ;; Parameters:    Size  Location     Type
 13117 ;;  timerVal        2    0[COMMON] unsigned short 
 13118 ;; Auto vars:     Size  Location     Type
 13119 ;;		None
 13120 ;; Return value:  Size  Location     Type
 13121 ;;                  1    wreg      void 
 13122 ;; Registers used:
 13123 ;;		wreg
 13124 ;; Tracked objects:
 13125 ;;		On entry : 1F/2
 13126 ;;		On exit  : 1F/0
 13127 ;;		Unchanged: 0/0
 13128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13129 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13132 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13133 ;;Total ram usage:        2 bytes
 13134 ;; Hardware stack levels used:    1
 13135 ;; This function calls:
 13136 ;;		Nothing
 13137 ;; This function is called by:
 13138 ;;		_TMR1_ISR
 13139 ;; This function uses a non-reentrant model
 13140 ;;
 13141                           
 13142                           
 13143                           ;psect for function _TMR1_WriteTimer
 13144  1467                     _TMR1_WriteTimer:	
 13145                           
 13146                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
 13147                           
 13148                           ;incstack = 0
 13149                           ; Regs used in _TMR1_WriteTimer: [wreg]
 13150  1467  0020               	movlb	0	; select bank0
 13151  1468  1D18               	btfss	24,2	;volatile
 13152  1469  2C71               	goto	i1l3224
 13153                           
 13154                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
 13155  146A  1018               	bcf	24,0	;volatile
 13156                           
 13157                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
 13158  146B  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 13159  146C  0097               	movwf	23	;volatile
 13160                           
 13161                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
 13162  146D  0870               	movf	TMR1_WriteTimer@timerVal,w
 13163  146E  0096               	movwf	22	;volatile
 13164                           
 13165                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
 13166  146F  1418               	bsf	24,0	;volatile
 13167                           
 13168                           ;mcc_generated_files/tmr1.c: 133:     }
 13169  1470  0008               	return
 13170  1471                     i1l3224:	
 13171                           
 13172                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
 13173  1471  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 13174  1472  0097               	movwf	23	;volatile
 13175                           
 13176                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
 13177  1473  0870               	movf	TMR1_WriteTimer@timerVal,w
 13178  1474  0096               	movwf	22	;volatile
 13179  1475  0008               	return
 13180  1476                     __end_of_TMR1_WriteTimer:	
 13181                           
 13182                           	psect	text64
 13183  13FD                     __ptext64:	
 13184 ;; *************** function _TMR1_CallBack *****************
 13185 ;; Defined at:
 13186 ;;		line 169 in file "mcc_generated_files/tmr1.c"
 13187 ;; Parameters:    Size  Location     Type
 13188 ;;		None
 13189 ;; Auto vars:     Size  Location     Type
 13190 ;;		None
 13191 ;; Return value:  Size  Location     Type
 13192 ;;                  1    wreg      void 
 13193 ;; Registers used:
 13194 ;;		wreg, status,2, status,0, pclath, cstack
 13195 ;; Tracked objects:
 13196 ;;		On entry : 1F/0
 13197 ;;		On exit  : 0/0
 13198 ;;		Unchanged: 0/0
 13199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13204 ;;Total ram usage:        0 bytes
 13205 ;; Hardware stack levels used:    1
 13206 ;; Hardware stack levels required when called:    1
 13207 ;; This function calls:
 13208 ;;		Absolute function
 13209 ;;		_TMR1_DefaultInterruptHandler
 13210 ;;		_TMR1_SystemTimer_ISR
 13211 ;; This function is called by:
 13212 ;;		_TMR1_ISR
 13213 ;; This function uses a non-reentrant model
 13214 ;;
 13215                           
 13216                           
 13217                           ;psect for function _TMR1_CallBack
 13218  13FD                     _TMR1_CallBack:	
 13219                           
 13220                           ;mcc_generated_files/tmr1.c: 172:     if(TMR1_InterruptHandler)
 13221                           
 13222                           ;incstack = 0
 13223                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 13224  13FD  0022               	movlb	2	; select bank2
 13225  13FE  085E               	movf	_TMR1_InterruptHandler^(0+256),w
 13226  13FF  045F               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 13227  1400  1903               	btfsc	3,2
 13228  1401  0008               	return
 13229                           
 13230                           ;mcc_generated_files/tmr1.c: 173:     {;mcc_generated_files/tmr1.c: 174:         TMR1_In
      +                          terruptHandler();
 13231  1402  085F               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 13232  1403  008A               	movwf	10
 13233  1404  085E               	movf	_TMR1_InterruptHandler^(0+256),w
 13234  1405  000A               	callw
 13235  1406  3193               	pagesel	$
 13236  1407  0008               	return
 13237  1408                     __end_of_TMR1_CallBack:	
 13238                           
 13239                           	psect	text65
 13240  1346                     __ptext65:	
 13241 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 13242 ;; Defined at:
 13243 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 13244 ;; Parameters:    Size  Location     Type
 13245 ;;		None
 13246 ;; Auto vars:     Size  Location     Type
 13247 ;;		None
 13248 ;; Return value:  Size  Location     Type
 13249 ;;                  1    wreg      void 
 13250 ;; Registers used:
 13251 ;;		None
 13252 ;; Tracked objects:
 13253 ;;		On entry : 1F/2
 13254 ;;		On exit  : 1F/2
 13255 ;;		Unchanged: 1F/0
 13256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13261 ;;Total ram usage:        0 bytes
 13262 ;; Hardware stack levels used:    1
 13263 ;; This function calls:
 13264 ;;		Nothing
 13265 ;; This function is called by:
 13266 ;;		_TMR1_Initialize
 13267 ;;		_TMR1_CallBack
 13268 ;; This function uses a non-reentrant model
 13269 ;;
 13270                           
 13271                           
 13272                           ;psect for function _TMR1_DefaultInterruptHandler
 13273  1346                     _TMR1_DefaultInterruptHandler:	
 13274                           
 13275                           ;incstack = 0
 13276                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 13277  1346  0008               	return
 13278  1347                     __end_of_TMR1_DefaultInterruptHandler:	
 13279                           
 13280                           	psect	text66
 13281  1623                     __ptext66:	
 13282 ;; *************** function _TMR1_SystemTimer_ISR *****************
 13283 ;; Defined at:
 13284 ;;		line 9 in file "SystemTimer.c"
 13285 ;; Parameters:    Size  Location     Type
 13286 ;;		None
 13287 ;; Auto vars:     Size  Location     Type
 13288 ;;		None
 13289 ;; Return value:  Size  Location     Type
 13290 ;;                  1    wreg      void 
 13291 ;; Registers used:
 13292 ;;		wreg, status,2, status,0
 13293 ;; Tracked objects:
 13294 ;;		On entry : 1F/2
 13295 ;;		On exit  : 1E/0
 13296 ;;		Unchanged: 0/0
 13297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13301 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13302 ;;Total ram usage:        1 bytes
 13303 ;; Hardware stack levels used:    1
 13304 ;; This function calls:
 13305 ;;		Nothing
 13306 ;; This function is called by:
 13307 ;;		_uart_start
 13308 ;;		_TMR1_CallBack
 13309 ;; This function uses a non-reentrant model
 13310 ;;
 13311                           
 13312                           
 13313                           ;psect for function _TMR1_SystemTimer_ISR
 13314  1623                     _TMR1_SystemTimer_ISR:	
 13315                           
 13316                           ;SystemTimer.c: 11:     system_counter++;
 13317                           
 13318                           ;incstack = 0
 13319                           ; Regs used in _TMR1_SystemTimer_ISR: [wreg+status,2+status,0]
 13320  1623  3001               	movlw	1
 13321  1624  00F0               	movwf	??_TMR1_SystemTimer_ISR
 13322  1625  0870               	movf	??_TMR1_SystemTimer_ISR,w
 13323  1626  0020               	movlb	0	; select bank0
 13324  1627  07B0               	addwf	_system_counter,f
 13325                           
 13326                           ;SystemTimer.c: 12:     _100ms_counter++;
 13327  1628  3001               	movlw	1
 13328  1629  00F0               	movwf	??_TMR1_SystemTimer_ISR
 13329  162A  0870               	movf	??_TMR1_SystemTimer_ISR,w
 13330  162B  07AB               	addwf	__100ms_counter,f
 13331                           
 13332                           ;SystemTimer.c: 13:     if( _100ms_counter == 10 )
 13333  162C  300A               	movlw	10
 13334  162D  062B               	xorwf	__100ms_counter,w
 13335  162E  1D03               	btfss	3,2
 13336  162F  0008               	return
 13337                           
 13338                           ;SystemTimer.c: 14:     {;SystemTimer.c: 15:         _100ms_counter = 0;
 13339  1630  01AB               	clrf	__100ms_counter
 13340                           
 13341                           ;SystemTimer.c: 16:         system_seconds++;
 13342  1631  3001               	movlw	1
 13343  1632  00F0               	movwf	??_TMR1_SystemTimer_ISR
 13344  1633  0870               	movf	??_TMR1_SystemTimer_ISR,w
 13345  1634  0021               	movlb	1	; select bank1
 13346  1635  07E7               	addwf	_system_seconds^(0+128),f
 13347                           
 13348                           ;SystemTimer.c: 18:         _1000ms_counter++;
 13349  1636  3001               	movlw	1
 13350  1637  00F0               	movwf	??_TMR1_SystemTimer_ISR
 13351  1638  0870               	movf	??_TMR1_SystemTimer_ISR,w
 13352  1639  0020               	movlb	0	; select bank0
 13353  163A  07AA               	addwf	__1000ms_counter,f
 13354                           
 13355                           ;SystemTimer.c: 19:         if( _1000ms_counter == 60 )
 13356  163B  303C               	movlw	60
 13357  163C  062A               	xorwf	__1000ms_counter,w
 13358  163D  1D03               	btfss	3,2
 13359  163E  0008               	return
 13360                           
 13361                           ;SystemTimer.c: 20:         {;SystemTimer.c: 21:             _1000ms_counter = 0;
 13362  163F  01AA               	clrf	__1000ms_counter
 13363                           
 13364                           ;SystemTimer.c: 22:             system_minutes++;
 13365  1640  3001               	movlw	1
 13366  1641  00F0               	movwf	??_TMR1_SystemTimer_ISR
 13367  1642  0870               	movf	??_TMR1_SystemTimer_ISR,w
 13368  1643  0021               	movlb	1	; select bank1
 13369  1644  07E6               	addwf	_system_minutes^(0+128),f
 13370  1645  0008               	return
 13371  1646                     __end_of_TMR1_SystemTimer_ISR:	
 13372                           
 13373                           	psect	text67
 13374  1603                     __ptext67:	
 13375 ;; *************** function _EUSART_CommandHandler_ISR *****************
 13376 ;; Defined at:
 13377 ;;		line 14 in file "UartParser.c"
 13378 ;; Parameters:    Size  Location     Type
 13379 ;;		None
 13380 ;; Auto vars:     Size  Location     Type
 13381 ;;  rx_data         1    1[COMMON] unsigned char 
 13382 ;; Return value:  Size  Location     Type
 13383 ;;                  1    wreg      void 
 13384 ;; Registers used:
 13385 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13386 ;; Tracked objects:
 13387 ;;		On entry : 1F/2
 13388 ;;		On exit  : 1F/0
 13389 ;;		Unchanged: 0/0
 13390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13392 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13395 ;;Total ram usage:        2 bytes
 13396 ;; Hardware stack levels used:    1
 13397 ;; This function calls:
 13398 ;;		Nothing
 13399 ;; This function is called by:
 13400 ;;		_uart_start
 13401 ;;		_INTERRUPT_InterruptManager
 13402 ;; This function uses a non-reentrant model
 13403 ;;
 13404                           
 13405                           
 13406                           ;psect for function _EUSART_CommandHandler_ISR
 13407  1603                     _EUSART_CommandHandler_ISR:	
 13408                           
 13409                           ;UartParser.c: 16:     uint8_t rx_data = RC1REG;
 13410                           
 13411                           ;incstack = 0
 13412                           ; Regs used in _EUSART_CommandHandler_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13413  1603  0023               	movlb	3	; select bank3
 13414  1604  0819               	movf	25,w	;volatile
 13415  1605  00F0               	movwf	??_EUSART_CommandHandler_ISR
 13416  1606  0870               	movf	??_EUSART_CommandHandler_ISR,w
 13417  1607  00F1               	movwf	EUSART_CommandHandler_ISR@rx_data
 13418                           
 13419                           ;UartParser.c: 17:     if( lock_isr )
 13420  1608  0020               	movlb	0	; select bank0
 13421  1609  085F               	movf	_lock_isr,w
 13422  160A  1D03               	btfss	3,2
 13423  160B  0008               	return
 13424                           
 13425                           ;UartParser.c: 19:     isr_timer = ((uint8_t)((uint8_t)~system_counter)+((uint8_t)1));
 13426  160C  0330               	decf	_system_counter,w
 13427  160D  3AFF               	xorlw	255
 13428  160E  00F0               	movwf	??_EUSART_CommandHandler_ISR
 13429  160F  0870               	movf	??_EUSART_CommandHandler_ISR,w
 13430  1610  00AE               	movwf	_isr_timer
 13431                           
 13432                           ;UartParser.c: 20:     if( rx_idx < 32 )
 13433  1611  3020               	movlw	32
 13434  1612  022F               	subwf	UartParser@rx_idx,w
 13435  1613  1803               	skipnc
 13436  1614  0008               	return
 13437                           
 13438                           ;UartParser.c: 21:         rx_buffer[rx_idx++] = rx_data;
 13439  1615  0871               	movf	EUSART_CommandHandler_ISR@rx_data,w
 13440  1616  00F0               	movwf	??_EUSART_CommandHandler_ISR
 13441  1617  082F               	movf	UartParser@rx_idx,w
 13442  1618  3E20               	addlw	(low (UartParser@rx_buffer| (0+256)))& (0+255)
 13443  1619  0086               	movwf	6
 13444  161A  3001               	movlw	1	; select bank2/3
 13445  161B  0087               	movwf	7
 13446  161C  0870               	movf	??_EUSART_CommandHandler_ISR,w
 13447  161D  0081               	movwf	1
 13448  161E  3001               	movlw	1
 13449  161F  00F0               	movwf	??_EUSART_CommandHandler_ISR
 13450  1620  0870               	movf	??_EUSART_CommandHandler_ISR,w
 13451  1621  07AF               	addwf	UartParser@rx_idx,f
 13452  1622  0008               	return
 13453  1623                     __end_of_EUSART_CommandHandler_ISR:	
 13454                           
 13455                           	psect	text68
 13456  1785                     __ptext68:	
 13457 ;; *************** function _EUSART_Receive_ISR *****************
 13458 ;; Defined at:
 13459 ;;		line 175 in file "mcc_generated_files/eusart.c"
 13460 ;; Parameters:    Size  Location     Type
 13461 ;;		None
 13462 ;; Auto vars:     Size  Location     Type
 13463 ;;		None
 13464 ;; Return value:  Size  Location     Type
 13465 ;;                  1    wreg      void 
 13466 ;; Registers used:
 13467 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13468 ;; Tracked objects:
 13469 ;;		On entry : 1F/2
 13470 ;;		On exit  : 0/0
 13471 ;;		Unchanged: 0/0
 13472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13477 ;;Total ram usage:        0 bytes
 13478 ;; Hardware stack levels used:    1
 13479 ;; Hardware stack levels required when called:    2
 13480 ;; This function calls:
 13481 ;;		Absolute function
 13482 ;;		_EUSART_DefaultErrorHandler
 13483 ;;		_EUSART_DefaultFramingErrorHandler
 13484 ;;		_EUSART_DefaultOverrunErrorHandler
 13485 ;;		_EUSART_RxDataHandler
 13486 ;; This function is called by:
 13487 ;;		_EUSART_Initialize
 13488 ;;		_INTERRUPT_InterruptManager
 13489 ;; This function uses a non-reentrant model
 13490 ;;
 13491                           
 13492                           
 13493                           ;psect for function _EUSART_Receive_ISR
 13494  1785                     _EUSART_Receive_ISR:	
 13495                           
 13496                           ;mcc_generated_files/eusart.c: 178:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 13497                           
 13498                           ;incstack = 0
 13499                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13500  1785  0020               	movlb	0	; select bank0
 13501  1786  083B               	movf	_eusartRxHead,w	;volatile
 13502  1787  3E40               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 13503  1788  0086               	movwf	6
 13504  1789  3001               	movlw	1	; select bank2/3
 13505  178A  0087               	movwf	7
 13506  178B  0181               	clrf	1
 13507                           
 13508                           ;mcc_generated_files/eusart.c: 180:     if(RC1STAbits.FERR){
 13509  178C  0023               	movlb	3	; select bank3
 13510  178D  1D1D               	btfss	29,2	;volatile
 13511  178E  2F9C               	goto	i1l3434
 13512                           
 13513                           ;mcc_generated_files/eusart.c: 181:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 13514  178F  0020               	movlb	0	; select bank0
 13515  1790  083B               	movf	_eusartRxHead,w	;volatile
 13516  1791  3E40               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 13517  1792  0086               	movwf	6
 13518  1793  3001               	movlw	1	; select bank2/3
 13519  1794  0087               	movwf	7
 13520  1795  1481               	bsf	1,1
 13521                           
 13522                           ;mcc_generated_files/eusart.c: 182:         EUSART_FramingErrorHandler();
 13523  1796  0022               	movlb	2	; select bank2
 13524  1797  0869               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 13525  1798  008A               	movwf	10
 13526  1799  0868               	movf	_EUSART_FramingErrorHandler^(0+256),w
 13527  179A  000A               	callw
 13528  179B  3197               	pagesel	$
 13529  179C                     i1l3434:	
 13530                           
 13531                           ;mcc_generated_files/eusart.c: 185:     if(RC1STAbits.OERR){
 13532  179C  0023               	movlb	3	; select bank3
 13533  179D  1C9D               	btfss	29,1	;volatile
 13534  179E  2FAC               	goto	i1l3440
 13535                           
 13536                           ;mcc_generated_files/eusart.c: 186:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 13537  179F  0020               	movlb	0	; select bank0
 13538  17A0  083B               	movf	_eusartRxHead,w	;volatile
 13539  17A1  3E40               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 13540  17A2  0086               	movwf	6
 13541  17A3  3001               	movlw	1	; select bank2/3
 13542  17A4  0087               	movwf	7
 13543  17A5  1501               	bsf	1,2
 13544                           
 13545                           ;mcc_generated_files/eusart.c: 187:         EUSART_OverrunErrorHandler();
 13546  17A6  0022               	movlb	2	; select bank2
 13547  17A7  0867               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 13548  17A8  008A               	movwf	10
 13549  17A9  0866               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 13550  17AA  000A               	callw
 13551  17AB  3197               	pagesel	$
 13552  17AC                     i1l3440:	
 13553                           
 13554                           ;mcc_generated_files/eusart.c: 190:     if(eusartRxStatusBuffer[eusartRxHead].status){
 13555  17AC  0020               	movlb	0	; select bank0
 13556  17AD  083B               	movf	_eusartRxHead,w	;volatile
 13557  17AE  3E40               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 13558  17AF  0086               	movwf	6
 13559  17B0  3001               	movlw	1	; select bank2/3
 13560  17B1  0087               	movwf	7
 13561  17B2  0801               	movf	1,w
 13562  17B3  1903               	btfsc	3,2
 13563  17B4  2FBC               	goto	i1l3444
 13564                           
 13565                           ;mcc_generated_files/eusart.c: 191:         EUSART_ErrorHandler();
 13566  17B5  0023               	movlb	3	; select bank3
 13567  17B6  084D               	movf	(_EUSART_ErrorHandler+1)^(0+384),w
 13568  17B7  008A               	movwf	10
 13569  17B8  084C               	movf	_EUSART_ErrorHandler^(0+384),w
 13570  17B9  000A               	callw
 13571  17BA  3197               	pagesel	$
 13572                           
 13573                           ;mcc_generated_files/eusart.c: 192:     } else {
 13574  17BB  0008               	return
 13575  17BC                     i1l3444:	
 13576                           
 13577                           ;mcc_generated_files/eusart.c: 193:         EUSART_RxDataHandler();
 13578  17BC  3195  250B         	fcall	_EUSART_RxDataHandler
 13579  17BE  0008               	return
 13580  17BF                     __end_of_EUSART_Receive_ISR:	
 13581                           
 13582                           	psect	text69
 13583  135E                     __ptext69:	
 13584 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 13585 ;; Defined at:
 13586 ;;		line 211 in file "mcc_generated_files/eusart.c"
 13587 ;; Parameters:    Size  Location     Type
 13588 ;;		None
 13589 ;; Auto vars:     Size  Location     Type
 13590 ;;		None
 13591 ;; Return value:  Size  Location     Type
 13592 ;;                  1    wreg      void 
 13593 ;; Registers used:
 13594 ;;		None
 13595 ;; Tracked objects:
 13596 ;;		On entry : 1F/2
 13597 ;;		On exit  : 1F/3
 13598 ;;		Unchanged: 0/0
 13599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13604 ;;Total ram usage:        0 bytes
 13605 ;; Hardware stack levels used:    1
 13606 ;; This function calls:
 13607 ;;		Nothing
 13608 ;; This function is called by:
 13609 ;;		_EUSART_Initialize
 13610 ;;		_EUSART_Receive_ISR
 13611 ;; This function uses a non-reentrant model
 13612 ;;
 13613                           
 13614                           
 13615                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 13616  135E                     _EUSART_DefaultOverrunErrorHandler:	
 13617                           
 13618                           ;mcc_generated_files/eusart.c: 214:     RC1STAbits.CREN = 0;
 13619                           
 13620                           ;incstack = 0
 13621                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 13622  135E  0023               	movlb	3	; select bank3
 13623  135F  121D               	bcf	29,4	;volatile
 13624                           
 13625                           ;mcc_generated_files/eusart.c: 215:     RC1STAbits.CREN = 1;
 13626  1360  161D               	bsf	29,4	;volatile
 13627  1361  0008               	return
 13628  1362                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 13629                           
 13630                           	psect	text70
 13631  1345                     __ptext70:	
 13632 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 13633 ;; Defined at:
 13634 ;;		line 209 in file "mcc_generated_files/eusart.c"
 13635 ;; Parameters:    Size  Location     Type
 13636 ;;		None
 13637 ;; Auto vars:     Size  Location     Type
 13638 ;;		None
 13639 ;; Return value:  Size  Location     Type
 13640 ;;                  1    wreg      void 
 13641 ;; Registers used:
 13642 ;;		None
 13643 ;; Tracked objects:
 13644 ;;		On entry : 1F/2
 13645 ;;		On exit  : 1F/2
 13646 ;;		Unchanged: 1F/0
 13647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;Total ram usage:        0 bytes
 13653 ;; Hardware stack levels used:    1
 13654 ;; This function calls:
 13655 ;;		Nothing
 13656 ;; This function is called by:
 13657 ;;		_EUSART_Initialize
 13658 ;;		_EUSART_Receive_ISR
 13659 ;; This function uses a non-reentrant model
 13660 ;;
 13661                           
 13662                           
 13663                           ;psect for function _EUSART_DefaultFramingErrorHandler
 13664  1345                     _EUSART_DefaultFramingErrorHandler:	
 13665                           
 13666                           ;incstack = 0
 13667                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 13668  1345  0008               	return
 13669  1346                     __end_of_EUSART_DefaultFramingErrorHandler:	
 13670                           
 13671                           	psect	text71
 13672  1349                     __ptext71:	
 13673 ;; *************** function _EUSART_DefaultErrorHandler *****************
 13674 ;; Defined at:
 13675 ;;		line 219 in file "mcc_generated_files/eusart.c"
 13676 ;; Parameters:    Size  Location     Type
 13677 ;;		None
 13678 ;; Auto vars:     Size  Location     Type
 13679 ;;		None
 13680 ;; Return value:  Size  Location     Type
 13681 ;;                  1    wreg      void 
 13682 ;; Registers used:
 13683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13684 ;; Tracked objects:
 13685 ;;		On entry : 1F/3
 13686 ;;		On exit  : 1F/0
 13687 ;;		Unchanged: 0/0
 13688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13693 ;;Total ram usage:        0 bytes
 13694 ;; Hardware stack levels used:    1
 13695 ;; Hardware stack levels required when called:    1
 13696 ;; This function calls:
 13697 ;;		_EUSART_RxDataHandler
 13698 ;; This function is called by:
 13699 ;;		_EUSART_Initialize
 13700 ;;		_EUSART_Receive_ISR
 13701 ;; This function uses a non-reentrant model
 13702 ;;
 13703                           
 13704                           
 13705                           ;psect for function _EUSART_DefaultErrorHandler
 13706  1349                     _EUSART_DefaultErrorHandler:	
 13707                           
 13708                           ;mcc_generated_files/eusart.c: 220:     EUSART_RxDataHandler();
 13709                           
 13710                           ;incstack = 0
 13711                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13712  1349  3195  250B         	fcall	_EUSART_RxDataHandler
 13713  134B  0008               	return
 13714  134C                     __end_of_EUSART_DefaultErrorHandler:	
 13715                           
 13716                           	psect	text72
 13717  150B                     __ptext72:	
 13718 ;; *************** function _EUSART_RxDataHandler *****************
 13719 ;; Defined at:
 13720 ;;		line 199 in file "mcc_generated_files/eusart.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;		None
 13723 ;; Auto vars:     Size  Location     Type
 13724 ;;		None
 13725 ;; Return value:  Size  Location     Type
 13726 ;;                  1    wreg      void 
 13727 ;; Registers used:
 13728 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13729 ;; Tracked objects:
 13730 ;;		On entry : 1C/0
 13731 ;;		On exit  : 1F/0
 13732 ;;		Unchanged: 0/0
 13733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;Total ram usage:        1 bytes
 13739 ;; Hardware stack levels used:    1
 13740 ;; This function calls:
 13741 ;;		Nothing
 13742 ;; This function is called by:
 13743 ;;		_EUSART_Receive_ISR
 13744 ;;		_EUSART_DefaultErrorHandler
 13745 ;; This function uses a non-reentrant model
 13746 ;;
 13747                           
 13748                           
 13749                           ;psect for function _EUSART_RxDataHandler
 13750  150B                     _EUSART_RxDataHandler:	
 13751                           
 13752                           ;mcc_generated_files/eusart.c: 201:     eusartRxBuffer[eusartRxHead++] = RC1REG;
 13753                           
 13754                           ;incstack = 0
 13755                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 13756  150B  0023               	movlb	3	; select bank3
 13757  150C  0819               	movf	25,w	;volatile
 13758  150D  00F0               	movwf	??_EUSART_RxDataHandler
 13759  150E  0020               	movlb	0	; select bank0
 13760  150F  083B               	movf	_eusartRxHead,w
 13761  1510  3EB0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 13762  1511  0086               	movwf	6
 13763  1512  3001               	movlw	1	; select bank3/4
 13764  1513  0087               	movwf	7
 13765  1514  0870               	movf	??_EUSART_RxDataHandler,w
 13766  1515  0081               	movwf	1
 13767  1516  3001               	movlw	1
 13768  1517  00F0               	movwf	??_EUSART_RxDataHandler
 13769  1518  0870               	movf	??_EUSART_RxDataHandler,w
 13770  1519  07BB               	addwf	_eusartRxHead,f	;volatile
 13771                           
 13772                           ;mcc_generated_files/eusart.c: 202:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 13773  151A  3008               	movlw	8
 13774  151B  023B               	subwf	_eusartRxHead,w
 13775  151C  1803               	btfsc	3,0
 13776                           
 13777                           ;mcc_generated_files/eusart.c: 203:     {;mcc_generated_files/eusart.c: 204:         eus
      +                          artRxHead = 0;
 13778  151D  01BB               	clrf	_eusartRxHead	;volatile
 13779                           
 13780                           ;mcc_generated_files/eusart.c: 206:     eusartRxCount++;
 13781  151E  3001               	movlw	1
 13782  151F  00F0               	movwf	??_EUSART_RxDataHandler
 13783  1520  0870               	movf	??_EUSART_RxDataHandler,w
 13784  1521  07B9               	addwf	_eusartRxCount,f	;volatile
 13785  1522  0008               	return
 13786  1523                     __end_of_EUSART_RxDataHandler:	
 13787                           
 13788                           	psect	text73
 13789  1434                     __ptext73:	
 13790 ;; *************** function _ADC_ISR *****************
 13791 ;; Defined at:
 13792 ;;		line 149 in file "mcc_generated_files/adc.c"
 13793 ;; Parameters:    Size  Location     Type
 13794 ;;		None
 13795 ;; Auto vars:     Size  Location     Type
 13796 ;;		None
 13797 ;; Return value:  Size  Location     Type
 13798 ;;                  1    wreg      void 
 13799 ;; Registers used:
 13800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13801 ;; Tracked objects:
 13802 ;;		On entry : 1F/0
 13803 ;;		On exit  : 0/0
 13804 ;;		Unchanged: 0/0
 13805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13809 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13810 ;;Total ram usage:        0 bytes
 13811 ;; Hardware stack levels used:    1
 13812 ;; Hardware stack levels required when called:    2
 13813 ;; This function calls:
 13814 ;;		Absolute function
 13815 ;;		_ADC_DefaultInterruptHandler
 13816 ;;		_ADC_VoltageControlHandler_ISR
 13817 ;; This function is called by:
 13818 ;;		_INTERRUPT_InterruptManager
 13819 ;; This function uses a non-reentrant model
 13820 ;;
 13821                           
 13822                           
 13823                           ;psect for function _ADC_ISR
 13824  1434                     _ADC_ISR:	
 13825                           
 13826                           ;mcc_generated_files/adc.c: 152:     PIR1bits.ADIF = 0;
 13827                           
 13828                           ;incstack = 0
 13829                           ; Regs used in _ADC_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13830  1434  1311               	bcf	17,6	;volatile
 13831                           
 13832                           ;mcc_generated_files/adc.c: 154:  if(ADC_InterruptHandler)
 13833  1435  0022               	movlb	2	; select bank2
 13834  1436  0862               	movf	_ADC_InterruptHandler^(0+256),w
 13835  1437  0463               	iorwf	(_ADC_InterruptHandler+1)^(0+256),w
 13836  1438  1903               	btfsc	3,2
 13837  1439  0008               	return
 13838                           
 13839                           ;mcc_generated_files/adc.c: 155:     {;mcc_generated_files/adc.c: 156:         ADC_Inter
      +                          ruptHandler();
 13840  143A  0863               	movf	(_ADC_InterruptHandler+1)^(0+256),w
 13841  143B  008A               	movwf	10
 13842  143C  0862               	movf	_ADC_InterruptHandler^(0+256),w
 13843  143D  000A               	callw
 13844  143E  3194               	pagesel	$
 13845  143F  0008               	return
 13846  1440                     __end_of_ADC_ISR:	
 13847                           
 13848                           	psect	text74
 13849  1344                     __ptext74:	
 13850 ;; *************** function _ADC_DefaultInterruptHandler *****************
 13851 ;; Defined at:
 13852 ;;		line 164 in file "mcc_generated_files/adc.c"
 13853 ;; Parameters:    Size  Location     Type
 13854 ;;		None
 13855 ;; Auto vars:     Size  Location     Type
 13856 ;;		None
 13857 ;; Return value:  Size  Location     Type
 13858 ;;                  1    wreg      void 
 13859 ;; Registers used:
 13860 ;;		None
 13861 ;; Tracked objects:
 13862 ;;		On entry : 1F/2
 13863 ;;		On exit  : 1F/2
 13864 ;;		Unchanged: 1F/0
 13865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13870 ;;Total ram usage:        0 bytes
 13871 ;; Hardware stack levels used:    1
 13872 ;; This function calls:
 13873 ;;		Nothing
 13874 ;; This function is called by:
 13875 ;;		_ADC_Initialize
 13876 ;;		_ADC_ISR
 13877 ;; This function uses a non-reentrant model
 13878 ;;
 13879                           
 13880                           
 13881                           ;psect for function _ADC_DefaultInterruptHandler
 13882  1344                     _ADC_DefaultInterruptHandler:	
 13883                           
 13884                           ;incstack = 0
 13885                           ; Regs used in _ADC_DefaultInterruptHandler: []
 13886  1344  0008               	return
 13887  1345                     __end_of_ADC_DefaultInterruptHandler:	
 13888                           
 13889                           	psect	text75
 13890  0A49                     __ptext75:	
 13891 ;; *************** function _ADC_VoltageControlHandler_ISR *****************
 13892 ;; Defined at:
 13893 ;;		line 333 in file "vcontrol.c"
 13894 ;; Parameters:    Size  Location     Type
 13895 ;;		None
 13896 ;; Auto vars:     Size  Location     Type
 13897 ;;  pwm             4    5[BANK0 ] unsigned long 
 13898 ;;  force_inc       1    4[BANK0 ] _Bool 
 13899 ;; Return value:  Size  Location     Type
 13900 ;;                  1    wreg      void 
 13901 ;; Registers used:
 13902 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13903 ;; Tracked objects:
 13904 ;;		On entry : 1F/2
 13905 ;;		On exit  : 1F/0
 13906 ;;		Unchanged: 0/0
 13907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13909 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13910 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13911 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13912 ;;Total ram usage:        9 bytes
 13913 ;; Hardware stack levels used:    1
 13914 ;; Hardware stack levels required when called:    1
 13915 ;; This function calls:
 13916 ;;		_ADC_GetConversionResult
 13917 ;;		_LoadDutyValue
 13918 ;;		_PWM3_LoadDutyValue
 13919 ;;		___lldiv
 13920 ;;		___lmul
 13921 ;; This function is called by:
 13922 ;;		_init_chopper
 13923 ;;		_ADC_ISR
 13924 ;; This function uses a non-reentrant model
 13925 ;;
 13926                           
 13927                           
 13928                           ;psect for function _ADC_VoltageControlHandler_ISR
 13929  0A49                     _ADC_VoltageControlHandler_ISR:	
 13930                           
 13931                           ;vcontrol.c: 335:     vdc_prev = vdc;
 13932                           
 13933                           ;incstack = 0
 13934                           ; Regs used in _ADC_VoltageControlHandler_ISR: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
 13935  0A49  0020               	movlb	0	; select bank0
 13936  0A4A  083D               	movf	_vdc+1,w
 13937  0A4B  0022               	movlb	2	; select bank2
 13938  0A4C  00D9               	movwf	(_vdc_prev+1)^(0+256)
 13939  0A4D  0020               	movlb	0	; select bank0
 13940  0A4E  083C               	movf	_vdc,w
 13941  0A4F  0022               	movlb	2	; select bank2
 13942  0A50  00D8               	movwf	_vdc_prev^(0+256)
 13943                           
 13944                           ;vcontrol.c: 336:     vdc = v_table[ADC_GetConversionResult() & 0x03FF ];
 13945  0A51  3193  237D  318A   	fcall	_ADC_GetConversionResult
 13946  0A54  30FF               	movlw	255
 13947  0A55  0570               	andwf	?_ADC_GetConversionResult,w
 13948  0A56  0020               	movlb	0	; select bank0
 13949  0A57  00C4               	movwf	??_ADC_VoltageControlHandler_ISR
 13950  0A58  3003               	movlw	3
 13951  0A59  0571               	andwf	?_ADC_GetConversionResult+1,w
 13952  0A5A  00C5               	movwf	??_ADC_VoltageControlHandler_ISR+1
 13953  0A5B  35C4               	lslf	??_ADC_VoltageControlHandler_ISR,f
 13954  0A5C  0DC5               	rlf	??_ADC_VoltageControlHandler_ISR+1,f
 13955  0A5D  307F               	movlw	low (_v_table| (0+32768))
 13956  0A5E  0744               	addwf	??_ADC_VoltageControlHandler_ISR,w
 13957  0A5F  0084               	movwf	4
 13958  0A60  3080               	movlw	high (_v_table| (0+32768))
 13959  0A61  3D45               	addwfc	??_ADC_VoltageControlHandler_ISR+1,w
 13960  0A62  0085               	movwf	5
 13961  0A63  3F00               	moviw [0]fsr0
 13962  0A64  00BC               	movwf	_vdc
 13963  0A65  3F01               	moviw [1]fsr0
 13964  0A66  00BD               	movwf	_vdc+1
 13965                           
 13966                           ;vcontrol.c: 338:     if( chopper_active == 0 )
 13967  0A67  0831               	movf	_chopper_active,w
 13968  0A68  1903               	btfsc	3,2
 13969  0A69  0008               	return
 13970                           
 13971                           ;vcontrol.c: 341:     diff_vdc = vdc - vdc_prev;
 13972  0A6A  0022               	movlb	2	; select bank2
 13973  0A6B  0858               	movf	_vdc_prev^(0+256),w
 13974  0A6C  0020               	movlb	0	; select bank0
 13975  0A6D  023C               	subwf	_vdc,w
 13976  0A6E  0022               	movlb	2	; select bank2
 13977  0A6F  00DA               	movwf	_diff_vdc^(0+256)
 13978  0A70  0859               	movf	(_vdc_prev+1)^(0+256),w
 13979  0A71  0020               	movlb	0	; select bank0
 13980  0A72  3B3D               	subwfb	_vdc+1,w
 13981  0A73  0022               	movlb	2	; select bank2
 13982  0A74  00DB               	movwf	(_diff_vdc+1)^(0+256)
 13983                           
 13984                           ;vcontrol.c: 342:     if( vdc > vdc_prev )
 13985  0A75  0020               	movlb	0	; select bank0
 13986  0A76  083D               	movf	_vdc+1,w
 13987  0A77  0022               	movlb	2	; select bank2
 13988  0A78  0259               	subwf	(_vdc_prev+1)^(0+256),w
 13989  0A79  1D03               	skipz
 13990  0A7A  2A7F               	goto	u177_25
 13991  0A7B  0020               	movlb	0	; select bank0
 13992  0A7C  083C               	movf	_vdc,w
 13993  0A7D  0022               	movlb	2	; select bank2
 13994  0A7E  0258               	subwf	_vdc_prev^(0+256),w
 13995  0A7F                     u177_25:	
 13996  0A7F  1803               	skipnc
 13997  0A80  2A85               	goto	i1l3338
 13998                           
 13999                           ;vcontrol.c: 343:         diff_positive = 1;
 14000  0A81  0020               	movlb	0	; select bank0
 14001  0A82  01B2               	clrf	_diff_positive
 14002  0A83  0AB2               	incf	_diff_positive,f
 14003  0A84  2A87               	goto	i1l3340
 14004  0A85                     i1l3338:	
 14005                           
 14006                           ;vcontrol.c: 345:         diff_positive = 0;
 14007  0A85  0020               	movlb	0	; select bank0
 14008  0A86  01B2               	clrf	_diff_positive
 14009  0A87                     i1l3340:	
 14010                           
 14011                           ;vcontrol.c: 347:     if( vdc > vdc_critic )
 14012  0A87  083D               	movf	_vdc+1,w
 14013  0A88  023F               	subwf	_vdc_critic+1,w
 14014  0A89  1D03               	skipz
 14015  0A8A  2A8D               	goto	u178_25
 14016  0A8B  083C               	movf	_vdc,w
 14017  0A8C  023E               	subwf	_vdc_critic,w
 14018  0A8D                     u178_25:	
 14019  0A8D  1803               	skipnc
 14020  0A8E  2AA8               	goto	i1l3350
 14021                           
 14022                           ;vcontrol.c: 348:     {;vcontrol.c: 349:         do { LATAbits.LATA4 = 1; } while(0);
 14023  0A8F  0022               	movlb	2	; select bank2
 14024  0A90  160C               	bsf	12,4	;volatile
 14025                           
 14026                           ;vcontrol.c: 350:         do { LATAbits.LATA5 = 0; } while(0);
 14027  0A91  128C               	bcf	12,5	;volatile
 14028                           
 14029                           ;vcontrol.c: 351:         PWM3_LoadDutyValue(759);
 14030  0A92  30F7               	movlw	247
 14031  0A93  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
 14032  0A94  3002               	movlw	2
 14033  0A95  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 14034  0A96  3194  24C9  318A   	fcall	_PWM3_LoadDutyValue
 14035                           
 14036                           ;vcontrol.c: 352:         current_duty = 759;
 14037  0A99  30F7               	movlw	247
 14038  0A9A  0020               	movlb	0	; select bank0
 14039  0A9B  00A2               	movwf	_current_duty
 14040  0A9C  3002               	movlw	2
 14041  0A9D  00A3               	movwf	_current_duty+1
 14042                           
 14043                           ;vcontrol.c: 353:         target_duty = 759;
 14044  0A9E  30F7               	movlw	247
 14045  0A9F  00A4               	movwf	_target_duty
 14046  0AA0  3002               	movlw	2
 14047  0AA1  00A5               	movwf	_target_duty+1
 14048  0AA2                     i1l3348:	
 14049                           
 14050                           ;vcontrol.c: 354:         pwm_duty = 759;
 14051  0AA2  30F7               	movlw	247
 14052  0AA3  0020               	movlb	0	; select bank0
 14053  0AA4  00A6               	movwf	_pwm_duty
 14054  0AA5  3002               	movlw	2
 14055  0AA6  00A7               	movwf	_pwm_duty+1
 14056                           
 14057                           ;vcontrol.c: 355:     }
 14058  0AA7  2B7A               	goto	i1l3400
 14059  0AA8                     i1l3350:	
 14060                           
 14061                           ;vcontrol.c: 357:     {;vcontrol.c: 358:         if( vdc >= vdc_max )
 14062  0AA8  0841               	movf	_vdc_max+1,w
 14063  0AA9  023D               	subwf	_vdc+1,w
 14064  0AAA  1D03               	skipz
 14065  0AAB  2AAE               	goto	u179_25
 14066  0AAC  0840               	movf	_vdc_max,w
 14067  0AAD  023C               	subwf	_vdc,w
 14068  0AAE                     u179_25:	
 14069  0AAE  1C03               	skipc
 14070  0AAF  2AB4               	goto	i1l3354
 14071                           
 14072                           ;vcontrol.c: 359:         {;vcontrol.c: 361:             do { LATAbits.LATA4 = 1; } whil
      +                          e(0);
 14073  0AB0  0022               	movlb	2	; select bank2
 14074  0AB1  160C               	bsf	12,4	;volatile
 14075                           
 14076                           ;vcontrol.c: 362:             do { LATAbits.LATA5 = 0; } while(0);
 14077  0AB2  128C               	bcf	12,5	;volatile
 14078  0AB3  2AA2               	goto	i1l3348
 14079  0AB4                     i1l3354:	
 14080                           
 14081                           ;vcontrol.c: 366:         {;vcontrol.c: 367:             if( vdc >= vdc_min )
 14082  0AB4  0843               	movf	_vdc_min+1,w
 14083  0AB5  023D               	subwf	_vdc+1,w
 14084  0AB6  1D03               	skipz
 14085  0AB7  2ABA               	goto	u180_25
 14086  0AB8  0842               	movf	_vdc_min,w
 14087  0AB9  023C               	subwf	_vdc,w
 14088  0ABA                     u180_25:	
 14089  0ABA  1C03               	skipc
 14090  0ABB  2B51               	goto	i1l871
 14091                           
 14092                           ;vcontrol.c: 368:             {;vcontrol.c: 369:                 do { LATAbits.LATA4 = 1
      +                          ; } while(0);
 14093  0ABC  0022               	movlb	2	; select bank2
 14094  0ABD  160C               	bsf	12,4	;volatile
 14095                           
 14096                           ;vcontrol.c: 370:                 do { LATAbits.LATA5 = 1; } while(0);
 14097  0ABE  168C               	bsf	12,5	;volatile
 14098                           
 14099                           ;vcontrol.c: 371:                 _Bool force_inc = 1;
 14100  0ABF  0020               	movlb	0	; select bank0
 14101  0AC0  01C8               	clrf	ADC_VoltageControlHandler_ISR@force_inc
 14102  0AC1  0AC8               	incf	ADC_VoltageControlHandler_ISR@force_inc,f
 14103                           
 14104                           ;vcontrol.c: 372:                 if( diff_positive == 1 )
 14105  0AC2  0332               	decf	_diff_positive,w
 14106  0AC3  1D03               	btfss	3,2
 14107  0AC4  2B27               	goto	i1l3372
 14108                           
 14109                           ;vcontrol.c: 373:                 {;vcontrol.c: 374:                     uint32_t pwm = 
      +                          (uint32_t)759 * (uint32_t)(vdc - vdc_min);
 14110  0AC5  0842               	movf	_vdc_min,w
 14111  0AC6  023C               	subwf	_vdc,w
 14112  0AC7  00F0               	movwf	___lmul@multiplier
 14113  0AC8  0843               	movf	_vdc_min+1,w
 14114  0AC9  3B3D               	subwfb	_vdc+1,w
 14115  0ACA  00F1               	movwf	___lmul@multiplier+1
 14116  0ACB  01F2               	clrf	___lmul@multiplier+2
 14117  0ACC  01F3               	clrf	___lmul@multiplier+3
 14118  0ACD  3000               	movlw	0
 14119  0ACE  00F7               	movwf	___lmul@multiplicand+3
 14120  0ACF  3000               	movlw	0
 14121  0AD0  00F6               	movwf	___lmul@multiplicand+2
 14122  0AD1  3002               	movlw	2
 14123  0AD2  00F5               	movwf	___lmul@multiplicand+1
 14124  0AD3  30F7               	movlw	247
 14125  0AD4  00F4               	movwf	___lmul@multiplicand
 14126  0AD5  3196  26BF  318A   	fcall	___lmul
 14127  0AD8  0873               	movf	?___lmul+3,w
 14128  0AD9  00CC               	movwf	ADC_VoltageControlHandler_ISR@pwm+3
 14129  0ADA  0872               	movf	?___lmul+2,w
 14130  0ADB  00CB               	movwf	ADC_VoltageControlHandler_ISR@pwm+2
 14131  0ADC  0871               	movf	?___lmul+1,w
 14132  0ADD  00CA               	movwf	ADC_VoltageControlHandler_ISR@pwm+1
 14133  0ADE  0870               	movf	?___lmul,w
 14134  0ADF  00C9               	movwf	ADC_VoltageControlHandler_ISR@pwm
 14135                           
 14136                           ;vcontrol.c: 375:                     pwm /= (vdc_max - vdc_min);
 14137  0AE0  0842               	movf	_vdc_min,w
 14138  0AE1  0240               	subwf	_vdc_max,w
 14139  0AE2  00F0               	movwf	___lldiv@divisor
 14140  0AE3  0843               	movf	_vdc_min+1,w
 14141  0AE4  3B41               	subwfb	_vdc_max+1,w
 14142  0AE5  00F1               	movwf	___lldiv@divisor+1
 14143  0AE6  01F2               	clrf	___lldiv@divisor+2
 14144  0AE7  01F3               	clrf	___lldiv@divisor+3
 14145  0AE8  084C               	movf	ADC_VoltageControlHandler_ISR@pwm+3,w
 14146  0AE9  00F7               	movwf	___lldiv@dividend+3
 14147  0AEA  084B               	movf	ADC_VoltageControlHandler_ISR@pwm+2,w
 14148  0AEB  00F6               	movwf	___lldiv@dividend+2
 14149  0AEC  084A               	movf	ADC_VoltageControlHandler_ISR@pwm+1,w
 14150  0AED  00F5               	movwf	___lldiv@dividend+1
 14151  0AEE  0849               	movf	ADC_VoltageControlHandler_ISR@pwm,w
 14152  0AEF  00F4               	movwf	___lldiv@dividend
 14153  0AF0  3188  20D8  318A   	fcall	___lldiv
 14154  0AF3  0873               	movf	?___lldiv+3,w
 14155  0AF4  00CC               	movwf	ADC_VoltageControlHandler_ISR@pwm+3
 14156  0AF5  0872               	movf	?___lldiv+2,w
 14157  0AF6  00CB               	movwf	ADC_VoltageControlHandler_ISR@pwm+2
 14158  0AF7  0871               	movf	?___lldiv+1,w
 14159  0AF8  00CA               	movwf	ADC_VoltageControlHandler_ISR@pwm+1
 14160  0AF9  0870               	movf	?___lldiv,w
 14161  0AFA  00C9               	movwf	ADC_VoltageControlHandler_ISR@pwm
 14162                           
 14163                           ;vcontrol.c: 376:                     if( pwm > 759 )
 14164  0AFB  084C               	movf	ADC_VoltageControlHandler_ISR@pwm+3,w
 14165  0AFC  1D03               	btfss	3,2
 14166  0AFD  2B07               	goto	i1l3362
 14167  0AFE  084B               	movf	ADC_VoltageControlHandler_ISR@pwm+2,w
 14168  0AFF  1D03               	btfss	3,2
 14169  0B00  2B07               	goto	i1l3362
 14170  0B01  30F8               	movlw	248
 14171  0B02  0249               	subwf	ADC_VoltageControlHandler_ISR@pwm,w
 14172  0B03  3002               	movlw	2
 14173  0B04  3B4A               	subwfb	ADC_VoltageControlHandler_ISR@pwm+1,w
 14174  0B05  1C03               	btfss	3,0
 14175  0B06  2B0C               	goto	i1l3366
 14176  0B07                     i1l3362:	
 14177                           
 14178                           ;vcontrol.c: 377:                     {;vcontrol.c: 378:                         pwm_dut
      +                          y = 759;
 14179  0B07  30F7               	movlw	247
 14180  0B08  00A6               	movwf	_pwm_duty
 14181  0B09  3002               	movlw	2
 14182  0B0A  00A7               	movwf	_pwm_duty+1
 14183                           
 14184                           ;vcontrol.c: 380:                     }
 14185  0B0B  2B26               	goto	i1l3364
 14186  0B0C                     i1l3366:	
 14187                           
 14188                           ;vcontrol.c: 382:                     {;vcontrol.c: 383:                         if( pwm
      +                          _duty < pwm )
 14189  0B0C  0826               	movf	_pwm_duty,w
 14190  0B0D  00C4               	movwf	??_ADC_VoltageControlHandler_ISR
 14191  0B0E  0827               	movf	_pwm_duty+1,w
 14192  0B0F  00C5               	movwf	??_ADC_VoltageControlHandler_ISR+1
 14193  0B10  01C6               	clrf	??_ADC_VoltageControlHandler_ISR+2
 14194  0B11  01C7               	clrf	??_ADC_VoltageControlHandler_ISR+3
 14195  0B12  084C               	movf	ADC_VoltageControlHandler_ISR@pwm+3,w
 14196  0B13  0247               	subwf	??_ADC_VoltageControlHandler_ISR+3,w
 14197  0B14  1D03               	skipz
 14198  0B15  2B20               	goto	u183_25
 14199  0B16  084B               	movf	ADC_VoltageControlHandler_ISR@pwm+2,w
 14200  0B17  0246               	subwf	??_ADC_VoltageControlHandler_ISR+2,w
 14201  0B18  1D03               	skipz
 14202  0B19  2B20               	goto	u183_25
 14203  0B1A  084A               	movf	ADC_VoltageControlHandler_ISR@pwm+1,w
 14204  0B1B  0245               	subwf	??_ADC_VoltageControlHandler_ISR+1,w
 14205  0B1C  1D03               	skipz
 14206  0B1D  2B20               	goto	u183_25
 14207  0B1E  0849               	movf	ADC_VoltageControlHandler_ISR@pwm,w
 14208  0B1F  0244               	subwf	??_ADC_VoltageControlHandler_ISR,w
 14209  0B20                     u183_25:	
 14210  0B20  1803               	skipnc
 14211  0B21  2B27               	goto	i1l3372
 14212                           
 14213                           ;vcontrol.c: 384:                         {;vcontrol.c: 385:                            
      +                           pwm_duty = pwm;
 14214  0B22  084A               	movf	ADC_VoltageControlHandler_ISR@pwm+1,w
 14215  0B23  00A7               	movwf	_pwm_duty+1
 14216  0B24  0849               	movf	ADC_VoltageControlHandler_ISR@pwm,w
 14217  0B25  00A6               	movwf	_pwm_duty
 14218  0B26                     i1l3364:	
 14219                           
 14220                           ;vcontrol.c: 379:                         force_inc = 0;
 14221  0B26  01C8               	clrf	ADC_VoltageControlHandler_ISR@force_inc
 14222  0B27                     i1l3372:	
 14223                           
 14224                           ;vcontrol.c: 390:                 if( force_inc == 1 )
 14225  0B27  0348               	decf	ADC_VoltageControlHandler_ISR@force_inc,w
 14226  0B28  1D03               	btfss	3,2
 14227  0B29  2B4D               	goto	i1l3386
 14228                           
 14229                           ;vcontrol.c: 391:                 {;vcontrol.c: 392:                     if( duty_count_
      +                          up >= duty_count_up_max )
 14230  0B2A  0021               	movlb	1	; select bank1
 14231  0B2B  086D               	movf	(_duty_count_up_max+1)^(0+128),w
 14232  0B2C  0022               	movlb	2	; select bank2
 14233  0B2D  0255               	subwf	(_duty_count_up+1)^(0+256),w
 14234  0B2E  1D03               	skipz
 14235  0B2F  2B34               	goto	u185_25
 14236  0B30  0021               	movlb	1	; select bank1
 14237  0B31  086C               	movf	_duty_count_up_max^(0+128),w
 14238  0B32  0022               	movlb	2	; select bank2
 14239  0B33  0254               	subwf	_duty_count_up^(0+256),w
 14240  0B34                     u185_25:	
 14241  0B34  1C03               	skipc
 14242  0B35  2B49               	goto	i1l3384
 14243                           
 14244                           ;vcontrol.c: 393:                     {;vcontrol.c: 394:                         duty_co
      +                          unt_up = 0;
 14245  0B36  01D4               	clrf	_duty_count_up^(0+256)
 14246  0B37  01D5               	clrf	(_duty_count_up+1)^(0+256)
 14247                           
 14248                           ;vcontrol.c: 395:                         pwm_duty += duty_pwm_inc;
 14249  0B38  3008               	movlw	8
 14250  0B39  0020               	movlb	0	; select bank0
 14251  0B3A  07A6               	addwf	_pwm_duty,f
 14252  0B3B  3000               	movlw	0
 14253  0B3C  3DA7               	addwfc	_pwm_duty+1,f
 14254                           
 14255                           ;vcontrol.c: 396:                         if( pwm_duty > 759 )
 14256  0B3D  3002               	movlw	2
 14257  0B3E  0227               	subwf	_pwm_duty+1,w
 14258  0B3F  30F8               	movlw	248
 14259  0B40  1903               	skipnz
 14260  0B41  0226               	subwf	_pwm_duty,w
 14261  0B42  1C03               	skipc
 14262  0B43  2B4D               	goto	i1l3386
 14263                           
 14264                           ;vcontrol.c: 397:                             pwm_duty = 759;
 14265  0B44  30F7               	movlw	247
 14266  0B45  00A6               	movwf	_pwm_duty
 14267  0B46  3002               	movlw	2
 14268  0B47  00A7               	movwf	_pwm_duty+1
 14269  0B48  2B4D               	goto	i1l3386
 14270  0B49                     i1l3384:	
 14271                           
 14272                           ;vcontrol.c: 400:                         duty_count_up++;
 14273  0B49  3001               	movlw	1
 14274  0B4A  07D4               	addwf	_duty_count_up^(0+256),f
 14275  0B4B  3000               	movlw	0
 14276  0B4C  3DD5               	addwfc	(_duty_count_up+1)^(0+256),f
 14277  0B4D                     i1l3386:	
 14278                           
 14279                           ;vcontrol.c: 402:                 duty_count_down = 0;
 14280  0B4D  0022               	movlb	2	; select bank2
 14281  0B4E  01D2               	clrf	_duty_count_down^(0+256)
 14282  0B4F  01D3               	clrf	(_duty_count_down+1)^(0+256)
 14283                           
 14284                           ;vcontrol.c: 403:             }
 14285  0B50  2B7A               	goto	i1l3400
 14286  0B51                     i1l871:	
 14287                           ;vcontrol.c: 405:             {;vcontrol.c: 406:                 do { LATAbits.LATA4 = 0
      +                          ; } while(0);
 14288                           
 14289  0B51  0022               	movlb	2	; select bank2
 14290  0B52  120C               	bcf	12,4	;volatile
 14291                           
 14292                           ;vcontrol.c: 407:                 do { LATAbits.LATA5 = 1; } while(0);
 14293  0B53  168C               	bsf	12,5	;volatile
 14294                           
 14295                           ;vcontrol.c: 408:                 if( duty_count_down >= duty_count_down_max )
 14296  0B54  086D               	movf	(_duty_count_down_max+1)^(0+256),w
 14297  0B55  0253               	subwf	(_duty_count_down+1)^(0+256),w
 14298  0B56  1D03               	skipz
 14299  0B57  2B5A               	goto	u187_25
 14300  0B58  086C               	movf	_duty_count_down_max^(0+256),w
 14301  0B59  0252               	subwf	_duty_count_down^(0+256),w
 14302  0B5A                     u187_25:	
 14303  0B5A  1C03               	skipc
 14304  0B5B  2B76               	goto	i1l3398
 14305                           
 14306                           ;vcontrol.c: 409:                 {;vcontrol.c: 410:                     duty_count_down
      +                           = 0;
 14307  0B5C  01D2               	clrf	_duty_count_down^(0+256)
 14308  0B5D  01D3               	clrf	(_duty_count_down+1)^(0+256)
 14309                           
 14310                           ;vcontrol.c: 411:                     if( pwm_duty > duty_pwm_dec )
 14311  0B5E  0020               	movlb	0	; select bank0
 14312  0B5F  0827               	movf	_pwm_duty+1,w
 14313  0B60  0022               	movlb	2	; select bank2
 14314  0B61  026F               	subwf	(_duty_pwm_dec+1)^(0+256),w
 14315  0B62  1D03               	skipz
 14316  0B63  2B68               	goto	u188_25
 14317  0B64  0020               	movlb	0	; select bank0
 14318  0B65  0826               	movf	_pwm_duty,w
 14319  0B66  0022               	movlb	2	; select bank2
 14320  0B67  026E               	subwf	_duty_pwm_dec^(0+256),w
 14321  0B68                     u188_25:	
 14322  0B68  1803               	skipnc
 14323  0B69  2B72               	goto	i1l3396
 14324                           
 14325                           ;vcontrol.c: 412:                         pwm_duty -= duty_pwm_dec;
 14326  0B6A  086E               	movf	_duty_pwm_dec^(0+256),w
 14327  0B6B  0020               	movlb	0	; select bank0
 14328  0B6C  02A6               	subwf	_pwm_duty,f
 14329  0B6D  0022               	movlb	2	; select bank2
 14330  0B6E  086F               	movf	(_duty_pwm_dec+1)^(0+256),w
 14331  0B6F  0020               	movlb	0	; select bank0
 14332  0B70  3BA7               	subwfb	_pwm_duty+1,f
 14333  0B71  2B7A               	goto	i1l3400
 14334  0B72                     i1l3396:	
 14335                           
 14336                           ;vcontrol.c: 414:                         pwm_duty = 0;
 14337  0B72  0020               	movlb	0	; select bank0
 14338  0B73  01A6               	clrf	_pwm_duty
 14339  0B74  01A7               	clrf	_pwm_duty+1
 14340  0B75  2B7A               	goto	i1l3400
 14341  0B76                     i1l3398:	
 14342                           
 14343                           ;vcontrol.c: 417:                     duty_count_down++;
 14344  0B76  3001               	movlw	1
 14345  0B77  07D2               	addwf	_duty_count_down^(0+256),f
 14346  0B78  3000               	movlw	0
 14347  0B79  3DD3               	addwfc	(_duty_count_down+1)^(0+256),f
 14348  0B7A                     i1l3400:	
 14349                           
 14350                           ;vcontrol.c: 423:     LoadDutyValue( pwm_duty );
 14351  0B7A  0020               	movlb	0	; select bank0
 14352  0B7B  0827               	movf	_pwm_duty+1,w
 14353  0B7C  00F1               	movwf	LoadDutyValue@duty+1
 14354  0B7D  0826               	movf	_pwm_duty,w
 14355  0B7E  00F0               	movwf	LoadDutyValue@duty
 14356  0B7F  3193  236E         	fcall	_LoadDutyValue
 14357  0B81  0008               	return
 14358  0B82                     __end_of_ADC_VoltageControlHandler_ISR:	
 14359                           
 14360                           	psect	text76
 14361  16BF                     __ptext76:	
 14362 ;; *************** function ___lmul *****************
 14363 ;; Defined at:
 14364 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 14365 ;; Parameters:    Size  Location     Type
 14366 ;;  multiplier      4    0[COMMON] unsigned long 
 14367 ;;  multiplicand    4    4[COMMON] unsigned long 
 14368 ;; Auto vars:     Size  Location     Type
 14369 ;;  product         4    8[COMMON] unsigned long 
 14370 ;; Return value:  Size  Location     Type
 14371 ;;                  4    0[COMMON] unsigned long 
 14372 ;; Registers used:
 14373 ;;		wreg, status,2, status,0
 14374 ;; Tracked objects:
 14375 ;;		On entry : 1F/0
 14376 ;;		On exit  : 1F/0
 14377 ;;		Unchanged: 1F/0
 14378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14379 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14380 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14382 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14383 ;;Total ram usage:       12 bytes
 14384 ;; Hardware stack levels used:    1
 14385 ;; This function calls:
 14386 ;;		Nothing
 14387 ;; This function is called by:
 14388 ;;		_ADC_VoltageControlHandler_ISR
 14389 ;; This function uses a non-reentrant model
 14390 ;;
 14391                           
 14392                           
 14393                           ;psect for function ___lmul
 14394  16BF                     ___lmul:	
 14395                           
 14396                           ;incstack = 0
 14397                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 14398  16BF  3000               	movlw	0
 14399  16C0  00FB               	movwf	___lmul@product+3
 14400  16C1  3000               	movlw	0
 14401  16C2  00FA               	movwf	___lmul@product+2
 14402  16C3  3000               	movlw	0
 14403  16C4  00F9               	movwf	___lmul@product+1
 14404  16C5  3000               	movlw	0
 14405  16C6  00F8               	movwf	___lmul@product
 14406  16C7                     i1l3004:	
 14407  16C7  1C70               	btfss	___lmul@multiplier,0
 14408  16C8  2ED1               	goto	i1l3008
 14409  16C9  0874               	movf	___lmul@multiplicand,w
 14410  16CA  07F8               	addwf	___lmul@product,f
 14411  16CB  0875               	movf	___lmul@multiplicand+1,w
 14412  16CC  3DF9               	addwfc	___lmul@product+1,f
 14413  16CD  0876               	movf	___lmul@multiplicand+2,w
 14414  16CE  3DFA               	addwfc	___lmul@product+2,f
 14415  16CF  0877               	movf	___lmul@multiplicand+3,w
 14416  16D0  3DFB               	addwfc	___lmul@product+3,f
 14417  16D1                     i1l3008:	
 14418  16D1  3001               	movlw	1
 14419  16D2                     u150_25:	
 14420  16D2  35F4               	lslf	___lmul@multiplicand,f
 14421  16D3  0DF5               	rlf	___lmul@multiplicand+1,f
 14422  16D4  0DF6               	rlf	___lmul@multiplicand+2,f
 14423  16D5  0DF7               	rlf	___lmul@multiplicand+3,f
 14424  16D6  0B89               	decfsz	9,f
 14425  16D7  2ED2               	goto	u150_25
 14426  16D8  3001               	movlw	1
 14427  16D9                     u151_25:	
 14428  16D9  36F3               	lsrf	___lmul@multiplier+3,f
 14429  16DA  0CF2               	rrf	___lmul@multiplier+2,f
 14430  16DB  0CF1               	rrf	___lmul@multiplier+1,f
 14431  16DC  0CF0               	rrf	___lmul@multiplier,f
 14432  16DD  0B89               	decfsz	9,f
 14433  16DE  2ED9               	goto	u151_25
 14434  16DF  0873               	movf	___lmul@multiplier+3,w
 14435  16E0  0472               	iorwf	___lmul@multiplier+2,w
 14436  16E1  0471               	iorwf	___lmul@multiplier+1,w
 14437  16E2  0470               	iorwf	___lmul@multiplier,w
 14438  16E3  1D03               	skipz
 14439  16E4  2EC7               	goto	i1l3004
 14440  16E5  087B               	movf	___lmul@product+3,w
 14441  16E6  00F3               	movwf	?___lmul+3
 14442  16E7  087A               	movf	___lmul@product+2,w
 14443  16E8  00F2               	movwf	?___lmul+2
 14444  16E9  0879               	movf	___lmul@product+1,w
 14445  16EA  00F1               	movwf	?___lmul+1
 14446  16EB  0878               	movf	___lmul@product,w
 14447  16EC  00F0               	movwf	?___lmul
 14448  16ED  0008               	return
 14449  16EE                     __end_of___lmul:	
 14450                           
 14451                           	psect	text77
 14452  08D8                     __ptext77:	
 14453 ;; *************** function ___lldiv *****************
 14454 ;; Defined at:
 14455 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 14456 ;; Parameters:    Size  Location     Type
 14457 ;;  divisor         4    0[COMMON] unsigned long 
 14458 ;;  dividend        4    4[COMMON] unsigned long 
 14459 ;; Auto vars:     Size  Location     Type
 14460 ;;  quotient        4    9[COMMON] unsigned long 
 14461 ;;  counter         1   13[COMMON] unsigned char 
 14462 ;; Return value:  Size  Location     Type
 14463 ;;                  4    0[COMMON] unsigned long 
 14464 ;; Registers used:
 14465 ;;		wreg, status,2, status,0
 14466 ;; Tracked objects:
 14467 ;;		On entry : 1F/0
 14468 ;;		On exit  : 1F/0
 14469 ;;		Unchanged: 1F/0
 14470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14471 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14472 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14473 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14474 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14475 ;;Total ram usage:       14 bytes
 14476 ;; Hardware stack levels used:    1
 14477 ;; This function calls:
 14478 ;;		Nothing
 14479 ;; This function is called by:
 14480 ;;		_ADC_VoltageControlHandler_ISR
 14481 ;; This function uses a non-reentrant model
 14482 ;;
 14483                           
 14484                           
 14485                           ;psect for function ___lldiv
 14486  08D8                     ___lldiv:	
 14487                           
 14488                           ;incstack = 0
 14489                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 14490  08D8  3000               	movlw	0
 14491  08D9  00FC               	movwf	___lldiv@quotient+3
 14492  08DA  3000               	movlw	0
 14493  08DB  00FB               	movwf	___lldiv@quotient+2
 14494  08DC  3000               	movlw	0
 14495  08DD  00FA               	movwf	___lldiv@quotient+1
 14496  08DE  3000               	movlw	0
 14497  08DF  00F9               	movwf	___lldiv@quotient
 14498  08E0  0873               	movf	___lldiv@divisor+3,w
 14499  08E1  0472               	iorwf	___lldiv@divisor+2,w
 14500  08E2  0471               	iorwf	___lldiv@divisor+1,w
 14501  08E3  0470               	iorwf	___lldiv@divisor,w
 14502  08E4  1903               	skipnz
 14503  08E5  2921               	goto	i1l3036
 14504  08E6  01FD               	clrf	___lldiv@counter
 14505  08E7  0AFD               	incf	___lldiv@counter,f
 14506  08E8                     i1l3022:	
 14507  08E8  1BF3               	btfsc	___lldiv@divisor+3,7
 14508  08E9  28F6               	goto	i1l3024
 14509  08EA  3001               	movlw	1
 14510  08EB                     u154_25:	
 14511  08EB  35F0               	lslf	___lldiv@divisor,f
 14512  08EC  0DF1               	rlf	___lldiv@divisor+1,f
 14513  08ED  0DF2               	rlf	___lldiv@divisor+2,f
 14514  08EE  0DF3               	rlf	___lldiv@divisor+3,f
 14515  08EF  0B89               	decfsz	9,f
 14516  08F0  28EB               	goto	u154_25
 14517  08F1  3001               	movlw	1
 14518  08F2  00F8               	movwf	??___lldiv
 14519  08F3  0878               	movf	??___lldiv,w
 14520  08F4  07FD               	addwf	___lldiv@counter,f
 14521  08F5  28E8               	goto	i1l3022
 14522  08F6                     i1l3024:	
 14523  08F6  3001               	movlw	1
 14524  08F7                     u156_25:	
 14525  08F7  35F9               	lslf	___lldiv@quotient,f
 14526  08F8  0DFA               	rlf	___lldiv@quotient+1,f
 14527  08F9  0DFB               	rlf	___lldiv@quotient+2,f
 14528  08FA  0DFC               	rlf	___lldiv@quotient+3,f
 14529  08FB  0B89               	decfsz	9,f
 14530  08FC  28F7               	goto	u156_25
 14531  08FD  0873               	movf	___lldiv@divisor+3,w
 14532  08FE  0277               	subwf	___lldiv@dividend+3,w
 14533  08FF  1D03               	skipz
 14534  0900  290B               	goto	u157_25
 14535  0901  0872               	movf	___lldiv@divisor+2,w
 14536  0902  0276               	subwf	___lldiv@dividend+2,w
 14537  0903  1D03               	skipz
 14538  0904  290B               	goto	u157_25
 14539  0905  0871               	movf	___lldiv@divisor+1,w
 14540  0906  0275               	subwf	___lldiv@dividend+1,w
 14541  0907  1D03               	skipz
 14542  0908  290B               	goto	u157_25
 14543  0909  0870               	movf	___lldiv@divisor,w
 14544  090A  0274               	subwf	___lldiv@dividend,w
 14545  090B                     u157_25:	
 14546  090B  1C03               	skipc
 14547  090C  2916               	goto	i1l3032
 14548  090D  0870               	movf	___lldiv@divisor,w
 14549  090E  02F4               	subwf	___lldiv@dividend,f
 14550  090F  0871               	movf	___lldiv@divisor+1,w
 14551  0910  3BF5               	subwfb	___lldiv@dividend+1,f
 14552  0911  0872               	movf	___lldiv@divisor+2,w
 14553  0912  3BF6               	subwfb	___lldiv@dividend+2,f
 14554  0913  0873               	movf	___lldiv@divisor+3,w
 14555  0914  3BF7               	subwfb	___lldiv@dividend+3,f
 14556  0915  1479               	bsf	___lldiv@quotient,0
 14557  0916                     i1l3032:	
 14558  0916  3001               	movlw	1
 14559  0917                     u158_25:	
 14560  0917  36F3               	lsrf	___lldiv@divisor+3,f
 14561  0918  0CF2               	rrf	___lldiv@divisor+2,f
 14562  0919  0CF1               	rrf	___lldiv@divisor+1,f
 14563  091A  0CF0               	rrf	___lldiv@divisor,f
 14564  091B  0B89               	decfsz	9,f
 14565  091C  2917               	goto	u158_25
 14566  091D  3001               	movlw	1
 14567  091E  02FD               	subwf	___lldiv@counter,f
 14568  091F  1D03               	btfss	3,2
 14569  0920  28F6               	goto	i1l3024
 14570  0921                     i1l3036:	
 14571  0921  087C               	movf	___lldiv@quotient+3,w
 14572  0922  00F3               	movwf	?___lldiv+3
 14573  0923  087B               	movf	___lldiv@quotient+2,w
 14574  0924  00F2               	movwf	?___lldiv+2
 14575  0925  087A               	movf	___lldiv@quotient+1,w
 14576  0926  00F1               	movwf	?___lldiv+1
 14577  0927  0879               	movf	___lldiv@quotient,w
 14578  0928  00F0               	movwf	?___lldiv
 14579  0929  0008               	return
 14580  092A                     __end_of___lldiv:	
 14581                           
 14582                           	psect	text78
 14583  14C9                     __ptext78:	
 14584 ;; *************** function _PWM3_LoadDutyValue *****************
 14585 ;; Defined at:
 14586 ;;		line 74 in file "mcc_generated_files/pwm3.c"
 14587 ;; Parameters:    Size  Location     Type
 14588 ;;  dutyValue       2    0[COMMON] unsigned short 
 14589 ;; Auto vars:     Size  Location     Type
 14590 ;;		None
 14591 ;; Return value:  Size  Location     Type
 14592 ;;                  1    wreg      void 
 14593 ;; Registers used:
 14594 ;;		wreg, status,2, status,0
 14595 ;; Tracked objects:
 14596 ;;		On entry : 1D/0
 14597 ;;		On exit  : 1F/C
 14598 ;;		Unchanged: 0/0
 14599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14600 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14602 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14604 ;;Total ram usage:        4 bytes
 14605 ;; Hardware stack levels used:    1
 14606 ;; This function calls:
 14607 ;;		Nothing
 14608 ;; This function is called by:
 14609 ;;		_ADC_VoltageControlHandler_ISR
 14610 ;;		_TMR2_DutyControlHandler_ISR
 14611 ;; This function uses a non-reentrant model
 14612 ;;
 14613                           
 14614                           
 14615                           ;psect for function _PWM3_LoadDutyValue
 14616  14C9                     _PWM3_LoadDutyValue:	
 14617                           
 14618                           ;mcc_generated_files/pwm3.c: 74:  void PWM3_LoadDutyValue(uint16_t dutyValue);mcc_genera
      +                          ted_files/pwm3.c: 75:  {;mcc_generated_files/pwm3.c: 77:      PWM3DCH = (dutyValue & 0x0
      +                          3FC)>>2;
 14619                           
 14620                           ;incstack = 0
 14621                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
 14622  14C9  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 14623  14CA  00F3               	movwf	??_PWM3_LoadDutyValue+1
 14624  14CB  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 14625  14CC  00F2               	movwf	??_PWM3_LoadDutyValue
 14626  14CD  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 14627  14CE  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 14628  14CF  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 14629  14D0  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 14630  14D1  0872               	movf	??_PWM3_LoadDutyValue,w
 14631  14D2  002C               	movlb	12	; select bank12
 14632  14D3  0098               	movwf	24	;volatile
 14633                           
 14634                           ;mcc_generated_files/pwm3.c: 80:      PWM3DCL = (dutyValue & 0x0003)<<6;
 14635  14D4  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 14636  14D5  3903               	andlw	3
 14637  14D6  00F2               	movwf	??_PWM3_LoadDutyValue
 14638  14D7  3005               	movlw	5
 14639  14D8                     u130_25:	
 14640  14D8  35F2               	lslf	??_PWM3_LoadDutyValue,f
 14641  14D9  3EFF               	addlw	-1
 14642  14DA  1D03               	skipz
 14643  14DB  2CD8               	goto	u130_25
 14644  14DC  3572               	lslf	??_PWM3_LoadDutyValue,w
 14645  14DD  0097               	movwf	23	;volatile
 14646  14DE  0008               	return
 14647  14DF                     __end_of_PWM3_LoadDutyValue:	
 14648                           
 14649                           	psect	text79
 14650  136E                     __ptext79:	
 14651 ;; *************** function _LoadDutyValue *****************
 14652 ;; Defined at:
 14653 ;;		line 205 in file "vcontrol.c"
 14654 ;; Parameters:    Size  Location     Type
 14655 ;;  duty            2    0[COMMON] unsigned short 
 14656 ;; Auto vars:     Size  Location     Type
 14657 ;;		None
 14658 ;; Return value:  Size  Location     Type
 14659 ;;                  1    wreg      void 
 14660 ;; Registers used:
 14661 ;;		wreg
 14662 ;; Tracked objects:
 14663 ;;		On entry : 1F/0
 14664 ;;		On exit  : 1F/0
 14665 ;;		Unchanged: 0/0
 14666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14667 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14670 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14671 ;;Total ram usage:        2 bytes
 14672 ;; Hardware stack levels used:    1
 14673 ;; This function calls:
 14674 ;;		Nothing
 14675 ;; This function is called by:
 14676 ;;		_ADC_VoltageControlHandler_ISR
 14677 ;; This function uses a non-reentrant model
 14678 ;;
 14679                           
 14680                           
 14681                           ;psect for function _LoadDutyValue
 14682  136E                     _LoadDutyValue:	
 14683                           
 14684                           ;vcontrol.c: 205: static void LoadDutyValue(uint16_t duty);vcontrol.c: 206: {;vcontrol.c
      +                          : 207:     target_duty = duty;
 14685                           
 14686                           ;incstack = 0
 14687                           ; Regs used in _LoadDutyValue: [wreg]
 14688  136E  0871               	movf	LoadDutyValue@duty+1,w
 14689  136F  00A5               	movwf	_target_duty+1
 14690  1370  0870               	movf	LoadDutyValue@duty,w
 14691  1371  00A4               	movwf	_target_duty
 14692  1372  0008               	return
 14693  1373                     __end_of_LoadDutyValue:	
 14694                           
 14695                           	psect	text80
 14696  137D                     __ptext80:	
 14697 ;; *************** function _ADC_GetConversionResult *****************
 14698 ;; Defined at:
 14699 ;;		line 114 in file "mcc_generated_files/adc.c"
 14700 ;; Parameters:    Size  Location     Type
 14701 ;;		None
 14702 ;; Auto vars:     Size  Location     Type
 14703 ;;		None
 14704 ;; Return value:  Size  Location     Type
 14705 ;;                  2    0[COMMON] unsigned short 
 14706 ;; Registers used:
 14707 ;;		wreg
 14708 ;; Tracked objects:
 14709 ;;		On entry : 1F/2
 14710 ;;		On exit  : 1F/1
 14711 ;;		Unchanged: 0/0
 14712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14713 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14716 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14717 ;;Total ram usage:        2 bytes
 14718 ;; Hardware stack levels used:    1
 14719 ;; This function calls:
 14720 ;;		Nothing
 14721 ;; This function is called by:
 14722 ;;		_ADC_VoltageControlHandler_ISR
 14723 ;; This function uses a non-reentrant model
 14724 ;;
 14725                           
 14726                           
 14727                           ;psect for function _ADC_GetConversionResult
 14728  137D                     _ADC_GetConversionResult:	
 14729                           
 14730                           ;mcc_generated_files/adc.c: 117:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 14731                           
 14732                           ;incstack = 0
 14733                           ; Regs used in _ADC_GetConversionResult: [wreg]
 14734  137D  0021               	movlb	1	; select bank1
 14735  137E  081C               	movf	28,w	;volatile
 14736  137F  00F1               	movwf	?_ADC_GetConversionResult+1
 14737  1380  081B               	movf	27,w	;volatile
 14738  1381  00F0               	movwf	?_ADC_GetConversionResult
 14739  1382  0008               	return
 14740  1383                     __end_of_ADC_GetConversionResult:	
 14741  007E                     btemp	set	126	;btemp
 14742  007E                     int$flags	set	126
 14743  007E                     wtemp0	set	126


Data Sizes:
    Strings     300
    Constant    2096
    Data        9
    BSS         135
    Persistent  48
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     27      65
    BANK1            80     68      79
    BANK2            80      0      80
    BANK3            80     15      46
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    set_vdc_threshold@v_target	PTR unsigned short  size(1) Largest target is 2
		 -> vdc_critic(BANK0[2]), vdc_max(BANK0[2]), vdc_min(BANK0[2]), 

    tx_string	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_20(CODE[25]), STR_19(CODE[25]), STR_18(CODE[22]), STR_17(CODE[24]), 
		 -> STR_16(CODE[23]), STR_15(CODE[22]), STR_14(CODE[34]), STR_13(CODE[15]), 
		 -> STR_12(CODE[16]), STR_11(CODE[18]), STR_10(CODE[23]), STR_9(CODE[5]), 
		 -> STR_8(CODE[25]), STR_7(CODE[3]), STR_6(CODE[6]), STR_5(CODE[3]), 
		 -> STR_4(CODE[6]), STR_3(CODE[3]), num_buffer(BANK3[5]), STR_2(CODE[6]), 
		 -> STR_1(CODE[5]), NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_SystemTimer_ISR(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_SystemTimer_ISR(), TMR1_DefaultInterruptHandler(), Absolute function(), 

    ADC_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_VoltageControlHandler_ISR(), ADC_DefaultInterruptHandler(), 

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_VoltageControlHandler_ISR(), ADC_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DutyControlHandler_ISR(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DutyControlHandler_ISR(), Absolute function(), TMR2_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> save_to_flash@buff(BANK1[64]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_CommandHandler_ISR(), EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_CommandHandler_ISR(), Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_TMR2_DutyControlHandler_ISR
    _TMR2_DutyControlHandler_ISR->_PWM3_LoadDutyValue
    _TMR1_ISR->_TMR1_WriteTimer
    _TMR1_CallBack->_TMR1_SystemTimer_ISR
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler
    _ADC_VoltageControlHandler_ISR->___lldiv

Critical Paths under _main in BANK0

    _main->_ApplicationInit
    _main->_uart_task
    _uart_task->_save_to_flash
    _get_vdc_speed->___wmul
    _uart_start->_EUSART_SetRxInterruptHandler
    _uart_start->_TMR1_SetInterruptHandler
    _relay_watchdog_task->_get_vdc
    _relay_watchdog_record_activations_task->_save_to_flash
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _ADC_Initialize->_ADC_SetInterruptHandler
    _ApplicationInit->_save_to_flash
    _start_chopper->_init_chopper
    _init_chopper->_ADC_SelectChannel
    _init_chopper->_ADC_SetInterruptHandler
    _init_chopper->_TMR2_SetInterruptHandler
    _set_vdc_speed->___lwdiv
    _set_vdc_min->_set_vdc_threshold
    _set_vdc_max->_set_vdc_threshold
    _set_vdc_critic->_set_vdc_threshold
    _set_reset_duration->___lwdiv
    _save_to_flash->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _ADC_ISR->_ADC_VoltageControlHandler_ISR

Critical Paths under _main in BANK1

    _uart_task->_save_to_flash
    _relay_watchdog_record_activations_task->_save_to_flash
    _ApplicationInit->_save_to_flash

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_uart_task

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   22245
                    _ApplicationInit
                  _SYSTEM_Initialize
                       _init_chopper
                _init_relay_watchdog
_relay_watchdog_record_activations_t
                _relay_watchdog_task
                         _uart_start
                          _uart_task
 ---------------------------------------------------------------------------------
 (1) _uart_task                                           19    19      0    9476
                                             23 BANK0      4     4      0
                                              0 BANK3     15    15      0
       _get_relay_activation_counter
            _get_relay_reset_voltage
                 _get_reset_duration
                            _get_vdc
                     _get_vdc_critic
                        _get_vdc_max
                        _get_vdc_min
                      _get_vdc_speed
                  _is_chopper_active
                      _save_to_flash
            _set_relay_reset_voltage
                 _set_reset_duration
                     _set_vdc_critic
                        _set_vdc_max
                        _set_vdc_min
                      _set_vdc_speed
                      _start_chopper
                       _stop_chopper
 ---------------------------------------------------------------------------------
 (2) _stop_chopper                                         0     0      0       0
                _stop_relay_watchdog
 ---------------------------------------------------------------------------------
 (3) _stop_relay_watchdog                                  0     0      0       0
                        _close_relay
 ---------------------------------------------------------------------------------
 (2) _is_chopper_active                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_vdc_speed                                        2     0      2     736
                                             15 BANK0      2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     736
                                              9 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _get_vdc_min                                          2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _get_vdc_max                                          2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _get_vdc_critic                                       2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _uart_start                                           0     0      0     474
       _EUSART_SetRxInterruptHandler
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _relay_watchdog_task                                  1     1      0       0
                                             11 BANK0      1     1      0
                        _close_relay
                            _get_vdc
                         _open_relay
 ---------------------------------------------------------------------------------
 (2) _open_relay                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_vdc                                              2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _close_relay                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _relay_watchdog_record_activations_task               1     1      0    1368
                                             23 BANK0      1     1      0
                      _save_to_flash
 ---------------------------------------------------------------------------------
 (1) _init_relay_watchdog                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1190
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     211
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     237
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_SetInterruptHandler                             2     0      2     237
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     531
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _EUSART_SetRxInterruptHandler                         2     0      2     237
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0     211
            _ADC_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _ApplicationInit                                     13    13      0    9284
                                             23 BANK0      4     4      0
                                              0 BANK3      9     9      0
                     _FLASH_ReadWord
                      _save_to_flash
       _set_relay_activation_counter
            _set_relay_reset_voltage
                 _set_reset_duration
                     _set_vdc_critic
                        _set_vdc_max
                        _set_vdc_min
                      _set_vdc_speed
                      _start_chopper
 ---------------------------------------------------------------------------------
 (2) _start_chopper                                        0     0      0     453
                       _init_chopper
               _start_relay_watchdog
 ---------------------------------------------------------------------------------
 (3) _start_relay_watchdog                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_chopper                                         1     1      0     453
                                             11 BANK0      1     1      0
                  _ADC_SelectChannel
            _ADC_SetInterruptHandler
                _ADC_StartConversion
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (4) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TMR2_SetInterruptHandler                             2     0      2     211
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetInterruptHandler                              2     0      2     211
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _ADC_SelectChannel                                    2     2      0      31
                                              9 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _set_vdc_speed                                        2     0      2    1104
                                             17 BANK0      2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) _set_vdc_min                                          3     1      2     996
                                             12 BANK0      3     1      2
                  _set_vdc_threshold
 ---------------------------------------------------------------------------------
 (2) _set_vdc_max                                          3     1      2     996
                                             12 BANK0      3     1      2
                  _set_vdc_threshold
 ---------------------------------------------------------------------------------
 (2) _set_vdc_critic                                       3     1      2     996
                                             12 BANK0      3     1      2
                  _set_vdc_threshold
 ---------------------------------------------------------------------------------
 (3) _set_vdc_threshold                                    3     0      3     695
                                              9 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _set_reset_duration                                   2     0      2    1104
                                             17 BANK0      2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     741
                                              9 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _set_relay_reset_voltage                              2     0      2     363
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _set_relay_activation_counter                         4     0      4     211
                                              9 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _save_to_flash                                       69    69      0    1368
                                             22 BANK0      1     1      0
                                              0 BANK1     68    68      0
                   _FLASH_WriteBlock
       _get_relay_activation_counter
            _get_relay_reset_voltage
                 _get_reset_duration
 ---------------------------------------------------------------------------------
 (3) _get_reset_duration                                   2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _get_relay_reset_voltage                              2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _get_relay_activation_counter                         4     0      4       0
                                              9 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    10     7      3     961
                                             12 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     189
                                              9 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     979
                                              9 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0    1415
                   Absolute function *
                            _ADC_ISR
          _EUSART_CommandHandler_ISR *
                 _EUSART_Receive_ISR *
                           _TMR1_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR2_ISR                                             0     0      0     196
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR2_CallBack                                        0     0      0     196
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
        _TMR2_DutyControlHandler_ISR *
 ---------------------------------------------------------------------------------
 (8) _TMR2_DutyControlHandler_ISR                          2     2      0     196
                                              4 COMMON     2     2      0
                 _PWM3_LoadDutyValue
 ---------------------------------------------------------------------------------
 (8) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0     229
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_WriteTimer                                      2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) _TMR1_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
               _TMR1_SystemTimer_ISR *
 ---------------------------------------------------------------------------------
 (8) _TMR1_SystemTimer_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_CommandHandler_ISR                            2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _ADC_ISR                                              0     0      0     967
                   Absolute function *
        _ADC_DefaultInterruptHandler *
      _ADC_VoltageControlHandler_ISR *
 ---------------------------------------------------------------------------------
 (7) _ADC_VoltageControlHandler_ISR                        9     9      0     967
                                              0 BANK0      9     9      0
            _ADC_GetConversionResult
                      _LoadDutyValue
                 _PWM3_LoadDutyValue
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (8) ___lmul                                              12     4      8     244
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (8) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (9) _PWM3_LoadDutyValue                                   4     2      2     196
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _LoadDutyValue                                        2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) _ADC_DefaultInterruptHandler                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ApplicationInit
     _FLASH_ReadWord
     _save_to_flash
       _FLASH_WriteBlock
         _FLASH_EraseBlock
       _get_relay_activation_counter
       _get_relay_reset_voltage
       _get_reset_duration
     _set_relay_activation_counter
     _set_relay_reset_voltage
     _set_reset_duration
       ___lwdiv
     _set_vdc_critic
       _set_vdc_threshold
     _set_vdc_max
       _set_vdc_threshold
     _set_vdc_min
       _set_vdc_threshold
     _set_vdc_speed
       ___lwdiv
     _start_chopper
       _init_chopper
         _ADC_SelectChannel
         _ADC_SetInterruptHandler
         _ADC_StartConversion
         _TMR2_SetInterruptHandler
         _TMR2_StartTimer
       _start_relay_watchdog
   _SYSTEM_Initialize
     _ADC_Initialize
       _ADC_SetInterruptHandler
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _TMR4_Initialize
     _WDT_Initialize
   _init_chopper
     _ADC_SelectChannel
     _ADC_SetInterruptHandler
     _ADC_StartConversion
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
   _init_relay_watchdog
   _relay_watchdog_record_activations_task
     _save_to_flash
       _FLASH_WriteBlock
         _FLASH_EraseBlock
       _get_relay_activation_counter
       _get_relay_reset_voltage
       _get_reset_duration
   _relay_watchdog_task
     _close_relay
     _get_vdc
     _open_relay
   _uart_start
     _EUSART_SetRxInterruptHandler
     _TMR1_SetInterruptHandler
   _uart_task
     _get_relay_activation_counter
     _get_relay_reset_voltage
     _get_reset_duration
     _get_vdc
     _get_vdc_critic
     _get_vdc_max
     _get_vdc_min
     _get_vdc_speed
       ___wmul
     _is_chopper_active
     _save_to_flash
       _FLASH_WriteBlock
         _FLASH_EraseBlock
       _get_relay_activation_counter
       _get_relay_reset_voltage
       _get_reset_duration
     _set_relay_reset_voltage
     _set_reset_duration
       ___lwdiv
     _set_vdc_critic
       _set_vdc_threshold
     _set_vdc_max
       _set_vdc_threshold
     _set_vdc_min
       _set_vdc_threshold
     _set_vdc_speed
       ___lwdiv
     _start_chopper
       _init_chopper
         _ADC_SelectChannel
         _ADC_SetInterruptHandler
         _ADC_StartConversion
         _TMR2_SetInterruptHandler
         _TMR2_StartTimer
       _start_relay_watchdog
     _stop_chopper
       _stop_relay_watchdog
         _close_relay

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _ADC_ISR *
     Absolute function(Fake) *
     _ADC_DefaultInterruptHandler *
     _ADC_VoltageControlHandler_ISR *
       _ADC_GetConversionResult
       _LoadDutyValue
       _PWM3_LoadDutyValue
       ___lldiv
       ___lmul
   _EUSART_CommandHandler_ISR *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _TMR1_ISR *
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _TMR1_SystemTimer_ISR *
     _TMR1_WriteTimer
   _TMR2_ISR *
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _TMR2_DutyControlHandler_ISR *
         _PWM3_LoadDutyValue

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1B      41       5       81.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     44      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      F      2E      11       57.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     11C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     11C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Feb 25 17:30:32 2021

                                   ?_get_vdc_max 004D                                     ?_get_vdc_min 004D  
                  ?_EUSART_SetRxInterruptHandler 004D             __size_of_TMR2_DutyControlHandler_ISR 0044  
               __end_of_TMR2_SetInterruptHandler 13B1             __end_of_get_relay_activation_counter 14A6  
          __size_of_get_relay_activation_counter 0011                   ??_set_relay_activation_counter 0051  
                   _get_relay_activation_counter 1495                                      __CFG_CP$OFF 0000  
                                 ?_get_vdc_speed 0053                                               _st 00E8  
                            ___wmul@multiplicand 004F                                      __CFG_LVP$ON 0000  
                                ?_get_vdc_critic 004D                                              l988 0D9D  
                                            _PR2 001B                                              _PR4 0416  
                                _timer1ReloadVal 0160                           ??_EUSART_RxDataHandler 0070  
                                __end_of_ADC_ISR 1440                                              _vdc 003C  
                 ?_EUSART_SetFramingErrorHandler 004D                  __end_of_ADC_SetInterruptHandler 13A9  
                                _TMR2_Initialize 14B7                                    _LoadDutyValue 136E  
                                   __CFG_BORV$LO 0000                                              wreg 0009  
                                   __CFG_IESO$ON 0000           ADC_VoltageControlHandler_ISR@force_inc 0048  
                   ?_ADC_DefaultInterruptHandler 0070                   FLASH_WriteBlock@flashWordArray 0052  
                                           l1151 0C40                                             l1143 0BB4  
                                           l1232 157A                                             l1153 0C63  
                                           l1145 0BD7                                             l1147 0BFA  
                                           l1149 0C1D                                             l4014 15A1  
                                           l4060 1759                                             l4140 1539  
                                           l4222 14F0                                             l4062 1765  
                                           l4038 1574                                             l4072 1780  
                                           l4232 1700                                             l4234 1707  
                                           l4250 0BB6                                             l4180 0988  
                                           l4068 1777                                             l4316 0D06  
                                           l4332 0D2A                                             l4174 1657  
                                           l4262 0BFC                                             l4280 0C65  
                                           l4256 0BD9                                             l4424 0EA5  
                                           l4344 0D3B                                             l4290 0C82  
                                           l4274 0C42                                             l4514 0FCE  
                                           l4426 0EA8                                             l4434 0EAE  
                                           l4530 0FE6                                             l4362 0D54  
                                           l4268 0C1F                                             l4604 17D4  
                                           l4524 0FE4                                             l4428 0EAA  
                                           l4372 0D7C                                             l4364 0D6C  
                                           l4286 0C77                                             l4614 17FD  
                                           l4382 0D8E                                             l4480 0F51  
                                           l4376 0D85                                             l4632 15BA  
                                           l4298 0CA8                                             l4554 0939  
                                           l4378 0D89                                             l4580 0971  
                                           l4564 094D                                             l4548 0931  
                                           l4492 0F77                                             l3962 0A03  
                                           l3972 0A29                                             STR_1 1953  
                                   __CFG_WDTE$ON 0000                                             STR_2 193C  
                                           STR_4 1942                                             STR_6 1948  
                                           STR_8 1822                                             STR_9 194E  
                                           u3005 0CBE                                             _LATA 010C  
                                           _LATC 010E                                             u3335 0946  
                                           u2625 09F3                                             u2705 157B  
                                           u3355 095A                                             u2715 1580  
                                           u3437 1679                                             u2745 175C  
                                           u2765 1766                                             u2775 1770  
                                           u2785 1778                                             _TMR2 001A  
                                           _TMR4 0415                                             _WPUA 020C  
                                           _WPUC 020E                        set_vdc_threshold@v_target 004F  
                                   __CFG_WRT$OFF 0000                                    __CFG_FCMEN$ON 0000  
                                           _main 15A9                                             fsr0h 0005  
                                           fsr1h 0007                                             indf0 0000  
                                           fsr0l 0004                                             indf1 0001  
                                           fsr1l 0006                                             btemp 007E  
                              ?_FLASH_WriteBlock 0050                                    __CFG_BOREN$ON 0000  
                                           start 0034                               ??_FLASH_WriteBlock 0053  
                     ??_TMR1_SetInterruptHandler 004F                                    __CFG_MCLRE$ON 0000  
                          __size_of_stop_chopper 000E                    ?_get_relay_activation_counter 004D  
                 __size_of_OSCILLATOR_Initialize 0008                          __end_of_ApplicationInit 0D18  
                  __end_of_OSCILLATOR_Initialize 13D9                                            ?_main 0070  
                                          STR_10 1885                                            STR_11 190B  
                                          STR_12 191D                                            STR_20 1854  
                                          STR_13 192D                                            STR_14 1800  
                                          STR_15 18DF                                            STR_16 189C  
                                          STR_17 186D                                            STR_18 18F5  
                                          STR_19 183B                                  __end_of___lldiv 092A  
                                          _T1CON 0018                                            _T2CON 001C  
                                          _T4CON 0417                               ApplicationInit@val 01C4  
                                __end_of___lwdiv 1785                                            i1l384 0013  
                                          i1l393 0032                                            i1l386 0020  
                                          i1l388 002A                                            i1l871 0B51  
                                          i1l883 08B3                  ??_ADC_VoltageControlHandler_ISR 0044  
                                 ?_LoadDutyValue 0070                                            _TMR1H 0017  
                                          _TMR1L 0016                                            _TRISA 008C  
                                          _TRISC 008E                                   _system_counter 0030  
                                          _RXPPS 0E24                 __size_of_ADC_GetConversionResult 0006  
                                  _start_chopper 1523                                  _TMR4_Initialize 13F3  
                            ___lmul@multiplicand 0074                                   _system_minutes 00E6  
                                 _system_seconds 00E7                                 __end_of_TMR1_ISR 144C  
                                __end_of_get_vdc 1378                                 __end_of_TMR2_ISR 1366  
                                 _WDT_Initialize 1366                          __end_of_PWM3_Initialize 1459  
                        __end_of_TMR1_Initialize 1557                                  __end_of_v_table 087F  
                                          pclath 000A                                            status 0003  
                                          wtemp0 007E                                  _TMR2_StartTimer 134F  
                                   _stop_chopper 1459                                  _TMR1_WriteTimer 1467  
                                __initialization 0036              set_relay_reset_voltage@relay_vthres 004D  
               ADC_VoltageControlHandler_ISR@pwm 0049                                     __end_of_main 15C5  
                                ??_get_vdc_speed 0055                   set_reset_duration@reset_dur_ms 0055  
                    ??_EUSART_CommandHandler_ISR 0070                          __end_of_TMR2_Initialize 14C9  
                                      ??_ADC_ISR 007E                                   __CFG_LPBOR$OFF 0000  
                    ?_INTERRUPT_InterruptManager 0070                   ??_EUSART_SetRxInterruptHandler 004F  
                       _TMR2_SetInterruptHandler 13A9                                           ??_main 005F  
                                 ?_start_chopper 0070                          __size_of_FLASH_ReadWord 001F  
                                 __CFG_PLLEN$OFF 0000                                  set_vdc_max@vmax 0050  
                                set_vdc_min@vmin 0050                           __end_of_WDT_Initialize 136A  
                            _stop_relay_watchdog 1395        __end_of_EUSART_DefaultFramingErrorHandler 1346  
     __size_of_EUSART_DefaultFramingErrorHandler 0001              ??_EUSART_DefaultFramingErrorHandler 0070  
             ?_EUSART_DefaultFramingErrorHandler 0070                _EUSART_DefaultFramingErrorHandler 1345  
                                         _ADCON0 009D                                           _ADCON1 009E  
                                         _ADCON2 009F                       _EUSART_OverrunErrorHandler 0166  
                      FLASH_WriteBlock@writeAddr 0050                    __size_of_TMR1_SystemTimer_ISR 0023  
                                         _ADRESH 009C                                           _ADRESL 009B  
                                 __CFG_ZCDDIS$ON 0000                                           _ANSELA 018C  
                                         _ANSELC 018E                                           _BORCON 0116  
                                         _T1GCON 0019                                           _RC1REG 0199  
                                         _RC0PPS 0EA0                                           _RC1PPS 0EA1  
                                         _RC1STA 019D                                           _RC2PPS 0EA2  
                        TMR1_WriteTimer@timerVal 0070                                           i1l3004 16C7  
                                         i1l3022 08E8                                    ?_init_chopper 0070  
                                         i1l3032 0916                                           i1l3024 08F6  
                                         i1l3008 16D1                                           _ODCONA 028C  
                                         _ODCONC 028E                                           i1l3036 0921  
                                         i1l3400 0B7A                                           i1l3224 1471  
                                         i1l3340 0A87                                           i1l3350 0AA8  
                                         i1l3440 17AC                                           i1l3362 0B07  
                                         i1l3354 0AB4                                           i1l3338 0A85  
                                         i1l3434 179C                                           i1l3364 0B26  
                                         i1l3372 0B27                                           i1l3348 0AA2  
                                         i1l3444 17BC                                           u130_25 14D8  
                                         i1l3366 0B0C                                           i1l3384 0B49  
                                         i1l3386 0B4D                                           i1l3396 0B72  
                                         i1l3398 0B76                                           i1l2970 08CD  
                                         i1l2972 08D1                                           i1l2964 08AF  
                                         u141_25 08B9                                           u150_25 16D2  
                                         u151_25 16D9                                           _INLVLA 038C  
                                         _INLVLC 038E                                           u154_25 08EB  
                                         u139_25 089B                                           u156_25 08F7  
                                         u180_25 0ABA                                           u157_25 090B  
                                         u158_25 0917                                           u183_25 0B20  
                                         _PMADRH 0192                                           _PMADRL 0191  
                                         u185_25 0B34                                           u177_25 0A7F  
                                         _PMDATH 0194                                           u178_25 0A8D  
                         set_vdc_threshold@v_val 004D                                           _PMDATL 0193  
                   __size_of_relay_watchdog_task 0055                                           u187_25 0B5A  
                                         u179_25 0AAE                                           _PMCON2 0196  
                                         u188_25 0B68                        __size_of_FLASH_EraseBlock 001F  
                                         _OSCCON 0099                                   __100ms_counter 002B  
                                         _TX1REG 019A                                           _WDTCON 0097  
                                         _TX1STA 019E   __end_of_relay_watchdog_record_activations_task 1800  
__size_of_relay_watchdog_record_activations_task 0041         ??_relay_watchdog_record_activations_task 005B  
        ?_relay_watchdog_record_activations_task 0070           _relay_watchdog_record_activations_task 17BF  
                          __end_of_save_to_flash 09E3                                   __CFG_PWRTE$OFF 0000  
                           ?_stop_relay_watchdog 0070                         ?_get_relay_reset_voltage 004D  
           __end_of_TMR1_DefaultInterruptHandler 1347            __size_of_TMR1_DefaultInterruptHandler 0001  
                   _TMR1_DefaultInterruptHandler 1346             __size_of_ADC_DefaultInterruptHandler 0001  
               __size_of_ADC_SetInterruptHandler 0008                                           ___lmul 16BF  
                    __size_of_PWM3_LoadDutyValue 0016                                     ?_set_vdc_max 0050  
                                   ?_set_vdc_min 0050                                           ___wmul 1572  
                                 __CFG_STVREN$ON 0000                                        ??___lldiv 0078  
                           __size_of_close_relay 0003                                        ??___lwdiv 0051  
                           __size_of_get_vdc_max 0006                             __size_of_get_vdc_min 0005  
                        __end_of_TMR4_Initialize 13FD                                _set_vdc_threshold 158D  
                               __end_of_duty_inc 195A                                 ?_ApplicationInit 0070  
                                         _st_act 00E5                                           _vcs_st 00EA  
                                ??_LoadDutyValue 0072                                           _rx_idx 0036  
                                         _tx_idx 0033                                           _tx_len 00EB  
                                      ??_get_vdc 004F                         ?_set_relay_reset_voltage 004D  
                             ?_set_vdc_threshold 004D                          FLASH_ReadWord@flashAddr 004D  
                 ??_get_relay_activation_counter 0051                                  ?_WDT_Initialize 0070  
                        __end_of_TMR2_StartTimer 1352            __end_of_ADC_VoltageControlHandler_ISR 0B82  
         __size_of_ADC_VoltageControlHandler_ISR 0139                    _ADC_VoltageControlHandler_ISR 0A49  
       TMR1_SetInterruptHandler@InterruptHandler 004D          ADC_SetInterruptHandler@InterruptHandler 004D  
       TMR2_SetInterruptHandler@InterruptHandler 004D                              ??_set_vdc_threshold 0050  
                        __end_of_TMR1_WriteTimer 1476                        _EUSART_CommandHandler_ISR 1603  
                                 ??_init_chopper 004F                            __end_of_TMR1_CallBack 1408  
                               ?_PWM3_Initialize 0070                                 ?_TMR1_Initialize 0070  
                              LoadDutyValue@duty 0070                                _SYSTEM_Initialize 1557  
                        __end_of__initialization 007B                            __end_of_TMR2_CallBack 1413  
                             ?_SYSTEM_Initialize 0070                       __end_of_get_reset_duration 13EA  
                     __end_of_set_reset_duration 171E                            ??_stop_relay_watchdog 004D  
                   __size_of_init_relay_watchdog 0001                              _relay_reset_voltage 0020  
                   __size_of_ADC_StartConversion 0003                                   __pcstackCOMMON 0070  
                                   __pidataBANK0 0002                                     __pidataBANK1 135B  
                                   __pidataBANK2 136A                              ??_SYSTEM_Initialize 004F  
                               ??_get_vdc_critic 004F                                        ?_TMR1_ISR 0070  
                                      ?_TMR2_ISR 0070                    ?_TMR1_DefaultInterruptHandler 0070  
                      __end_of_set_vdc_threshold 15A9                                 ?_TMR2_Initialize 0070  
                                ??_start_chopper 0050                          _ADC_GetConversionResult 137D  
                          __end_of_set_vdc_speed 166C                                   _OPTION_REGbits 0095  
                           _eusartRxStatusBuffer 0140              __end_of_TMR2_DutyControlHandler_ISR 08D8  
                    _TMR2_DutyControlHandler_ISR 0894                      FLASH_WriteBlock@GIEBitValue 0058  
                ??_EUSART_SetOverrunErrorHandler 004F                        __end_of_SYSTEM_Initialize 1572  
                                     __pbssBANK0 0020                                       __pbssBANK1 00E4  
                                     __pbssBANK2 0120                                       __pbssBANK3 01A0  
                               set_vdc_critic@vc 0050                          __size_of_set_vdc_critic 000B  
                    __size_of_EUSART_Receive_ISR 003A                                    _init_required 0060  
                    uart_task@activation_counter 01C4                                       __pmaintext 15A9  
                  __size_of_start_relay_watchdog 0009                                          ?___lmul 0070  
                                     _delta_duty 0156                                uart_task@val_1507 01CA  
                              uart_task@val_1515 01BF                                          ?___wmul 004D  
                                     ??_TMR1_ISR 0072                                  __CFG_PPS1WAY$ON 0000  
                                     ??_TMR2_ISR 0076                                       __pintentry 0004  
                                        _ADC_ISR 1434                                  __1000ms_counter 002A  
                                 ___lmul@product 0078                                 ?_TMR4_Initialize 0070  
                   ??_EUSART_DefaultErrorHandler 0071                        __size_of_FLASH_WriteBlock 0066  
                        __size_of_ADC_Initialize 0011                                   _FLASH_ReadWord 15C5  
                                  _eusartRxCount 0039                               __size_of_uart_task 02E8  
                              uart_task@xor_1514 01BE                                          _SP1BRGH 019C  
                                        _SP1BRGL 019B                                save_to_flash@buff 00A0  
                  __size_of_EUSART_RxDataHandler 0018                                          _OSCSTAT 009A  
                                        _OSCTUNE 0098                                          _PWM3DCH 0618  
                                        _PWM3DCL 0617                                          _PWM3CON 0619  
                                        _SLRCONA 030C                                          _SLRCONC 030E  
                       ??_EUSART_SetErrorHandler 004F                                 ?_TMR2_StartTimer 0070  
                               ?_TMR1_WriteTimer 0070                              UartParser@rx_buffer 0120  
                               _FLASH_EraseBlock 15E4            set_relay_activation_counter@act_count 004D  
                 ?_ADC_VoltageControlHandler_ISR 0070                 EUSART_CommandHandler_ISR@rx_data 0071  
                           _ADC_InterruptHandler 0162                          _ADC_SetInterruptHandler 13A1  
            __size_of_EUSART_DefaultErrorHandler 0003                       ??_TMR2_SetInterruptHandler 004F  
                                __size_of___lmul 002F                                          ___lldiv 08D8  
                                __size_of___wmul 001B                       __size_of_set_vdc_threshold 001C  
                                        ___lwdiv 1751                             __end_of_init_chopper 1693  
                      ??_ADC_GetConversionResult 0072                           __end_of_FLASH_ReadWord 15E4  
                           __size_of_set_vdc_max 000B                             __size_of_set_vdc_min 000B  
                            _relay_watchdog_task 092A                                          __ptext1 0D18  
                                        __ptext2 1459                                          __ptext3 1395  
                                        __ptext4 1358                                          __ptext5 087F  
                                        __ptext6 1572                                          __ptext7 1378  
                                        __ptext8 138F                                          __ptext9 1389  
                                        _get_vdc 1373                   ??_TMR1_DefaultInterruptHandler 0070  
                                      _T1CONbits 0018                            _OSCILLATOR_Initialize 13D1  
                                      _T2CONbits 001C                __size_of_TMR1_SetInterruptHandler 0008  
                       ??_PIN_MANAGER_Initialize 004D                        ?_TMR1_SetInterruptHandler 004D  
                                        _vdc_max 0040                                          _vdc_min 0042  
                                        _v_table 007F                                    _duty_count_up 0154  
                     __size_of_SYSTEM_Initialize 001B                                          clrloop0 139C  
                           end_of_initialization 007B                                   _reset_duration 0150  
                           ?_relay_watchdog_task 0070            __end_of_EUSART_SetOverrunErrorHandler 13C9  
         __size_of_EUSART_SetOverrunErrorHandler 0008                    _EUSART_SetOverrunErrorHandler 13C1  
                                     _vdc_critic 003E                                _EUSART_Initialize 171E  
                                     _open_relay 1355                               _activation_counter 0148  
                              __end_of_uart_task 1000                                  ___lldiv@divisor 0070  
                                ___lldiv@counter 007D                               ?_EUSART_Initialize 0070  
                   __end_of_TMR1_SystemTimer_ISR 1646                                       _num_buffer 01B8  
                      FLASH_ReadWord@GIEBitValue 004F                            __end_of_get_vdc_speed 0894  
                                ?_FLASH_ReadWord 004D                                       _uart_start 14F5  
                            ??_EUSART_Initialize 004F                                 ??_WDT_Initialize 004D  
                                     _vcs_sub_st 00E9                 __size_of_get_relay_reset_voltage 0006  
                           __end_of_duty_pwm_inc 195C                                 __CFG_FOSC$INTOSC 0000  
            __end_of_ADC_DefaultInterruptHandler 1345                      _ADC_DefaultInterruptHandler 1344  
                                      _TRISAbits 008C                              _init_relay_watchdog 1348  
                   ApplicationInit@invalid_param 01BF                              _ADC_StartConversion 134C  
                __size_of_EUSART_SetErrorHandler 0008                            ??_relay_watchdog_task 004F  
                      __end_of_EUSART_Initialize 1751                    ??_ADC_DefaultInterruptHandler 0070  
               __size_of_set_relay_reset_voltage 0016                                   _set_vdc_critic 1413  
                      ??_ADC_SetInterruptHandler 004F                       __end_of_PWM3_LoadDutyValue 14DF  
                              FLASH_WriteBlock@i 0059                                    ??_close_relay 004D  
                           ?_init_relay_watchdog 0070                             ?_ADC_StartConversion 0070  
                                  ??_get_vdc_max 004F                                    ??_get_vdc_min 004F  
           __end_of_TMR2_DefaultInterruptHandler 1348            __size_of_TMR2_DefaultInterruptHandler 0001  
                   _TMR2_DefaultInterruptHandler 1347                                _is_chopper_active 1358  
                                 __end_of___lmul 16EE               __end_of_EUSART_DefaultErrorHandler 134C  
                     _EUSART_DefaultErrorHandler 1349                                   __end_of___wmul 158D  
                              __size_of_TMR1_ISR 000C                                __size_of_TMR2_ISR 0004  
                             ?_is_chopper_active 0070                                   _ADC_Initialize 14A6  
                             _get_reset_duration 13E1                               _set_reset_duration 16EE  
                               _FLASH_WriteBlock 09E3                           ?_OSCILLATOR_Initialize 0070  
                              _reset_duration_ms 014C                            __end_of_LoadDutyValue 1373  
                         __size_of_save_to_flash 0064                              start_initialization 0036  
                              SolidStateRelay@st 0029                              ??_is_chopper_active 004D  
                                 _ra_local_timer 00E4                              ?_get_reset_duration 004D  
                __size_of_PIN_MANAGER_Initialize 002C                              ?_set_reset_duration 0055  
                       __size_of_ApplicationInit 0196     EUSART_SetRxInterruptHandler@interruptHandler 004D  
                         __end_of_set_vdc_critic 141E                      __end_of_stop_relay_watchdog 139B  
                save_to_flash@activation_counter 00E0                                      ?_open_relay 0070  
                          ??_init_relay_watchdog 004D                   ?_EUSART_SetOverrunErrorHandler 004D  
                          ??_ADC_StartConversion 004D                            __size_of_init_chopper 0027  
                           ??_get_reset_duration 004F                             ??_set_reset_duration 0057  
                       __size_of_PWM3_Initialize 000D                         __size_of_TMR1_Initialize 001A  
                      __end_of_is_chopper_active 135B                       _EUSART_FramingErrorHandler 0168  
                                       ??___lmul 0078                                         ??___wmul 0051  
                         _EUSART_SetErrorHandler 13B1                                      _CCPTMRSbits 029E  
                         __end_of_ADC_Initialize 14B7                                      __pdataBANK0 005F  
                                    __pdataBANK1 00EC                                      __pdataBANK2 016C  
                                       ?_ADC_ISR 0070                      FLASH_EraseBlock@GIEBitValue 004F  
                                    ?_uart_start 0070                    ?_TMR2_DefaultInterruptHandler 0070  
                       __end_of_FLASH_EraseBlock 1603                              __end_of_close_relay 1355  
                         __size_of_TMR1_CallBack 000B                              __end_of_get_vdc_max 1395  
                            __end_of_get_vdc_min 137D                            __end_of_start_chopper 153D  
                         __size_of_TMR2_CallBack 000B                                        ___latbits 0002  
                                  __pcstackBANK0 0044                                    __pcstackBANK1 00A0  
                                  __pcstackBANK3 01BD                     __end_of_start_relay_watchdog 13F3  
                       __size_of_TMR2_Initialize 0012                             _TMR1_SystemTimer_ISR 1623  
                                ?_set_vdc_critic 0050                       __end_of_EUSART_Receive_ISR 17BF  
                                   _init_chopper 166C                       __size_of_EUSART_Initialize 0033  
                                  ?_stop_chopper 0070                 _EUSART_RxDefaultInterruptHandler 016A  
                                  _diff_positive 0032                                   _chopper_active 0031  
                                   _current_duty 0022                                    _save_to_flash 097F  
                                      __pnvBANK2 015E                                        __pnvBANK3 01CC  
                   __end_of_EUSART_RxDataHandler 1523                           __size_of_set_vdc_speed 0026  
                               ___lwdiv@dividend 004F                           _PIN_MANAGER_Initialize 1693  
                              _ADC_SelectChannel 1476                 __end_of_TMR1_SetInterruptHandler 13E1  
                               UartParser@rx_idx 002F                                 UartParser@tx_idx 002C  
                                       ?___lldiv 0070                                         ?___lwdiv 004D  
                                ?_ADC_Initialize 0070                                     _eusartRxHead 003B  
                             ?_ADC_SelectChannel 0070                                     _eusartRxTail 003A  
                   ??_INTERRUPT_InterruptManager 007E                                         ?_get_vdc 004D  
                        _get_relay_reset_voltage 1383                                         _BAUD1CON 019F  
                            ??_ADC_SelectChannel 004D                              __size_of_open_relay 0003  
                        __size_of_get_vdc_critic 0006                         __size_of_TMR4_Initialize 000A  
                          ?_TMR1_SystemTimer_ISR 0070                                 ___lwdiv@quotient 0053  
                 FLASH_WriteBlock@blockStartAddr 0056                          _set_relay_reset_voltage 14DF  
                                 _eusartRxBuffer 01B0                                    _TMR1_CallBack 13FD  
                                 ??_stop_chopper 004D                                   ___wmul@product 0051  
                            __size_of_uart_start 0016                                         _LATAbits 010C  
         EUSART_SetErrorHandler@interruptHandler 004D                                   ?_save_to_flash 0070  
                                       _LATCbits 010E                                        _isr_timer 002E  
                              ??_ApplicationInit 005B                                        clear_ram0 139B  
                                  _TMR2_CallBack 1408                                         _PIE1bits 0091  
                              _eusartRxLastError 0038                         __size_of_TMR2_StartTimer 0003  
                      __end_of_ADC_SelectChannel 1485                                     _duty_pwm_dec 016E  
                                   UartParser@st 002D                         __size_of_TMR1_WriteTimer 000F  
                                   _duty_pwm_inc 195A              __size_of_INTERRUPT_InterruptManager 0030  
                            _duty_count_down_max 016C                                         _PIR1bits 0011  
                ??_EUSART_SetFramingErrorHandler 004F                                         _PIR2bits 0012  
                      FLASH_EraseBlock@startAddr 004D                                  _duty_count_down 0152  
                                    _close_relay 1352                              __end_of_invalid_arg 18C9  
                            __end_of_invalid_com 18DF                       __size_of_is_chopper_active 0003  
                               ??_FLASH_ReadWord 004F                                      _get_vdc_max 138F  
                                    _get_vdc_min 1378                                    ??_set_vdc_max 0052  
                                  ??_set_vdc_min 0052        __end_of_EUSART_DefaultOverrunErrorHandler 1362  
     __size_of_EUSART_DefaultOverrunErrorHandler 0004              ??_EUSART_DefaultOverrunErrorHandler 0070  
             ?_EUSART_DefaultOverrunErrorHandler 0070                _EUSART_DefaultOverrunErrorHandler 135E  
                                      _uart_task 0D18                                         _TMR1_ISR 1440  
                                       _TMR2_ISR 1362                                       uart_task@i 01C1  
                                      _rx_buffer 01A0                                ??_TMR1_Initialize 004F  
                              ??_PWM3_Initialize 004D                                 __size_of_ADC_ISR 000C  
                                     _ADCON0bits 009D                                ___wmul@multiplier 004D  
                       ADC_SelectChannel@channel 004E                                    _set_vdc_speed 1646  
                 ??_TMR2_DefaultInterruptHandler 0070                __size_of_TMR2_SetInterruptHandler 0008  
                      ?_TMR2_SetInterruptHandler 004D                                        _tx_string 015C  
                              ___lmul@multiplier 0070                                         _Commands 0037  
                                 ?_TMR1_CallBack 0070                                ??_TMR2_Initialize 004F  
           __end_of_set_relay_activation_counter 1495            __size_of_set_relay_activation_counter 0010  
                   _set_relay_activation_counter 1485                         __end_of_FLASH_WriteBlock 0A49  
                                 ?_TMR2_CallBack 0070                                  _command_pending 0035  
                       ?_ADC_GetConversionResult 0070                             _start_relay_watchdog 13EA  
                                     ?_uart_task 0070                          ??_OSCILLATOR_Initialize 004D  
                            _EUSART_ErrorHandler 01CC                        ??_get_relay_reset_voltage 004F  
                               __size_of___lldiv 0052                      ?_EUSART_DefaultErrorHandler 0070  
                               __size_of___lwdiv 0034                                  uart_task@i_1513 01C2  
                       _TMR1_SetInterruptHandler 13D9                               _PWM3_LoadDutyValue 14C9  
                            __end_of_set_vdc_max 1429                              __end_of_set_vdc_min 1434  
                          _TMR1_InterruptHandler 015E                                 __size_of_get_vdc 0005  
                                 ?_set_vdc_speed 0055                      __end_of_relay_watchdog_task 097F  
                                    _local_timer 0028                           ??_TMR1_SystemTimer_ISR 0070  
                                       _diff_vdc 015A                                  ___lwdiv@divisor 004D  
                           _EUSART_RxDataHandler 150B                     ?_TMR2_DutyControlHandler_ISR 0070  
                                ___lwdiv@counter 0052                        ??_set_relay_reset_voltage 004F  
                                       __ptext10 14F5                                         __ptext11 092A  
                                       __ptext20 14B7                                         __ptext12 1355  
                                       __ptext21 153D                                         __ptext13 1373  
                                       __ptext30 13B1                                         __ptext22 13D9  
                                       __ptext14 1352                                         __ptext31 14A6  
                                       __ptext23 144C                                         __ptext15 17BF  
                                       __ptext40 1476                                         __ptext32 0B82  
                                       __ptext24 1693                                         __ptext16 1348  
                                       __ptext41 1646                                         __ptext33 1523  
                                       __ptext25 13D1                                         __ptext17 1557  
                                       __ptext50 097F                                         __ptext42 1429  
                                       __ptext34 13EA                                         __ptext26 171E  
                                       __ptext18 1366                                         __ptext51 13E1  
                                       __ptext43 141E                                         __ptext35 166C  
                                       __ptext27 13C9                                         __ptext19 13F3  
                                       __ptext60 1347                                         __ptext52 1383  
                                       __ptext44 1413                                         __ptext36 134F  
                                       __ptext28 13C1                                         __ptext61 0894  
                                       __ptext53 1495                                         __ptext45 158D  
                                       __ptext37 13A9                                         __ptext29 13B9  
                                       __ptext70 1345                                         __ptext62 1440  
                                       __ptext54 09E3                                         __ptext46 16EE  
                                       __ptext38 134C                                         __ptext71 1349  
                                       __ptext63 1467                                         __ptext55 15E4  
                                       __ptext47 1751                                         __ptext39 13A1  
                                       __ptext80 137D                                         __ptext72 150B  
                                       __ptext64 13FD                                         __ptext56 15C5  
                                       __ptext48 14DF                                         __ptext73 1434  
                                       __ptext65 1346                                         __ptext49 1485  
                                       __ptext74 1344                                         __ptext66 1623  
                                       __ptext58 1362                              ?_PWM3_LoadDutyValue 0070  
                                       __ptext75 0A49                                         __ptext67 1603  
                                       __ptext59 1408                                         __ptext76 16BF  
                                       __ptext68 1785                                         __ptext77 08D8  
                                       __ptext69 135E                                         __ptext78 14C9  
                                       __ptext79 136E                       ApplicationInit@act_counter 01C0  
                                ??_save_to_flash 005A                                      _invalid_arg 18B3  
                                    _invalid_com 18C9                           __size_of_get_vdc_speed 0015  
                              ??_TMR4_Initialize 004D                                    __size_of_main 001C  
                                       _lock_isr 005F                                         _duty_inc 1958  
                                   ??_open_relay 004D                    ?_set_relay_activation_counter 004D  
                        ?_EUSART_SetErrorHandler 004D                       __size_of_ADC_SelectChannel 000F  
                                       _vdc_prev 0158                                       _RC1STAbits 019D  
                          ?_start_relay_watchdog 0070    EUSART_SetOverrunErrorHandler@interruptHandler 004D  
                           ??_PWM3_LoadDutyValue 0072                                         _prev_vdc 014E  
             __size_of_EUSART_CommandHandler_ISR 0020                                         int$flags 007E  
                     ?_EUSART_CommandHandler_ISR 0070                                         _pwm_duty 0026  
                              ??_TMR2_StartTimer 004D                             set_vdc_speed@msDelay 0055  
             __end_of_INTERRUPT_InterruptManager 0034                       _INTERRUPT_InterruptManager 0004  
          __end_of_EUSART_SetFramingErrorHandler 13C1           __size_of_EUSART_SetFramingErrorHandler 0008  
                  _EUSART_SetFramingErrorHandler 13B9                                ??_TMR1_WriteTimer 0072  
                                   ??_uart_start 004F                                ?_FLASH_EraseBlock 004D  
                           __end_of_stop_chopper 1467                               ??_FLASH_EraseBlock 004F  
                                     _INTCONbits 000B                                   _get_vdc_critic 1389  
                               ??_set_vdc_critic 0052                            ?_EUSART_RxDataHandler 0070  
                             __end_of_open_relay 1358                                   __pstringtext10 186D  
                                 __pstringtext11 1885                                   __pstringtext20 1948  
                                 __pstringtext12 189C                                   __pstringtext21 194E  
                                 __pstringtext13 18DF                                   __pstringtext22 1953  
                                 __pstringtext14 18F5                                   __pstringtext23 0000  
                                 __pstringtext15 190B                                   __pstringtext16 191D  
                                 __pstringtext17 192D                                   __pstringtext18 193C  
                                 __pstringtext19 1942                                  ??_TMR1_CallBack 0071  
                       ?_ADC_SetInterruptHandler 004D                          __size_of_WDT_Initialize 0004  
                  ??_TMR2_DutyControlHandler_ISR 0074                  __end_of_get_relay_reset_voltage 1389  
                                       intlevel1 0000                                  ??_TMR2_CallBack 0076  
                    __end_of_init_relay_watchdog 1349                      __end_of_ADC_StartConversion 134F  
                                     _PMCON1bits 0195                                 ___lldiv@dividend 0074  
                        ?_PIN_MANAGER_Initialize 0070                  __end_of_ADC_GetConversionResult 1383  
                 __end_of_EUSART_SetErrorHandler 13B9                                __CFG_CLKOUTEN$OFF 0000  
                                    _target_duty 0024                               __end_of_uart_start 150B  
                   ApplicationInit@chopper_state 01BD                                 ??_ADC_Initialize 004F  
           __end_of_EUSART_SetRxInterruptHandler 13D1            __size_of_EUSART_SetRxInterruptHandler 0008  
                   _EUSART_SetRxInterruptHandler 13C9                           __size_of_LoadDutyValue 0005  
                    __size_of_get_reset_duration 0009                     __size_of_stop_relay_watchdog 0006  
                __end_of_set_relay_reset_voltage 14F5                      __size_of_set_reset_duration 0030  
                              _duty_count_up_max 00EC                                      ??_uart_task 005B  
                                    _set_vdc_max 141E                                      _set_vdc_min 1429  
                             _EUSART_Receive_ISR 1785    EUSART_SetFramingErrorHandler@interruptHandler 004D  
                    PWM3_LoadDutyValue@dutyValue 0070                __end_of_EUSART_CommandHandler_ISR 1623  
                                  _command_error 0034                                    _get_vdc_speed 087F  
                                  __pstringtext1 007F                                    __pstringtext2 18B3  
                                  __pstringtext3 18C9                                    __pstringtext4 1958  
                                  __pstringtext5 195A                                    __pstringtext6 1800  
                                  __pstringtext7 1822                                    __pstringtext8 183B  
                                  __pstringtext9 1854                                  ??_set_vdc_speed 0057  
                         __end_of_get_vdc_critic 138F                              ?_EUSART_Receive_ISR 0070  
                                  uart_task@none 00EE                                 ___lldiv@quotient 0079  
                                _ApplicationInit 0B82                                       _TX1STAbits 019E  
                                   uart_task@idx 01C3                                     uart_task@val 01C8  
                 __end_of_PIN_MANAGER_Initialize 16BF                                     uart_task@xor 01BD  
                           ??_EUSART_Receive_ISR 0071                            _TMR2_InterruptHandler 0164  
                                _TMR1_Initialize 153D                                  _PWM3_Initialize 144C  
                         ??_start_relay_watchdog 004D                           __size_of_start_chopper 001A  
                                   ?_close_relay 0070  
