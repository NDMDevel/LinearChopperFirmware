

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Feb 25 14:36:09 2021

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	16F1705
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	stringtext12,global,class=STRCODE,delta=2
    19                           	psect	stringtext13,global,class=STRCODE,delta=2
    20                           	psect	stringtext14,global,class=STRCODE,delta=2
    21                           	psect	stringtext15,global,class=STRCODE,delta=2
    22                           	psect	stringtext16,global,class=STRCODE,delta=2
    23                           	psect	stringtext17,global,class=STRCODE,delta=2
    24                           	psect	stringtext18,global,class=STRCODE,delta=2
    25                           	psect	stringtext19,global,class=STRCODE,delta=2
    26                           	psect	stringtext20,global,class=STRCODE,delta=2
    27                           	psect	stringtext21,global,class=STRCODE,delta=2
    28                           	psect	stringtext22,global,class=STRCODE,delta=2
    29                           	psect	stringtext23,global,class=STRCODE,delta=2
    30                           	psect	cinit,global,class=CODE,merge=1,delta=2
    31                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    32                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    33                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    34                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    36                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    37                           	psect	inittext,global,class=CODE,delta=2
    38                           	psect	clrtext,global,class=CODE,delta=2
    39                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    40                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    41                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    42                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    43                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    44                           	psect	text1,local,class=CODE,merge=1,delta=2
    45                           	psect	text2,local,class=CODE,merge=1,delta=2
    46                           	psect	text3,local,class=CODE,merge=1,delta=2
    47                           	psect	text4,local,class=CODE,merge=1,delta=2
    48                           	psect	text5,local,class=CODE,merge=1,delta=2
    49                           	psect	text6,local,class=CODE,merge=1,delta=2
    50                           	psect	text7,local,class=CODE,merge=1,delta=2
    51                           	psect	text8,local,class=CODE,merge=1,delta=2
    52                           	psect	text9,local,class=CODE,merge=1,delta=2
    53                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text11,local,class=CODE,merge=1,delta=2
    55                           	psect	text12,local,class=CODE,merge=1,delta=2
    56                           	psect	text13,local,class=CODE,merge=1,delta=2
    57                           	psect	text14,local,class=CODE,merge=1,delta=2
    58                           	psect	text15,local,class=CODE,merge=1,delta=2
    59                           	psect	text16,local,class=CODE,merge=1,delta=2
    60                           	psect	text17,local,class=CODE,merge=1,delta=2
    61                           	psect	text18,local,class=CODE,merge=1,delta=2
    62                           	psect	text19,local,class=CODE,merge=1,delta=2
    63                           	psect	text20,local,class=CODE,merge=1,delta=2
    64                           	psect	text21,local,class=CODE,merge=1,delta=2
    65                           	psect	text22,local,class=CODE,merge=1,delta=2
    66                           	psect	text23,local,class=CODE,merge=1,delta=2
    67                           	psect	text24,local,class=CODE,merge=1,delta=2
    68                           	psect	text25,local,class=CODE,merge=1,delta=2
    69                           	psect	text26,local,class=CODE,merge=1,delta=2
    70                           	psect	text27,local,class=CODE,merge=1,delta=2
    71                           	psect	text28,local,class=CODE,merge=1,delta=2
    72                           	psect	text29,local,class=CODE,merge=1,delta=2
    73                           	psect	text30,local,class=CODE,merge=1,delta=2
    74                           	psect	text31,local,class=CODE,merge=1,delta=2
    75                           	psect	text32,local,class=CODE,merge=1,delta=2
    76                           	psect	text33,local,class=CODE,merge=1,delta=2
    77                           	psect	text34,local,class=CODE,merge=1,delta=2
    78                           	psect	text35,local,class=CODE,merge=1,delta=2
    79                           	psect	text36,local,class=CODE,merge=1,delta=2
    80                           	psect	text37,local,class=CODE,merge=1,delta=2
    81                           	psect	text38,local,class=CODE,merge=1,delta=2
    82                           	psect	text39,local,class=CODE,merge=1,delta=2
    83                           	psect	text40,local,class=CODE,merge=1,delta=2
    84                           	psect	text41,local,class=CODE,merge=1,delta=2
    85                           	psect	text42,local,class=CODE,merge=1,delta=2
    86                           	psect	text43,local,class=CODE,merge=1,delta=2
    87                           	psect	text44,local,class=CODE,merge=1,delta=2
    88                           	psect	text45,local,class=CODE,merge=1,delta=2
    89                           	psect	text46,local,class=CODE,merge=1,delta=2
    90                           	psect	text47,local,class=CODE,merge=1,delta=2
    91                           	psect	text48,local,class=CODE,merge=1,delta=2
    92                           	psect	text49,local,class=CODE,merge=1,delta=2
    93                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
    94                           	psect	text51,local,class=CODE,merge=1,delta=2
    95                           	psect	text52,local,class=CODE,merge=1,delta=2
    96                           	psect	intentry,global,class=CODE,delta=2
    97                           	psect	text54,local,class=CODE,merge=1,delta=2
    98                           	psect	text55,local,class=CODE,merge=1,delta=2
    99                           	psect	text56,local,class=CODE,merge=1,delta=2
   100                           	psect	text57,local,class=CODE,merge=1,delta=2
   101                           	psect	text58,local,class=CODE,merge=1,delta=2
   102                           	psect	text59,local,class=CODE,merge=1,delta=2
   103                           	psect	text60,local,class=CODE,merge=1,delta=2
   104                           	psect	text61,local,class=CODE,merge=1,delta=2
   105                           	psect	text62,local,class=CODE,merge=1,delta=2
   106                           	psect	text63,local,class=CODE,merge=1,delta=2
   107                           	psect	text64,local,class=CODE,merge=1,delta=2
   108                           	psect	text65,local,class=CODE,merge=1,delta=2
   109                           	psect	text66,local,class=CODE,merge=1,delta=2
   110                           	psect	text67,local,class=CODE,merge=1,delta=2
   111                           	psect	text68,local,class=CODE,merge=1,delta=2
   112                           	psect	text69,local,class=CODE,merge=1,delta=2
   113                           	psect	text70,local,class=CODE,merge=1,delta=2
   114                           	psect	text71,local,class=CODE,merge=1,delta=2
   115                           	psect	text72,local,class=CODE,merge=1,delta=2,group=1
   116                           	psect	text73,local,class=CODE,merge=1,delta=2,group=1
   117                           	psect	text74,local,class=CODE,merge=1,delta=2
   118                           	psect	text75,local,class=CODE,merge=1,delta=2
   119                           	psect	text76,local,class=CODE,merge=1,delta=2
   120                           	dabs	1,0x7E,2
   121  0000                     
   122                           ; Version 2.05
   123                           ; Generated 20/12/2018 GMT
   124                           ; 
   125                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC16F1705 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000E                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0013                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  008C                     	;# 
   183  008E                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0093                     	;# 
   187  0095                     	;# 
   188  0096                     	;# 
   189  0097                     	;# 
   190  0098                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  009F                     	;# 
   199  010C                     	;# 
   200  010E                     	;# 
   201  0111                     	;# 
   202  0112                     	;# 
   203  0113                     	;# 
   204  0114                     	;# 
   205  0115                     	;# 
   206  0116                     	;# 
   207  0117                     	;# 
   208  0118                     	;# 
   209  0119                     	;# 
   210  011C                     	;# 
   211  018C                     	;# 
   212  018E                     	;# 
   213  0191                     	;# 
   214  0191                     	;# 
   215  0192                     	;# 
   216  0193                     	;# 
   217  0193                     	;# 
   218  0194                     	;# 
   219  0195                     	;# 
   220  0196                     	;# 
   221  0197                     	;# 
   222  0199                     	;# 
   223  0199                     	;# 
   224  0199                     	;# 
   225  019A                     	;# 
   226  019A                     	;# 
   227  019A                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019C                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019D                     	;# 
   238  019D                     	;# 
   239  019E                     	;# 
   240  019E                     	;# 
   241  019E                     	;# 
   242  019F                     	;# 
   243  019F                     	;# 
   244  019F                     	;# 
   245  019F                     	;# 
   246  019F                     	;# 
   247  020C                     	;# 
   248  020E                     	;# 
   249  0211                     	;# 
   250  0211                     	;# 
   251  0212                     	;# 
   252  0212                     	;# 
   253  0213                     	;# 
   254  0213                     	;# 
   255  0214                     	;# 
   256  0214                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0215                     	;# 
   260  0215                     	;# 
   261  0216                     	;# 
   262  0216                     	;# 
   263  0217                     	;# 
   264  0217                     	;# 
   265  028C                     	;# 
   266  028E                     	;# 
   267  0291                     	;# 
   268  0291                     	;# 
   269  0292                     	;# 
   270  0293                     	;# 
   271  0293                     	;# 
   272  0298                     	;# 
   273  0298                     	;# 
   274  0299                     	;# 
   275  029A                     	;# 
   276  029A                     	;# 
   277  029E                     	;# 
   278  030C                     	;# 
   279  030E                     	;# 
   280  038C                     	;# 
   281  038E                     	;# 
   282  0391                     	;# 
   283  0392                     	;# 
   284  0393                     	;# 
   285  0397                     	;# 
   286  0398                     	;# 
   287  0399                     	;# 
   288  0415                     	;# 
   289  0416                     	;# 
   290  0417                     	;# 
   291  041C                     	;# 
   292  041D                     	;# 
   293  041E                     	;# 
   294  0511                     	;# 
   295  0515                     	;# 
   296  0617                     	;# 
   297  0618                     	;# 
   298  0619                     	;# 
   299  0619                     	;# 
   300  061A                     	;# 
   301  061B                     	;# 
   302  061C                     	;# 
   303  061C                     	;# 
   304  0691                     	;# 
   305  0692                     	;# 
   306  0693                     	;# 
   307  0694                     	;# 
   308  0695                     	;# 
   309  0696                     	;# 
   310  0697                     	;# 
   311  0698                     	;# 
   312  0699                     	;# 
   313  069A                     	;# 
   314  069B                     	;# 
   315  069C                     	;# 
   316  069D                     	;# 
   317  069E                     	;# 
   318  069F                     	;# 
   319  0E0F                     	;# 
   320  0E10                     	;# 
   321  0E11                     	;# 
   322  0E12                     	;# 
   323  0E13                     	;# 
   324  0E14                     	;# 
   325  0E15                     	;# 
   326  0E17                     	;# 
   327  0E20                     	;# 
   328  0E21                     	;# 
   329  0E22                     	;# 
   330  0E24                     	;# 
   331  0E25                     	;# 
   332  0E28                     	;# 
   333  0E29                     	;# 
   334  0E2A                     	;# 
   335  0E2B                     	;# 
   336  0E90                     	;# 
   337  0E91                     	;# 
   338  0E92                     	;# 
   339  0E94                     	;# 
   340  0E95                     	;# 
   341  0EA0                     	;# 
   342  0EA1                     	;# 
   343  0EA2                     	;# 
   344  0EA3                     	;# 
   345  0EA4                     	;# 
   346  0EA5                     	;# 
   347  0F0F                     	;# 
   348  0F10                     	;# 
   349  0F11                     	;# 
   350  0F12                     	;# 
   351  0F13                     	;# 
   352  0F14                     	;# 
   353  0F15                     	;# 
   354  0F16                     	;# 
   355  0F17                     	;# 
   356  0F18                     	;# 
   357  0F19                     	;# 
   358  0F1A                     	;# 
   359  0F1B                     	;# 
   360  0F1C                     	;# 
   361  0F1D                     	;# 
   362  0F1E                     	;# 
   363  0F1F                     	;# 
   364  0F20                     	;# 
   365  0F21                     	;# 
   366  0F22                     	;# 
   367  0F23                     	;# 
   368  0F24                     	;# 
   369  0F25                     	;# 
   370  0F26                     	;# 
   371  0F27                     	;# 
   372  0F28                     	;# 
   373  0F29                     	;# 
   374  0F2A                     	;# 
   375  0F2B                     	;# 
   376  0F2C                     	;# 
   377  0F2D                     	;# 
   378  0F9E                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000E                     	;# 
   404  0011                     	;# 
   405  0012                     	;# 
   406  0013                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  008C                     	;# 
   417  008E                     	;# 
   418  0091                     	;# 
   419  0092                     	;# 
   420  0093                     	;# 
   421  0095                     	;# 
   422  0096                     	;# 
   423  0097                     	;# 
   424  0098                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  009F                     	;# 
   433  010C                     	;# 
   434  010E                     	;# 
   435  0111                     	;# 
   436  0112                     	;# 
   437  0113                     	;# 
   438  0114                     	;# 
   439  0115                     	;# 
   440  0116                     	;# 
   441  0117                     	;# 
   442  0118                     	;# 
   443  0119                     	;# 
   444  011C                     	;# 
   445  018C                     	;# 
   446  018E                     	;# 
   447  0191                     	;# 
   448  0191                     	;# 
   449  0192                     	;# 
   450  0193                     	;# 
   451  0193                     	;# 
   452  0194                     	;# 
   453  0195                     	;# 
   454  0196                     	;# 
   455  0197                     	;# 
   456  0199                     	;# 
   457  0199                     	;# 
   458  0199                     	;# 
   459  019A                     	;# 
   460  019A                     	;# 
   461  019A                     	;# 
   462  019B                     	;# 
   463  019B                     	;# 
   464  019B                     	;# 
   465  019B                     	;# 
   466  019B                     	;# 
   467  019C                     	;# 
   468  019C                     	;# 
   469  019C                     	;# 
   470  019D                     	;# 
   471  019D                     	;# 
   472  019D                     	;# 
   473  019E                     	;# 
   474  019E                     	;# 
   475  019E                     	;# 
   476  019F                     	;# 
   477  019F                     	;# 
   478  019F                     	;# 
   479  019F                     	;# 
   480  019F                     	;# 
   481  020C                     	;# 
   482  020E                     	;# 
   483  0211                     	;# 
   484  0211                     	;# 
   485  0212                     	;# 
   486  0212                     	;# 
   487  0213                     	;# 
   488  0213                     	;# 
   489  0214                     	;# 
   490  0214                     	;# 
   491  0215                     	;# 
   492  0215                     	;# 
   493  0215                     	;# 
   494  0215                     	;# 
   495  0216                     	;# 
   496  0216                     	;# 
   497  0217                     	;# 
   498  0217                     	;# 
   499  028C                     	;# 
   500  028E                     	;# 
   501  0291                     	;# 
   502  0291                     	;# 
   503  0292                     	;# 
   504  0293                     	;# 
   505  0293                     	;# 
   506  0298                     	;# 
   507  0298                     	;# 
   508  0299                     	;# 
   509  029A                     	;# 
   510  029A                     	;# 
   511  029E                     	;# 
   512  030C                     	;# 
   513  030E                     	;# 
   514  038C                     	;# 
   515  038E                     	;# 
   516  0391                     	;# 
   517  0392                     	;# 
   518  0393                     	;# 
   519  0397                     	;# 
   520  0398                     	;# 
   521  0399                     	;# 
   522  0415                     	;# 
   523  0416                     	;# 
   524  0417                     	;# 
   525  041C                     	;# 
   526  041D                     	;# 
   527  041E                     	;# 
   528  0511                     	;# 
   529  0515                     	;# 
   530  0617                     	;# 
   531  0618                     	;# 
   532  0619                     	;# 
   533  0619                     	;# 
   534  061A                     	;# 
   535  061B                     	;# 
   536  061C                     	;# 
   537  061C                     	;# 
   538  0691                     	;# 
   539  0692                     	;# 
   540  0693                     	;# 
   541  0694                     	;# 
   542  0695                     	;# 
   543  0696                     	;# 
   544  0697                     	;# 
   545  0698                     	;# 
   546  0699                     	;# 
   547  069A                     	;# 
   548  069B                     	;# 
   549  069C                     	;# 
   550  069D                     	;# 
   551  069E                     	;# 
   552  069F                     	;# 
   553  0E0F                     	;# 
   554  0E10                     	;# 
   555  0E11                     	;# 
   556  0E12                     	;# 
   557  0E13                     	;# 
   558  0E14                     	;# 
   559  0E15                     	;# 
   560  0E17                     	;# 
   561  0E20                     	;# 
   562  0E21                     	;# 
   563  0E22                     	;# 
   564  0E24                     	;# 
   565  0E25                     	;# 
   566  0E28                     	;# 
   567  0E29                     	;# 
   568  0E2A                     	;# 
   569  0E2B                     	;# 
   570  0E90                     	;# 
   571  0E91                     	;# 
   572  0E92                     	;# 
   573  0E94                     	;# 
   574  0E95                     	;# 
   575  0EA0                     	;# 
   576  0EA1                     	;# 
   577  0EA2                     	;# 
   578  0EA3                     	;# 
   579  0EA4                     	;# 
   580  0EA5                     	;# 
   581  0F0F                     	;# 
   582  0F10                     	;# 
   583  0F11                     	;# 
   584  0F12                     	;# 
   585  0F13                     	;# 
   586  0F14                     	;# 
   587  0F15                     	;# 
   588  0F16                     	;# 
   589  0F17                     	;# 
   590  0F18                     	;# 
   591  0F19                     	;# 
   592  0F1A                     	;# 
   593  0F1B                     	;# 
   594  0F1C                     	;# 
   595  0F1D                     	;# 
   596  0F1E                     	;# 
   597  0F1F                     	;# 
   598  0F20                     	;# 
   599  0F21                     	;# 
   600  0F22                     	;# 
   601  0F23                     	;# 
   602  0F24                     	;# 
   603  0F25                     	;# 
   604  0F26                     	;# 
   605  0F27                     	;# 
   606  0F28                     	;# 
   607  0F29                     	;# 
   608  0F2A                     	;# 
   609  0F2B                     	;# 
   610  0F2C                     	;# 
   611  0F2D                     	;# 
   612  0F9E                     	;# 
   613  0FE4                     	;# 
   614  0FE5                     	;# 
   615  0FE6                     	;# 
   616  0FE7                     	;# 
   617  0FE8                     	;# 
   618  0FE9                     	;# 
   619  0FEA                     	;# 
   620  0FEB                     	;# 
   621  0FED                     	;# 
   622  0FEE                     	;# 
   623  0FEF                     	;# 
   624  0000                     	;# 
   625  0001                     	;# 
   626  0002                     	;# 
   627  0003                     	;# 
   628  0004                     	;# 
   629  0005                     	;# 
   630  0006                     	;# 
   631  0007                     	;# 
   632  0008                     	;# 
   633  0009                     	;# 
   634  000A                     	;# 
   635  000B                     	;# 
   636  000C                     	;# 
   637  000E                     	;# 
   638  0011                     	;# 
   639  0012                     	;# 
   640  0013                     	;# 
   641  0015                     	;# 
   642  0016                     	;# 
   643  0016                     	;# 
   644  0017                     	;# 
   645  0018                     	;# 
   646  0019                     	;# 
   647  001A                     	;# 
   648  001B                     	;# 
   649  001C                     	;# 
   650  008C                     	;# 
   651  008E                     	;# 
   652  0091                     	;# 
   653  0092                     	;# 
   654  0093                     	;# 
   655  0095                     	;# 
   656  0096                     	;# 
   657  0097                     	;# 
   658  0098                     	;# 
   659  0099                     	;# 
   660  009A                     	;# 
   661  009B                     	;# 
   662  009B                     	;# 
   663  009C                     	;# 
   664  009D                     	;# 
   665  009E                     	;# 
   666  009F                     	;# 
   667  010C                     	;# 
   668  010E                     	;# 
   669  0111                     	;# 
   670  0112                     	;# 
   671  0113                     	;# 
   672  0114                     	;# 
   673  0115                     	;# 
   674  0116                     	;# 
   675  0117                     	;# 
   676  0118                     	;# 
   677  0119                     	;# 
   678  011C                     	;# 
   679  018C                     	;# 
   680  018E                     	;# 
   681  0191                     	;# 
   682  0191                     	;# 
   683  0192                     	;# 
   684  0193                     	;# 
   685  0193                     	;# 
   686  0194                     	;# 
   687  0195                     	;# 
   688  0196                     	;# 
   689  0197                     	;# 
   690  0199                     	;# 
   691  0199                     	;# 
   692  0199                     	;# 
   693  019A                     	;# 
   694  019A                     	;# 
   695  019A                     	;# 
   696  019B                     	;# 
   697  019B                     	;# 
   698  019B                     	;# 
   699  019B                     	;# 
   700  019B                     	;# 
   701  019C                     	;# 
   702  019C                     	;# 
   703  019C                     	;# 
   704  019D                     	;# 
   705  019D                     	;# 
   706  019D                     	;# 
   707  019E                     	;# 
   708  019E                     	;# 
   709  019E                     	;# 
   710  019F                     	;# 
   711  019F                     	;# 
   712  019F                     	;# 
   713  019F                     	;# 
   714  019F                     	;# 
   715  020C                     	;# 
   716  020E                     	;# 
   717  0211                     	;# 
   718  0211                     	;# 
   719  0212                     	;# 
   720  0212                     	;# 
   721  0213                     	;# 
   722  0213                     	;# 
   723  0214                     	;# 
   724  0214                     	;# 
   725  0215                     	;# 
   726  0215                     	;# 
   727  0215                     	;# 
   728  0215                     	;# 
   729  0216                     	;# 
   730  0216                     	;# 
   731  0217                     	;# 
   732  0217                     	;# 
   733  028C                     	;# 
   734  028E                     	;# 
   735  0291                     	;# 
   736  0291                     	;# 
   737  0292                     	;# 
   738  0293                     	;# 
   739  0293                     	;# 
   740  0298                     	;# 
   741  0298                     	;# 
   742  0299                     	;# 
   743  029A                     	;# 
   744  029A                     	;# 
   745  029E                     	;# 
   746  030C                     	;# 
   747  030E                     	;# 
   748  038C                     	;# 
   749  038E                     	;# 
   750  0391                     	;# 
   751  0392                     	;# 
   752  0393                     	;# 
   753  0397                     	;# 
   754  0398                     	;# 
   755  0399                     	;# 
   756  0415                     	;# 
   757  0416                     	;# 
   758  0417                     	;# 
   759  041C                     	;# 
   760  041D                     	;# 
   761  041E                     	;# 
   762  0511                     	;# 
   763  0515                     	;# 
   764  0617                     	;# 
   765  0618                     	;# 
   766  0619                     	;# 
   767  0619                     	;# 
   768  061A                     	;# 
   769  061B                     	;# 
   770  061C                     	;# 
   771  061C                     	;# 
   772  0691                     	;# 
   773  0692                     	;# 
   774  0693                     	;# 
   775  0694                     	;# 
   776  0695                     	;# 
   777  0696                     	;# 
   778  0697                     	;# 
   779  0698                     	;# 
   780  0699                     	;# 
   781  069A                     	;# 
   782  069B                     	;# 
   783  069C                     	;# 
   784  069D                     	;# 
   785  069E                     	;# 
   786  069F                     	;# 
   787  0E0F                     	;# 
   788  0E10                     	;# 
   789  0E11                     	;# 
   790  0E12                     	;# 
   791  0E13                     	;# 
   792  0E14                     	;# 
   793  0E15                     	;# 
   794  0E17                     	;# 
   795  0E20                     	;# 
   796  0E21                     	;# 
   797  0E22                     	;# 
   798  0E24                     	;# 
   799  0E25                     	;# 
   800  0E28                     	;# 
   801  0E29                     	;# 
   802  0E2A                     	;# 
   803  0E2B                     	;# 
   804  0E90                     	;# 
   805  0E91                     	;# 
   806  0E92                     	;# 
   807  0E94                     	;# 
   808  0E95                     	;# 
   809  0EA0                     	;# 
   810  0EA1                     	;# 
   811  0EA2                     	;# 
   812  0EA3                     	;# 
   813  0EA4                     	;# 
   814  0EA5                     	;# 
   815  0F0F                     	;# 
   816  0F10                     	;# 
   817  0F11                     	;# 
   818  0F12                     	;# 
   819  0F13                     	;# 
   820  0F14                     	;# 
   821  0F15                     	;# 
   822  0F16                     	;# 
   823  0F17                     	;# 
   824  0F18                     	;# 
   825  0F19                     	;# 
   826  0F1A                     	;# 
   827  0F1B                     	;# 
   828  0F1C                     	;# 
   829  0F1D                     	;# 
   830  0F1E                     	;# 
   831  0F1F                     	;# 
   832  0F20                     	;# 
   833  0F21                     	;# 
   834  0F22                     	;# 
   835  0F23                     	;# 
   836  0F24                     	;# 
   837  0F25                     	;# 
   838  0F26                     	;# 
   839  0F27                     	;# 
   840  0F28                     	;# 
   841  0F29                     	;# 
   842  0F2A                     	;# 
   843  0F2B                     	;# 
   844  0F2C                     	;# 
   845  0F2D                     	;# 
   846  0F9E                     	;# 
   847  0FE4                     	;# 
   848  0FE5                     	;# 
   849  0FE6                     	;# 
   850  0FE7                     	;# 
   851  0FE8                     	;# 
   852  0FE9                     	;# 
   853  0FEA                     	;# 
   854  0FEB                     	;# 
   855  0FED                     	;# 
   856  0FEE                     	;# 
   857  0FEF                     	;# 
   858  0000                     	;# 
   859  0001                     	;# 
   860  0002                     	;# 
   861  0003                     	;# 
   862  0004                     	;# 
   863  0005                     	;# 
   864  0006                     	;# 
   865  0007                     	;# 
   866  0008                     	;# 
   867  0009                     	;# 
   868  000A                     	;# 
   869  000B                     	;# 
   870  000C                     	;# 
   871  000E                     	;# 
   872  0011                     	;# 
   873  0012                     	;# 
   874  0013                     	;# 
   875  0015                     	;# 
   876  0016                     	;# 
   877  0016                     	;# 
   878  0017                     	;# 
   879  0018                     	;# 
   880  0019                     	;# 
   881  001A                     	;# 
   882  001B                     	;# 
   883  001C                     	;# 
   884  008C                     	;# 
   885  008E                     	;# 
   886  0091                     	;# 
   887  0092                     	;# 
   888  0093                     	;# 
   889  0095                     	;# 
   890  0096                     	;# 
   891  0097                     	;# 
   892  0098                     	;# 
   893  0099                     	;# 
   894  009A                     	;# 
   895  009B                     	;# 
   896  009B                     	;# 
   897  009C                     	;# 
   898  009D                     	;# 
   899  009E                     	;# 
   900  009F                     	;# 
   901  010C                     	;# 
   902  010E                     	;# 
   903  0111                     	;# 
   904  0112                     	;# 
   905  0113                     	;# 
   906  0114                     	;# 
   907  0115                     	;# 
   908  0116                     	;# 
   909  0117                     	;# 
   910  0118                     	;# 
   911  0119                     	;# 
   912  011C                     	;# 
   913  018C                     	;# 
   914  018E                     	;# 
   915  0191                     	;# 
   916  0191                     	;# 
   917  0192                     	;# 
   918  0193                     	;# 
   919  0193                     	;# 
   920  0194                     	;# 
   921  0195                     	;# 
   922  0196                     	;# 
   923  0197                     	;# 
   924  0199                     	;# 
   925  0199                     	;# 
   926  0199                     	;# 
   927  019A                     	;# 
   928  019A                     	;# 
   929  019A                     	;# 
   930  019B                     	;# 
   931  019B                     	;# 
   932  019B                     	;# 
   933  019B                     	;# 
   934  019B                     	;# 
   935  019C                     	;# 
   936  019C                     	;# 
   937  019C                     	;# 
   938  019D                     	;# 
   939  019D                     	;# 
   940  019D                     	;# 
   941  019E                     	;# 
   942  019E                     	;# 
   943  019E                     	;# 
   944  019F                     	;# 
   945  019F                     	;# 
   946  019F                     	;# 
   947  019F                     	;# 
   948  019F                     	;# 
   949  020C                     	;# 
   950  020E                     	;# 
   951  0211                     	;# 
   952  0211                     	;# 
   953  0212                     	;# 
   954  0212                     	;# 
   955  0213                     	;# 
   956  0213                     	;# 
   957  0214                     	;# 
   958  0214                     	;# 
   959  0215                     	;# 
   960  0215                     	;# 
   961  0215                     	;# 
   962  0215                     	;# 
   963  0216                     	;# 
   964  0216                     	;# 
   965  0217                     	;# 
   966  0217                     	;# 
   967  028C                     	;# 
   968  028E                     	;# 
   969  0291                     	;# 
   970  0291                     	;# 
   971  0292                     	;# 
   972  0293                     	;# 
   973  0293                     	;# 
   974  0298                     	;# 
   975  0298                     	;# 
   976  0299                     	;# 
   977  029A                     	;# 
   978  029A                     	;# 
   979  029E                     	;# 
   980  030C                     	;# 
   981  030E                     	;# 
   982  038C                     	;# 
   983  038E                     	;# 
   984  0391                     	;# 
   985  0392                     	;# 
   986  0393                     	;# 
   987  0397                     	;# 
   988  0398                     	;# 
   989  0399                     	;# 
   990  0415                     	;# 
   991  0416                     	;# 
   992  0417                     	;# 
   993  041C                     	;# 
   994  041D                     	;# 
   995  041E                     	;# 
   996  0511                     	;# 
   997  0515                     	;# 
   998  0617                     	;# 
   999  0618                     	;# 
  1000  0619                     	;# 
  1001  0619                     	;# 
  1002  061A                     	;# 
  1003  061B                     	;# 
  1004  061C                     	;# 
  1005  061C                     	;# 
  1006  0691                     	;# 
  1007  0692                     	;# 
  1008  0693                     	;# 
  1009  0694                     	;# 
  1010  0695                     	;# 
  1011  0696                     	;# 
  1012  0697                     	;# 
  1013  0698                     	;# 
  1014  0699                     	;# 
  1015  069A                     	;# 
  1016  069B                     	;# 
  1017  069C                     	;# 
  1018  069D                     	;# 
  1019  069E                     	;# 
  1020  069F                     	;# 
  1021  0E0F                     	;# 
  1022  0E10                     	;# 
  1023  0E11                     	;# 
  1024  0E12                     	;# 
  1025  0E13                     	;# 
  1026  0E14                     	;# 
  1027  0E15                     	;# 
  1028  0E17                     	;# 
  1029  0E20                     	;# 
  1030  0E21                     	;# 
  1031  0E22                     	;# 
  1032  0E24                     	;# 
  1033  0E25                     	;# 
  1034  0E28                     	;# 
  1035  0E29                     	;# 
  1036  0E2A                     	;# 
  1037  0E2B                     	;# 
  1038  0E90                     	;# 
  1039  0E91                     	;# 
  1040  0E92                     	;# 
  1041  0E94                     	;# 
  1042  0E95                     	;# 
  1043  0EA0                     	;# 
  1044  0EA1                     	;# 
  1045  0EA2                     	;# 
  1046  0EA3                     	;# 
  1047  0EA4                     	;# 
  1048  0EA5                     	;# 
  1049  0F0F                     	;# 
  1050  0F10                     	;# 
  1051  0F11                     	;# 
  1052  0F12                     	;# 
  1053  0F13                     	;# 
  1054  0F14                     	;# 
  1055  0F15                     	;# 
  1056  0F16                     	;# 
  1057  0F17                     	;# 
  1058  0F18                     	;# 
  1059  0F19                     	;# 
  1060  0F1A                     	;# 
  1061  0F1B                     	;# 
  1062  0F1C                     	;# 
  1063  0F1D                     	;# 
  1064  0F1E                     	;# 
  1065  0F1F                     	;# 
  1066  0F20                     	;# 
  1067  0F21                     	;# 
  1068  0F22                     	;# 
  1069  0F23                     	;# 
  1070  0F24                     	;# 
  1071  0F25                     	;# 
  1072  0F26                     	;# 
  1073  0F27                     	;# 
  1074  0F28                     	;# 
  1075  0F29                     	;# 
  1076  0F2A                     	;# 
  1077  0F2B                     	;# 
  1078  0F2C                     	;# 
  1079  0F2D                     	;# 
  1080  0F9E                     	;# 
  1081  0FE4                     	;# 
  1082  0FE5                     	;# 
  1083  0FE6                     	;# 
  1084  0FE7                     	;# 
  1085  0FE8                     	;# 
  1086  0FE9                     	;# 
  1087  0FEA                     	;# 
  1088  0FEB                     	;# 
  1089  0FED                     	;# 
  1090  0FEE                     	;# 
  1091  0FEF                     	;# 
  1092  0000                     	;# 
  1093  0001                     	;# 
  1094  0002                     	;# 
  1095  0003                     	;# 
  1096  0004                     	;# 
  1097  0005                     	;# 
  1098  0006                     	;# 
  1099  0007                     	;# 
  1100  0008                     	;# 
  1101  0009                     	;# 
  1102  000A                     	;# 
  1103  000B                     	;# 
  1104  000C                     	;# 
  1105  000E                     	;# 
  1106  0011                     	;# 
  1107  0012                     	;# 
  1108  0013                     	;# 
  1109  0015                     	;# 
  1110  0016                     	;# 
  1111  0016                     	;# 
  1112  0017                     	;# 
  1113  0018                     	;# 
  1114  0019                     	;# 
  1115  001A                     	;# 
  1116  001B                     	;# 
  1117  001C                     	;# 
  1118  008C                     	;# 
  1119  008E                     	;# 
  1120  0091                     	;# 
  1121  0092                     	;# 
  1122  0093                     	;# 
  1123  0095                     	;# 
  1124  0096                     	;# 
  1125  0097                     	;# 
  1126  0098                     	;# 
  1127  0099                     	;# 
  1128  009A                     	;# 
  1129  009B                     	;# 
  1130  009B                     	;# 
  1131  009C                     	;# 
  1132  009D                     	;# 
  1133  009E                     	;# 
  1134  009F                     	;# 
  1135  010C                     	;# 
  1136  010E                     	;# 
  1137  0111                     	;# 
  1138  0112                     	;# 
  1139  0113                     	;# 
  1140  0114                     	;# 
  1141  0115                     	;# 
  1142  0116                     	;# 
  1143  0117                     	;# 
  1144  0118                     	;# 
  1145  0119                     	;# 
  1146  011C                     	;# 
  1147  018C                     	;# 
  1148  018E                     	;# 
  1149  0191                     	;# 
  1150  0191                     	;# 
  1151  0192                     	;# 
  1152  0193                     	;# 
  1153  0193                     	;# 
  1154  0194                     	;# 
  1155  0195                     	;# 
  1156  0196                     	;# 
  1157  0197                     	;# 
  1158  0199                     	;# 
  1159  0199                     	;# 
  1160  0199                     	;# 
  1161  019A                     	;# 
  1162  019A                     	;# 
  1163  019A                     	;# 
  1164  019B                     	;# 
  1165  019B                     	;# 
  1166  019B                     	;# 
  1167  019B                     	;# 
  1168  019B                     	;# 
  1169  019C                     	;# 
  1170  019C                     	;# 
  1171  019C                     	;# 
  1172  019D                     	;# 
  1173  019D                     	;# 
  1174  019D                     	;# 
  1175  019E                     	;# 
  1176  019E                     	;# 
  1177  019E                     	;# 
  1178  019F                     	;# 
  1179  019F                     	;# 
  1180  019F                     	;# 
  1181  019F                     	;# 
  1182  019F                     	;# 
  1183  020C                     	;# 
  1184  020E                     	;# 
  1185  0211                     	;# 
  1186  0211                     	;# 
  1187  0212                     	;# 
  1188  0212                     	;# 
  1189  0213                     	;# 
  1190  0213                     	;# 
  1191  0214                     	;# 
  1192  0214                     	;# 
  1193  0215                     	;# 
  1194  0215                     	;# 
  1195  0215                     	;# 
  1196  0215                     	;# 
  1197  0216                     	;# 
  1198  0216                     	;# 
  1199  0217                     	;# 
  1200  0217                     	;# 
  1201  028C                     	;# 
  1202  028E                     	;# 
  1203  0291                     	;# 
  1204  0291                     	;# 
  1205  0292                     	;# 
  1206  0293                     	;# 
  1207  0293                     	;# 
  1208  0298                     	;# 
  1209  0298                     	;# 
  1210  0299                     	;# 
  1211  029A                     	;# 
  1212  029A                     	;# 
  1213  029E                     	;# 
  1214  030C                     	;# 
  1215  030E                     	;# 
  1216  038C                     	;# 
  1217  038E                     	;# 
  1218  0391                     	;# 
  1219  0392                     	;# 
  1220  0393                     	;# 
  1221  0397                     	;# 
  1222  0398                     	;# 
  1223  0399                     	;# 
  1224  0415                     	;# 
  1225  0416                     	;# 
  1226  0417                     	;# 
  1227  041C                     	;# 
  1228  041D                     	;# 
  1229  041E                     	;# 
  1230  0511                     	;# 
  1231  0515                     	;# 
  1232  0617                     	;# 
  1233  0618                     	;# 
  1234  0619                     	;# 
  1235  0619                     	;# 
  1236  061A                     	;# 
  1237  061B                     	;# 
  1238  061C                     	;# 
  1239  061C                     	;# 
  1240  0691                     	;# 
  1241  0692                     	;# 
  1242  0693                     	;# 
  1243  0694                     	;# 
  1244  0695                     	;# 
  1245  0696                     	;# 
  1246  0697                     	;# 
  1247  0698                     	;# 
  1248  0699                     	;# 
  1249  069A                     	;# 
  1250  069B                     	;# 
  1251  069C                     	;# 
  1252  069D                     	;# 
  1253  069E                     	;# 
  1254  069F                     	;# 
  1255  0E0F                     	;# 
  1256  0E10                     	;# 
  1257  0E11                     	;# 
  1258  0E12                     	;# 
  1259  0E13                     	;# 
  1260  0E14                     	;# 
  1261  0E15                     	;# 
  1262  0E17                     	;# 
  1263  0E20                     	;# 
  1264  0E21                     	;# 
  1265  0E22                     	;# 
  1266  0E24                     	;# 
  1267  0E25                     	;# 
  1268  0E28                     	;# 
  1269  0E29                     	;# 
  1270  0E2A                     	;# 
  1271  0E2B                     	;# 
  1272  0E90                     	;# 
  1273  0E91                     	;# 
  1274  0E92                     	;# 
  1275  0E94                     	;# 
  1276  0E95                     	;# 
  1277  0EA0                     	;# 
  1278  0EA1                     	;# 
  1279  0EA2                     	;# 
  1280  0EA3                     	;# 
  1281  0EA4                     	;# 
  1282  0EA5                     	;# 
  1283  0F0F                     	;# 
  1284  0F10                     	;# 
  1285  0F11                     	;# 
  1286  0F12                     	;# 
  1287  0F13                     	;# 
  1288  0F14                     	;# 
  1289  0F15                     	;# 
  1290  0F16                     	;# 
  1291  0F17                     	;# 
  1292  0F18                     	;# 
  1293  0F19                     	;# 
  1294  0F1A                     	;# 
  1295  0F1B                     	;# 
  1296  0F1C                     	;# 
  1297  0F1D                     	;# 
  1298  0F1E                     	;# 
  1299  0F1F                     	;# 
  1300  0F20                     	;# 
  1301  0F21                     	;# 
  1302  0F22                     	;# 
  1303  0F23                     	;# 
  1304  0F24                     	;# 
  1305  0F25                     	;# 
  1306  0F26                     	;# 
  1307  0F27                     	;# 
  1308  0F28                     	;# 
  1309  0F29                     	;# 
  1310  0F2A                     	;# 
  1311  0F2B                     	;# 
  1312  0F2C                     	;# 
  1313  0F2D                     	;# 
  1314  0F9E                     	;# 
  1315  0FE4                     	;# 
  1316  0FE5                     	;# 
  1317  0FE6                     	;# 
  1318  0FE7                     	;# 
  1319  0FE8                     	;# 
  1320  0FE9                     	;# 
  1321  0FEA                     	;# 
  1322  0FEB                     	;# 
  1323  0FED                     	;# 
  1324  0FEE                     	;# 
  1325  0FEF                     	;# 
  1326  0000                     	;# 
  1327  0001                     	;# 
  1328  0002                     	;# 
  1329  0003                     	;# 
  1330  0004                     	;# 
  1331  0005                     	;# 
  1332  0006                     	;# 
  1333  0007                     	;# 
  1334  0008                     	;# 
  1335  0009                     	;# 
  1336  000A                     	;# 
  1337  000B                     	;# 
  1338  000C                     	;# 
  1339  000E                     	;# 
  1340  0011                     	;# 
  1341  0012                     	;# 
  1342  0013                     	;# 
  1343  0015                     	;# 
  1344  0016                     	;# 
  1345  0016                     	;# 
  1346  0017                     	;# 
  1347  0018                     	;# 
  1348  0019                     	;# 
  1349  001A                     	;# 
  1350  001B                     	;# 
  1351  001C                     	;# 
  1352  008C                     	;# 
  1353  008E                     	;# 
  1354  0091                     	;# 
  1355  0092                     	;# 
  1356  0093                     	;# 
  1357  0095                     	;# 
  1358  0096                     	;# 
  1359  0097                     	;# 
  1360  0098                     	;# 
  1361  0099                     	;# 
  1362  009A                     	;# 
  1363  009B                     	;# 
  1364  009B                     	;# 
  1365  009C                     	;# 
  1366  009D                     	;# 
  1367  009E                     	;# 
  1368  009F                     	;# 
  1369  010C                     	;# 
  1370  010E                     	;# 
  1371  0111                     	;# 
  1372  0112                     	;# 
  1373  0113                     	;# 
  1374  0114                     	;# 
  1375  0115                     	;# 
  1376  0116                     	;# 
  1377  0117                     	;# 
  1378  0118                     	;# 
  1379  0119                     	;# 
  1380  011C                     	;# 
  1381  018C                     	;# 
  1382  018E                     	;# 
  1383  0191                     	;# 
  1384  0191                     	;# 
  1385  0192                     	;# 
  1386  0193                     	;# 
  1387  0193                     	;# 
  1388  0194                     	;# 
  1389  0195                     	;# 
  1390  0196                     	;# 
  1391  0197                     	;# 
  1392  0199                     	;# 
  1393  0199                     	;# 
  1394  0199                     	;# 
  1395  019A                     	;# 
  1396  019A                     	;# 
  1397  019A                     	;# 
  1398  019B                     	;# 
  1399  019B                     	;# 
  1400  019B                     	;# 
  1401  019B                     	;# 
  1402  019B                     	;# 
  1403  019C                     	;# 
  1404  019C                     	;# 
  1405  019C                     	;# 
  1406  019D                     	;# 
  1407  019D                     	;# 
  1408  019D                     	;# 
  1409  019E                     	;# 
  1410  019E                     	;# 
  1411  019E                     	;# 
  1412  019F                     	;# 
  1413  019F                     	;# 
  1414  019F                     	;# 
  1415  019F                     	;# 
  1416  019F                     	;# 
  1417  020C                     	;# 
  1418  020E                     	;# 
  1419  0211                     	;# 
  1420  0211                     	;# 
  1421  0212                     	;# 
  1422  0212                     	;# 
  1423  0213                     	;# 
  1424  0213                     	;# 
  1425  0214                     	;# 
  1426  0214                     	;# 
  1427  0215                     	;# 
  1428  0215                     	;# 
  1429  0215                     	;# 
  1430  0215                     	;# 
  1431  0216                     	;# 
  1432  0216                     	;# 
  1433  0217                     	;# 
  1434  0217                     	;# 
  1435  028C                     	;# 
  1436  028E                     	;# 
  1437  0291                     	;# 
  1438  0291                     	;# 
  1439  0292                     	;# 
  1440  0293                     	;# 
  1441  0293                     	;# 
  1442  0298                     	;# 
  1443  0298                     	;# 
  1444  0299                     	;# 
  1445  029A                     	;# 
  1446  029A                     	;# 
  1447  029E                     	;# 
  1448  030C                     	;# 
  1449  030E                     	;# 
  1450  038C                     	;# 
  1451  038E                     	;# 
  1452  0391                     	;# 
  1453  0392                     	;# 
  1454  0393                     	;# 
  1455  0397                     	;# 
  1456  0398                     	;# 
  1457  0399                     	;# 
  1458  0415                     	;# 
  1459  0416                     	;# 
  1460  0417                     	;# 
  1461  041C                     	;# 
  1462  041D                     	;# 
  1463  041E                     	;# 
  1464  0511                     	;# 
  1465  0515                     	;# 
  1466  0617                     	;# 
  1467  0618                     	;# 
  1468  0619                     	;# 
  1469  0619                     	;# 
  1470  061A                     	;# 
  1471  061B                     	;# 
  1472  061C                     	;# 
  1473  061C                     	;# 
  1474  0691                     	;# 
  1475  0692                     	;# 
  1476  0693                     	;# 
  1477  0694                     	;# 
  1478  0695                     	;# 
  1479  0696                     	;# 
  1480  0697                     	;# 
  1481  0698                     	;# 
  1482  0699                     	;# 
  1483  069A                     	;# 
  1484  069B                     	;# 
  1485  069C                     	;# 
  1486  069D                     	;# 
  1487  069E                     	;# 
  1488  069F                     	;# 
  1489  0E0F                     	;# 
  1490  0E10                     	;# 
  1491  0E11                     	;# 
  1492  0E12                     	;# 
  1493  0E13                     	;# 
  1494  0E14                     	;# 
  1495  0E15                     	;# 
  1496  0E17                     	;# 
  1497  0E20                     	;# 
  1498  0E21                     	;# 
  1499  0E22                     	;# 
  1500  0E24                     	;# 
  1501  0E25                     	;# 
  1502  0E28                     	;# 
  1503  0E29                     	;# 
  1504  0E2A                     	;# 
  1505  0E2B                     	;# 
  1506  0E90                     	;# 
  1507  0E91                     	;# 
  1508  0E92                     	;# 
  1509  0E94                     	;# 
  1510  0E95                     	;# 
  1511  0EA0                     	;# 
  1512  0EA1                     	;# 
  1513  0EA2                     	;# 
  1514  0EA3                     	;# 
  1515  0EA4                     	;# 
  1516  0EA5                     	;# 
  1517  0F0F                     	;# 
  1518  0F10                     	;# 
  1519  0F11                     	;# 
  1520  0F12                     	;# 
  1521  0F13                     	;# 
  1522  0F14                     	;# 
  1523  0F15                     	;# 
  1524  0F16                     	;# 
  1525  0F17                     	;# 
  1526  0F18                     	;# 
  1527  0F19                     	;# 
  1528  0F1A                     	;# 
  1529  0F1B                     	;# 
  1530  0F1C                     	;# 
  1531  0F1D                     	;# 
  1532  0F1E                     	;# 
  1533  0F1F                     	;# 
  1534  0F20                     	;# 
  1535  0F21                     	;# 
  1536  0F22                     	;# 
  1537  0F23                     	;# 
  1538  0F24                     	;# 
  1539  0F25                     	;# 
  1540  0F26                     	;# 
  1541  0F27                     	;# 
  1542  0F28                     	;# 
  1543  0F29                     	;# 
  1544  0F2A                     	;# 
  1545  0F2B                     	;# 
  1546  0F2C                     	;# 
  1547  0F2D                     	;# 
  1548  0F9E                     	;# 
  1549  0FE4                     	;# 
  1550  0FE5                     	;# 
  1551  0FE6                     	;# 
  1552  0FE7                     	;# 
  1553  0FE8                     	;# 
  1554  0FE9                     	;# 
  1555  0FEA                     	;# 
  1556  0FEB                     	;# 
  1557  0FED                     	;# 
  1558  0FEE                     	;# 
  1559  0FEF                     	;# 
  1560  0000                     	;# 
  1561  0001                     	;# 
  1562  0002                     	;# 
  1563  0003                     	;# 
  1564  0004                     	;# 
  1565  0005                     	;# 
  1566  0006                     	;# 
  1567  0007                     	;# 
  1568  0008                     	;# 
  1569  0009                     	;# 
  1570  000A                     	;# 
  1571  000B                     	;# 
  1572  000C                     	;# 
  1573  000E                     	;# 
  1574  0011                     	;# 
  1575  0012                     	;# 
  1576  0013                     	;# 
  1577  0015                     	;# 
  1578  0016                     	;# 
  1579  0016                     	;# 
  1580  0017                     	;# 
  1581  0018                     	;# 
  1582  0019                     	;# 
  1583  001A                     	;# 
  1584  001B                     	;# 
  1585  001C                     	;# 
  1586  008C                     	;# 
  1587  008E                     	;# 
  1588  0091                     	;# 
  1589  0092                     	;# 
  1590  0093                     	;# 
  1591  0095                     	;# 
  1592  0096                     	;# 
  1593  0097                     	;# 
  1594  0098                     	;# 
  1595  0099                     	;# 
  1596  009A                     	;# 
  1597  009B                     	;# 
  1598  009B                     	;# 
  1599  009C                     	;# 
  1600  009D                     	;# 
  1601  009E                     	;# 
  1602  009F                     	;# 
  1603  010C                     	;# 
  1604  010E                     	;# 
  1605  0111                     	;# 
  1606  0112                     	;# 
  1607  0113                     	;# 
  1608  0114                     	;# 
  1609  0115                     	;# 
  1610  0116                     	;# 
  1611  0117                     	;# 
  1612  0118                     	;# 
  1613  0119                     	;# 
  1614  011C                     	;# 
  1615  018C                     	;# 
  1616  018E                     	;# 
  1617  0191                     	;# 
  1618  0191                     	;# 
  1619  0192                     	;# 
  1620  0193                     	;# 
  1621  0193                     	;# 
  1622  0194                     	;# 
  1623  0195                     	;# 
  1624  0196                     	;# 
  1625  0197                     	;# 
  1626  0199                     	;# 
  1627  0199                     	;# 
  1628  0199                     	;# 
  1629  019A                     	;# 
  1630  019A                     	;# 
  1631  019A                     	;# 
  1632  019B                     	;# 
  1633  019B                     	;# 
  1634  019B                     	;# 
  1635  019B                     	;# 
  1636  019B                     	;# 
  1637  019C                     	;# 
  1638  019C                     	;# 
  1639  019C                     	;# 
  1640  019D                     	;# 
  1641  019D                     	;# 
  1642  019D                     	;# 
  1643  019E                     	;# 
  1644  019E                     	;# 
  1645  019E                     	;# 
  1646  019F                     	;# 
  1647  019F                     	;# 
  1648  019F                     	;# 
  1649  019F                     	;# 
  1650  019F                     	;# 
  1651  020C                     	;# 
  1652  020E                     	;# 
  1653  0211                     	;# 
  1654  0211                     	;# 
  1655  0212                     	;# 
  1656  0212                     	;# 
  1657  0213                     	;# 
  1658  0213                     	;# 
  1659  0214                     	;# 
  1660  0214                     	;# 
  1661  0215                     	;# 
  1662  0215                     	;# 
  1663  0215                     	;# 
  1664  0215                     	;# 
  1665  0216                     	;# 
  1666  0216                     	;# 
  1667  0217                     	;# 
  1668  0217                     	;# 
  1669  028C                     	;# 
  1670  028E                     	;# 
  1671  0291                     	;# 
  1672  0291                     	;# 
  1673  0292                     	;# 
  1674  0293                     	;# 
  1675  0293                     	;# 
  1676  0298                     	;# 
  1677  0298                     	;# 
  1678  0299                     	;# 
  1679  029A                     	;# 
  1680  029A                     	;# 
  1681  029E                     	;# 
  1682  030C                     	;# 
  1683  030E                     	;# 
  1684  038C                     	;# 
  1685  038E                     	;# 
  1686  0391                     	;# 
  1687  0392                     	;# 
  1688  0393                     	;# 
  1689  0397                     	;# 
  1690  0398                     	;# 
  1691  0399                     	;# 
  1692  0415                     	;# 
  1693  0416                     	;# 
  1694  0417                     	;# 
  1695  041C                     	;# 
  1696  041D                     	;# 
  1697  041E                     	;# 
  1698  0511                     	;# 
  1699  0515                     	;# 
  1700  0617                     	;# 
  1701  0618                     	;# 
  1702  0619                     	;# 
  1703  0619                     	;# 
  1704  061A                     	;# 
  1705  061B                     	;# 
  1706  061C                     	;# 
  1707  061C                     	;# 
  1708  0691                     	;# 
  1709  0692                     	;# 
  1710  0693                     	;# 
  1711  0694                     	;# 
  1712  0695                     	;# 
  1713  0696                     	;# 
  1714  0697                     	;# 
  1715  0698                     	;# 
  1716  0699                     	;# 
  1717  069A                     	;# 
  1718  069B                     	;# 
  1719  069C                     	;# 
  1720  069D                     	;# 
  1721  069E                     	;# 
  1722  069F                     	;# 
  1723  0E0F                     	;# 
  1724  0E10                     	;# 
  1725  0E11                     	;# 
  1726  0E12                     	;# 
  1727  0E13                     	;# 
  1728  0E14                     	;# 
  1729  0E15                     	;# 
  1730  0E17                     	;# 
  1731  0E20                     	;# 
  1732  0E21                     	;# 
  1733  0E22                     	;# 
  1734  0E24                     	;# 
  1735  0E25                     	;# 
  1736  0E28                     	;# 
  1737  0E29                     	;# 
  1738  0E2A                     	;# 
  1739  0E2B                     	;# 
  1740  0E90                     	;# 
  1741  0E91                     	;# 
  1742  0E92                     	;# 
  1743  0E94                     	;# 
  1744  0E95                     	;# 
  1745  0EA0                     	;# 
  1746  0EA1                     	;# 
  1747  0EA2                     	;# 
  1748  0EA3                     	;# 
  1749  0EA4                     	;# 
  1750  0EA5                     	;# 
  1751  0F0F                     	;# 
  1752  0F10                     	;# 
  1753  0F11                     	;# 
  1754  0F12                     	;# 
  1755  0F13                     	;# 
  1756  0F14                     	;# 
  1757  0F15                     	;# 
  1758  0F16                     	;# 
  1759  0F17                     	;# 
  1760  0F18                     	;# 
  1761  0F19                     	;# 
  1762  0F1A                     	;# 
  1763  0F1B                     	;# 
  1764  0F1C                     	;# 
  1765  0F1D                     	;# 
  1766  0F1E                     	;# 
  1767  0F1F                     	;# 
  1768  0F20                     	;# 
  1769  0F21                     	;# 
  1770  0F22                     	;# 
  1771  0F23                     	;# 
  1772  0F24                     	;# 
  1773  0F25                     	;# 
  1774  0F26                     	;# 
  1775  0F27                     	;# 
  1776  0F28                     	;# 
  1777  0F29                     	;# 
  1778  0F2A                     	;# 
  1779  0F2B                     	;# 
  1780  0F2C                     	;# 
  1781  0F2D                     	;# 
  1782  0F9E                     	;# 
  1783  0FE4                     	;# 
  1784  0FE5                     	;# 
  1785  0FE6                     	;# 
  1786  0FE7                     	;# 
  1787  0FE8                     	;# 
  1788  0FE9                     	;# 
  1789  0FEA                     	;# 
  1790  0FEB                     	;# 
  1791  0FED                     	;# 
  1792  0FEE                     	;# 
  1793  0FEF                     	;# 
  1794  0000                     	;# 
  1795  0001                     	;# 
  1796  0002                     	;# 
  1797  0003                     	;# 
  1798  0004                     	;# 
  1799  0005                     	;# 
  1800  0006                     	;# 
  1801  0007                     	;# 
  1802  0008                     	;# 
  1803  0009                     	;# 
  1804  000A                     	;# 
  1805  000B                     	;# 
  1806  000C                     	;# 
  1807  000E                     	;# 
  1808  0011                     	;# 
  1809  0012                     	;# 
  1810  0013                     	;# 
  1811  0015                     	;# 
  1812  0016                     	;# 
  1813  0016                     	;# 
  1814  0017                     	;# 
  1815  0018                     	;# 
  1816  0019                     	;# 
  1817  001A                     	;# 
  1818  001B                     	;# 
  1819  001C                     	;# 
  1820  008C                     	;# 
  1821  008E                     	;# 
  1822  0091                     	;# 
  1823  0092                     	;# 
  1824  0093                     	;# 
  1825  0095                     	;# 
  1826  0096                     	;# 
  1827  0097                     	;# 
  1828  0098                     	;# 
  1829  0099                     	;# 
  1830  009A                     	;# 
  1831  009B                     	;# 
  1832  009B                     	;# 
  1833  009C                     	;# 
  1834  009D                     	;# 
  1835  009E                     	;# 
  1836  009F                     	;# 
  1837  010C                     	;# 
  1838  010E                     	;# 
  1839  0111                     	;# 
  1840  0112                     	;# 
  1841  0113                     	;# 
  1842  0114                     	;# 
  1843  0115                     	;# 
  1844  0116                     	;# 
  1845  0117                     	;# 
  1846  0118                     	;# 
  1847  0119                     	;# 
  1848  011C                     	;# 
  1849  018C                     	;# 
  1850  018E                     	;# 
  1851  0191                     	;# 
  1852  0191                     	;# 
  1853  0192                     	;# 
  1854  0193                     	;# 
  1855  0193                     	;# 
  1856  0194                     	;# 
  1857  0195                     	;# 
  1858  0196                     	;# 
  1859  0197                     	;# 
  1860  0199                     	;# 
  1861  0199                     	;# 
  1862  0199                     	;# 
  1863  019A                     	;# 
  1864  019A                     	;# 
  1865  019A                     	;# 
  1866  019B                     	;# 
  1867  019B                     	;# 
  1868  019B                     	;# 
  1869  019B                     	;# 
  1870  019B                     	;# 
  1871  019C                     	;# 
  1872  019C                     	;# 
  1873  019C                     	;# 
  1874  019D                     	;# 
  1875  019D                     	;# 
  1876  019D                     	;# 
  1877  019E                     	;# 
  1878  019E                     	;# 
  1879  019E                     	;# 
  1880  019F                     	;# 
  1881  019F                     	;# 
  1882  019F                     	;# 
  1883  019F                     	;# 
  1884  019F                     	;# 
  1885  020C                     	;# 
  1886  020E                     	;# 
  1887  0211                     	;# 
  1888  0211                     	;# 
  1889  0212                     	;# 
  1890  0212                     	;# 
  1891  0213                     	;# 
  1892  0213                     	;# 
  1893  0214                     	;# 
  1894  0214                     	;# 
  1895  0215                     	;# 
  1896  0215                     	;# 
  1897  0215                     	;# 
  1898  0215                     	;# 
  1899  0216                     	;# 
  1900  0216                     	;# 
  1901  0217                     	;# 
  1902  0217                     	;# 
  1903  028C                     	;# 
  1904  028E                     	;# 
  1905  0291                     	;# 
  1906  0291                     	;# 
  1907  0292                     	;# 
  1908  0293                     	;# 
  1909  0293                     	;# 
  1910  0298                     	;# 
  1911  0298                     	;# 
  1912  0299                     	;# 
  1913  029A                     	;# 
  1914  029A                     	;# 
  1915  029E                     	;# 
  1916  030C                     	;# 
  1917  030E                     	;# 
  1918  038C                     	;# 
  1919  038E                     	;# 
  1920  0391                     	;# 
  1921  0392                     	;# 
  1922  0393                     	;# 
  1923  0397                     	;# 
  1924  0398                     	;# 
  1925  0399                     	;# 
  1926  0415                     	;# 
  1927  0416                     	;# 
  1928  0417                     	;# 
  1929  041C                     	;# 
  1930  041D                     	;# 
  1931  041E                     	;# 
  1932  0511                     	;# 
  1933  0515                     	;# 
  1934  0617                     	;# 
  1935  0618                     	;# 
  1936  0619                     	;# 
  1937  0619                     	;# 
  1938  061A                     	;# 
  1939  061B                     	;# 
  1940  061C                     	;# 
  1941  061C                     	;# 
  1942  0691                     	;# 
  1943  0692                     	;# 
  1944  0693                     	;# 
  1945  0694                     	;# 
  1946  0695                     	;# 
  1947  0696                     	;# 
  1948  0697                     	;# 
  1949  0698                     	;# 
  1950  0699                     	;# 
  1951  069A                     	;# 
  1952  069B                     	;# 
  1953  069C                     	;# 
  1954  069D                     	;# 
  1955  069E                     	;# 
  1956  069F                     	;# 
  1957  0E0F                     	;# 
  1958  0E10                     	;# 
  1959  0E11                     	;# 
  1960  0E12                     	;# 
  1961  0E13                     	;# 
  1962  0E14                     	;# 
  1963  0E15                     	;# 
  1964  0E17                     	;# 
  1965  0E20                     	;# 
  1966  0E21                     	;# 
  1967  0E22                     	;# 
  1968  0E24                     	;# 
  1969  0E25                     	;# 
  1970  0E28                     	;# 
  1971  0E29                     	;# 
  1972  0E2A                     	;# 
  1973  0E2B                     	;# 
  1974  0E90                     	;# 
  1975  0E91                     	;# 
  1976  0E92                     	;# 
  1977  0E94                     	;# 
  1978  0E95                     	;# 
  1979  0EA0                     	;# 
  1980  0EA1                     	;# 
  1981  0EA2                     	;# 
  1982  0EA3                     	;# 
  1983  0EA4                     	;# 
  1984  0EA5                     	;# 
  1985  0F0F                     	;# 
  1986  0F10                     	;# 
  1987  0F11                     	;# 
  1988  0F12                     	;# 
  1989  0F13                     	;# 
  1990  0F14                     	;# 
  1991  0F15                     	;# 
  1992  0F16                     	;# 
  1993  0F17                     	;# 
  1994  0F18                     	;# 
  1995  0F19                     	;# 
  1996  0F1A                     	;# 
  1997  0F1B                     	;# 
  1998  0F1C                     	;# 
  1999  0F1D                     	;# 
  2000  0F1E                     	;# 
  2001  0F1F                     	;# 
  2002  0F20                     	;# 
  2003  0F21                     	;# 
  2004  0F22                     	;# 
  2005  0F23                     	;# 
  2006  0F24                     	;# 
  2007  0F25                     	;# 
  2008  0F26                     	;# 
  2009  0F27                     	;# 
  2010  0F28                     	;# 
  2011  0F29                     	;# 
  2012  0F2A                     	;# 
  2013  0F2B                     	;# 
  2014  0F2C                     	;# 
  2015  0F2D                     	;# 
  2016  0F9E                     	;# 
  2017  0FE4                     	;# 
  2018  0FE5                     	;# 
  2019  0FE6                     	;# 
  2020  0FE7                     	;# 
  2021  0FE8                     	;# 
  2022  0FE9                     	;# 
  2023  0FEA                     	;# 
  2024  0FEB                     	;# 
  2025  0FED                     	;# 
  2026  0FEE                     	;# 
  2027  0FEF                     	;# 
  2028  0000                     	;# 
  2029  0001                     	;# 
  2030  0002                     	;# 
  2031  0003                     	;# 
  2032  0004                     	;# 
  2033  0005                     	;# 
  2034  0006                     	;# 
  2035  0007                     	;# 
  2036  0008                     	;# 
  2037  0009                     	;# 
  2038  000A                     	;# 
  2039  000B                     	;# 
  2040  000C                     	;# 
  2041  000E                     	;# 
  2042  0011                     	;# 
  2043  0012                     	;# 
  2044  0013                     	;# 
  2045  0015                     	;# 
  2046  0016                     	;# 
  2047  0016                     	;# 
  2048  0017                     	;# 
  2049  0018                     	;# 
  2050  0019                     	;# 
  2051  001A                     	;# 
  2052  001B                     	;# 
  2053  001C                     	;# 
  2054  008C                     	;# 
  2055  008E                     	;# 
  2056  0091                     	;# 
  2057  0092                     	;# 
  2058  0093                     	;# 
  2059  0095                     	;# 
  2060  0096                     	;# 
  2061  0097                     	;# 
  2062  0098                     	;# 
  2063  0099                     	;# 
  2064  009A                     	;# 
  2065  009B                     	;# 
  2066  009B                     	;# 
  2067  009C                     	;# 
  2068  009D                     	;# 
  2069  009E                     	;# 
  2070  009F                     	;# 
  2071  010C                     	;# 
  2072  010E                     	;# 
  2073  0111                     	;# 
  2074  0112                     	;# 
  2075  0113                     	;# 
  2076  0114                     	;# 
  2077  0115                     	;# 
  2078  0116                     	;# 
  2079  0117                     	;# 
  2080  0118                     	;# 
  2081  0119                     	;# 
  2082  011C                     	;# 
  2083  018C                     	;# 
  2084  018E                     	;# 
  2085  0191                     	;# 
  2086  0191                     	;# 
  2087  0192                     	;# 
  2088  0193                     	;# 
  2089  0193                     	;# 
  2090  0194                     	;# 
  2091  0195                     	;# 
  2092  0196                     	;# 
  2093  0197                     	;# 
  2094  0199                     	;# 
  2095  0199                     	;# 
  2096  0199                     	;# 
  2097  019A                     	;# 
  2098  019A                     	;# 
  2099  019A                     	;# 
  2100  019B                     	;# 
  2101  019B                     	;# 
  2102  019B                     	;# 
  2103  019B                     	;# 
  2104  019B                     	;# 
  2105  019C                     	;# 
  2106  019C                     	;# 
  2107  019C                     	;# 
  2108  019D                     	;# 
  2109  019D                     	;# 
  2110  019D                     	;# 
  2111  019E                     	;# 
  2112  019E                     	;# 
  2113  019E                     	;# 
  2114  019F                     	;# 
  2115  019F                     	;# 
  2116  019F                     	;# 
  2117  019F                     	;# 
  2118  019F                     	;# 
  2119  020C                     	;# 
  2120  020E                     	;# 
  2121  0211                     	;# 
  2122  0211                     	;# 
  2123  0212                     	;# 
  2124  0212                     	;# 
  2125  0213                     	;# 
  2126  0213                     	;# 
  2127  0214                     	;# 
  2128  0214                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0215                     	;# 
  2132  0215                     	;# 
  2133  0216                     	;# 
  2134  0216                     	;# 
  2135  0217                     	;# 
  2136  0217                     	;# 
  2137  028C                     	;# 
  2138  028E                     	;# 
  2139  0291                     	;# 
  2140  0291                     	;# 
  2141  0292                     	;# 
  2142  0293                     	;# 
  2143  0293                     	;# 
  2144  0298                     	;# 
  2145  0298                     	;# 
  2146  0299                     	;# 
  2147  029A                     	;# 
  2148  029A                     	;# 
  2149  029E                     	;# 
  2150  030C                     	;# 
  2151  030E                     	;# 
  2152  038C                     	;# 
  2153  038E                     	;# 
  2154  0391                     	;# 
  2155  0392                     	;# 
  2156  0393                     	;# 
  2157  0397                     	;# 
  2158  0398                     	;# 
  2159  0399                     	;# 
  2160  0415                     	;# 
  2161  0416                     	;# 
  2162  0417                     	;# 
  2163  041C                     	;# 
  2164  041D                     	;# 
  2165  041E                     	;# 
  2166  0511                     	;# 
  2167  0515                     	;# 
  2168  0617                     	;# 
  2169  0618                     	;# 
  2170  0619                     	;# 
  2171  0619                     	;# 
  2172  061A                     	;# 
  2173  061B                     	;# 
  2174  061C                     	;# 
  2175  061C                     	;# 
  2176  0691                     	;# 
  2177  0692                     	;# 
  2178  0693                     	;# 
  2179  0694                     	;# 
  2180  0695                     	;# 
  2181  0696                     	;# 
  2182  0697                     	;# 
  2183  0698                     	;# 
  2184  0699                     	;# 
  2185  069A                     	;# 
  2186  069B                     	;# 
  2187  069C                     	;# 
  2188  069D                     	;# 
  2189  069E                     	;# 
  2190  069F                     	;# 
  2191  0E0F                     	;# 
  2192  0E10                     	;# 
  2193  0E11                     	;# 
  2194  0E12                     	;# 
  2195  0E13                     	;# 
  2196  0E14                     	;# 
  2197  0E15                     	;# 
  2198  0E17                     	;# 
  2199  0E20                     	;# 
  2200  0E21                     	;# 
  2201  0E22                     	;# 
  2202  0E24                     	;# 
  2203  0E25                     	;# 
  2204  0E28                     	;# 
  2205  0E29                     	;# 
  2206  0E2A                     	;# 
  2207  0E2B                     	;# 
  2208  0E90                     	;# 
  2209  0E91                     	;# 
  2210  0E92                     	;# 
  2211  0E94                     	;# 
  2212  0E95                     	;# 
  2213  0EA0                     	;# 
  2214  0EA1                     	;# 
  2215  0EA2                     	;# 
  2216  0EA3                     	;# 
  2217  0EA4                     	;# 
  2218  0EA5                     	;# 
  2219  0F0F                     	;# 
  2220  0F10                     	;# 
  2221  0F11                     	;# 
  2222  0F12                     	;# 
  2223  0F13                     	;# 
  2224  0F14                     	;# 
  2225  0F15                     	;# 
  2226  0F16                     	;# 
  2227  0F17                     	;# 
  2228  0F18                     	;# 
  2229  0F19                     	;# 
  2230  0F1A                     	;# 
  2231  0F1B                     	;# 
  2232  0F1C                     	;# 
  2233  0F1D                     	;# 
  2234  0F1E                     	;# 
  2235  0F1F                     	;# 
  2236  0F20                     	;# 
  2237  0F21                     	;# 
  2238  0F22                     	;# 
  2239  0F23                     	;# 
  2240  0F24                     	;# 
  2241  0F25                     	;# 
  2242  0F26                     	;# 
  2243  0F27                     	;# 
  2244  0F28                     	;# 
  2245  0F29                     	;# 
  2246  0F2A                     	;# 
  2247  0F2B                     	;# 
  2248  0F2C                     	;# 
  2249  0F2D                     	;# 
  2250  0F9E                     	;# 
  2251  0FE4                     	;# 
  2252  0FE5                     	;# 
  2253  0FE6                     	;# 
  2254  0FE7                     	;# 
  2255  0FE8                     	;# 
  2256  0FE9                     	;# 
  2257  0FEA                     	;# 
  2258  0FEB                     	;# 
  2259  0FED                     	;# 
  2260  0FEE                     	;# 
  2261  0FEF                     	;# 
  2262  0000                     	;# 
  2263  0001                     	;# 
  2264  0002                     	;# 
  2265  0003                     	;# 
  2266  0004                     	;# 
  2267  0005                     	;# 
  2268  0006                     	;# 
  2269  0007                     	;# 
  2270  0008                     	;# 
  2271  0009                     	;# 
  2272  000A                     	;# 
  2273  000B                     	;# 
  2274  000C                     	;# 
  2275  000E                     	;# 
  2276  0011                     	;# 
  2277  0012                     	;# 
  2278  0013                     	;# 
  2279  0015                     	;# 
  2280  0016                     	;# 
  2281  0016                     	;# 
  2282  0017                     	;# 
  2283  0018                     	;# 
  2284  0019                     	;# 
  2285  001A                     	;# 
  2286  001B                     	;# 
  2287  001C                     	;# 
  2288  008C                     	;# 
  2289  008E                     	;# 
  2290  0091                     	;# 
  2291  0092                     	;# 
  2292  0093                     	;# 
  2293  0095                     	;# 
  2294  0096                     	;# 
  2295  0097                     	;# 
  2296  0098                     	;# 
  2297  0099                     	;# 
  2298  009A                     	;# 
  2299  009B                     	;# 
  2300  009B                     	;# 
  2301  009C                     	;# 
  2302  009D                     	;# 
  2303  009E                     	;# 
  2304  009F                     	;# 
  2305  010C                     	;# 
  2306  010E                     	;# 
  2307  0111                     	;# 
  2308  0112                     	;# 
  2309  0113                     	;# 
  2310  0114                     	;# 
  2311  0115                     	;# 
  2312  0116                     	;# 
  2313  0117                     	;# 
  2314  0118                     	;# 
  2315  0119                     	;# 
  2316  011C                     	;# 
  2317  018C                     	;# 
  2318  018E                     	;# 
  2319  0191                     	;# 
  2320  0191                     	;# 
  2321  0192                     	;# 
  2322  0193                     	;# 
  2323  0193                     	;# 
  2324  0194                     	;# 
  2325  0195                     	;# 
  2326  0196                     	;# 
  2327  0197                     	;# 
  2328  0199                     	;# 
  2329  0199                     	;# 
  2330  0199                     	;# 
  2331  019A                     	;# 
  2332  019A                     	;# 
  2333  019A                     	;# 
  2334  019B                     	;# 
  2335  019B                     	;# 
  2336  019B                     	;# 
  2337  019B                     	;# 
  2338  019B                     	;# 
  2339  019C                     	;# 
  2340  019C                     	;# 
  2341  019C                     	;# 
  2342  019D                     	;# 
  2343  019D                     	;# 
  2344  019D                     	;# 
  2345  019E                     	;# 
  2346  019E                     	;# 
  2347  019E                     	;# 
  2348  019F                     	;# 
  2349  019F                     	;# 
  2350  019F                     	;# 
  2351  019F                     	;# 
  2352  019F                     	;# 
  2353  020C                     	;# 
  2354  020E                     	;# 
  2355  0211                     	;# 
  2356  0211                     	;# 
  2357  0212                     	;# 
  2358  0212                     	;# 
  2359  0213                     	;# 
  2360  0213                     	;# 
  2361  0214                     	;# 
  2362  0214                     	;# 
  2363  0215                     	;# 
  2364  0215                     	;# 
  2365  0215                     	;# 
  2366  0215                     	;# 
  2367  0216                     	;# 
  2368  0216                     	;# 
  2369  0217                     	;# 
  2370  0217                     	;# 
  2371  028C                     	;# 
  2372  028E                     	;# 
  2373  0291                     	;# 
  2374  0291                     	;# 
  2375  0292                     	;# 
  2376  0293                     	;# 
  2377  0293                     	;# 
  2378  0298                     	;# 
  2379  0298                     	;# 
  2380  0299                     	;# 
  2381  029A                     	;# 
  2382  029A                     	;# 
  2383  029E                     	;# 
  2384  030C                     	;# 
  2385  030E                     	;# 
  2386  038C                     	;# 
  2387  038E                     	;# 
  2388  0391                     	;# 
  2389  0392                     	;# 
  2390  0393                     	;# 
  2391  0397                     	;# 
  2392  0398                     	;# 
  2393  0399                     	;# 
  2394  0415                     	;# 
  2395  0416                     	;# 
  2396  0417                     	;# 
  2397  041C                     	;# 
  2398  041D                     	;# 
  2399  041E                     	;# 
  2400  0511                     	;# 
  2401  0515                     	;# 
  2402  0617                     	;# 
  2403  0618                     	;# 
  2404  0619                     	;# 
  2405  0619                     	;# 
  2406  061A                     	;# 
  2407  061B                     	;# 
  2408  061C                     	;# 
  2409  061C                     	;# 
  2410  0691                     	;# 
  2411  0692                     	;# 
  2412  0693                     	;# 
  2413  0694                     	;# 
  2414  0695                     	;# 
  2415  0696                     	;# 
  2416  0697                     	;# 
  2417  0698                     	;# 
  2418  0699                     	;# 
  2419  069A                     	;# 
  2420  069B                     	;# 
  2421  069C                     	;# 
  2422  069D                     	;# 
  2423  069E                     	;# 
  2424  069F                     	;# 
  2425  0E0F                     	;# 
  2426  0E10                     	;# 
  2427  0E11                     	;# 
  2428  0E12                     	;# 
  2429  0E13                     	;# 
  2430  0E14                     	;# 
  2431  0E15                     	;# 
  2432  0E17                     	;# 
  2433  0E20                     	;# 
  2434  0E21                     	;# 
  2435  0E22                     	;# 
  2436  0E24                     	;# 
  2437  0E25                     	;# 
  2438  0E28                     	;# 
  2439  0E29                     	;# 
  2440  0E2A                     	;# 
  2441  0E2B                     	;# 
  2442  0E90                     	;# 
  2443  0E91                     	;# 
  2444  0E92                     	;# 
  2445  0E94                     	;# 
  2446  0E95                     	;# 
  2447  0EA0                     	;# 
  2448  0EA1                     	;# 
  2449  0EA2                     	;# 
  2450  0EA3                     	;# 
  2451  0EA4                     	;# 
  2452  0EA5                     	;# 
  2453  0F0F                     	;# 
  2454  0F10                     	;# 
  2455  0F11                     	;# 
  2456  0F12                     	;# 
  2457  0F13                     	;# 
  2458  0F14                     	;# 
  2459  0F15                     	;# 
  2460  0F16                     	;# 
  2461  0F17                     	;# 
  2462  0F18                     	;# 
  2463  0F19                     	;# 
  2464  0F1A                     	;# 
  2465  0F1B                     	;# 
  2466  0F1C                     	;# 
  2467  0F1D                     	;# 
  2468  0F1E                     	;# 
  2469  0F1F                     	;# 
  2470  0F20                     	;# 
  2471  0F21                     	;# 
  2472  0F22                     	;# 
  2473  0F23                     	;# 
  2474  0F24                     	;# 
  2475  0F25                     	;# 
  2476  0F26                     	;# 
  2477  0F27                     	;# 
  2478  0F28                     	;# 
  2479  0F29                     	;# 
  2480  0F2A                     	;# 
  2481  0F2B                     	;# 
  2482  0F2C                     	;# 
  2483  0F2D                     	;# 
  2484  0F9E                     	;# 
  2485  0FE4                     	;# 
  2486  0FE5                     	;# 
  2487  0FE6                     	;# 
  2488  0FE7                     	;# 
  2489  0FE8                     	;# 
  2490  0FE9                     	;# 
  2491  0FEA                     	;# 
  2492  0FEB                     	;# 
  2493  0FED                     	;# 
  2494  0FEE                     	;# 
  2495  0FEF                     	;# 
  2496  0000                     	;# 
  2497  0001                     	;# 
  2498  0002                     	;# 
  2499  0003                     	;# 
  2500  0004                     	;# 
  2501  0005                     	;# 
  2502  0006                     	;# 
  2503  0007                     	;# 
  2504  0008                     	;# 
  2505  0009                     	;# 
  2506  000A                     	;# 
  2507  000B                     	;# 
  2508  000C                     	;# 
  2509  000E                     	;# 
  2510  0011                     	;# 
  2511  0012                     	;# 
  2512  0013                     	;# 
  2513  0015                     	;# 
  2514  0016                     	;# 
  2515  0016                     	;# 
  2516  0017                     	;# 
  2517  0018                     	;# 
  2518  0019                     	;# 
  2519  001A                     	;# 
  2520  001B                     	;# 
  2521  001C                     	;# 
  2522  008C                     	;# 
  2523  008E                     	;# 
  2524  0091                     	;# 
  2525  0092                     	;# 
  2526  0093                     	;# 
  2527  0095                     	;# 
  2528  0096                     	;# 
  2529  0097                     	;# 
  2530  0098                     	;# 
  2531  0099                     	;# 
  2532  009A                     	;# 
  2533  009B                     	;# 
  2534  009B                     	;# 
  2535  009C                     	;# 
  2536  009D                     	;# 
  2537  009E                     	;# 
  2538  009F                     	;# 
  2539  010C                     	;# 
  2540  010E                     	;# 
  2541  0111                     	;# 
  2542  0112                     	;# 
  2543  0113                     	;# 
  2544  0114                     	;# 
  2545  0115                     	;# 
  2546  0116                     	;# 
  2547  0117                     	;# 
  2548  0118                     	;# 
  2549  0119                     	;# 
  2550  011C                     	;# 
  2551  018C                     	;# 
  2552  018E                     	;# 
  2553  0191                     	;# 
  2554  0191                     	;# 
  2555  0192                     	;# 
  2556  0193                     	;# 
  2557  0193                     	;# 
  2558  0194                     	;# 
  2559  0195                     	;# 
  2560  0196                     	;# 
  2561  0197                     	;# 
  2562  0199                     	;# 
  2563  0199                     	;# 
  2564  0199                     	;# 
  2565  019A                     	;# 
  2566  019A                     	;# 
  2567  019A                     	;# 
  2568  019B                     	;# 
  2569  019B                     	;# 
  2570  019B                     	;# 
  2571  019B                     	;# 
  2572  019B                     	;# 
  2573  019C                     	;# 
  2574  019C                     	;# 
  2575  019C                     	;# 
  2576  019D                     	;# 
  2577  019D                     	;# 
  2578  019D                     	;# 
  2579  019E                     	;# 
  2580  019E                     	;# 
  2581  019E                     	;# 
  2582  019F                     	;# 
  2583  019F                     	;# 
  2584  019F                     	;# 
  2585  019F                     	;# 
  2586  019F                     	;# 
  2587  020C                     	;# 
  2588  020E                     	;# 
  2589  0211                     	;# 
  2590  0211                     	;# 
  2591  0212                     	;# 
  2592  0212                     	;# 
  2593  0213                     	;# 
  2594  0213                     	;# 
  2595  0214                     	;# 
  2596  0214                     	;# 
  2597  0215                     	;# 
  2598  0215                     	;# 
  2599  0215                     	;# 
  2600  0215                     	;# 
  2601  0216                     	;# 
  2602  0216                     	;# 
  2603  0217                     	;# 
  2604  0217                     	;# 
  2605  028C                     	;# 
  2606  028E                     	;# 
  2607  0291                     	;# 
  2608  0291                     	;# 
  2609  0292                     	;# 
  2610  0293                     	;# 
  2611  0293                     	;# 
  2612  0298                     	;# 
  2613  0298                     	;# 
  2614  0299                     	;# 
  2615  029A                     	;# 
  2616  029A                     	;# 
  2617  029E                     	;# 
  2618  030C                     	;# 
  2619  030E                     	;# 
  2620  038C                     	;# 
  2621  038E                     	;# 
  2622  0391                     	;# 
  2623  0392                     	;# 
  2624  0393                     	;# 
  2625  0397                     	;# 
  2626  0398                     	;# 
  2627  0399                     	;# 
  2628  0415                     	;# 
  2629  0416                     	;# 
  2630  0417                     	;# 
  2631  041C                     	;# 
  2632  041D                     	;# 
  2633  041E                     	;# 
  2634  0511                     	;# 
  2635  0515                     	;# 
  2636  0617                     	;# 
  2637  0618                     	;# 
  2638  0619                     	;# 
  2639  0619                     	;# 
  2640  061A                     	;# 
  2641  061B                     	;# 
  2642  061C                     	;# 
  2643  061C                     	;# 
  2644  0691                     	;# 
  2645  0692                     	;# 
  2646  0693                     	;# 
  2647  0694                     	;# 
  2648  0695                     	;# 
  2649  0696                     	;# 
  2650  0697                     	;# 
  2651  0698                     	;# 
  2652  0699                     	;# 
  2653  069A                     	;# 
  2654  069B                     	;# 
  2655  069C                     	;# 
  2656  069D                     	;# 
  2657  069E                     	;# 
  2658  069F                     	;# 
  2659  0E0F                     	;# 
  2660  0E10                     	;# 
  2661  0E11                     	;# 
  2662  0E12                     	;# 
  2663  0E13                     	;# 
  2664  0E14                     	;# 
  2665  0E15                     	;# 
  2666  0E17                     	;# 
  2667  0E20                     	;# 
  2668  0E21                     	;# 
  2669  0E22                     	;# 
  2670  0E24                     	;# 
  2671  0E25                     	;# 
  2672  0E28                     	;# 
  2673  0E29                     	;# 
  2674  0E2A                     	;# 
  2675  0E2B                     	;# 
  2676  0E90                     	;# 
  2677  0E91                     	;# 
  2678  0E92                     	;# 
  2679  0E94                     	;# 
  2680  0E95                     	;# 
  2681  0EA0                     	;# 
  2682  0EA1                     	;# 
  2683  0EA2                     	;# 
  2684  0EA3                     	;# 
  2685  0EA4                     	;# 
  2686  0EA5                     	;# 
  2687  0F0F                     	;# 
  2688  0F10                     	;# 
  2689  0F11                     	;# 
  2690  0F12                     	;# 
  2691  0F13                     	;# 
  2692  0F14                     	;# 
  2693  0F15                     	;# 
  2694  0F16                     	;# 
  2695  0F17                     	;# 
  2696  0F18                     	;# 
  2697  0F19                     	;# 
  2698  0F1A                     	;# 
  2699  0F1B                     	;# 
  2700  0F1C                     	;# 
  2701  0F1D                     	;# 
  2702  0F1E                     	;# 
  2703  0F1F                     	;# 
  2704  0F20                     	;# 
  2705  0F21                     	;# 
  2706  0F22                     	;# 
  2707  0F23                     	;# 
  2708  0F24                     	;# 
  2709  0F25                     	;# 
  2710  0F26                     	;# 
  2711  0F27                     	;# 
  2712  0F28                     	;# 
  2713  0F29                     	;# 
  2714  0F2A                     	;# 
  2715  0F2B                     	;# 
  2716  0F2C                     	;# 
  2717  0F2D                     	;# 
  2718  0F9E                     	;# 
  2719  0FE4                     	;# 
  2720  0FE5                     	;# 
  2721  0FE6                     	;# 
  2722  0FE7                     	;# 
  2723  0FE8                     	;# 
  2724  0FE9                     	;# 
  2725  0FEA                     	;# 
  2726  0FEB                     	;# 
  2727  0FED                     	;# 
  2728  0FEE                     	;# 
  2729  0FEF                     	;# 
  2730  0000                     	;# 
  2731  0001                     	;# 
  2732  0002                     	;# 
  2733  0003                     	;# 
  2734  0004                     	;# 
  2735  0005                     	;# 
  2736  0006                     	;# 
  2737  0007                     	;# 
  2738  0008                     	;# 
  2739  0009                     	;# 
  2740  000A                     	;# 
  2741  000B                     	;# 
  2742  000C                     	;# 
  2743  000E                     	;# 
  2744  0011                     	;# 
  2745  0012                     	;# 
  2746  0013                     	;# 
  2747  0015                     	;# 
  2748  0016                     	;# 
  2749  0016                     	;# 
  2750  0017                     	;# 
  2751  0018                     	;# 
  2752  0019                     	;# 
  2753  001A                     	;# 
  2754  001B                     	;# 
  2755  001C                     	;# 
  2756  008C                     	;# 
  2757  008E                     	;# 
  2758  0091                     	;# 
  2759  0092                     	;# 
  2760  0093                     	;# 
  2761  0095                     	;# 
  2762  0096                     	;# 
  2763  0097                     	;# 
  2764  0098                     	;# 
  2765  0099                     	;# 
  2766  009A                     	;# 
  2767  009B                     	;# 
  2768  009B                     	;# 
  2769  009C                     	;# 
  2770  009D                     	;# 
  2771  009E                     	;# 
  2772  009F                     	;# 
  2773  010C                     	;# 
  2774  010E                     	;# 
  2775  0111                     	;# 
  2776  0112                     	;# 
  2777  0113                     	;# 
  2778  0114                     	;# 
  2779  0115                     	;# 
  2780  0116                     	;# 
  2781  0117                     	;# 
  2782  0118                     	;# 
  2783  0119                     	;# 
  2784  011C                     	;# 
  2785  018C                     	;# 
  2786  018E                     	;# 
  2787  0191                     	;# 
  2788  0191                     	;# 
  2789  0192                     	;# 
  2790  0193                     	;# 
  2791  0193                     	;# 
  2792  0194                     	;# 
  2793  0195                     	;# 
  2794  0196                     	;# 
  2795  0197                     	;# 
  2796  0199                     	;# 
  2797  0199                     	;# 
  2798  0199                     	;# 
  2799  019A                     	;# 
  2800  019A                     	;# 
  2801  019A                     	;# 
  2802  019B                     	;# 
  2803  019B                     	;# 
  2804  019B                     	;# 
  2805  019B                     	;# 
  2806  019B                     	;# 
  2807  019C                     	;# 
  2808  019C                     	;# 
  2809  019C                     	;# 
  2810  019D                     	;# 
  2811  019D                     	;# 
  2812  019D                     	;# 
  2813  019E                     	;# 
  2814  019E                     	;# 
  2815  019E                     	;# 
  2816  019F                     	;# 
  2817  019F                     	;# 
  2818  019F                     	;# 
  2819  019F                     	;# 
  2820  019F                     	;# 
  2821  020C                     	;# 
  2822  020E                     	;# 
  2823  0211                     	;# 
  2824  0211                     	;# 
  2825  0212                     	;# 
  2826  0212                     	;# 
  2827  0213                     	;# 
  2828  0213                     	;# 
  2829  0214                     	;# 
  2830  0214                     	;# 
  2831  0215                     	;# 
  2832  0215                     	;# 
  2833  0215                     	;# 
  2834  0215                     	;# 
  2835  0216                     	;# 
  2836  0216                     	;# 
  2837  0217                     	;# 
  2838  0217                     	;# 
  2839  028C                     	;# 
  2840  028E                     	;# 
  2841  0291                     	;# 
  2842  0291                     	;# 
  2843  0292                     	;# 
  2844  0293                     	;# 
  2845  0293                     	;# 
  2846  0298                     	;# 
  2847  0298                     	;# 
  2848  0299                     	;# 
  2849  029A                     	;# 
  2850  029A                     	;# 
  2851  029E                     	;# 
  2852  030C                     	;# 
  2853  030E                     	;# 
  2854  038C                     	;# 
  2855  038E                     	;# 
  2856  0391                     	;# 
  2857  0392                     	;# 
  2858  0393                     	;# 
  2859  0397                     	;# 
  2860  0398                     	;# 
  2861  0399                     	;# 
  2862  0415                     	;# 
  2863  0416                     	;# 
  2864  0417                     	;# 
  2865  041C                     	;# 
  2866  041D                     	;# 
  2867  041E                     	;# 
  2868  0511                     	;# 
  2869  0515                     	;# 
  2870  0617                     	;# 
  2871  0618                     	;# 
  2872  0619                     	;# 
  2873  0619                     	;# 
  2874  061A                     	;# 
  2875  061B                     	;# 
  2876  061C                     	;# 
  2877  061C                     	;# 
  2878  0691                     	;# 
  2879  0692                     	;# 
  2880  0693                     	;# 
  2881  0694                     	;# 
  2882  0695                     	;# 
  2883  0696                     	;# 
  2884  0697                     	;# 
  2885  0698                     	;# 
  2886  0699                     	;# 
  2887  069A                     	;# 
  2888  069B                     	;# 
  2889  069C                     	;# 
  2890  069D                     	;# 
  2891  069E                     	;# 
  2892  069F                     	;# 
  2893  0E0F                     	;# 
  2894  0E10                     	;# 
  2895  0E11                     	;# 
  2896  0E12                     	;# 
  2897  0E13                     	;# 
  2898  0E14                     	;# 
  2899  0E15                     	;# 
  2900  0E17                     	;# 
  2901  0E20                     	;# 
  2902  0E21                     	;# 
  2903  0E22                     	;# 
  2904  0E24                     	;# 
  2905  0E25                     	;# 
  2906  0E28                     	;# 
  2907  0E29                     	;# 
  2908  0E2A                     	;# 
  2909  0E2B                     	;# 
  2910  0E90                     	;# 
  2911  0E91                     	;# 
  2912  0E92                     	;# 
  2913  0E94                     	;# 
  2914  0E95                     	;# 
  2915  0EA0                     	;# 
  2916  0EA1                     	;# 
  2917  0EA2                     	;# 
  2918  0EA3                     	;# 
  2919  0EA4                     	;# 
  2920  0EA5                     	;# 
  2921  0F0F                     	;# 
  2922  0F10                     	;# 
  2923  0F11                     	;# 
  2924  0F12                     	;# 
  2925  0F13                     	;# 
  2926  0F14                     	;# 
  2927  0F15                     	;# 
  2928  0F16                     	;# 
  2929  0F17                     	;# 
  2930  0F18                     	;# 
  2931  0F19                     	;# 
  2932  0F1A                     	;# 
  2933  0F1B                     	;# 
  2934  0F1C                     	;# 
  2935  0F1D                     	;# 
  2936  0F1E                     	;# 
  2937  0F1F                     	;# 
  2938  0F20                     	;# 
  2939  0F21                     	;# 
  2940  0F22                     	;# 
  2941  0F23                     	;# 
  2942  0F24                     	;# 
  2943  0F25                     	;# 
  2944  0F26                     	;# 
  2945  0F27                     	;# 
  2946  0F28                     	;# 
  2947  0F29                     	;# 
  2948  0F2A                     	;# 
  2949  0F2B                     	;# 
  2950  0F2C                     	;# 
  2951  0F2D                     	;# 
  2952  0F9E                     	;# 
  2953  0FE4                     	;# 
  2954  0FE5                     	;# 
  2955  0FE6                     	;# 
  2956  0FE7                     	;# 
  2957  0FE8                     	;# 
  2958  0FE9                     	;# 
  2959  0FEA                     	;# 
  2960  0FEB                     	;# 
  2961  0FED                     	;# 
  2962  0FEE                     	;# 
  2963  0FEF                     	;# 
  2964  0000                     	;# 
  2965  0001                     	;# 
  2966  0002                     	;# 
  2967  0003                     	;# 
  2968  0004                     	;# 
  2969  0005                     	;# 
  2970  0006                     	;# 
  2971  0007                     	;# 
  2972  0008                     	;# 
  2973  0009                     	;# 
  2974  000A                     	;# 
  2975  000B                     	;# 
  2976  000C                     	;# 
  2977  000E                     	;# 
  2978  0011                     	;# 
  2979  0012                     	;# 
  2980  0013                     	;# 
  2981  0015                     	;# 
  2982  0016                     	;# 
  2983  0016                     	;# 
  2984  0017                     	;# 
  2985  0018                     	;# 
  2986  0019                     	;# 
  2987  001A                     	;# 
  2988  001B                     	;# 
  2989  001C                     	;# 
  2990  008C                     	;# 
  2991  008E                     	;# 
  2992  0091                     	;# 
  2993  0092                     	;# 
  2994  0093                     	;# 
  2995  0095                     	;# 
  2996  0096                     	;# 
  2997  0097                     	;# 
  2998  0098                     	;# 
  2999  0099                     	;# 
  3000  009A                     	;# 
  3001  009B                     	;# 
  3002  009B                     	;# 
  3003  009C                     	;# 
  3004  009D                     	;# 
  3005  009E                     	;# 
  3006  009F                     	;# 
  3007  010C                     	;# 
  3008  010E                     	;# 
  3009  0111                     	;# 
  3010  0112                     	;# 
  3011  0113                     	;# 
  3012  0114                     	;# 
  3013  0115                     	;# 
  3014  0116                     	;# 
  3015  0117                     	;# 
  3016  0118                     	;# 
  3017  0119                     	;# 
  3018  011C                     	;# 
  3019  018C                     	;# 
  3020  018E                     	;# 
  3021  0191                     	;# 
  3022  0191                     	;# 
  3023  0192                     	;# 
  3024  0193                     	;# 
  3025  0193                     	;# 
  3026  0194                     	;# 
  3027  0195                     	;# 
  3028  0196                     	;# 
  3029  0197                     	;# 
  3030  0199                     	;# 
  3031  0199                     	;# 
  3032  0199                     	;# 
  3033  019A                     	;# 
  3034  019A                     	;# 
  3035  019A                     	;# 
  3036  019B                     	;# 
  3037  019B                     	;# 
  3038  019B                     	;# 
  3039  019B                     	;# 
  3040  019B                     	;# 
  3041  019C                     	;# 
  3042  019C                     	;# 
  3043  019C                     	;# 
  3044  019D                     	;# 
  3045  019D                     	;# 
  3046  019D                     	;# 
  3047  019E                     	;# 
  3048  019E                     	;# 
  3049  019E                     	;# 
  3050  019F                     	;# 
  3051  019F                     	;# 
  3052  019F                     	;# 
  3053  019F                     	;# 
  3054  019F                     	;# 
  3055  020C                     	;# 
  3056  020E                     	;# 
  3057  0211                     	;# 
  3058  0211                     	;# 
  3059  0212                     	;# 
  3060  0212                     	;# 
  3061  0213                     	;# 
  3062  0213                     	;# 
  3063  0214                     	;# 
  3064  0214                     	;# 
  3065  0215                     	;# 
  3066  0215                     	;# 
  3067  0215                     	;# 
  3068  0215                     	;# 
  3069  0216                     	;# 
  3070  0216                     	;# 
  3071  0217                     	;# 
  3072  0217                     	;# 
  3073  028C                     	;# 
  3074  028E                     	;# 
  3075  0291                     	;# 
  3076  0291                     	;# 
  3077  0292                     	;# 
  3078  0293                     	;# 
  3079  0293                     	;# 
  3080  0298                     	;# 
  3081  0298                     	;# 
  3082  0299                     	;# 
  3083  029A                     	;# 
  3084  029A                     	;# 
  3085  029E                     	;# 
  3086  030C                     	;# 
  3087  030E                     	;# 
  3088  038C                     	;# 
  3089  038E                     	;# 
  3090  0391                     	;# 
  3091  0392                     	;# 
  3092  0393                     	;# 
  3093  0397                     	;# 
  3094  0398                     	;# 
  3095  0399                     	;# 
  3096  0415                     	;# 
  3097  0416                     	;# 
  3098  0417                     	;# 
  3099  041C                     	;# 
  3100  041D                     	;# 
  3101  041E                     	;# 
  3102  0511                     	;# 
  3103  0515                     	;# 
  3104  0617                     	;# 
  3105  0618                     	;# 
  3106  0619                     	;# 
  3107  0619                     	;# 
  3108  061A                     	;# 
  3109  061B                     	;# 
  3110  061C                     	;# 
  3111  061C                     	;# 
  3112  0691                     	;# 
  3113  0692                     	;# 
  3114  0693                     	;# 
  3115  0694                     	;# 
  3116  0695                     	;# 
  3117  0696                     	;# 
  3118  0697                     	;# 
  3119  0698                     	;# 
  3120  0699                     	;# 
  3121  069A                     	;# 
  3122  069B                     	;# 
  3123  069C                     	;# 
  3124  069D                     	;# 
  3125  069E                     	;# 
  3126  069F                     	;# 
  3127  0E0F                     	;# 
  3128  0E10                     	;# 
  3129  0E11                     	;# 
  3130  0E12                     	;# 
  3131  0E13                     	;# 
  3132  0E14                     	;# 
  3133  0E15                     	;# 
  3134  0E17                     	;# 
  3135  0E20                     	;# 
  3136  0E21                     	;# 
  3137  0E22                     	;# 
  3138  0E24                     	;# 
  3139  0E25                     	;# 
  3140  0E28                     	;# 
  3141  0E29                     	;# 
  3142  0E2A                     	;# 
  3143  0E2B                     	;# 
  3144  0E90                     	;# 
  3145  0E91                     	;# 
  3146  0E92                     	;# 
  3147  0E94                     	;# 
  3148  0E95                     	;# 
  3149  0EA0                     	;# 
  3150  0EA1                     	;# 
  3151  0EA2                     	;# 
  3152  0EA3                     	;# 
  3153  0EA4                     	;# 
  3154  0EA5                     	;# 
  3155  0F0F                     	;# 
  3156  0F10                     	;# 
  3157  0F11                     	;# 
  3158  0F12                     	;# 
  3159  0F13                     	;# 
  3160  0F14                     	;# 
  3161  0F15                     	;# 
  3162  0F16                     	;# 
  3163  0F17                     	;# 
  3164  0F18                     	;# 
  3165  0F19                     	;# 
  3166  0F1A                     	;# 
  3167  0F1B                     	;# 
  3168  0F1C                     	;# 
  3169  0F1D                     	;# 
  3170  0F1E                     	;# 
  3171  0F1F                     	;# 
  3172  0F20                     	;# 
  3173  0F21                     	;# 
  3174  0F22                     	;# 
  3175  0F23                     	;# 
  3176  0F24                     	;# 
  3177  0F25                     	;# 
  3178  0F26                     	;# 
  3179  0F27                     	;# 
  3180  0F28                     	;# 
  3181  0F29                     	;# 
  3182  0F2A                     	;# 
  3183  0F2B                     	;# 
  3184  0F2C                     	;# 
  3185  0F2D                     	;# 
  3186  0F9E                     	;# 
  3187  0FE4                     	;# 
  3188  0FE5                     	;# 
  3189  0FE6                     	;# 
  3190  0FE7                     	;# 
  3191  0FE8                     	;# 
  3192  0FE9                     	;# 
  3193  0FEA                     	;# 
  3194  0FEB                     	;# 
  3195  0FED                     	;# 
  3196  0FEE                     	;# 
  3197  0FEF                     	;# 
  3198  0000                     	;# 
  3199  0001                     	;# 
  3200  0002                     	;# 
  3201  0003                     	;# 
  3202  0004                     	;# 
  3203  0005                     	;# 
  3204  0006                     	;# 
  3205  0007                     	;# 
  3206  0008                     	;# 
  3207  0009                     	;# 
  3208  000A                     	;# 
  3209  000B                     	;# 
  3210  000C                     	;# 
  3211  000E                     	;# 
  3212  0011                     	;# 
  3213  0012                     	;# 
  3214  0013                     	;# 
  3215  0015                     	;# 
  3216  0016                     	;# 
  3217  0016                     	;# 
  3218  0017                     	;# 
  3219  0018                     	;# 
  3220  0019                     	;# 
  3221  001A                     	;# 
  3222  001B                     	;# 
  3223  001C                     	;# 
  3224  008C                     	;# 
  3225  008E                     	;# 
  3226  0091                     	;# 
  3227  0092                     	;# 
  3228  0093                     	;# 
  3229  0095                     	;# 
  3230  0096                     	;# 
  3231  0097                     	;# 
  3232  0098                     	;# 
  3233  0099                     	;# 
  3234  009A                     	;# 
  3235  009B                     	;# 
  3236  009B                     	;# 
  3237  009C                     	;# 
  3238  009D                     	;# 
  3239  009E                     	;# 
  3240  009F                     	;# 
  3241  010C                     	;# 
  3242  010E                     	;# 
  3243  0111                     	;# 
  3244  0112                     	;# 
  3245  0113                     	;# 
  3246  0114                     	;# 
  3247  0115                     	;# 
  3248  0116                     	;# 
  3249  0117                     	;# 
  3250  0118                     	;# 
  3251  0119                     	;# 
  3252  011C                     	;# 
  3253  018C                     	;# 
  3254  018E                     	;# 
  3255  0191                     	;# 
  3256  0191                     	;# 
  3257  0192                     	;# 
  3258  0193                     	;# 
  3259  0193                     	;# 
  3260  0194                     	;# 
  3261  0195                     	;# 
  3262  0196                     	;# 
  3263  0197                     	;# 
  3264  0199                     	;# 
  3265  0199                     	;# 
  3266  0199                     	;# 
  3267  019A                     	;# 
  3268  019A                     	;# 
  3269  019A                     	;# 
  3270  019B                     	;# 
  3271  019B                     	;# 
  3272  019B                     	;# 
  3273  019B                     	;# 
  3274  019B                     	;# 
  3275  019C                     	;# 
  3276  019C                     	;# 
  3277  019C                     	;# 
  3278  019D                     	;# 
  3279  019D                     	;# 
  3280  019D                     	;# 
  3281  019E                     	;# 
  3282  019E                     	;# 
  3283  019E                     	;# 
  3284  019F                     	;# 
  3285  019F                     	;# 
  3286  019F                     	;# 
  3287  019F                     	;# 
  3288  019F                     	;# 
  3289  020C                     	;# 
  3290  020E                     	;# 
  3291  0211                     	;# 
  3292  0211                     	;# 
  3293  0212                     	;# 
  3294  0212                     	;# 
  3295  0213                     	;# 
  3296  0213                     	;# 
  3297  0214                     	;# 
  3298  0214                     	;# 
  3299  0215                     	;# 
  3300  0215                     	;# 
  3301  0215                     	;# 
  3302  0215                     	;# 
  3303  0216                     	;# 
  3304  0216                     	;# 
  3305  0217                     	;# 
  3306  0217                     	;# 
  3307  028C                     	;# 
  3308  028E                     	;# 
  3309  0291                     	;# 
  3310  0291                     	;# 
  3311  0292                     	;# 
  3312  0293                     	;# 
  3313  0293                     	;# 
  3314  0298                     	;# 
  3315  0298                     	;# 
  3316  0299                     	;# 
  3317  029A                     	;# 
  3318  029A                     	;# 
  3319  029E                     	;# 
  3320  030C                     	;# 
  3321  030E                     	;# 
  3322  038C                     	;# 
  3323  038E                     	;# 
  3324  0391                     	;# 
  3325  0392                     	;# 
  3326  0393                     	;# 
  3327  0397                     	;# 
  3328  0398                     	;# 
  3329  0399                     	;# 
  3330  0415                     	;# 
  3331  0416                     	;# 
  3332  0417                     	;# 
  3333  041C                     	;# 
  3334  041D                     	;# 
  3335  041E                     	;# 
  3336  0511                     	;# 
  3337  0515                     	;# 
  3338  0617                     	;# 
  3339  0618                     	;# 
  3340  0619                     	;# 
  3341  0619                     	;# 
  3342  061A                     	;# 
  3343  061B                     	;# 
  3344  061C                     	;# 
  3345  061C                     	;# 
  3346  0691                     	;# 
  3347  0692                     	;# 
  3348  0693                     	;# 
  3349  0694                     	;# 
  3350  0695                     	;# 
  3351  0696                     	;# 
  3352  0697                     	;# 
  3353  0698                     	;# 
  3354  0699                     	;# 
  3355  069A                     	;# 
  3356  069B                     	;# 
  3357  069C                     	;# 
  3358  069D                     	;# 
  3359  069E                     	;# 
  3360  069F                     	;# 
  3361  0E0F                     	;# 
  3362  0E10                     	;# 
  3363  0E11                     	;# 
  3364  0E12                     	;# 
  3365  0E13                     	;# 
  3366  0E14                     	;# 
  3367  0E15                     	;# 
  3368  0E17                     	;# 
  3369  0E20                     	;# 
  3370  0E21                     	;# 
  3371  0E22                     	;# 
  3372  0E24                     	;# 
  3373  0E25                     	;# 
  3374  0E28                     	;# 
  3375  0E29                     	;# 
  3376  0E2A                     	;# 
  3377  0E2B                     	;# 
  3378  0E90                     	;# 
  3379  0E91                     	;# 
  3380  0E92                     	;# 
  3381  0E94                     	;# 
  3382  0E95                     	;# 
  3383  0EA0                     	;# 
  3384  0EA1                     	;# 
  3385  0EA2                     	;# 
  3386  0EA3                     	;# 
  3387  0EA4                     	;# 
  3388  0EA5                     	;# 
  3389  0F0F                     	;# 
  3390  0F10                     	;# 
  3391  0F11                     	;# 
  3392  0F12                     	;# 
  3393  0F13                     	;# 
  3394  0F14                     	;# 
  3395  0F15                     	;# 
  3396  0F16                     	;# 
  3397  0F17                     	;# 
  3398  0F18                     	;# 
  3399  0F19                     	;# 
  3400  0F1A                     	;# 
  3401  0F1B                     	;# 
  3402  0F1C                     	;# 
  3403  0F1D                     	;# 
  3404  0F1E                     	;# 
  3405  0F1F                     	;# 
  3406  0F20                     	;# 
  3407  0F21                     	;# 
  3408  0F22                     	;# 
  3409  0F23                     	;# 
  3410  0F24                     	;# 
  3411  0F25                     	;# 
  3412  0F26                     	;# 
  3413  0F27                     	;# 
  3414  0F28                     	;# 
  3415  0F29                     	;# 
  3416  0F2A                     	;# 
  3417  0F2B                     	;# 
  3418  0F2C                     	;# 
  3419  0F2D                     	;# 
  3420  0F9E                     	;# 
  3421  0FE4                     	;# 
  3422  0FE5                     	;# 
  3423  0FE6                     	;# 
  3424  0FE7                     	;# 
  3425  0FE8                     	;# 
  3426  0FE9                     	;# 
  3427  0FEA                     	;# 
  3428  0FEB                     	;# 
  3429  0FED                     	;# 
  3430  0FEE                     	;# 
  3431  0FEF                     	;# 
  3432  0000                     	;# 
  3433  0001                     	;# 
  3434  0002                     	;# 
  3435  0003                     	;# 
  3436  0004                     	;# 
  3437  0005                     	;# 
  3438  0006                     	;# 
  3439  0007                     	;# 
  3440  0008                     	;# 
  3441  0009                     	;# 
  3442  000A                     	;# 
  3443  000B                     	;# 
  3444  000C                     	;# 
  3445  000E                     	;# 
  3446  0011                     	;# 
  3447  0012                     	;# 
  3448  0013                     	;# 
  3449  0015                     	;# 
  3450  0016                     	;# 
  3451  0016                     	;# 
  3452  0017                     	;# 
  3453  0018                     	;# 
  3454  0019                     	;# 
  3455  001A                     	;# 
  3456  001B                     	;# 
  3457  001C                     	;# 
  3458  008C                     	;# 
  3459  008E                     	;# 
  3460  0091                     	;# 
  3461  0092                     	;# 
  3462  0093                     	;# 
  3463  0095                     	;# 
  3464  0096                     	;# 
  3465  0097                     	;# 
  3466  0098                     	;# 
  3467  0099                     	;# 
  3468  009A                     	;# 
  3469  009B                     	;# 
  3470  009B                     	;# 
  3471  009C                     	;# 
  3472  009D                     	;# 
  3473  009E                     	;# 
  3474  009F                     	;# 
  3475  010C                     	;# 
  3476  010E                     	;# 
  3477  0111                     	;# 
  3478  0112                     	;# 
  3479  0113                     	;# 
  3480  0114                     	;# 
  3481  0115                     	;# 
  3482  0116                     	;# 
  3483  0117                     	;# 
  3484  0118                     	;# 
  3485  0119                     	;# 
  3486  011C                     	;# 
  3487  018C                     	;# 
  3488  018E                     	;# 
  3489  0191                     	;# 
  3490  0191                     	;# 
  3491  0192                     	;# 
  3492  0193                     	;# 
  3493  0193                     	;# 
  3494  0194                     	;# 
  3495  0195                     	;# 
  3496  0196                     	;# 
  3497  0197                     	;# 
  3498  0199                     	;# 
  3499  0199                     	;# 
  3500  0199                     	;# 
  3501  019A                     	;# 
  3502  019A                     	;# 
  3503  019A                     	;# 
  3504  019B                     	;# 
  3505  019B                     	;# 
  3506  019B                     	;# 
  3507  019B                     	;# 
  3508  019B                     	;# 
  3509  019C                     	;# 
  3510  019C                     	;# 
  3511  019C                     	;# 
  3512  019D                     	;# 
  3513  019D                     	;# 
  3514  019D                     	;# 
  3515  019E                     	;# 
  3516  019E                     	;# 
  3517  019E                     	;# 
  3518  019F                     	;# 
  3519  019F                     	;# 
  3520  019F                     	;# 
  3521  019F                     	;# 
  3522  019F                     	;# 
  3523  020C                     	;# 
  3524  020E                     	;# 
  3525  0211                     	;# 
  3526  0211                     	;# 
  3527  0212                     	;# 
  3528  0212                     	;# 
  3529  0213                     	;# 
  3530  0213                     	;# 
  3531  0214                     	;# 
  3532  0214                     	;# 
  3533  0215                     	;# 
  3534  0215                     	;# 
  3535  0215                     	;# 
  3536  0215                     	;# 
  3537  0216                     	;# 
  3538  0216                     	;# 
  3539  0217                     	;# 
  3540  0217                     	;# 
  3541  028C                     	;# 
  3542  028E                     	;# 
  3543  0291                     	;# 
  3544  0291                     	;# 
  3545  0292                     	;# 
  3546  0293                     	;# 
  3547  0293                     	;# 
  3548  0298                     	;# 
  3549  0298                     	;# 
  3550  0299                     	;# 
  3551  029A                     	;# 
  3552  029A                     	;# 
  3553  029E                     	;# 
  3554  030C                     	;# 
  3555  030E                     	;# 
  3556  038C                     	;# 
  3557  038E                     	;# 
  3558  0391                     	;# 
  3559  0392                     	;# 
  3560  0393                     	;# 
  3561  0397                     	;# 
  3562  0398                     	;# 
  3563  0399                     	;# 
  3564  0415                     	;# 
  3565  0416                     	;# 
  3566  0417                     	;# 
  3567  041C                     	;# 
  3568  041D                     	;# 
  3569  041E                     	;# 
  3570  0511                     	;# 
  3571  0515                     	;# 
  3572  0617                     	;# 
  3573  0618                     	;# 
  3574  0619                     	;# 
  3575  0619                     	;# 
  3576  061A                     	;# 
  3577  061B                     	;# 
  3578  061C                     	;# 
  3579  061C                     	;# 
  3580  0691                     	;# 
  3581  0692                     	;# 
  3582  0693                     	;# 
  3583  0694                     	;# 
  3584  0695                     	;# 
  3585  0696                     	;# 
  3586  0697                     	;# 
  3587  0698                     	;# 
  3588  0699                     	;# 
  3589  069A                     	;# 
  3590  069B                     	;# 
  3591  069C                     	;# 
  3592  069D                     	;# 
  3593  069E                     	;# 
  3594  069F                     	;# 
  3595  0E0F                     	;# 
  3596  0E10                     	;# 
  3597  0E11                     	;# 
  3598  0E12                     	;# 
  3599  0E13                     	;# 
  3600  0E14                     	;# 
  3601  0E15                     	;# 
  3602  0E17                     	;# 
  3603  0E20                     	;# 
  3604  0E21                     	;# 
  3605  0E22                     	;# 
  3606  0E24                     	;# 
  3607  0E25                     	;# 
  3608  0E28                     	;# 
  3609  0E29                     	;# 
  3610  0E2A                     	;# 
  3611  0E2B                     	;# 
  3612  0E90                     	;# 
  3613  0E91                     	;# 
  3614  0E92                     	;# 
  3615  0E94                     	;# 
  3616  0E95                     	;# 
  3617  0EA0                     	;# 
  3618  0EA1                     	;# 
  3619  0EA2                     	;# 
  3620  0EA3                     	;# 
  3621  0EA4                     	;# 
  3622  0EA5                     	;# 
  3623  0F0F                     	;# 
  3624  0F10                     	;# 
  3625  0F11                     	;# 
  3626  0F12                     	;# 
  3627  0F13                     	;# 
  3628  0F14                     	;# 
  3629  0F15                     	;# 
  3630  0F16                     	;# 
  3631  0F17                     	;# 
  3632  0F18                     	;# 
  3633  0F19                     	;# 
  3634  0F1A                     	;# 
  3635  0F1B                     	;# 
  3636  0F1C                     	;# 
  3637  0F1D                     	;# 
  3638  0F1E                     	;# 
  3639  0F1F                     	;# 
  3640  0F20                     	;# 
  3641  0F21                     	;# 
  3642  0F22                     	;# 
  3643  0F23                     	;# 
  3644  0F24                     	;# 
  3645  0F25                     	;# 
  3646  0F26                     	;# 
  3647  0F27                     	;# 
  3648  0F28                     	;# 
  3649  0F29                     	;# 
  3650  0F2A                     	;# 
  3651  0F2B                     	;# 
  3652  0F2C                     	;# 
  3653  0F2D                     	;# 
  3654  0F9E                     	;# 
  3655  0FE4                     	;# 
  3656  0FE5                     	;# 
  3657  0FE6                     	;# 
  3658  0FE7                     	;# 
  3659  0FE8                     	;# 
  3660  0FE9                     	;# 
  3661  0FEA                     	;# 
  3662  0FEB                     	;# 
  3663  0FED                     	;# 
  3664  0FEE                     	;# 
  3665  0FEF                     	;# 
  3666                           
  3667                           	psect	idataBANK0
  3668  14F7                     __pidataBANK0:	
  3669                           
  3670                           ;initializer for uart_task@none
  3671  14F7  3402               	retlw	2
  3672                           
  3673                           ;initializer for _lock_isr
  3674  14F8  3401               	retlw	1
  3675                           
  3676                           ;initializer for _init_required
  3677  14F9  3401               	retlw	1
  3678                           
  3679                           	psect	idataBANK1
  3680  1545                     __pidataBANK1:	
  3681                           
  3682                           ;initializer for _duty_count_down_max
  3683  1545  340A               	retlw	10
  3684  1546  3400               	retlw	0
  3685                           
  3686                           ;initializer for _duty_pwm_dec
  3687  1547  3404               	retlw	4
  3688  1548  3400               	retlw	0
  3689                           
  3690                           ;initializer for _duty_count_up_max
  3691  1549  3405               	retlw	5
  3692  154A  3400               	retlw	0
  3693                           
  3694                           	psect	stringtext1
  3695  0071                     __pstringtext1:	
  3696  0071                     _v_table:	
  3697  0071  3400               	retlw	0
  3698  0072  3400               	retlw	0
  3699  0073  3401               	retlw	1
  3700  0074  3400               	retlw	0
  3701  0075  3402               	retlw	2
  3702  0076  3400               	retlw	0
  3703  0077  3402               	retlw	2
  3704  0078  3400               	retlw	0
  3705  0079  3403               	retlw	3
  3706  007A  3400               	retlw	0
  3707  007B  3404               	retlw	4
  3708  007C  3400               	retlw	0
  3709  007D  3405               	retlw	5
  3710  007E  3400               	retlw	0
  3711  007F  3406               	retlw	6
  3712  0080  3400               	retlw	0
  3713  0081  3407               	retlw	7
  3714  0082  3400               	retlw	0
  3715  0083  3407               	retlw	7
  3716  0084  3400               	retlw	0
  3717  0085  3408               	retlw	8
  3718  0086  3400               	retlw	0
  3719  0087  3409               	retlw	9
  3720  0088  3400               	retlw	0
  3721  0089  340A               	retlw	10
  3722  008A  3400               	retlw	0
  3723  008B  340B               	retlw	11
  3724  008C  3400               	retlw	0
  3725  008D  340B               	retlw	11
  3726  008E  3400               	retlw	0
  3727  008F  340C               	retlw	12
  3728  0090  3400               	retlw	0
  3729  0091  340D               	retlw	13
  3730  0092  3400               	retlw	0
  3731  0093  340E               	retlw	14
  3732  0094  3400               	retlw	0
  3733  0095  340F               	retlw	15
  3734  0096  3400               	retlw	0
  3735  0097  3410               	retlw	16
  3736  0098  3400               	retlw	0
  3737  0099  3410               	retlw	16
  3738  009A  3400               	retlw	0
  3739  009B  3411               	retlw	17
  3740  009C  3400               	retlw	0
  3741  009D  3412               	retlw	18
  3742  009E  3400               	retlw	0
  3743  009F  3413               	retlw	19
  3744  00A0  3400               	retlw	0
  3745  00A1  3414               	retlw	20
  3746  00A2  3400               	retlw	0
  3747  00A3  3415               	retlw	21
  3748  00A4  3400               	retlw	0
  3749  00A5  3415               	retlw	21
  3750  00A6  3400               	retlw	0
  3751  00A7  3416               	retlw	22
  3752  00A8  3400               	retlw	0
  3753  00A9  3417               	retlw	23
  3754  00AA  3400               	retlw	0
  3755  00AB  3418               	retlw	24
  3756  00AC  3400               	retlw	0
  3757  00AD  3419               	retlw	25
  3758  00AE  3400               	retlw	0
  3759  00AF  3419               	retlw	25
  3760  00B0  3400               	retlw	0
  3761  00B1  341A               	retlw	26
  3762  00B2  3400               	retlw	0
  3763  00B3  341B               	retlw	27
  3764  00B4  3400               	retlw	0
  3765  00B5  341C               	retlw	28
  3766  00B6  3400               	retlw	0
  3767  00B7  341D               	retlw	29
  3768  00B8  3400               	retlw	0
  3769  00B9  341E               	retlw	30
  3770  00BA  3400               	retlw	0
  3771  00BB  341E               	retlw	30
  3772  00BC  3400               	retlw	0
  3773  00BD  341F               	retlw	31
  3774  00BE  3400               	retlw	0
  3775  00BF  3420               	retlw	32
  3776  00C0  3400               	retlw	0
  3777  00C1  3421               	retlw	33
  3778  00C2  3400               	retlw	0
  3779  00C3  3422               	retlw	34
  3780  00C4  3400               	retlw	0
  3781  00C5  3422               	retlw	34
  3782  00C6  3400               	retlw	0
  3783  00C7  3423               	retlw	35
  3784  00C8  3400               	retlw	0
  3785  00C9  3424               	retlw	36
  3786  00CA  3400               	retlw	0
  3787  00CB  3425               	retlw	37
  3788  00CC  3400               	retlw	0
  3789  00CD  3426               	retlw	38
  3790  00CE  3400               	retlw	0
  3791  00CF  3427               	retlw	39
  3792  00D0  3400               	retlw	0
  3793  00D1  3427               	retlw	39
  3794  00D2  3400               	retlw	0
  3795  00D3  3428               	retlw	40
  3796  00D4  3400               	retlw	0
  3797  00D5  3429               	retlw	41
  3798  00D6  3400               	retlw	0
  3799  00D7  342A               	retlw	42
  3800  00D8  3400               	retlw	0
  3801  00D9  342B               	retlw	43
  3802  00DA  3400               	retlw	0
  3803  00DB  342C               	retlw	44
  3804  00DC  3400               	retlw	0
  3805  00DD  342C               	retlw	44
  3806  00DE  3400               	retlw	0
  3807  00DF  342D               	retlw	45
  3808  00E0  3400               	retlw	0
  3809  00E1  342E               	retlw	46
  3810  00E2  3400               	retlw	0
  3811  00E3  342F               	retlw	47
  3812  00E4  3400               	retlw	0
  3813  00E5  3430               	retlw	48
  3814  00E6  3400               	retlw	0
  3815  00E7  3430               	retlw	48
  3816  00E8  3400               	retlw	0
  3817  00E9  3431               	retlw	49
  3818  00EA  3400               	retlw	0
  3819  00EB  3432               	retlw	50
  3820  00EC  3400               	retlw	0
  3821  00ED  3433               	retlw	51
  3822  00EE  3400               	retlw	0
  3823  00EF  3434               	retlw	52
  3824  00F0  3400               	retlw	0
  3825  00F1  3435               	retlw	53
  3826  00F2  3400               	retlw	0
  3827  00F3  3435               	retlw	53
  3828  00F4  3400               	retlw	0
  3829  00F5  3436               	retlw	54
  3830  00F6  3400               	retlw	0
  3831  00F7  3437               	retlw	55
  3832  00F8  3400               	retlw	0
  3833  00F9  3438               	retlw	56
  3834  00FA  3400               	retlw	0
  3835  00FB  3439               	retlw	57
  3836  00FC  3400               	retlw	0
  3837  00FD  3439               	retlw	57
  3838  00FE  3400               	retlw	0
  3839  00FF  343A               	retlw	58
  3840  0100  3400               	retlw	0
  3841  0101  343B               	retlw	59
  3842  0102  3400               	retlw	0
  3843  0103  343C               	retlw	60
  3844  0104  3400               	retlw	0
  3845  0105  343D               	retlw	61
  3846  0106  3400               	retlw	0
  3847  0107  343E               	retlw	62
  3848  0108  3400               	retlw	0
  3849  0109  343E               	retlw	62
  3850  010A  3400               	retlw	0
  3851  010B  343F               	retlw	63
  3852  010C  3400               	retlw	0
  3853  010D  3440               	retlw	64
  3854  010E  3400               	retlw	0
  3855  010F  3441               	retlw	65
  3856  0110  3400               	retlw	0
  3857  0111  3442               	retlw	66
  3858  0112  3400               	retlw	0
  3859  0113  3443               	retlw	67
  3860  0114  3400               	retlw	0
  3861  0115  3443               	retlw	67
  3862  0116  3400               	retlw	0
  3863  0117  3444               	retlw	68
  3864  0118  3400               	retlw	0
  3865  0119  3445               	retlw	69
  3866  011A  3400               	retlw	0
  3867  011B  3446               	retlw	70
  3868  011C  3400               	retlw	0
  3869  011D  3447               	retlw	71
  3870  011E  3400               	retlw	0
  3871  011F  3447               	retlw	71
  3872  0120  3400               	retlw	0
  3873  0121  3448               	retlw	72
  3874  0122  3400               	retlw	0
  3875  0123  3449               	retlw	73
  3876  0124  3400               	retlw	0
  3877  0125  344A               	retlw	74
  3878  0126  3400               	retlw	0
  3879  0127  344B               	retlw	75
  3880  0128  3400               	retlw	0
  3881  0129  344C               	retlw	76
  3882  012A  3400               	retlw	0
  3883  012B  344C               	retlw	76
  3884  012C  3400               	retlw	0
  3885  012D  344D               	retlw	77
  3886  012E  3400               	retlw	0
  3887  012F  344E               	retlw	78
  3888  0130  3400               	retlw	0
  3889  0131  344F               	retlw	79
  3890  0132  3400               	retlw	0
  3891  0133  3450               	retlw	80
  3892  0134  3400               	retlw	0
  3893  0135  3450               	retlw	80
  3894  0136  3400               	retlw	0
  3895  0137  3451               	retlw	81
  3896  0138  3400               	retlw	0
  3897  0139  3452               	retlw	82
  3898  013A  3400               	retlw	0
  3899  013B  3453               	retlw	83
  3900  013C  3400               	retlw	0
  3901  013D  3454               	retlw	84
  3902  013E  3400               	retlw	0
  3903  013F  3455               	retlw	85
  3904  0140  3400               	retlw	0
  3905  0141  3455               	retlw	85
  3906  0142  3400               	retlw	0
  3907  0143  3456               	retlw	86
  3908  0144  3400               	retlw	0
  3909  0145  3457               	retlw	87
  3910  0146  3400               	retlw	0
  3911  0147  3458               	retlw	88
  3912  0148  3400               	retlw	0
  3913  0149  3459               	retlw	89
  3914  014A  3400               	retlw	0
  3915  014B  3459               	retlw	89
  3916  014C  3400               	retlw	0
  3917  014D  345A               	retlw	90
  3918  014E  3400               	retlw	0
  3919  014F  345B               	retlw	91
  3920  0150  3400               	retlw	0
  3921  0151  345C               	retlw	92
  3922  0152  3400               	retlw	0
  3923  0153  345D               	retlw	93
  3924  0154  3400               	retlw	0
  3925  0155  345E               	retlw	94
  3926  0156  3400               	retlw	0
  3927  0157  345E               	retlw	94
  3928  0158  3400               	retlw	0
  3929  0159  345F               	retlw	95
  3930  015A  3400               	retlw	0
  3931  015B  3460               	retlw	96
  3932  015C  3400               	retlw	0
  3933  015D  3461               	retlw	97
  3934  015E  3400               	retlw	0
  3935  015F  3462               	retlw	98
  3936  0160  3400               	retlw	0
  3937  0161  3463               	retlw	99
  3938  0162  3400               	retlw	0
  3939  0163  3463               	retlw	99
  3940  0164  3400               	retlw	0
  3941  0165  3464               	retlw	100
  3942  0166  3400               	retlw	0
  3943  0167  3465               	retlw	101
  3944  0168  3400               	retlw	0
  3945  0169  3466               	retlw	102
  3946  016A  3400               	retlw	0
  3947  016B  3467               	retlw	103
  3948  016C  3400               	retlw	0
  3949  016D  3467               	retlw	103
  3950  016E  3400               	retlw	0
  3951  016F  3468               	retlw	104
  3952  0170  3400               	retlw	0
  3953  0171  3469               	retlw	105
  3954  0172  3400               	retlw	0
  3955  0173  346A               	retlw	106
  3956  0174  3400               	retlw	0
  3957  0175  346B               	retlw	107
  3958  0176  3400               	retlw	0
  3959  0177  346C               	retlw	108
  3960  0178  3400               	retlw	0
  3961  0179  346C               	retlw	108
  3962  017A  3400               	retlw	0
  3963  017B  346D               	retlw	109
  3964  017C  3400               	retlw	0
  3965  017D  346E               	retlw	110
  3966  017E  3400               	retlw	0
  3967  017F  346F               	retlw	111
  3968  0180  3400               	retlw	0
  3969  0181  3470               	retlw	112
  3970  0182  3400               	retlw	0
  3971  0183  3470               	retlw	112
  3972  0184  3400               	retlw	0
  3973  0185  3471               	retlw	113
  3974  0186  3400               	retlw	0
  3975  0187  3472               	retlw	114
  3976  0188  3400               	retlw	0
  3977  0189  3473               	retlw	115
  3978  018A  3400               	retlw	0
  3979  018B  3474               	retlw	116
  3980  018C  3400               	retlw	0
  3981  018D  3475               	retlw	117
  3982  018E  3400               	retlw	0
  3983  018F  3475               	retlw	117
  3984  0190  3400               	retlw	0
  3985  0191  3476               	retlw	118
  3986  0192  3400               	retlw	0
  3987  0193  3477               	retlw	119
  3988  0194  3400               	retlw	0
  3989  0195  3478               	retlw	120
  3990  0196  3400               	retlw	0
  3991  0197  3479               	retlw	121
  3992  0198  3400               	retlw	0
  3993  0199  347A               	retlw	122
  3994  019A  3400               	retlw	0
  3995  019B  347A               	retlw	122
  3996  019C  3400               	retlw	0
  3997  019D  347B               	retlw	123
  3998  019E  3400               	retlw	0
  3999  019F  347C               	retlw	124
  4000  01A0  3400               	retlw	0
  4001  01A1  347D               	retlw	125
  4002  01A2  3400               	retlw	0
  4003  01A3  347E               	retlw	126
  4004  01A4  3400               	retlw	0
  4005  01A5  347E               	retlw	126
  4006  01A6  3400               	retlw	0
  4007  01A7  347F               	retlw	127
  4008  01A8  3400               	retlw	0
  4009  01A9  3480               	retlw	128
  4010  01AA  3400               	retlw	0
  4011  01AB  3481               	retlw	129
  4012  01AC  3400               	retlw	0
  4013  01AD  3482               	retlw	130
  4014  01AE  3400               	retlw	0
  4015  01AF  3483               	retlw	131
  4016  01B0  3400               	retlw	0
  4017  01B1  3483               	retlw	131
  4018  01B2  3400               	retlw	0
  4019  01B3  3484               	retlw	132
  4020  01B4  3400               	retlw	0
  4021  01B5  3485               	retlw	133
  4022  01B6  3400               	retlw	0
  4023  01B7  3486               	retlw	134
  4024  01B8  3400               	retlw	0
  4025  01B9  3487               	retlw	135
  4026  01BA  3400               	retlw	0
  4027  01BB  3487               	retlw	135
  4028  01BC  3400               	retlw	0
  4029  01BD  3488               	retlw	136
  4030  01BE  3400               	retlw	0
  4031  01BF  3489               	retlw	137
  4032  01C0  3400               	retlw	0
  4033  01C1  348A               	retlw	138
  4034  01C2  3400               	retlw	0
  4035  01C3  348B               	retlw	139
  4036  01C4  3400               	retlw	0
  4037  01C5  348C               	retlw	140
  4038  01C6  3400               	retlw	0
  4039  01C7  348C               	retlw	140
  4040  01C8  3400               	retlw	0
  4041  01C9  348D               	retlw	141
  4042  01CA  3400               	retlw	0
  4043  01CB  348E               	retlw	142
  4044  01CC  3400               	retlw	0
  4045  01CD  348F               	retlw	143
  4046  01CE  3400               	retlw	0
  4047  01CF  3490               	retlw	144
  4048  01D0  3400               	retlw	0
  4049  01D1  3491               	retlw	145
  4050  01D2  3400               	retlw	0
  4051  01D3  3491               	retlw	145
  4052  01D4  3400               	retlw	0
  4053  01D5  3492               	retlw	146
  4054  01D6  3400               	retlw	0
  4055  01D7  3493               	retlw	147
  4056  01D8  3400               	retlw	0
  4057  01D9  3494               	retlw	148
  4058  01DA  3400               	retlw	0
  4059  01DB  3495               	retlw	149
  4060  01DC  3400               	retlw	0
  4061  01DD  3495               	retlw	149
  4062  01DE  3400               	retlw	0
  4063  01DF  3496               	retlw	150
  4064  01E0  3400               	retlw	0
  4065  01E1  3497               	retlw	151
  4066  01E2  3400               	retlw	0
  4067  01E3  3498               	retlw	152
  4068  01E4  3400               	retlw	0
  4069  01E5  3499               	retlw	153
  4070  01E6  3400               	retlw	0
  4071  01E7  349A               	retlw	154
  4072  01E8  3400               	retlw	0
  4073  01E9  349A               	retlw	154
  4074  01EA  3400               	retlw	0
  4075  01EB  349B               	retlw	155
  4076  01EC  3400               	retlw	0
  4077  01ED  349C               	retlw	156
  4078  01EE  3400               	retlw	0
  4079  01EF  349D               	retlw	157
  4080  01F0  3400               	retlw	0
  4081  01F1  349E               	retlw	158
  4082  01F2  3400               	retlw	0
  4083  01F3  349E               	retlw	158
  4084  01F4  3400               	retlw	0
  4085  01F5  349F               	retlw	159
  4086  01F6  3400               	retlw	0
  4087  01F7  34A0               	retlw	160
  4088  01F8  3400               	retlw	0
  4089  01F9  34A1               	retlw	161
  4090  01FA  3400               	retlw	0
  4091  01FB  34A2               	retlw	162
  4092  01FC  3400               	retlw	0
  4093  01FD  34A3               	retlw	163
  4094  01FE  3400               	retlw	0
  4095  01FF  34A3               	retlw	163
  4096  0200  3400               	retlw	0
  4097  0201  34A4               	retlw	164
  4098  0202  3400               	retlw	0
  4099  0203  34A5               	retlw	165
  4100  0204  3400               	retlw	0
  4101  0205  34A6               	retlw	166
  4102  0206  3400               	retlw	0
  4103  0207  34A7               	retlw	167
  4104  0208  3400               	retlw	0
  4105  0209  34A7               	retlw	167
  4106  020A  3400               	retlw	0
  4107  020B  34A8               	retlw	168
  4108  020C  3400               	retlw	0
  4109  020D  34A9               	retlw	169
  4110  020E  3400               	retlw	0
  4111  020F  34AA               	retlw	170
  4112  0210  3400               	retlw	0
  4113  0211  34AB               	retlw	171
  4114  0212  3400               	retlw	0
  4115  0213  34AC               	retlw	172
  4116  0214  3400               	retlw	0
  4117  0215  34AC               	retlw	172
  4118  0216  3400               	retlw	0
  4119  0217  34AD               	retlw	173
  4120  0218  3400               	retlw	0
  4121  0219  34AE               	retlw	174
  4122  021A  3400               	retlw	0
  4123  021B  34AF               	retlw	175
  4124  021C  3400               	retlw	0
  4125  021D  34B0               	retlw	176
  4126  021E  3400               	retlw	0
  4127  021F  34B1               	retlw	177
  4128  0220  3400               	retlw	0
  4129  0221  34B1               	retlw	177
  4130  0222  3400               	retlw	0
  4131  0223  34B2               	retlw	178
  4132  0224  3400               	retlw	0
  4133  0225  34B3               	retlw	179
  4134  0226  3400               	retlw	0
  4135  0227  34B4               	retlw	180
  4136  0228  3400               	retlw	0
  4137  0229  34B5               	retlw	181
  4138  022A  3400               	retlw	0
  4139  022B  34B5               	retlw	181
  4140  022C  3400               	retlw	0
  4141  022D  34B6               	retlw	182
  4142  022E  3400               	retlw	0
  4143  022F  34B7               	retlw	183
  4144  0230  3400               	retlw	0
  4145  0231  34B8               	retlw	184
  4146  0232  3400               	retlw	0
  4147  0233  34B9               	retlw	185
  4148  0234  3400               	retlw	0
  4149  0235  34BA               	retlw	186
  4150  0236  3400               	retlw	0
  4151  0237  34BA               	retlw	186
  4152  0238  3400               	retlw	0
  4153  0239  34BB               	retlw	187
  4154  023A  3400               	retlw	0
  4155  023B  34BC               	retlw	188
  4156  023C  3400               	retlw	0
  4157  023D  34BD               	retlw	189
  4158  023E  3400               	retlw	0
  4159  023F  34BE               	retlw	190
  4160  0240  3400               	retlw	0
  4161  0241  34BE               	retlw	190
  4162  0242  3400               	retlw	0
  4163  0243  34BF               	retlw	191
  4164  0244  3400               	retlw	0
  4165  0245  34C0               	retlw	192
  4166  0246  3400               	retlw	0
  4167  0247  34C1               	retlw	193
  4168  0248  3400               	retlw	0
  4169  0249  34C2               	retlw	194
  4170  024A  3400               	retlw	0
  4171  024B  34C3               	retlw	195
  4172  024C  3400               	retlw	0
  4173  024D  34C3               	retlw	195
  4174  024E  3400               	retlw	0
  4175  024F  34C4               	retlw	196
  4176  0250  3400               	retlw	0
  4177  0251  34C5               	retlw	197
  4178  0252  3400               	retlw	0
  4179  0253  34C6               	retlw	198
  4180  0254  3400               	retlw	0
  4181  0255  34C7               	retlw	199
  4182  0256  3400               	retlw	0
  4183  0257  34C8               	retlw	200
  4184  0258  3400               	retlw	0
  4185  0259  34C8               	retlw	200
  4186  025A  3400               	retlw	0
  4187  025B  34C9               	retlw	201
  4188  025C  3400               	retlw	0
  4189  025D  34CA               	retlw	202
  4190  025E  3400               	retlw	0
  4191  025F  34CB               	retlw	203
  4192  0260  3400               	retlw	0
  4193  0261  34CC               	retlw	204
  4194  0262  3400               	retlw	0
  4195  0263  34CC               	retlw	204
  4196  0264  3400               	retlw	0
  4197  0265  34CD               	retlw	205
  4198  0266  3400               	retlw	0
  4199  0267  34CE               	retlw	206
  4200  0268  3400               	retlw	0
  4201  0269  34CF               	retlw	207
  4202  026A  3400               	retlw	0
  4203  026B  34D0               	retlw	208
  4204  026C  3400               	retlw	0
  4205  026D  34D1               	retlw	209
  4206  026E  3400               	retlw	0
  4207  026F  34D1               	retlw	209
  4208  0270  3400               	retlw	0
  4209  0271  34D2               	retlw	210
  4210  0272  3400               	retlw	0
  4211  0273  34D3               	retlw	211
  4212  0274  3400               	retlw	0
  4213  0275  34D4               	retlw	212
  4214  0276  3400               	retlw	0
  4215  0277  34D5               	retlw	213
  4216  0278  3400               	retlw	0
  4217  0279  34D5               	retlw	213
  4218  027A  3400               	retlw	0
  4219  027B  34D6               	retlw	214
  4220  027C  3400               	retlw	0
  4221  027D  34D7               	retlw	215
  4222  027E  3400               	retlw	0
  4223  027F  34D8               	retlw	216
  4224  0280  3400               	retlw	0
  4225  0281  34D9               	retlw	217
  4226  0282  3400               	retlw	0
  4227  0283  34DA               	retlw	218
  4228  0284  3400               	retlw	0
  4229  0285  34DA               	retlw	218
  4230  0286  3400               	retlw	0
  4231  0287  34DB               	retlw	219
  4232  0288  3400               	retlw	0
  4233  0289  34DC               	retlw	220
  4234  028A  3400               	retlw	0
  4235  028B  34DD               	retlw	221
  4236  028C  3400               	retlw	0
  4237  028D  34DE               	retlw	222
  4238  028E  3400               	retlw	0
  4239  028F  34DF               	retlw	223
  4240  0290  3400               	retlw	0
  4241  0291  34DF               	retlw	223
  4242  0292  3400               	retlw	0
  4243  0293  34E0               	retlw	224
  4244  0294  3400               	retlw	0
  4245  0295  34E1               	retlw	225
  4246  0296  3400               	retlw	0
  4247  0297  34E2               	retlw	226
  4248  0298  3400               	retlw	0
  4249  0299  34E3               	retlw	227
  4250  029A  3400               	retlw	0
  4251  029B  34E3               	retlw	227
  4252  029C  3400               	retlw	0
  4253  029D  34E4               	retlw	228
  4254  029E  3400               	retlw	0
  4255  029F  34E5               	retlw	229
  4256  02A0  3400               	retlw	0
  4257  02A1  34E6               	retlw	230
  4258  02A2  3400               	retlw	0
  4259  02A3  34E7               	retlw	231
  4260  02A4  3400               	retlw	0
  4261  02A5  34E8               	retlw	232
  4262  02A6  3400               	retlw	0
  4263  02A7  34E8               	retlw	232
  4264  02A8  3400               	retlw	0
  4265  02A9  34E9               	retlw	233
  4266  02AA  3400               	retlw	0
  4267  02AB  34EA               	retlw	234
  4268  02AC  3400               	retlw	0
  4269  02AD  34EB               	retlw	235
  4270  02AE  3400               	retlw	0
  4271  02AF  34EC               	retlw	236
  4272  02B0  3400               	retlw	0
  4273  02B1  34EC               	retlw	236
  4274  02B2  3400               	retlw	0
  4275  02B3  34ED               	retlw	237
  4276  02B4  3400               	retlw	0
  4277  02B5  34EE               	retlw	238
  4278  02B6  3400               	retlw	0
  4279  02B7  34EF               	retlw	239
  4280  02B8  3400               	retlw	0
  4281  02B9  34F0               	retlw	240
  4282  02BA  3400               	retlw	0
  4283  02BB  34F1               	retlw	241
  4284  02BC  3400               	retlw	0
  4285  02BD  34F1               	retlw	241
  4286  02BE  3400               	retlw	0
  4287  02BF  34F2               	retlw	242
  4288  02C0  3400               	retlw	0
  4289  02C1  34F3               	retlw	243
  4290  02C2  3400               	retlw	0
  4291  02C3  34F4               	retlw	244
  4292  02C4  3400               	retlw	0
  4293  02C5  34F5               	retlw	245
  4294  02C6  3400               	retlw	0
  4295  02C7  34F6               	retlw	246
  4296  02C8  3400               	retlw	0
  4297  02C9  34F6               	retlw	246
  4298  02CA  3400               	retlw	0
  4299  02CB  34F7               	retlw	247
  4300  02CC  3400               	retlw	0
  4301  02CD  34F8               	retlw	248
  4302  02CE  3400               	retlw	0
  4303  02CF  34F9               	retlw	249
  4304  02D0  3400               	retlw	0
  4305  02D1  34FA               	retlw	250
  4306  02D2  3400               	retlw	0
  4307  02D3  34FA               	retlw	250
  4308  02D4  3400               	retlw	0
  4309  02D5  34FB               	retlw	251
  4310  02D6  3400               	retlw	0
  4311  02D7  34FC               	retlw	252
  4312  02D8  3400               	retlw	0
  4313  02D9  34FD               	retlw	253
  4314  02DA  3400               	retlw	0
  4315  02DB  34FE               	retlw	254
  4316  02DC  3400               	retlw	0
  4317  02DD  34FF               	retlw	255
  4318  02DE  3400               	retlw	0
  4319  02DF  34FF               	retlw	255
  4320  02E0  3400               	retlw	0
  4321  02E1  3400               	retlw	0
  4322  02E2  3401               	retlw	1
  4323  02E3  3401               	retlw	1
  4324  02E4  3401               	retlw	1
  4325  02E5  3402               	retlw	2
  4326  02E6  3401               	retlw	1
  4327  02E7  3403               	retlw	3
  4328  02E8  3401               	retlw	1
  4329  02E9  3403               	retlw	3
  4330  02EA  3401               	retlw	1
  4331  02EB  3404               	retlw	4
  4332  02EC  3401               	retlw	1
  4333  02ED  3405               	retlw	5
  4334  02EE  3401               	retlw	1
  4335  02EF  3406               	retlw	6
  4336  02F0  3401               	retlw	1
  4337  02F1  3407               	retlw	7
  4338  02F2  3401               	retlw	1
  4339  02F3  3408               	retlw	8
  4340  02F4  3401               	retlw	1
  4341  02F5  3408               	retlw	8
  4342  02F6  3401               	retlw	1
  4343  02F7  3409               	retlw	9
  4344  02F8  3401               	retlw	1
  4345  02F9  340A               	retlw	10
  4346  02FA  3401               	retlw	1
  4347  02FB  340B               	retlw	11
  4348  02FC  3401               	retlw	1
  4349  02FD  340C               	retlw	12
  4350  02FE  3401               	retlw	1
  4351  02FF  340C               	retlw	12
  4352  0300  3401               	retlw	1
  4353  0301  340D               	retlw	13
  4354  0302  3401               	retlw	1
  4355  0303  340E               	retlw	14
  4356  0304  3401               	retlw	1
  4357  0305  340F               	retlw	15
  4358  0306  3401               	retlw	1
  4359  0307  3410               	retlw	16
  4360  0308  3401               	retlw	1
  4361  0309  3411               	retlw	17
  4362  030A  3401               	retlw	1
  4363  030B  3411               	retlw	17
  4364  030C  3401               	retlw	1
  4365  030D  3412               	retlw	18
  4366  030E  3401               	retlw	1
  4367  030F  3413               	retlw	19
  4368  0310  3401               	retlw	1
  4369  0311  3414               	retlw	20
  4370  0312  3401               	retlw	1
  4371  0313  3415               	retlw	21
  4372  0314  3401               	retlw	1
  4373  0315  3416               	retlw	22
  4374  0316  3401               	retlw	1
  4375  0317  3416               	retlw	22
  4376  0318  3401               	retlw	1
  4377  0319  3417               	retlw	23
  4378  031A  3401               	retlw	1
  4379  031B  3418               	retlw	24
  4380  031C  3401               	retlw	1
  4381  031D  3419               	retlw	25
  4382  031E  3401               	retlw	1
  4383  031F  341A               	retlw	26
  4384  0320  3401               	retlw	1
  4385  0321  341A               	retlw	26
  4386  0322  3401               	retlw	1
  4387  0323  341B               	retlw	27
  4388  0324  3401               	retlw	1
  4389  0325  341C               	retlw	28
  4390  0326  3401               	retlw	1
  4391  0327  341D               	retlw	29
  4392  0328  3401               	retlw	1
  4393  0329  341E               	retlw	30
  4394  032A  3401               	retlw	1
  4395  032B  341F               	retlw	31
  4396  032C  3401               	retlw	1
  4397  032D  341F               	retlw	31
  4398  032E  3401               	retlw	1
  4399  032F  3420               	retlw	32
  4400  0330  3401               	retlw	1
  4401  0331  3421               	retlw	33
  4402  0332  3401               	retlw	1
  4403  0333  3422               	retlw	34
  4404  0334  3401               	retlw	1
  4405  0335  3423               	retlw	35
  4406  0336  3401               	retlw	1
  4407  0337  3423               	retlw	35
  4408  0338  3401               	retlw	1
  4409  0339  3424               	retlw	36
  4410  033A  3401               	retlw	1
  4411  033B  3425               	retlw	37
  4412  033C  3401               	retlw	1
  4413  033D  3426               	retlw	38
  4414  033E  3401               	retlw	1
  4415  033F  3427               	retlw	39
  4416  0340  3401               	retlw	1
  4417  0341  3428               	retlw	40
  4418  0342  3401               	retlw	1
  4419  0343  3428               	retlw	40
  4420  0344  3401               	retlw	1
  4421  0345  3429               	retlw	41
  4422  0346  3401               	retlw	1
  4423  0347  342A               	retlw	42
  4424  0348  3401               	retlw	1
  4425  0349  342B               	retlw	43
  4426  034A  3401               	retlw	1
  4427  034B  342C               	retlw	44
  4428  034C  3401               	retlw	1
  4429  034D  342D               	retlw	45
  4430  034E  3401               	retlw	1
  4431  034F  342D               	retlw	45
  4432  0350  3401               	retlw	1
  4433  0351  342E               	retlw	46
  4434  0352  3401               	retlw	1
  4435  0353  342F               	retlw	47
  4436  0354  3401               	retlw	1
  4437  0355  3430               	retlw	48
  4438  0356  3401               	retlw	1
  4439  0357  3431               	retlw	49
  4440  0358  3401               	retlw	1
  4441  0359  3431               	retlw	49
  4442  035A  3401               	retlw	1
  4443  035B  3432               	retlw	50
  4444  035C  3401               	retlw	1
  4445  035D  3433               	retlw	51
  4446  035E  3401               	retlw	1
  4447  035F  3434               	retlw	52
  4448  0360  3401               	retlw	1
  4449  0361  3435               	retlw	53
  4450  0362  3401               	retlw	1
  4451  0363  3436               	retlw	54
  4452  0364  3401               	retlw	1
  4453  0365  3436               	retlw	54
  4454  0366  3401               	retlw	1
  4455  0367  3437               	retlw	55
  4456  0368  3401               	retlw	1
  4457  0369  3438               	retlw	56
  4458  036A  3401               	retlw	1
  4459  036B  3439               	retlw	57
  4460  036C  3401               	retlw	1
  4461  036D  343A               	retlw	58
  4462  036E  3401               	retlw	1
  4463  036F  343A               	retlw	58
  4464  0370  3401               	retlw	1
  4465  0371  343B               	retlw	59
  4466  0372  3401               	retlw	1
  4467  0373  343C               	retlw	60
  4468  0374  3401               	retlw	1
  4469  0375  343D               	retlw	61
  4470  0376  3401               	retlw	1
  4471  0377  343E               	retlw	62
  4472  0378  3401               	retlw	1
  4473  0379  343F               	retlw	63
  4474  037A  3401               	retlw	1
  4475  037B  343F               	retlw	63
  4476  037C  3401               	retlw	1
  4477  037D  3440               	retlw	64
  4478  037E  3401               	retlw	1
  4479  037F  3441               	retlw	65
  4480  0380  3401               	retlw	1
  4481  0381  3442               	retlw	66
  4482  0382  3401               	retlw	1
  4483  0383  3443               	retlw	67
  4484  0384  3401               	retlw	1
  4485  0385  3444               	retlw	68
  4486  0386  3401               	retlw	1
  4487  0387  3444               	retlw	68
  4488  0388  3401               	retlw	1
  4489  0389  3445               	retlw	69
  4490  038A  3401               	retlw	1
  4491  038B  3446               	retlw	70
  4492  038C  3401               	retlw	1
  4493  038D  3447               	retlw	71
  4494  038E  3401               	retlw	1
  4495  038F  3448               	retlw	72
  4496  0390  3401               	retlw	1
  4497  0391  3448               	retlw	72
  4498  0392  3401               	retlw	1
  4499  0393  3449               	retlw	73
  4500  0394  3401               	retlw	1
  4501  0395  344A               	retlw	74
  4502  0396  3401               	retlw	1
  4503  0397  344B               	retlw	75
  4504  0398  3401               	retlw	1
  4505  0399  344C               	retlw	76
  4506  039A  3401               	retlw	1
  4507  039B  344D               	retlw	77
  4508  039C  3401               	retlw	1
  4509  039D  344D               	retlw	77
  4510  039E  3401               	retlw	1
  4511  039F  344E               	retlw	78
  4512  03A0  3401               	retlw	1
  4513  03A1  344F               	retlw	79
  4514  03A2  3401               	retlw	1
  4515  03A3  3450               	retlw	80
  4516  03A4  3401               	retlw	1
  4517  03A5  3451               	retlw	81
  4518  03A6  3401               	retlw	1
  4519  03A7  3451               	retlw	81
  4520  03A8  3401               	retlw	1
  4521  03A9  3452               	retlw	82
  4522  03AA  3401               	retlw	1
  4523  03AB  3453               	retlw	83
  4524  03AC  3401               	retlw	1
  4525  03AD  3454               	retlw	84
  4526  03AE  3401               	retlw	1
  4527  03AF  3455               	retlw	85
  4528  03B0  3401               	retlw	1
  4529  03B1  3456               	retlw	86
  4530  03B2  3401               	retlw	1
  4531  03B3  3456               	retlw	86
  4532  03B4  3401               	retlw	1
  4533  03B5  3457               	retlw	87
  4534  03B6  3401               	retlw	1
  4535  03B7  3458               	retlw	88
  4536  03B8  3401               	retlw	1
  4537  03B9  3459               	retlw	89
  4538  03BA  3401               	retlw	1
  4539  03BB  345A               	retlw	90
  4540  03BC  3401               	retlw	1
  4541  03BD  345A               	retlw	90
  4542  03BE  3401               	retlw	1
  4543  03BF  345B               	retlw	91
  4544  03C0  3401               	retlw	1
  4545  03C1  345C               	retlw	92
  4546  03C2  3401               	retlw	1
  4547  03C3  345D               	retlw	93
  4548  03C4  3401               	retlw	1
  4549  03C5  345E               	retlw	94
  4550  03C6  3401               	retlw	1
  4551  03C7  345F               	retlw	95
  4552  03C8  3401               	retlw	1
  4553  03C9  345F               	retlw	95
  4554  03CA  3401               	retlw	1
  4555  03CB  3460               	retlw	96
  4556  03CC  3401               	retlw	1
  4557  03CD  3461               	retlw	97
  4558  03CE  3401               	retlw	1
  4559  03CF  3462               	retlw	98
  4560  03D0  3401               	retlw	1
  4561  03D1  3463               	retlw	99
  4562  03D2  3401               	retlw	1
  4563  03D3  3464               	retlw	100
  4564  03D4  3401               	retlw	1
  4565  03D5  3464               	retlw	100
  4566  03D6  3401               	retlw	1
  4567  03D7  3465               	retlw	101
  4568  03D8  3401               	retlw	1
  4569  03D9  3466               	retlw	102
  4570  03DA  3401               	retlw	1
  4571  03DB  3467               	retlw	103
  4572  03DC  3401               	retlw	1
  4573  03DD  3468               	retlw	104
  4574  03DE  3401               	retlw	1
  4575  03DF  3468               	retlw	104
  4576  03E0  3401               	retlw	1
  4577  03E1  3469               	retlw	105
  4578  03E2  3401               	retlw	1
  4579  03E3  346A               	retlw	106
  4580  03E4  3401               	retlw	1
  4581  03E5  346B               	retlw	107
  4582  03E6  3401               	retlw	1
  4583  03E7  346C               	retlw	108
  4584  03E8  3401               	retlw	1
  4585  03E9  346D               	retlw	109
  4586  03EA  3401               	retlw	1
  4587  03EB  346D               	retlw	109
  4588  03EC  3401               	retlw	1
  4589  03ED  346E               	retlw	110
  4590  03EE  3401               	retlw	1
  4591  03EF  346F               	retlw	111
  4592  03F0  3401               	retlw	1
  4593  03F1  3470               	retlw	112
  4594  03F2  3401               	retlw	1
  4595  03F3  3471               	retlw	113
  4596  03F4  3401               	retlw	1
  4597  03F5  3471               	retlw	113
  4598  03F6  3401               	retlw	1
  4599  03F7  3472               	retlw	114
  4600  03F8  3401               	retlw	1
  4601  03F9  3473               	retlw	115
  4602  03FA  3401               	retlw	1
  4603  03FB  3474               	retlw	116
  4604  03FC  3401               	retlw	1
  4605  03FD  3475               	retlw	117
  4606  03FE  3401               	retlw	1
  4607  03FF  3476               	retlw	118
  4608  0400  3401               	retlw	1
  4609  0401  3476               	retlw	118
  4610  0402  3401               	retlw	1
  4611  0403  3477               	retlw	119
  4612  0404  3401               	retlw	1
  4613  0405  3478               	retlw	120
  4614  0406  3401               	retlw	1
  4615  0407  3479               	retlw	121
  4616  0408  3401               	retlw	1
  4617  0409  347A               	retlw	122
  4618  040A  3401               	retlw	1
  4619  040B  347B               	retlw	123
  4620  040C  3401               	retlw	1
  4621  040D  347B               	retlw	123
  4622  040E  3401               	retlw	1
  4623  040F  347C               	retlw	124
  4624  0410  3401               	retlw	1
  4625  0411  347D               	retlw	125
  4626  0412  3401               	retlw	1
  4627  0413  347E               	retlw	126
  4628  0414  3401               	retlw	1
  4629  0415  347F               	retlw	127
  4630  0416  3401               	retlw	1
  4631  0417  347F               	retlw	127
  4632  0418  3401               	retlw	1
  4633  0419  3480               	retlw	128
  4634  041A  3401               	retlw	1
  4635  041B  3481               	retlw	129
  4636  041C  3401               	retlw	1
  4637  041D  3482               	retlw	130
  4638  041E  3401               	retlw	1
  4639  041F  3483               	retlw	131
  4640  0420  3401               	retlw	1
  4641  0421  3484               	retlw	132
  4642  0422  3401               	retlw	1
  4643  0423  3484               	retlw	132
  4644  0424  3401               	retlw	1
  4645  0425  3485               	retlw	133
  4646  0426  3401               	retlw	1
  4647  0427  3486               	retlw	134
  4648  0428  3401               	retlw	1
  4649  0429  3487               	retlw	135
  4650  042A  3401               	retlw	1
  4651  042B  3488               	retlw	136
  4652  042C  3401               	retlw	1
  4653  042D  3488               	retlw	136
  4654  042E  3401               	retlw	1
  4655  042F  3489               	retlw	137
  4656  0430  3401               	retlw	1
  4657  0431  348A               	retlw	138
  4658  0432  3401               	retlw	1
  4659  0433  348B               	retlw	139
  4660  0434  3401               	retlw	1
  4661  0435  348C               	retlw	140
  4662  0436  3401               	retlw	1
  4663  0437  348D               	retlw	141
  4664  0438  3401               	retlw	1
  4665  0439  348D               	retlw	141
  4666  043A  3401               	retlw	1
  4667  043B  348E               	retlw	142
  4668  043C  3401               	retlw	1
  4669  043D  348F               	retlw	143
  4670  043E  3401               	retlw	1
  4671  043F  3490               	retlw	144
  4672  0440  3401               	retlw	1
  4673  0441  3491               	retlw	145
  4674  0442  3401               	retlw	1
  4675  0443  3492               	retlw	146
  4676  0444  3401               	retlw	1
  4677  0445  3492               	retlw	146
  4678  0446  3401               	retlw	1
  4679  0447  3493               	retlw	147
  4680  0448  3401               	retlw	1
  4681  0449  3494               	retlw	148
  4682  044A  3401               	retlw	1
  4683  044B  3495               	retlw	149
  4684  044C  3401               	retlw	1
  4685  044D  3496               	retlw	150
  4686  044E  3401               	retlw	1
  4687  044F  3496               	retlw	150
  4688  0450  3401               	retlw	1
  4689  0451  3497               	retlw	151
  4690  0452  3401               	retlw	1
  4691  0453  3498               	retlw	152
  4692  0454  3401               	retlw	1
  4693  0455  3499               	retlw	153
  4694  0456  3401               	retlw	1
  4695  0457  349A               	retlw	154
  4696  0458  3401               	retlw	1
  4697  0459  349B               	retlw	155
  4698  045A  3401               	retlw	1
  4699  045B  349B               	retlw	155
  4700  045C  3401               	retlw	1
  4701  045D  349C               	retlw	156
  4702  045E  3401               	retlw	1
  4703  045F  349D               	retlw	157
  4704  0460  3401               	retlw	1
  4705  0461  349E               	retlw	158
  4706  0462  3401               	retlw	1
  4707  0463  349F               	retlw	159
  4708  0464  3401               	retlw	1
  4709  0465  349F               	retlw	159
  4710  0466  3401               	retlw	1
  4711  0467  34A0               	retlw	160
  4712  0468  3401               	retlw	1
  4713  0469  34A1               	retlw	161
  4714  046A  3401               	retlw	1
  4715  046B  34A2               	retlw	162
  4716  046C  3401               	retlw	1
  4717  046D  34A3               	retlw	163
  4718  046E  3401               	retlw	1
  4719  046F  34A4               	retlw	164
  4720  0470  3401               	retlw	1
  4721  0471  34A4               	retlw	164
  4722  0472  3401               	retlw	1
  4723  0473  34A5               	retlw	165
  4724  0474  3401               	retlw	1
  4725  0475  34A6               	retlw	166
  4726  0476  3401               	retlw	1
  4727  0477  34A7               	retlw	167
  4728  0478  3401               	retlw	1
  4729  0479  34A8               	retlw	168
  4730  047A  3401               	retlw	1
  4731  047B  34A8               	retlw	168
  4732  047C  3401               	retlw	1
  4733  047D  34A9               	retlw	169
  4734  047E  3401               	retlw	1
  4735  047F  34AA               	retlw	170
  4736  0480  3401               	retlw	1
  4737  0481  34AB               	retlw	171
  4738  0482  3401               	retlw	1
  4739  0483  34AC               	retlw	172
  4740  0484  3401               	retlw	1
  4741  0485  34AD               	retlw	173
  4742  0486  3401               	retlw	1
  4743  0487  34AD               	retlw	173
  4744  0488  3401               	retlw	1
  4745  0489  34AE               	retlw	174
  4746  048A  3401               	retlw	1
  4747  048B  34AF               	retlw	175
  4748  048C  3401               	retlw	1
  4749  048D  34B0               	retlw	176
  4750  048E  3401               	retlw	1
  4751  048F  34B1               	retlw	177
  4752  0490  3401               	retlw	1
  4753  0491  34B2               	retlw	178
  4754  0492  3401               	retlw	1
  4755  0493  34B2               	retlw	178
  4756  0494  3401               	retlw	1
  4757  0495  34B3               	retlw	179
  4758  0496  3401               	retlw	1
  4759  0497  34B4               	retlw	180
  4760  0498  3401               	retlw	1
  4761  0499  34B5               	retlw	181
  4762  049A  3401               	retlw	1
  4763  049B  34B6               	retlw	182
  4764  049C  3401               	retlw	1
  4765  049D  34B6               	retlw	182
  4766  049E  3401               	retlw	1
  4767  049F  34B7               	retlw	183
  4768  04A0  3401               	retlw	1
  4769  04A1  34B8               	retlw	184
  4770  04A2  3401               	retlw	1
  4771  04A3  34B9               	retlw	185
  4772  04A4  3401               	retlw	1
  4773  04A5  34BA               	retlw	186
  4774  04A6  3401               	retlw	1
  4775  04A7  34BB               	retlw	187
  4776  04A8  3401               	retlw	1
  4777  04A9  34BB               	retlw	187
  4778  04AA  3401               	retlw	1
  4779  04AB  34BC               	retlw	188
  4780  04AC  3401               	retlw	1
  4781  04AD  34BD               	retlw	189
  4782  04AE  3401               	retlw	1
  4783  04AF  34BE               	retlw	190
  4784  04B0  3401               	retlw	1
  4785  04B1  34BF               	retlw	191
  4786  04B2  3401               	retlw	1
  4787  04B3  34BF               	retlw	191
  4788  04B4  3401               	retlw	1
  4789  04B5  34C0               	retlw	192
  4790  04B6  3401               	retlw	1
  4791  04B7  34C1               	retlw	193
  4792  04B8  3401               	retlw	1
  4793  04B9  34C2               	retlw	194
  4794  04BA  3401               	retlw	1
  4795  04BB  34C3               	retlw	195
  4796  04BC  3401               	retlw	1
  4797  04BD  34C4               	retlw	196
  4798  04BE  3401               	retlw	1
  4799  04BF  34C4               	retlw	196
  4800  04C0  3401               	retlw	1
  4801  04C1  34C5               	retlw	197
  4802  04C2  3401               	retlw	1
  4803  04C3  34C6               	retlw	198
  4804  04C4  3401               	retlw	1
  4805  04C5  34C7               	retlw	199
  4806  04C6  3401               	retlw	1
  4807  04C7  34C8               	retlw	200
  4808  04C8  3401               	retlw	1
  4809  04C9  34C9               	retlw	201
  4810  04CA  3401               	retlw	1
  4811  04CB  34C9               	retlw	201
  4812  04CC  3401               	retlw	1
  4813  04CD  34CA               	retlw	202
  4814  04CE  3401               	retlw	1
  4815  04CF  34CB               	retlw	203
  4816  04D0  3401               	retlw	1
  4817  04D1  34CC               	retlw	204
  4818  04D2  3401               	retlw	1
  4819  04D3  34CD               	retlw	205
  4820  04D4  3401               	retlw	1
  4821  04D5  34CD               	retlw	205
  4822  04D6  3401               	retlw	1
  4823  04D7  34CE               	retlw	206
  4824  04D8  3401               	retlw	1
  4825  04D9  34CF               	retlw	207
  4826  04DA  3401               	retlw	1
  4827  04DB  34D0               	retlw	208
  4828  04DC  3401               	retlw	1
  4829  04DD  34D1               	retlw	209
  4830  04DE  3401               	retlw	1
  4831  04DF  34D2               	retlw	210
  4832  04E0  3401               	retlw	1
  4833  04E1  34D2               	retlw	210
  4834  04E2  3401               	retlw	1
  4835  04E3  34D3               	retlw	211
  4836  04E4  3401               	retlw	1
  4837  04E5  34D4               	retlw	212
  4838  04E6  3401               	retlw	1
  4839  04E7  34D5               	retlw	213
  4840  04E8  3401               	retlw	1
  4841  04E9  34D6               	retlw	214
  4842  04EA  3401               	retlw	1
  4843  04EB  34D6               	retlw	214
  4844  04EC  3401               	retlw	1
  4845  04ED  34D7               	retlw	215
  4846  04EE  3401               	retlw	1
  4847  04EF  34D8               	retlw	216
  4848  04F0  3401               	retlw	1
  4849  04F1  34D9               	retlw	217
  4850  04F2  3401               	retlw	1
  4851  04F3  34DA               	retlw	218
  4852  04F4  3401               	retlw	1
  4853  04F5  34DB               	retlw	219
  4854  04F6  3401               	retlw	1
  4855  04F7  34DB               	retlw	219
  4856  04F8  3401               	retlw	1
  4857  04F9  34DC               	retlw	220
  4858  04FA  3401               	retlw	1
  4859  04FB  34DD               	retlw	221
  4860  04FC  3401               	retlw	1
  4861  04FD  34DE               	retlw	222
  4862  04FE  3401               	retlw	1
  4863  04FF  34DF               	retlw	223
  4864  0500  3401               	retlw	1
  4865  0501  34E0               	retlw	224
  4866  0502  3401               	retlw	1
  4867  0503  34E0               	retlw	224
  4868  0504  3401               	retlw	1
  4869  0505  34E1               	retlw	225
  4870  0506  3401               	retlw	1
  4871  0507  34E2               	retlw	226
  4872  0508  3401               	retlw	1
  4873  0509  34E3               	retlw	227
  4874  050A  3401               	retlw	1
  4875  050B  34E4               	retlw	228
  4876  050C  3401               	retlw	1
  4877  050D  34E4               	retlw	228
  4878  050E  3401               	retlw	1
  4879  050F  34E5               	retlw	229
  4880  0510  3401               	retlw	1
  4881  0511  34E6               	retlw	230
  4882  0512  3401               	retlw	1
  4883  0513  34E7               	retlw	231
  4884  0514  3401               	retlw	1
  4885  0515  34E8               	retlw	232
  4886  0516  3401               	retlw	1
  4887  0517  34E9               	retlw	233
  4888  0518  3401               	retlw	1
  4889  0519  34E9               	retlw	233
  4890  051A  3401               	retlw	1
  4891  051B  34EA               	retlw	234
  4892  051C  3401               	retlw	1
  4893  051D  34EB               	retlw	235
  4894  051E  3401               	retlw	1
  4895  051F  34EC               	retlw	236
  4896  0520  3401               	retlw	1
  4897  0521  34ED               	retlw	237
  4898  0522  3401               	retlw	1
  4899  0523  34ED               	retlw	237
  4900  0524  3401               	retlw	1
  4901  0525  34EE               	retlw	238
  4902  0526  3401               	retlw	1
  4903  0527  34EF               	retlw	239
  4904  0528  3401               	retlw	1
  4905  0529  34F0               	retlw	240
  4906  052A  3401               	retlw	1
  4907  052B  34F1               	retlw	241
  4908  052C  3401               	retlw	1
  4909  052D  34F2               	retlw	242
  4910  052E  3401               	retlw	1
  4911  052F  34F2               	retlw	242
  4912  0530  3401               	retlw	1
  4913  0531  34F3               	retlw	243
  4914  0532  3401               	retlw	1
  4915  0533  34F4               	retlw	244
  4916  0534  3401               	retlw	1
  4917  0535  34F5               	retlw	245
  4918  0536  3401               	retlw	1
  4919  0537  34F6               	retlw	246
  4920  0538  3401               	retlw	1
  4921  0539  34F6               	retlw	246
  4922  053A  3401               	retlw	1
  4923  053B  34F7               	retlw	247
  4924  053C  3401               	retlw	1
  4925  053D  34F8               	retlw	248
  4926  053E  3401               	retlw	1
  4927  053F  34F9               	retlw	249
  4928  0540  3401               	retlw	1
  4929  0541  34FA               	retlw	250
  4930  0542  3401               	retlw	1
  4931  0543  34FB               	retlw	251
  4932  0544  3401               	retlw	1
  4933  0545  34FB               	retlw	251
  4934  0546  3401               	retlw	1
  4935  0547  34FC               	retlw	252
  4936  0548  3401               	retlw	1
  4937  0549  34FD               	retlw	253
  4938  054A  3401               	retlw	1
  4939  054B  34FE               	retlw	254
  4940  054C  3401               	retlw	1
  4941  054D  34FF               	retlw	255
  4942  054E  3401               	retlw	1
  4943  054F  3400               	retlw	0
  4944  0550  3402               	retlw	2
  4945  0551  3400               	retlw	0
  4946  0552  3402               	retlw	2
  4947  0553  3401               	retlw	1
  4948  0554  3402               	retlw	2
  4949  0555  3402               	retlw	2
  4950  0556  3402               	retlw	2
  4951  0557  3403               	retlw	3
  4952  0558  3402               	retlw	2
  4953  0559  3404               	retlw	4
  4954  055A  3402               	retlw	2
  4955  055B  3404               	retlw	4
  4956  055C  3402               	retlw	2
  4957  055D  3405               	retlw	5
  4958  055E  3402               	retlw	2
  4959  055F  3406               	retlw	6
  4960  0560  3402               	retlw	2
  4961  0561  3407               	retlw	7
  4962  0562  3402               	retlw	2
  4963  0563  3408               	retlw	8
  4964  0564  3402               	retlw	2
  4965  0565  3409               	retlw	9
  4966  0566  3402               	retlw	2
  4967  0567  3409               	retlw	9
  4968  0568  3402               	retlw	2
  4969  0569  340A               	retlw	10
  4970  056A  3402               	retlw	2
  4971  056B  340B               	retlw	11
  4972  056C  3402               	retlw	2
  4973  056D  340C               	retlw	12
  4974  056E  3402               	retlw	2
  4975  056F  340D               	retlw	13
  4976  0570  3402               	retlw	2
  4977  0571  340D               	retlw	13
  4978  0572  3402               	retlw	2
  4979  0573  340E               	retlw	14
  4980  0574  3402               	retlw	2
  4981  0575  340F               	retlw	15
  4982  0576  3402               	retlw	2
  4983  0577  3410               	retlw	16
  4984  0578  3402               	retlw	2
  4985  0579  3411               	retlw	17
  4986  057A  3402               	retlw	2
  4987  057B  3412               	retlw	18
  4988  057C  3402               	retlw	2
  4989  057D  3412               	retlw	18
  4990  057E  3402               	retlw	2
  4991  057F  3413               	retlw	19
  4992  0580  3402               	retlw	2
  4993  0581  3414               	retlw	20
  4994  0582  3402               	retlw	2
  4995  0583  3415               	retlw	21
  4996  0584  3402               	retlw	2
  4997  0585  3416               	retlw	22
  4998  0586  3402               	retlw	2
  4999  0587  3417               	retlw	23
  5000  0588  3402               	retlw	2
  5001  0589  3417               	retlw	23
  5002  058A  3402               	retlw	2
  5003  058B  3418               	retlw	24
  5004  058C  3402               	retlw	2
  5005  058D  3419               	retlw	25
  5006  058E  3402               	retlw	2
  5007  058F  341A               	retlw	26
  5008  0590  3402               	retlw	2
  5009  0591  341B               	retlw	27
  5010  0592  3402               	retlw	2
  5011  0593  341B               	retlw	27
  5012  0594  3402               	retlw	2
  5013  0595  341C               	retlw	28
  5014  0596  3402               	retlw	2
  5015  0597  341D               	retlw	29
  5016  0598  3402               	retlw	2
  5017  0599  341E               	retlw	30
  5018  059A  3402               	retlw	2
  5019  059B  341F               	retlw	31
  5020  059C  3402               	retlw	2
  5021  059D  3420               	retlw	32
  5022  059E  3402               	retlw	2
  5023  059F  3420               	retlw	32
  5024  05A0  3402               	retlw	2
  5025  05A1  3421               	retlw	33
  5026  05A2  3402               	retlw	2
  5027  05A3  3422               	retlw	34
  5028  05A4  3402               	retlw	2
  5029  05A5  3423               	retlw	35
  5030  05A6  3402               	retlw	2
  5031  05A7  3424               	retlw	36
  5032  05A8  3402               	retlw	2
  5033  05A9  3424               	retlw	36
  5034  05AA  3402               	retlw	2
  5035  05AB  3425               	retlw	37
  5036  05AC  3402               	retlw	2
  5037  05AD  3426               	retlw	38
  5038  05AE  3402               	retlw	2
  5039  05AF  3427               	retlw	39
  5040  05B0  3402               	retlw	2
  5041  05B1  3428               	retlw	40
  5042  05B2  3402               	retlw	2
  5043  05B3  3429               	retlw	41
  5044  05B4  3402               	retlw	2
  5045  05B5  3429               	retlw	41
  5046  05B6  3402               	retlw	2
  5047  05B7  342A               	retlw	42
  5048  05B8  3402               	retlw	2
  5049  05B9  342B               	retlw	43
  5050  05BA  3402               	retlw	2
  5051  05BB  342C               	retlw	44
  5052  05BC  3402               	retlw	2
  5053  05BD  342D               	retlw	45
  5054  05BE  3402               	retlw	2
  5055  05BF  342E               	retlw	46
  5056  05C0  3402               	retlw	2
  5057  05C1  342E               	retlw	46
  5058  05C2  3402               	retlw	2
  5059  05C3  342F               	retlw	47
  5060  05C4  3402               	retlw	2
  5061  05C5  3430               	retlw	48
  5062  05C6  3402               	retlw	2
  5063  05C7  3431               	retlw	49
  5064  05C8  3402               	retlw	2
  5065  05C9  3432               	retlw	50
  5066  05CA  3402               	retlw	2
  5067  05CB  3432               	retlw	50
  5068  05CC  3402               	retlw	2
  5069  05CD  3433               	retlw	51
  5070  05CE  3402               	retlw	2
  5071  05CF  3434               	retlw	52
  5072  05D0  3402               	retlw	2
  5073  05D1  3435               	retlw	53
  5074  05D2  3402               	retlw	2
  5075  05D3  3436               	retlw	54
  5076  05D4  3402               	retlw	2
  5077  05D5  3437               	retlw	55
  5078  05D6  3402               	retlw	2
  5079  05D7  3437               	retlw	55
  5080  05D8  3402               	retlw	2
  5081  05D9  3438               	retlw	56
  5082  05DA  3402               	retlw	2
  5083  05DB  3439               	retlw	57
  5084  05DC  3402               	retlw	2
  5085  05DD  343A               	retlw	58
  5086  05DE  3402               	retlw	2
  5087  05DF  343B               	retlw	59
  5088  05E0  3402               	retlw	2
  5089  05E1  343B               	retlw	59
  5090  05E2  3402               	retlw	2
  5091  05E3  343C               	retlw	60
  5092  05E4  3402               	retlw	2
  5093  05E5  343D               	retlw	61
  5094  05E6  3402               	retlw	2
  5095  05E7  343E               	retlw	62
  5096  05E8  3402               	retlw	2
  5097  05E9  343F               	retlw	63
  5098  05EA  3402               	retlw	2
  5099  05EB  3440               	retlw	64
  5100  05EC  3402               	retlw	2
  5101  05ED  3440               	retlw	64
  5102  05EE  3402               	retlw	2
  5103  05EF  3441               	retlw	65
  5104  05F0  3402               	retlw	2
  5105  05F1  3442               	retlw	66
  5106  05F2  3402               	retlw	2
  5107  05F3  3443               	retlw	67
  5108  05F4  3402               	retlw	2
  5109  05F5  3444               	retlw	68
  5110  05F6  3402               	retlw	2
  5111  05F7  3444               	retlw	68
  5112  05F8  3402               	retlw	2
  5113  05F9  3445               	retlw	69
  5114  05FA  3402               	retlw	2
  5115  05FB  3446               	retlw	70
  5116  05FC  3402               	retlw	2
  5117  05FD  3447               	retlw	71
  5118  05FE  3402               	retlw	2
  5119  05FF  3448               	retlw	72
  5120  0600  3402               	retlw	2
  5121  0601  3449               	retlw	73
  5122  0602  3402               	retlw	2
  5123  0603  3449               	retlw	73
  5124  0604  3402               	retlw	2
  5125  0605  344A               	retlw	74
  5126  0606  3402               	retlw	2
  5127  0607  344B               	retlw	75
  5128  0608  3402               	retlw	2
  5129  0609  344C               	retlw	76
  5130  060A  3402               	retlw	2
  5131  060B  344D               	retlw	77
  5132  060C  3402               	retlw	2
  5133  060D  344E               	retlw	78
  5134  060E  3402               	retlw	2
  5135  060F  344E               	retlw	78
  5136  0610  3402               	retlw	2
  5137  0611  344F               	retlw	79
  5138  0612  3402               	retlw	2
  5139  0613  3450               	retlw	80
  5140  0614  3402               	retlw	2
  5141  0615  3451               	retlw	81
  5142  0616  3402               	retlw	2
  5143  0617  3452               	retlw	82
  5144  0618  3402               	retlw	2
  5145  0619  3452               	retlw	82
  5146  061A  3402               	retlw	2
  5147  061B  3453               	retlw	83
  5148  061C  3402               	retlw	2
  5149  061D  3454               	retlw	84
  5150  061E  3402               	retlw	2
  5151  061F  3455               	retlw	85
  5152  0620  3402               	retlw	2
  5153  0621  3456               	retlw	86
  5154  0622  3402               	retlw	2
  5155  0623  3457               	retlw	87
  5156  0624  3402               	retlw	2
  5157  0625  3457               	retlw	87
  5158  0626  3402               	retlw	2
  5159  0627  3458               	retlw	88
  5160  0628  3402               	retlw	2
  5161  0629  3459               	retlw	89
  5162  062A  3402               	retlw	2
  5163  062B  345A               	retlw	90
  5164  062C  3402               	retlw	2
  5165  062D  345B               	retlw	91
  5166  062E  3402               	retlw	2
  5167  062F  345B               	retlw	91
  5168  0630  3402               	retlw	2
  5169  0631  345C               	retlw	92
  5170  0632  3402               	retlw	2
  5171  0633  345D               	retlw	93
  5172  0634  3402               	retlw	2
  5173  0635  345E               	retlw	94
  5174  0636  3402               	retlw	2
  5175  0637  345F               	retlw	95
  5176  0638  3402               	retlw	2
  5177  0639  3460               	retlw	96
  5178  063A  3402               	retlw	2
  5179  063B  3460               	retlw	96
  5180  063C  3402               	retlw	2
  5181  063D  3461               	retlw	97
  5182  063E  3402               	retlw	2
  5183  063F  3462               	retlw	98
  5184  0640  3402               	retlw	2
  5185  0641  3463               	retlw	99
  5186  0642  3402               	retlw	2
  5187  0643  3464               	retlw	100
  5188  0644  3402               	retlw	2
  5189  0645  3465               	retlw	101
  5190  0646  3402               	retlw	2
  5191  0647  3465               	retlw	101
  5192  0648  3402               	retlw	2
  5193  0649  3466               	retlw	102
  5194  064A  3402               	retlw	2
  5195  064B  3467               	retlw	103
  5196  064C  3402               	retlw	2
  5197  064D  3468               	retlw	104
  5198  064E  3402               	retlw	2
  5199  064F  3469               	retlw	105
  5200  0650  3402               	retlw	2
  5201  0651  3469               	retlw	105
  5202  0652  3402               	retlw	2
  5203  0653  346A               	retlw	106
  5204  0654  3402               	retlw	2
  5205  0655  346B               	retlw	107
  5206  0656  3402               	retlw	2
  5207  0657  346C               	retlw	108
  5208  0658  3402               	retlw	2
  5209  0659  346D               	retlw	109
  5210  065A  3402               	retlw	2
  5211  065B  346E               	retlw	110
  5212  065C  3402               	retlw	2
  5213  065D  346E               	retlw	110
  5214  065E  3402               	retlw	2
  5215  065F  346F               	retlw	111
  5216  0660  3402               	retlw	2
  5217  0661  3470               	retlw	112
  5218  0662  3402               	retlw	2
  5219  0663  3471               	retlw	113
  5220  0664  3402               	retlw	2
  5221  0665  3472               	retlw	114
  5222  0666  3402               	retlw	2
  5223  0667  3472               	retlw	114
  5224  0668  3402               	retlw	2
  5225  0669  3473               	retlw	115
  5226  066A  3402               	retlw	2
  5227  066B  3474               	retlw	116
  5228  066C  3402               	retlw	2
  5229  066D  3475               	retlw	117
  5230  066E  3402               	retlw	2
  5231  066F  3476               	retlw	118
  5232  0670  3402               	retlw	2
  5233  0671  3477               	retlw	119
  5234  0672  3402               	retlw	2
  5235  0673  3477               	retlw	119
  5236  0674  3402               	retlw	2
  5237  0675  3478               	retlw	120
  5238  0676  3402               	retlw	2
  5239  0677  3479               	retlw	121
  5240  0678  3402               	retlw	2
  5241  0679  347A               	retlw	122
  5242  067A  3402               	retlw	2
  5243  067B  347B               	retlw	123
  5244  067C  3402               	retlw	2
  5245  067D  347C               	retlw	124
  5246  067E  3402               	retlw	2
  5247  067F  347C               	retlw	124
  5248  0680  3402               	retlw	2
  5249  0681  347D               	retlw	125
  5250  0682  3402               	retlw	2
  5251  0683  347E               	retlw	126
  5252  0684  3402               	retlw	2
  5253  0685  347F               	retlw	127
  5254  0686  3402               	retlw	2
  5255  0687  3480               	retlw	128
  5256  0688  3402               	retlw	2
  5257  0689  3480               	retlw	128
  5258  068A  3402               	retlw	2
  5259  068B  3481               	retlw	129
  5260  068C  3402               	retlw	2
  5261  068D  3482               	retlw	130
  5262  068E  3402               	retlw	2
  5263  068F  3483               	retlw	131
  5264  0690  3402               	retlw	2
  5265  0691  3484               	retlw	132
  5266  0692  3402               	retlw	2
  5267  0693  3485               	retlw	133
  5268  0694  3402               	retlw	2
  5269  0695  3485               	retlw	133
  5270  0696  3402               	retlw	2
  5271  0697  3486               	retlw	134
  5272  0698  3402               	retlw	2
  5273  0699  3487               	retlw	135
  5274  069A  3402               	retlw	2
  5275  069B  3488               	retlw	136
  5276  069C  3402               	retlw	2
  5277  069D  3489               	retlw	137
  5278  069E  3402               	retlw	2
  5279  069F  3489               	retlw	137
  5280  06A0  3402               	retlw	2
  5281  06A1  348A               	retlw	138
  5282  06A2  3402               	retlw	2
  5283  06A3  348B               	retlw	139
  5284  06A4  3402               	retlw	2
  5285  06A5  348C               	retlw	140
  5286  06A6  3402               	retlw	2
  5287  06A7  348D               	retlw	141
  5288  06A8  3402               	retlw	2
  5289  06A9  348E               	retlw	142
  5290  06AA  3402               	retlw	2
  5291  06AB  348E               	retlw	142
  5292  06AC  3402               	retlw	2
  5293  06AD  348F               	retlw	143
  5294  06AE  3402               	retlw	2
  5295  06AF  3490               	retlw	144
  5296  06B0  3402               	retlw	2
  5297  06B1  3491               	retlw	145
  5298  06B2  3402               	retlw	2
  5299  06B3  3492               	retlw	146
  5300  06B4  3402               	retlw	2
  5301  06B5  3492               	retlw	146
  5302  06B6  3402               	retlw	2
  5303  06B7  3493               	retlw	147
  5304  06B8  3402               	retlw	2
  5305  06B9  3494               	retlw	148
  5306  06BA  3402               	retlw	2
  5307  06BB  3495               	retlw	149
  5308  06BC  3402               	retlw	2
  5309  06BD  3496               	retlw	150
  5310  06BE  3402               	retlw	2
  5311  06BF  3497               	retlw	151
  5312  06C0  3402               	retlw	2
  5313  06C1  3497               	retlw	151
  5314  06C2  3402               	retlw	2
  5315  06C3  3498               	retlw	152
  5316  06C4  3402               	retlw	2
  5317  06C5  3499               	retlw	153
  5318  06C6  3402               	retlw	2
  5319  06C7  349A               	retlw	154
  5320  06C8  3402               	retlw	2
  5321  06C9  349B               	retlw	155
  5322  06CA  3402               	retlw	2
  5323  06CB  349C               	retlw	156
  5324  06CC  3402               	retlw	2
  5325  06CD  349C               	retlw	156
  5326  06CE  3402               	retlw	2
  5327  06CF  349D               	retlw	157
  5328  06D0  3402               	retlw	2
  5329  06D1  349E               	retlw	158
  5330  06D2  3402               	retlw	2
  5331  06D3  349F               	retlw	159
  5332  06D4  3402               	retlw	2
  5333  06D5  34A0               	retlw	160
  5334  06D6  3402               	retlw	2
  5335  06D7  34A0               	retlw	160
  5336  06D8  3402               	retlw	2
  5337  06D9  34A1               	retlw	161
  5338  06DA  3402               	retlw	2
  5339  06DB  34A2               	retlw	162
  5340  06DC  3402               	retlw	2
  5341  06DD  34A3               	retlw	163
  5342  06DE  3402               	retlw	2
  5343  06DF  34A4               	retlw	164
  5344  06E0  3402               	retlw	2
  5345  06E1  34A5               	retlw	165
  5346  06E2  3402               	retlw	2
  5347  06E3  34A5               	retlw	165
  5348  06E4  3402               	retlw	2
  5349  06E5  34A6               	retlw	166
  5350  06E6  3402               	retlw	2
  5351  06E7  34A7               	retlw	167
  5352  06E8  3402               	retlw	2
  5353  06E9  34A8               	retlw	168
  5354  06EA  3402               	retlw	2
  5355  06EB  34A9               	retlw	169
  5356  06EC  3402               	retlw	2
  5357  06ED  34A9               	retlw	169
  5358  06EE  3402               	retlw	2
  5359  06EF  34AA               	retlw	170
  5360  06F0  3402               	retlw	2
  5361  06F1  34AB               	retlw	171
  5362  06F2  3402               	retlw	2
  5363  06F3  34AC               	retlw	172
  5364  06F4  3402               	retlw	2
  5365  06F5  34AD               	retlw	173
  5366  06F6  3402               	retlw	2
  5367  06F7  34AE               	retlw	174
  5368  06F8  3402               	retlw	2
  5369  06F9  34AE               	retlw	174
  5370  06FA  3402               	retlw	2
  5371  06FB  34AF               	retlw	175
  5372  06FC  3402               	retlw	2
  5373  06FD  34B0               	retlw	176
  5374  06FE  3402               	retlw	2
  5375  06FF  34B1               	retlw	177
  5376  0700  3402               	retlw	2
  5377  0701  34B2               	retlw	178
  5378  0702  3402               	retlw	2
  5379  0703  34B3               	retlw	179
  5380  0704  3402               	retlw	2
  5381  0705  34B3               	retlw	179
  5382  0706  3402               	retlw	2
  5383  0707  34B4               	retlw	180
  5384  0708  3402               	retlw	2
  5385  0709  34B5               	retlw	181
  5386  070A  3402               	retlw	2
  5387  070B  34B6               	retlw	182
  5388  070C  3402               	retlw	2
  5389  070D  34B7               	retlw	183
  5390  070E  3402               	retlw	2
  5391  070F  34B7               	retlw	183
  5392  0710  3402               	retlw	2
  5393  0711  34B8               	retlw	184
  5394  0712  3402               	retlw	2
  5395  0713  34B9               	retlw	185
  5396  0714  3402               	retlw	2
  5397  0715  34BA               	retlw	186
  5398  0716  3402               	retlw	2
  5399  0717  34BB               	retlw	187
  5400  0718  3402               	retlw	2
  5401  0719  34BC               	retlw	188
  5402  071A  3402               	retlw	2
  5403  071B  34BC               	retlw	188
  5404  071C  3402               	retlw	2
  5405  071D  34BD               	retlw	189
  5406  071E  3402               	retlw	2
  5407  071F  34BE               	retlw	190
  5408  0720  3402               	retlw	2
  5409  0721  34BF               	retlw	191
  5410  0722  3402               	retlw	2
  5411  0723  34C0               	retlw	192
  5412  0724  3402               	retlw	2
  5413  0725  34C0               	retlw	192
  5414  0726  3402               	retlw	2
  5415  0727  34C1               	retlw	193
  5416  0728  3402               	retlw	2
  5417  0729  34C2               	retlw	194
  5418  072A  3402               	retlw	2
  5419  072B  34C3               	retlw	195
  5420  072C  3402               	retlw	2
  5421  072D  34C4               	retlw	196
  5422  072E  3402               	retlw	2
  5423  072F  34C5               	retlw	197
  5424  0730  3402               	retlw	2
  5425  0731  34C5               	retlw	197
  5426  0732  3402               	retlw	2
  5427  0733  34C6               	retlw	198
  5428  0734  3402               	retlw	2
  5429  0735  34C7               	retlw	199
  5430  0736  3402               	retlw	2
  5431  0737  34C8               	retlw	200
  5432  0738  3402               	retlw	2
  5433  0739  34C9               	retlw	201
  5434  073A  3402               	retlw	2
  5435  073B  34CA               	retlw	202
  5436  073C  3402               	retlw	2
  5437  073D  34CA               	retlw	202
  5438  073E  3402               	retlw	2
  5439  073F  34CB               	retlw	203
  5440  0740  3402               	retlw	2
  5441  0741  34CC               	retlw	204
  5442  0742  3402               	retlw	2
  5443  0743  34CD               	retlw	205
  5444  0744  3402               	retlw	2
  5445  0745  34CE               	retlw	206
  5446  0746  3402               	retlw	2
  5447  0747  34CE               	retlw	206
  5448  0748  3402               	retlw	2
  5449  0749  34CF               	retlw	207
  5450  074A  3402               	retlw	2
  5451  074B  34D0               	retlw	208
  5452  074C  3402               	retlw	2
  5453  074D  34D1               	retlw	209
  5454  074E  3402               	retlw	2
  5455  074F  34D2               	retlw	210
  5456  0750  3402               	retlw	2
  5457  0751  34D3               	retlw	211
  5458  0752  3402               	retlw	2
  5459  0753  34D3               	retlw	211
  5460  0754  3402               	retlw	2
  5461  0755  34D4               	retlw	212
  5462  0756  3402               	retlw	2
  5463  0757  34D5               	retlw	213
  5464  0758  3402               	retlw	2
  5465  0759  34D6               	retlw	214
  5466  075A  3402               	retlw	2
  5467  075B  34D7               	retlw	215
  5468  075C  3402               	retlw	2
  5469  075D  34D7               	retlw	215
  5470  075E  3402               	retlw	2
  5471  075F  34D8               	retlw	216
  5472  0760  3402               	retlw	2
  5473  0761  34D9               	retlw	217
  5474  0762  3402               	retlw	2
  5475  0763  34DA               	retlw	218
  5476  0764  3402               	retlw	2
  5477  0765  34DB               	retlw	219
  5478  0766  3402               	retlw	2
  5479  0767  34DC               	retlw	220
  5480  0768  3402               	retlw	2
  5481  0769  34DC               	retlw	220
  5482  076A  3402               	retlw	2
  5483  076B  34DD               	retlw	221
  5484  076C  3402               	retlw	2
  5485  076D  34DE               	retlw	222
  5486  076E  3402               	retlw	2
  5487  076F  34DF               	retlw	223
  5488  0770  3402               	retlw	2
  5489  0771  34E0               	retlw	224
  5490  0772  3402               	retlw	2
  5491  0773  34E1               	retlw	225
  5492  0774  3402               	retlw	2
  5493  0775  34E1               	retlw	225
  5494  0776  3402               	retlw	2
  5495  0777  34E2               	retlw	226
  5496  0778  3402               	retlw	2
  5497  0779  34E3               	retlw	227
  5498  077A  3402               	retlw	2
  5499  077B  34E4               	retlw	228
  5500  077C  3402               	retlw	2
  5501  077D  34E5               	retlw	229
  5502  077E  3402               	retlw	2
  5503  077F  34E5               	retlw	229
  5504  0780  3402               	retlw	2
  5505  0781  34E6               	retlw	230
  5506  0782  3402               	retlw	2
  5507  0783  34E7               	retlw	231
  5508  0784  3402               	retlw	2
  5509  0785  34E8               	retlw	232
  5510  0786  3402               	retlw	2
  5511  0787  34E9               	retlw	233
  5512  0788  3402               	retlw	2
  5513  0789  34EA               	retlw	234
  5514  078A  3402               	retlw	2
  5515  078B  34EA               	retlw	234
  5516  078C  3402               	retlw	2
  5517  078D  34EB               	retlw	235
  5518  078E  3402               	retlw	2
  5519  078F  34EC               	retlw	236
  5520  0790  3402               	retlw	2
  5521  0791  34ED               	retlw	237
  5522  0792  3402               	retlw	2
  5523  0793  34EE               	retlw	238
  5524  0794  3402               	retlw	2
  5525  0795  34EE               	retlw	238
  5526  0796  3402               	retlw	2
  5527  0797  34EF               	retlw	239
  5528  0798  3402               	retlw	2
  5529  0799  34F0               	retlw	240
  5530  079A  3402               	retlw	2
  5531  079B  34F1               	retlw	241
  5532  079C  3402               	retlw	2
  5533  079D  34F2               	retlw	242
  5534  079E  3402               	retlw	2
  5535  079F  34F3               	retlw	243
  5536  07A0  3402               	retlw	2
  5537  07A1  34F3               	retlw	243
  5538  07A2  3402               	retlw	2
  5539  07A3  34F4               	retlw	244
  5540  07A4  3402               	retlw	2
  5541  07A5  34F5               	retlw	245
  5542  07A6  3402               	retlw	2
  5543  07A7  34F6               	retlw	246
  5544  07A8  3402               	retlw	2
  5545  07A9  34F7               	retlw	247
  5546  07AA  3402               	retlw	2
  5547  07AB  34F7               	retlw	247
  5548  07AC  3402               	retlw	2
  5549  07AD  34F8               	retlw	248
  5550  07AE  3402               	retlw	2
  5551  07AF  34F9               	retlw	249
  5552  07B0  3402               	retlw	2
  5553  07B1  34FA               	retlw	250
  5554  07B2  3402               	retlw	2
  5555  07B3  34FB               	retlw	251
  5556  07B4  3402               	retlw	2
  5557  07B5  34FC               	retlw	252
  5558  07B6  3402               	retlw	2
  5559  07B7  34FC               	retlw	252
  5560  07B8  3402               	retlw	2
  5561  07B9  34FD               	retlw	253
  5562  07BA  3402               	retlw	2
  5563  07BB  34FE               	retlw	254
  5564  07BC  3402               	retlw	2
  5565  07BD  34FF               	retlw	255
  5566  07BE  3402               	retlw	2
  5567  07BF  3400               	retlw	0
  5568  07C0  3403               	retlw	3
  5569  07C1  3401               	retlw	1
  5570  07C2  3403               	retlw	3
  5571  07C3  3401               	retlw	1
  5572  07C4  3403               	retlw	3
  5573  07C5  3402               	retlw	2
  5574  07C6  3403               	retlw	3
  5575  07C7  3403               	retlw	3
  5576  07C8  3403               	retlw	3
  5577  07C9  3404               	retlw	4
  5578  07CA  3403               	retlw	3
  5579  07CB  3405               	retlw	5
  5580  07CC  3403               	retlw	3
  5581  07CD  3405               	retlw	5
  5582  07CE  3403               	retlw	3
  5583  07CF  3406               	retlw	6
  5584  07D0  3403               	retlw	3
  5585  07D1  3407               	retlw	7
  5586  07D2  3403               	retlw	3
  5587  07D3  3408               	retlw	8
  5588  07D4  3403               	retlw	3
  5589  07D5  3409               	retlw	9
  5590  07D6  3403               	retlw	3
  5591  07D7  340A               	retlw	10
  5592  07D8  3403               	retlw	3
  5593  07D9  340A               	retlw	10
  5594  07DA  3403               	retlw	3
  5595  07DB  340B               	retlw	11
  5596  07DC  3403               	retlw	3
  5597  07DD  340C               	retlw	12
  5598  07DE  3403               	retlw	3
  5599  07DF  340D               	retlw	13
  5600  07E0  3403               	retlw	3
  5601  07E1  340E               	retlw	14
  5602  07E2  3403               	retlw	3
  5603  07E3  340E               	retlw	14
  5604  07E4  3403               	retlw	3
  5605  07E5  340F               	retlw	15
  5606  07E6  3403               	retlw	3
  5607  07E7  3410               	retlw	16
  5608  07E8  3403               	retlw	3
  5609  07E9  3411               	retlw	17
  5610  07EA  3403               	retlw	3
  5611  07EB  3412               	retlw	18
  5612  07EC  3403               	retlw	3
  5613  07ED  3413               	retlw	19
  5614  07EE  3403               	retlw	3
  5615  07EF  3413               	retlw	19
  5616  07F0  3403               	retlw	3
  5617  07F1  3414               	retlw	20
  5618  07F2  3403               	retlw	3
  5619  07F3  3415               	retlw	21
  5620  07F4  3403               	retlw	3
  5621  07F5  3416               	retlw	22
  5622  07F6  3403               	retlw	3
  5623  07F7  3417               	retlw	23
  5624  07F8  3403               	retlw	3
  5625  07F9  3418               	retlw	24
  5626  07FA  3403               	retlw	3
  5627  07FB  3418               	retlw	24
  5628  07FC  3403               	retlw	3
  5629  07FD  3419               	retlw	25
  5630  07FE  3403               	retlw	3
  5631  07FF  341A               	retlw	26
  5632  0800  3403               	retlw	3
  5633  0801  341B               	retlw	27
  5634  0802  3403               	retlw	3
  5635  0803  341C               	retlw	28
  5636  0804  3403               	retlw	3
  5637  0805  341C               	retlw	28
  5638  0806  3403               	retlw	3
  5639  0807  341D               	retlw	29
  5640  0808  3403               	retlw	3
  5641  0809  341E               	retlw	30
  5642  080A  3403               	retlw	3
  5643  080B  341F               	retlw	31
  5644  080C  3403               	retlw	3
  5645  080D  3420               	retlw	32
  5646  080E  3403               	retlw	3
  5647  080F  3421               	retlw	33
  5648  0810  3403               	retlw	3
  5649  0811  3421               	retlw	33
  5650  0812  3403               	retlw	3
  5651  0813  3422               	retlw	34
  5652  0814  3403               	retlw	3
  5653  0815  3423               	retlw	35
  5654  0816  3403               	retlw	3
  5655  0817  3424               	retlw	36
  5656  0818  3403               	retlw	3
  5657  0819  3425               	retlw	37
  5658  081A  3403               	retlw	3
  5659  081B  3425               	retlw	37
  5660  081C  3403               	retlw	3
  5661  081D  3426               	retlw	38
  5662  081E  3403               	retlw	3
  5663  081F  3427               	retlw	39
  5664  0820  3403               	retlw	3
  5665  0821  3428               	retlw	40
  5666  0822  3403               	retlw	3
  5667  0823  3429               	retlw	41
  5668  0824  3403               	retlw	3
  5669  0825  342A               	retlw	42
  5670  0826  3403               	retlw	3
  5671  0827  342A               	retlw	42
  5672  0828  3403               	retlw	3
  5673  0829  342B               	retlw	43
  5674  082A  3403               	retlw	3
  5675  082B  342C               	retlw	44
  5676  082C  3403               	retlw	3
  5677  082D  342D               	retlw	45
  5678  082E  3403               	retlw	3
  5679  082F  342E               	retlw	46
  5680  0830  3403               	retlw	3
  5681  0831  342F               	retlw	47
  5682  0832  3403               	retlw	3
  5683  0833  342F               	retlw	47
  5684  0834  3403               	retlw	3
  5685  0835  3430               	retlw	48
  5686  0836  3403               	retlw	3
  5687  0837  3431               	retlw	49
  5688  0838  3403               	retlw	3
  5689  0839  3432               	retlw	50
  5690  083A  3403               	retlw	3
  5691  083B  3433               	retlw	51
  5692  083C  3403               	retlw	3
  5693  083D  3433               	retlw	51
  5694  083E  3403               	retlw	3
  5695  083F  3434               	retlw	52
  5696  0840  3403               	retlw	3
  5697  0841  3435               	retlw	53
  5698  0842  3403               	retlw	3
  5699  0843  3436               	retlw	54
  5700  0844  3403               	retlw	3
  5701  0845  3437               	retlw	55
  5702  0846  3403               	retlw	3
  5703  0847  3438               	retlw	56
  5704  0848  3403               	retlw	3
  5705  0849  3438               	retlw	56
  5706  084A  3403               	retlw	3
  5707  084B  3439               	retlw	57
  5708  084C  3403               	retlw	3
  5709  084D  343A               	retlw	58
  5710  084E  3403               	retlw	3
  5711  084F  343B               	retlw	59
  5712  0850  3403               	retlw	3
  5713  0851  343C               	retlw	60
  5714  0852  3403               	retlw	3
  5715  0853  343C               	retlw	60
  5716  0854  3403               	retlw	3
  5717  0855  343D               	retlw	61
  5718  0856  3403               	retlw	3
  5719  0857  343E               	retlw	62
  5720  0858  3403               	retlw	3
  5721  0859  343F               	retlw	63
  5722  085A  3403               	retlw	3
  5723  085B  3440               	retlw	64
  5724  085C  3403               	retlw	3
  5725  085D  3441               	retlw	65
  5726  085E  3403               	retlw	3
  5727  085F  3441               	retlw	65
  5728  0860  3403               	retlw	3
  5729  0861  3442               	retlw	66
  5730  0862  3403               	retlw	3
  5731  0863  3443               	retlw	67
  5732  0864  3403               	retlw	3
  5733  0865  3444               	retlw	68
  5734  0866  3403               	retlw	3
  5735  0867  3445               	retlw	69
  5736  0868  3403               	retlw	3
  5737  0869  3445               	retlw	69
  5738  086A  3403               	retlw	3
  5739  086B  3446               	retlw	70
  5740  086C  3403               	retlw	3
  5741  086D  3447               	retlw	71
  5742  086E  3403               	retlw	3
  5743  086F  3448               	retlw	72
  5744  0870  3403               	retlw	3
  5745  0871                     __end_of_v_table:	
  5746                           
  5747                           	psect	stringtext2
  5748  18B3                     __pstringtext2:	
  5749  18B3                     _invalid_arg:	
  5750  18B3  3445               	retlw	69
  5751  18B4  3472               	retlw	114
  5752  18B5  3472               	retlw	114
  5753  18B6  346F               	retlw	111
  5754  18B7  3472               	retlw	114
  5755  18B8  343A               	retlw	58
  5756  18B9  3420               	retlw	32
  5757  18BA  3469               	retlw	105
  5758  18BB  346E               	retlw	110
  5759  18BC  3476               	retlw	118
  5760  18BD  3461               	retlw	97
  5761  18BE  346C               	retlw	108
  5762  18BF  3469               	retlw	105
  5763  18C0  3464               	retlw	100
  5764  18C1  3420               	retlw	32
  5765  18C2  3461               	retlw	97
  5766  18C3  3472               	retlw	114
  5767  18C4  3467               	retlw	103
  5768  18C5  342E               	retlw	46
  5769  18C6  340D               	retlw	13
  5770  18C7  340A               	retlw	10
  5771  18C8  3400               	retlw	0
  5772  18C9                     __end_of_invalid_arg:	
  5773                           
  5774                           	psect	stringtext3
  5775  18C9                     __pstringtext3:	
  5776  18C9                     _invalid_com:	
  5777  18C9  3445               	retlw	69
  5778  18CA  3472               	retlw	114
  5779  18CB  3472               	retlw	114
  5780  18CC  346F               	retlw	111
  5781  18CD  3472               	retlw	114
  5782  18CE  343A               	retlw	58
  5783  18CF  3420               	retlw	32
  5784  18D0  3469               	retlw	105
  5785  18D1  346E               	retlw	110
  5786  18D2  3476               	retlw	118
  5787  18D3  3461               	retlw	97
  5788  18D4  346C               	retlw	108
  5789  18D5  3469               	retlw	105
  5790  18D6  3464               	retlw	100
  5791  18D7  3420               	retlw	32
  5792  18D8  3463               	retlw	99
  5793  18D9  346F               	retlw	111
  5794  18DA  346D               	retlw	109
  5795  18DB  342E               	retlw	46
  5796  18DC  340D               	retlw	13
  5797  18DD  340A               	retlw	10
  5798  18DE  3400               	retlw	0
  5799  18DF                     __end_of_invalid_com:	
  5800                           
  5801                           	psect	stringtext4
  5802  1958                     __pstringtext4:	
  5803  1958                     _duty_inc:	
  5804  1958  3408               	retlw	8
  5805  1959  3400               	retlw	0
  5806  195A                     __end_of_duty_inc:	
  5807                           
  5808                           	psect	stringtext5
  5809  195A                     __pstringtext5:	
  5810  195A                     _duty_pwm_inc:	
  5811  195A  3408               	retlw	8
  5812  195B  3400               	retlw	0
  5813  195C                     __end_of_duty_pwm_inc:	
  5814                           
  5815                           	psect	nvBANK2
  5816  015F                     __pnvBANK2:	
  5817  015F                     _TMR1_InterruptHandler:	
  5818  015F                     	ds	2
  5819  0161                     _timer1ReloadVal:	
  5820  0161                     	ds	2
  5821  0163                     _ADC_InterruptHandler:	
  5822  0163                     	ds	2
  5823  0165                     _TMR2_InterruptHandler:	
  5824  0165                     	ds	2
  5825  0167                     _EUSART_ErrorHandler:	
  5826  0167                     	ds	2
  5827  0169                     _EUSART_OverrunErrorHandler:	
  5828  0169                     	ds	2
  5829  016B                     _EUSART_FramingErrorHandler:	
  5830  016B                     	ds	2
  5831  016D                     _EUSART_RxDefaultInterruptHandler:	
  5832  016D                     	ds	2
  5833  0018                     _T1CONbits	set	24
  5834  0018                     _T1CON	set	24
  5835  0016                     _TMR1L	set	22
  5836  0017                     _TMR1H	set	23
  5837  0019                     _T1GCON	set	25
  5838  0012                     _PIR2bits	set	18
  5839  001C                     _T2CONbits	set	28
  5840  001C                     _T2CON	set	28
  5841  001A                     _TMR2	set	26
  5842  001B                     _PR2	set	27
  5843  000B                     _INTCONbits	set	11
  5844  0011                     _PIR1bits	set	17
  5845  008C                     _TRISAbits	set	140
  5846  0095                     _OPTION_REGbits	set	149
  5847  008E                     _TRISC	set	142
  5848  008C                     _TRISA	set	140
  5849  0097                     _WDTCON	set	151
  5850  0098                     _OSCTUNE	set	152
  5851  009A                     _OSCSTAT	set	154
  5852  0099                     _OSCCON	set	153
  5853  009D                     _ADCON0bits	set	157
  5854  009C                     _ADRESH	set	156
  5855  009B                     _ADRESL	set	155
  5856  009F                     _ADCON2	set	159
  5857  009E                     _ADCON1	set	158
  5858  009D                     _ADCON0	set	157
  5859  0091                     _PIE1bits	set	145
  5860  010E                     _LATCbits	set	270
  5861  010C                     _LATAbits	set	268
  5862  010E                     _LATC	set	270
  5863  010C                     _LATA	set	268
  5864  0116                     _BORCON	set	278
  5865  018C                     _ANSELA	set	396
  5866  018E                     _ANSELC	set	398
  5867  0196                     _PMCON2	set	406
  5868  0193                     _PMDATL	set	403
  5869  0194                     _PMDATH	set	404
  5870  0195                     _PMCON1bits	set	405
  5871  0192                     _PMADRH	set	402
  5872  0191                     _PMADRL	set	401
  5873  0199                     _RC1REG	set	409
  5874  019D                     _RC1STAbits	set	413
  5875  019A                     _TX1REG	set	410
  5876  019E                     _TX1STAbits	set	414
  5877  019C                     _SP1BRGH	set	412
  5878  019B                     _SP1BRGL	set	411
  5879  019E                     _TX1STA	set	414
  5880  019D                     _RC1STA	set	413
  5881  019F                     _BAUD1CON	set	415
  5882  020E                     _WPUC	set	526
  5883  020C                     _WPUA	set	524
  5884  028E                     _ODCONC	set	654
  5885  028C                     _ODCONA	set	652
  5886  029E                     _CCPTMRSbits	set	670
  5887  030E                     _SLRCONC	set	782
  5888  030C                     _SLRCONA	set	780
  5889  038E                     _INLVLC	set	910
  5890  038C                     _INLVLA	set	908
  5891  0417                     _T4CON	set	1047
  5892  0415                     _TMR4	set	1045
  5893  0416                     _PR4	set	1046
  5894  0617                     _PWM3DCL	set	1559
  5895  0618                     _PWM3DCH	set	1560
  5896  0619                     _PWM3CON	set	1561
  5897  0E24                     _RXPPS	set	3620
  5898  0EA2                     _RC2PPS	set	3746
  5899  0EA1                     _RC1PPS	set	3745
  5900  0EA0                     _RC0PPS	set	3744
  5901                           
  5902                           	psect	stringtext6
  5903  1800                     __pstringtext6:	
  5904  1800                     STR_14:	
  5905  1800  3420               	retlw	32	;' '
  5906  1801  3420               	retlw	32	;' '
  5907  1802  344E               	retlw	78	;'N'
  5908  1803  344E               	retlw	78	;'N'
  5909  1804  344E               	retlw	78	;'N'
  5910  1805  344E               	retlw	78	;'N'
  5911  1806  343A               	retlw	58	;':'
  5912  1807  3420               	retlw	32	;' '
  5913  1808  346E               	retlw	110	;'n'
  5914  1809  3475               	retlw	117	;'u'
  5915  180A  346D               	retlw	109	;'m'
  5916  180B  3462               	retlw	98	;'b'
  5917  180C  3465               	retlw	101	;'e'
  5918  180D  3472               	retlw	114	;'r'
  5919  180E  3420               	retlw	32	;' '
  5920  180F  3466               	retlw	102	;'f'
  5921  1810  3472               	retlw	114	;'r'
  5922  1811  346F               	retlw	111	;'o'
  5923  1812  346D               	retlw	109	;'m'
  5924  1813  3420               	retlw	32	;' '
  5925  1814  3430               	retlw	48	;'0'
  5926  1815  3420               	retlw	32	;' '
  5927  1816  3474               	retlw	116	;'t'
  5928  1817  346F               	retlw	111	;'o'
  5929  1818  3420               	retlw	32	;' '
  5930  1819  3439               	retlw	57	;'9'
  5931  181A  3439               	retlw	57	;'9'
  5932  181B  3439               	retlw	57	;'9'
  5933  181C  3439               	retlw	57	;'9'
  5934  181D  340D               	retlw	13
  5935  181E  340A               	retlw	10
  5936  181F  340D               	retlw	13
  5937  1820  340A               	retlw	10
  5938  1821  3400               	retlw	0
  5939                           
  5940                           	psect	stringtext7
  5941  1822                     __pstringtext7:	
  5942  1822                     STR_8:	
  5943  1822  3445               	retlw	69	;'E'
  5944  1823  3452               	retlw	82	;'R'
  5945  1824  3452               	retlw	82	;'R'
  5946  1825  344F               	retlw	79	;'O'
  5947  1826  3452               	retlw	82	;'R'
  5948  1827  343A               	retlw	58	;':'
  5949  1828  3420               	retlw	32	;' '
  5950  1829  3469               	retlw	105	;'i'
  5951  182A  346E               	retlw	110	;'n'
  5952  182B  3476               	retlw	118	;'v'
  5953  182C  3461               	retlw	97	;'a'
  5954  182D  346C               	retlw	108	;'l'
  5955  182E  3469               	retlw	105	;'i'
  5956  182F  3464               	retlw	100	;'d'
  5957  1830  3420               	retlw	32	;' '
  5958  1831  3473               	retlw	115	;'s'
  5959  1832  3479               	retlw	121	;'y'
  5960  1833  346E               	retlw	110	;'n'
  5961  1834  3474               	retlw	116	;'t'
  5962  1835  3461               	retlw	97	;'a'
  5963  1836  3478               	retlw	120	;'x'
  5964  1837  342E               	retlw	46	;'.'
  5965  1838  340D               	retlw	13
  5966  1839  340A               	retlw	10
  5967  183A  3400               	retlw	0
  5968                           
  5969                           	psect	stringtext8
  5970  183B                     __pstringtext8:	
  5971  183B                     STR_19:	
  5972  183B  3420               	retlw	32	;' '
  5973  183C  3420               	retlw	32	;' '
  5974  183D  3449               	retlw	73	;'I'
  5975  183E  343A               	retlw	58	;':'
  5976  183F  3420               	retlw	32	;' '
  5977  1840  3470               	retlw	112	;'p'
  5978  1841  3472               	retlw	114	;'r'
  5979  1842  3469               	retlw	105	;'i'
  5980  1843  346E               	retlw	110	;'n'
  5981  1844  3474               	retlw	116	;'t'
  5982  1845  3420               	retlw	32	;' '
  5983  1846  3473               	retlw	115	;'s'
  5984  1847  3479               	retlw	121	;'y'
  5985  1848  3473               	retlw	115	;'s'
  5986  1849  3474               	retlw	116	;'t'
  5987  184A  3465               	retlw	101	;'e'
  5988  184B  346D               	retlw	109	;'m'
  5989  184C  3420               	retlw	32	;' '
  5990  184D  3449               	retlw	73	;'I'
  5991  184E  344E               	retlw	78	;'N'
  5992  184F  3446               	retlw	70	;'F'
  5993  1850  344F               	retlw	79	;'O'
  5994  1851  340D               	retlw	13
  5995  1852  340A               	retlw	10
  5996  1853  3400               	retlw	0
  5997                           
  5998                           	psect	stringtext9
  5999  1854                     __pstringtext9:	
  6000  1854                     STR_20:	
  6001  1854  3420               	retlw	32	;' '
  6002  1855  3420               	retlw	32	;' '
  6003  1856  343F               	retlw	63	;'?'
  6004  1857  343A               	retlw	58	;':'
  6005  1858  3420               	retlw	32	;' '
  6006  1859  3470               	retlw	112	;'p'
  6007  185A  3472               	retlw	114	;'r'
  6008  185B  3469               	retlw	105	;'i'
  6009  185C  346E               	retlw	110	;'n'
  6010  185D  3474               	retlw	116	;'t'
  6011  185E  3420               	retlw	32	;' '
  6012  185F  3474               	retlw	116	;'t'
  6013  1860  3468               	retlw	104	;'h'
  6014  1861  3469               	retlw	105	;'i'
  6015  1862  3473               	retlw	115	;'s'
  6016  1863  3420               	retlw	32	;' '
  6017  1864  3473               	retlw	115	;'s'
  6018  1865  3463               	retlw	99	;'c'
  6019  1866  3472               	retlw	114	;'r'
  6020  1867  3465               	retlw	101	;'e'
  6021  1868  3465               	retlw	101	;'e'
  6022  1869  346E               	retlw	110	;'n'
  6023  186A  340D               	retlw	13
  6024  186B  340A               	retlw	10
  6025  186C  3400               	retlw	0
  6026                           
  6027                           	psect	stringtext10
  6028  186D                     __pstringtext10:	
  6029  186D                     STR_17:	
  6030  186D  3420               	retlw	32	;' '
  6031  186E  3420               	retlw	32	;' '
  6032  186F  3448               	retlw	72	;'H'
  6033  1870  343A               	retlw	58	;':'
  6034  1871  3420               	retlw	32	;' '
  6035  1872  3473               	retlw	115	;'s'
  6036  1873  3465               	retlw	101	;'e'
  6037  1874  3474               	retlw	116	;'t'
  6038  1875  3420               	retlw	32	;' '
  6039  1876  3448               	retlw	72	;'H'
  6040  1877  3449               	retlw	73	;'I'
  6041  1878  3447               	retlw	71	;'G'
  6042  1879  3448               	retlw	72	;'H'
  6043  187A  3420               	retlw	32	;' '
  6044  187B  3476               	retlw	118	;'v'
  6045  187C  346F               	retlw	111	;'o'
  6046  187D  346C               	retlw	108	;'l'
  6047  187E  3474               	retlw	116	;'t'
  6048  187F  3461               	retlw	97	;'a'
  6049  1880  3467               	retlw	103	;'g'
  6050  1881  3465               	retlw	101	;'e'
  6051  1882  340D               	retlw	13
  6052  1883  340A               	retlw	10
  6053  1884  3400               	retlw	0
  6054                           
  6055                           	psect	stringtext11
  6056  1885                     __pstringtext11:	
  6057  1885                     STR_10:	
  6058  1885  340D               	retlw	13
  6059  1886  340A               	retlw	10
  6060  1887  340D               	retlw	13
  6061  1888  340A               	retlw	10
  6062  1889  342D               	retlw	45	;'-'
  6063  188A  342D               	retlw	45	;'-'
  6064  188B  342D               	retlw	45	;'-'
  6065  188C  342D               	retlw	45	;'-'
  6066  188D  342D               	retlw	45	;'-'
  6067  188E  342D               	retlw	45	;'-'
  6068  188F  342D               	retlw	45	;'-'
  6069  1890  342D               	retlw	45	;'-'
  6070  1891  342D               	retlw	45	;'-'
  6071  1892  342D               	retlw	45	;'-'
  6072  1893  342D               	retlw	45	;'-'
  6073  1894  342D               	retlw	45	;'-'
  6074  1895  342D               	retlw	45	;'-'
  6075  1896  342D               	retlw	45	;'-'
  6076  1897  342D               	retlw	45	;'-'
  6077  1898  342D               	retlw	45	;'-'
  6078  1899  340D               	retlw	13
  6079  189A  340A               	retlw	10
  6080  189B  3400               	retlw	0
  6081                           
  6082                           	psect	stringtext12
  6083  189C                     __pstringtext12:	
  6084  189C                     STR_16:	
  6085  189C  3420               	retlw	32	;' '
  6086  189D  3420               	retlw	32	;' '
  6087  189E  344C               	retlw	76	;'L'
  6088  189F  343A               	retlw	58	;':'
  6089  18A0  3420               	retlw	32	;' '
  6090  18A1  3473               	retlw	115	;'s'
  6091  18A2  3465               	retlw	101	;'e'
  6092  18A3  3474               	retlw	116	;'t'
  6093  18A4  3420               	retlw	32	;' '
  6094  18A5  344C               	retlw	76	;'L'
  6095  18A6  344F               	retlw	79	;'O'
  6096  18A7  3457               	retlw	87	;'W'
  6097  18A8  3420               	retlw	32	;' '
  6098  18A9  3476               	retlw	118	;'v'
  6099  18AA  346F               	retlw	111	;'o'
  6100  18AB  346C               	retlw	108	;'l'
  6101  18AC  3474               	retlw	116	;'t'
  6102  18AD  3461               	retlw	97	;'a'
  6103  18AE  3467               	retlw	103	;'g'
  6104  18AF  3465               	retlw	101	;'e'
  6105  18B0  340D               	retlw	13
  6106  18B1  340A               	retlw	10
  6107  18B2  3400               	retlw	0
  6108                           
  6109                           	psect	stringtext13
  6110  18DF                     __pstringtext13:	
  6111  18DF                     STR_15:	
  6112  18DF  3441               	retlw	65	;'A'
  6113  18E0  3476               	retlw	118	;'v'
  6114  18E1  3461               	retlw	97	;'a'
  6115  18E2  3469               	retlw	105	;'i'
  6116  18E3  346C               	retlw	108	;'l'
  6117  18E4  3461               	retlw	97	;'a'
  6118  18E5  3462               	retlw	98	;'b'
  6119  18E6  346C               	retlw	108	;'l'
  6120  18E7  3465               	retlw	101	;'e'
  6121  18E8  3420               	retlw	32	;' '
  6122  18E9  3443               	retlw	67	;'C'
  6123  18EA  346F               	retlw	111	;'o'
  6124  18EB  346D               	retlw	109	;'m'
  6125  18EC  346D               	retlw	109	;'m'
  6126  18ED  3461               	retlw	97	;'a'
  6127  18EE  346E               	retlw	110	;'n'
  6128  18EF  3464               	retlw	100	;'d'
  6129  18F0  3473               	retlw	115	;'s'
  6130  18F1  343A               	retlw	58	;':'
  6131  18F2  340D               	retlw	13
  6132  18F3  340A               	retlw	10
  6133  18F4  3400               	retlw	0
  6134                           
  6135                           	psect	stringtext14
  6136  18F5                     __pstringtext14:	
  6137  18F5                     STR_18:	
  6138  18F5  3420               	retlw	32	;' '
  6139  18F6  3420               	retlw	32	;' '
  6140  18F7  3454               	retlw	84	;'T'
  6141  18F8  343A               	retlw	58	;':'
  6142  18F9  3420               	retlw	32	;' '
  6143  18FA  3473               	retlw	115	;'s'
  6144  18FB  3465               	retlw	101	;'e'
  6145  18FC  3474               	retlw	116	;'t'
  6146  18FD  3420               	retlw	32	;' '
  6147  18FE  3464               	retlw	100	;'d'
  6148  18FF  3465               	retlw	101	;'e'
  6149  1900  346C               	retlw	108	;'l'
  6150  1901  3461               	retlw	97	;'a'
  6151  1902  3479               	retlw	121	;'y'
  6152  1903  3420               	retlw	32	;' '
  6153  1904  3454               	retlw	84	;'T'
  6154  1905  3449               	retlw	73	;'I'
  6155  1906  344D               	retlw	77	;'M'
  6156  1907  3445               	retlw	69	;'E'
  6157  1908  340D               	retlw	13
  6158  1909  340A               	retlw	10
  6159  190A  3400               	retlw	0
  6160                           
  6161                           	psect	stringtext15
  6162  190B                     __pstringtext15:	
  6163  190B                     STR_11:	
  6164  190B  3420               	retlw	32	;' '
  6165  190C  3420               	retlw	32	;' '
  6166  190D  3448               	retlw	72	;'H'
  6167  190E  3465               	retlw	101	;'e'
  6168  190F  346C               	retlw	108	;'l'
  6169  1910  3470               	retlw	112	;'p'
  6170  1911  3420               	retlw	32	;' '
  6171  1912  3453               	retlw	83	;'S'
  6172  1913  3463               	retlw	99	;'c'
  6173  1914  3472               	retlw	114	;'r'
  6174  1915  3465               	retlw	101	;'e'
  6175  1916  3465               	retlw	101	;'e'
  6176  1917  346E               	retlw	110	;'n'
  6177  1918  340D               	retlw	13
  6178  1919  340A               	retlw	10
  6179  191A  340D               	retlw	13
  6180  191B  340A               	retlw	10
  6181  191C  3400               	retlw	0
  6182                           
  6183                           	psect	stringtext16
  6184  191D                     __pstringtext16:	
  6185  191D                     STR_12:	
  6186  191D  3453               	retlw	83	;'S'
  6187  191E  3479               	retlw	121	;'y'
  6188  191F  346E               	retlw	110	;'n'
  6189  1920  3474               	retlw	116	;'t'
  6190  1921  3461               	retlw	97	;'a'
  6191  1922  3478               	retlw	120	;'x'
  6192  1923  343A               	retlw	58	;':'
  6193  1924  3420               	retlw	32	;' '
  6194  1925  3443               	retlw	67	;'C'
  6195  1926  344E               	retlw	78	;'N'
  6196  1927  344E               	retlw	78	;'N'
  6197  1928  344E               	retlw	78	;'N'
  6198  1929  344E               	retlw	78	;'N'
  6199  192A  340D               	retlw	13
  6200  192B  340A               	retlw	10
  6201  192C  3400               	retlw	0
  6202                           
  6203                           	psect	stringtext17
  6204  192D                     __pstringtext17:	
  6205  192D                     STR_13:	
  6206  192D  3420               	retlw	32	;' '
  6207  192E  3420               	retlw	32	;' '
  6208  192F  3443               	retlw	67	;'C'
  6209  1930  343A               	retlw	58	;':'
  6210  1931  3420               	retlw	32	;' '
  6211  1932  3463               	retlw	99	;'c'
  6212  1933  346F               	retlw	111	;'o'
  6213  1934  346D               	retlw	109	;'m'
  6214  1935  346D               	retlw	109	;'m'
  6215  1936  3461               	retlw	97	;'a'
  6216  1937  346E               	retlw	110	;'n'
  6217  1938  3464               	retlw	100	;'d'
  6218  1939  340D               	retlw	13
  6219  193A  340A               	retlw	10
  6220  193B  3400               	retlw	0
  6221                           
  6222                           	psect	stringtext18
  6223  193C                     __pstringtext18:	
  6224  193C                     STR_2:	
  6225  193C  3420               	retlw	32	;' '
  6226  193D  3420               	retlw	32	;' '
  6227  193E  3448               	retlw	72	;'H'
  6228  193F  343A               	retlw	58	;':'
  6229  1940  3420               	retlw	32	;' '
  6230  1941  3400               	retlw	0
  6231                           
  6232                           	psect	stringtext19
  6233  1942                     __pstringtext19:	
  6234  1942                     STR_4:	
  6235  1942  3420               	retlw	32	;' '
  6236  1943  3420               	retlw	32	;' '
  6237  1944  344C               	retlw	76	;'L'
  6238  1945  343A               	retlw	58	;':'
  6239  1946  3420               	retlw	32	;' '
  6240  1947  3400               	retlw	0
  6241                           
  6242                           	psect	stringtext20
  6243  1948                     __pstringtext20:	
  6244  1948                     STR_6:	
  6245  1948  3420               	retlw	32	;' '
  6246  1949  3420               	retlw	32	;' '
  6247  194A  3454               	retlw	84	;'T'
  6248  194B  343A               	retlw	58	;':'
  6249  194C  3420               	retlw	32	;' '
  6250  194D  3400               	retlw	0
  6251                           
  6252                           	psect	stringtext21
  6253  194E                     __pstringtext21:	
  6254  194E                     STR_9:	
  6255  194E  344F               	retlw	79	;'O'
  6256  194F  344B               	retlw	75	;'K'
  6257  1950  340D               	retlw	13
  6258  1951  340A               	retlw	10
  6259  1952  3400               	retlw	0
  6260                           
  6261                           	psect	stringtext22
  6262  1953                     __pstringtext22:	
  6263  1953                     STR_1:	
  6264  1953  343E               	retlw	62	;'>'
  6265  1954  343E               	retlw	62	;'>'
  6266  1955  3420               	retlw	32	;' '
  6267  1956  3420               	retlw	32	;' '
  6268  1957  3400               	retlw	0
  6269                           
  6270                           	psect	stringtext23
  6271  0000                     __pstringtext23:	
  6272  181F                     
  6273                           ; #config settings
  6274  0000                     
  6275                           	psect	cinit
  6276  0036                     start_initialization:	
  6277  0036                     __initialization:	
  6278                           
  6279                           ; Initialize objects allocated to BANK0
  6280  0036  30F7               	movlw	low __pidataBANK0
  6281  0037  0084               	movwf	4
  6282  0038  3094               	movlw	(high __pidataBANK0)| (0+128)
  6283  0039  0085               	movwf	5
  6284  003A  3063               	movlw	low __pdataBANK0
  6285  003B  0086               	movwf	6
  6286  003C  3000               	movlw	high __pdataBANK0
  6287  003D  0087               	movwf	7
  6288  003E  3003               	movlw	3
  6289  003F  3195  253F  3180   	fcall	init_ram
  6290                           
  6291                           ; Initialize objects allocated to BANK1
  6292  0042  3045               	movlw	low __pidataBANK1
  6293  0043  0084               	movwf	4
  6294  0044  3095               	movlw	(high __pidataBANK1)| (0+128)
  6295  0045  0085               	movwf	5
  6296  0046  30EA               	movlw	low __pdataBANK1
  6297  0047  0086               	movwf	6
  6298  0048  3000               	movlw	high __pdataBANK1
  6299  0049  0087               	movwf	7
  6300  004A  3006               	movlw	6
  6301  004B  3195  253F  3180   	fcall	init_ram
  6302                           
  6303                           ; Clear objects allocated to BANK0
  6304  004E  3020               	movlw	low __pbssBANK0
  6305  004F  0084               	movwf	4
  6306  0050  3000               	movlw	high __pbssBANK0
  6307  0051  0085               	movwf	5
  6308  0052  3028               	movlw	40
  6309  0053  3195  2539  3180   	fcall	clear_ram0
  6310                           
  6311                           ; Clear objects allocated to BANK1
  6312  0056  30E0               	movlw	low __pbssBANK1
  6313  0057  0084               	movwf	4
  6314  0058  3000               	movlw	high __pbssBANK1
  6315  0059  0085               	movwf	5
  6316  005A  300A               	movlw	10
  6317  005B  3195  2539  3180   	fcall	clear_ram0
  6318                           
  6319                           ; Clear objects allocated to BANK2
  6320  005E  3020               	movlw	low __pbssBANK2
  6321  005F  0084               	movwf	4
  6322  0060  3001               	movlw	high __pbssBANK2
  6323  0061  0085               	movwf	5
  6324  0062  303F               	movlw	63
  6325  0063  3195  2539  3180   	fcall	clear_ram0
  6326                           
  6327                           ; Clear objects allocated to BANK3
  6328  0066  30A0               	movlw	low __pbssBANK3
  6329  0067  0084               	movwf	4
  6330  0068  3001               	movlw	high __pbssBANK3
  6331  0069  0085               	movwf	5
  6332  006A  3010               	movlw	16
  6333  006B  3195  2539         	fcall	clear_ram0
  6334  006D                     end_of_initialization:	
  6335                           ;End of C runtime variable initialization code
  6336                           
  6337  006D                     __end_of__initialization:	
  6338  006D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6339  006E  0020               	movlb	0
  6340  006F  3197  2F39         	ljmp	_main	;jump to C main() function
  6341                           
  6342                           	psect	bssBANK0
  6343  0020                     __pbssBANK0:	
  6344  0020                     _relay_reset_voltage:	
  6345  0020                     	ds	2
  6346  0022                     _current_duty:	
  6347  0022                     	ds	2
  6348  0024                     _target_duty:	
  6349  0024                     	ds	2
  6350  0026                     _pwm_duty:	
  6351  0026                     	ds	2
  6352  0028                     _vdc_prev:	
  6353  0028                     	ds	2
  6354  002A                     _local_timer:	
  6355  002A                     	ds	1
  6356  002B                     SolidStateRelay@st:	
  6357  002B                     	ds	1
  6358  002C                     UartParser@tx_idx:	
  6359  002C                     	ds	1
  6360  002D                     UartParser@st:	
  6361  002D                     	ds	1
  6362  002E                     _isr_timer:	
  6363  002E                     	ds	1
  6364  002F                     UartParser@rx_idx:	
  6365  002F                     	ds	1
  6366  0030                     _system_counter:	
  6367  0030                     	ds	1
  6368  0031                     _st:	
  6369  0031                     	ds	1
  6370  0032                     _chopper_active:	
  6371  0032                     	ds	1
  6372  0033                     _diff_positive:	
  6373  0033                     	ds	1
  6374  0034                     _vcs_sub_st:	
  6375  0034                     	ds	1
  6376  0035                     _vcs_st:	
  6377  0035                     	ds	1
  6378  0036                     _tx_len:	
  6379  0036                     	ds	1
  6380  0037                     _tx_idx:	
  6381  0037                     	ds	1
  6382  0038                     _command_error:	
  6383  0038                     	ds	1
  6384  0039                     _command_pending:	
  6385  0039                     	ds	1
  6386  003A                     _rx_idx:	
  6387  003A                     	ds	1
  6388  003B                     _Commands:	
  6389  003B                     	ds	1
  6390  003C                     _eusartRxLastError:	
  6391  003C                     	ds	1
  6392  003D                     _eusartRxCount:	
  6393  003D                     	ds	1
  6394  003E                     _eusartRxTail:	
  6395  003E                     	ds	1
  6396  003F                     _eusartRxHead:	
  6397  003F                     	ds	1
  6398  0040                     _vdc:	
  6399  0040                     	ds	2
  6400  0042                     _vdc_critic:	
  6401  0042                     	ds	2
  6402  0044                     _vdc_max:	
  6403  0044                     	ds	2
  6404  0046                     _vdc_min:	
  6405  0046                     	ds	2
  6406                           
  6407                           	psect	dataBANK0
  6408  0063                     __pdataBANK0:	
  6409  0063                     uart_task@none:	
  6410  0063                     	ds	1
  6411  0064                     _lock_isr:	
  6412  0064                     	ds	1
  6413  0065                     _init_required:	
  6414  0065                     	ds	1
  6415                           
  6416                           	psect	bssBANK1
  6417  00E0                     __pbssBANK1:	
  6418  00E0                     _reset_duration_ms:	
  6419  00E0                     	ds	2
  6420  00E2                     _reset_duration:	
  6421  00E2                     	ds	2
  6422  00E4                     _duty_count_down:	
  6423  00E4                     	ds	2
  6424  00E6                     _duty_count_up:	
  6425  00E6                     	ds	2
  6426  00E8                     _tx_string:	
  6427  00E8                     	ds	2
  6428                           
  6429                           	psect	dataBANK1
  6430  00EA                     __pdataBANK1:	
  6431  00EA                     _duty_count_down_max:	
  6432  00EA                     	ds	2
  6433  00EC                     _duty_pwm_dec:	
  6434  00EC                     	ds	2
  6435  00EE                     _duty_count_up_max:	
  6436  00EE                     	ds	2
  6437                           
  6438                           	psect	bssBANK2
  6439  0120                     __pbssBANK2:	
  6440  0120                     UartParser@rx_buffer:	
  6441  0120                     	ds	32
  6442  0140                     _eusartRxStatusBuffer:	
  6443  0140                     	ds	8
  6444  0148                     _eusartRxBuffer:	
  6445  0148                     	ds	8
  6446  0150                     _activation_counter:	
  6447  0150                     	ds	4
  6448  0154                     _prev_vdc:	
  6449  0154                     	ds	2
  6450  0156                     _delta_duty:	
  6451  0156                     	ds	2
  6452  0158                     _diff_vdc:	
  6453  0158                     	ds	2
  6454  015A                     _num_buffer:	
  6455  015A                     	ds	5
  6456                           
  6457                           	psect	bssBANK3
  6458  01A0                     __pbssBANK3:	
  6459  01A0                     _rx_buffer:	
  6460  01A0                     	ds	16
  6461                           
  6462                           	psect	inittext
  6463  153F                     init_ram:	
  6464  153F  00FE               	movwf	126
  6465  1540                     initloop:	
  6466  1540  0012               	moviw fsr0++
  6467  1541  001E               	movwi fsr1++
  6468  1542  0BFE               	decfsz	126,f
  6469  1543  2D40               	goto	initloop
  6470  1544  3400               	retlw	0
  6471                           
  6472                           	psect	clrtext
  6473  1539                     clear_ram0:	
  6474                           ;	Called with FSR0 containing the base address, and
  6475                           ;	WREG with the size to clear
  6476                           
  6477  1539  0064               	clrwdt	;clear the watchdog before getting into this loop
  6478  153A                     clrloop0:	
  6479  153A  0180               	clrf	0	;clear RAM location pointed to by FSR
  6480  153B  3101               	addfsr 0,1
  6481  153C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6482  153D  2D3A               	goto	clrloop0	;have we reached the end yet?
  6483  153E  3400               	retlw	0	;all done for this memory range, return
  6484                           
  6485                           	psect	cstackBANK3
  6486  01B0                     __pcstackBANK3:	
  6487  01B0                     uart_task@xor:	
  6488                           
  6489                           ; 1 bytes @ 0x0
  6490  01B0                     	ds	1
  6491  01B1                     uart_task@xor_1500:	
  6492                           
  6493                           ; 1 bytes @ 0x1
  6494  01B1                     	ds	1
  6495  01B2                     uart_task@val_1501:	
  6496                           
  6497                           ; 2 bytes @ 0x2
  6498  01B2                     	ds	2
  6499  01B4                     uart_task@i:	
  6500                           
  6501                           ; 1 bytes @ 0x4
  6502  01B4                     	ds	1
  6503  01B5                     uart_task@i_1499:	
  6504                           
  6505                           ; 1 bytes @ 0x5
  6506  01B5                     	ds	1
  6507  01B6                     uart_task@val:	
  6508                           
  6509                           ; 2 bytes @ 0x6
  6510  01B6                     	ds	2
  6511  01B8                     uart_task@val_1493:	
  6512                           
  6513                           ; 2 bytes @ 0x8
  6514  01B8                     	ds	2
  6515                           
  6516                           	psect	cstackBANK1
  6517  00A0                     __pcstackBANK1:	
  6518  00A0                     save_to_flash@buff:	
  6519                           
  6520                           ; 64 bytes @ 0x0
  6521  00A0                     	ds	64
  6522                           
  6523                           	psect	cstackCOMMON
  6524  0070                     __pcstackCOMMON:	
  6525  0070                     ?_EUSART_Receive_ISR:	
  6526  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  6527                           ; 1 bytes @ 0x0
  6528                           
  6529  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  6530                           ; 1 bytes @ 0x0
  6531                           
  6532  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  6533                           ; 1 bytes @ 0x0
  6534                           
  6535  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  6536                           ; 1 bytes @ 0x0
  6537                           
  6538  0070                     ?_EUSART_DefaultErrorHandler:	
  6539                           ; 1 bytes @ 0x0
  6540                           
  6541  0070                     ?_EUSART_RxDataHandler:	
  6542                           ; 1 bytes @ 0x0
  6543                           
  6544  0070                     ??_EUSART_RxDataHandler:	
  6545                           ; 1 bytes @ 0x0
  6546                           
  6547  0070                     ?_TMR2_DefaultInterruptHandler:	
  6548                           ; 1 bytes @ 0x0
  6549                           
  6550  0070                     ??_TMR2_DefaultInterruptHandler:	
  6551                           ; 1 bytes @ 0x0
  6552                           
  6553  0070                     ?_TMR2_CallBack:	
  6554                           ; 1 bytes @ 0x0
  6555                           
  6556  0070                     ?_ADC_DefaultInterruptHandler:	
  6557                           ; 1 bytes @ 0x0
  6558                           
  6559  0070                     ??_ADC_DefaultInterruptHandler:	
  6560                           ; 1 bytes @ 0x0
  6561                           
  6562  0070                     ?_PIN_MANAGER_Initialize:	
  6563                           ; 1 bytes @ 0x0
  6564                           
  6565  0070                     ?_OSCILLATOR_Initialize:	
  6566                           ; 1 bytes @ 0x0
  6567                           
  6568  0070                     ?_WDT_Initialize:	
  6569                           ; 1 bytes @ 0x0
  6570                           
  6571  0070                     ?_TMR4_Initialize:	
  6572                           ; 1 bytes @ 0x0
  6573                           
  6574  0070                     ?_TMR1_Initialize:	
  6575                           ; 1 bytes @ 0x0
  6576                           
  6577  0070                     ?_TMR1_ISR:	
  6578                           ; 1 bytes @ 0x0
  6579                           
  6580  0070                     ?_TMR1_DefaultInterruptHandler:	
  6581                           ; 1 bytes @ 0x0
  6582                           
  6583  0070                     ??_TMR1_DefaultInterruptHandler:	
  6584                           ; 1 bytes @ 0x0
  6585                           
  6586  0070                     ?_TMR1_CallBack:	
  6587                           ; 1 bytes @ 0x0
  6588                           
  6589  0070                     ?_ApplicationInit:	
  6590                           ; 1 bytes @ 0x0
  6591                           
  6592  0070                     ?_init_chopper:	
  6593                           ; 1 bytes @ 0x0
  6594                           
  6595  0070                     ?_init_relay_watchdog:	
  6596                           ; 1 bytes @ 0x0
  6597                           
  6598  0070                     ?_uart_start:	
  6599                           ; 1 bytes @ 0x0
  6600                           
  6601  0070                     ?_start_relay_watchdog:	
  6602                           ; 1 bytes @ 0x0
  6603                           
  6604  0070                     ?_uart_task:	
  6605                           ; 1 bytes @ 0x0
  6606                           
  6607  0070                     ?_relay_watchdog_task:	
  6608                           ; 1 bytes @ 0x0
  6609                           
  6610  0070                     ?_TMR2_DutyControlHandler_ISR:	
  6611                           ; 1 bytes @ 0x0
  6612                           
  6613  0070                     ?_ADC_VoltageControlHandler_ISR:	
  6614                           ; 1 bytes @ 0x0
  6615                           
  6616  0070                     ?_TMR1_SystemTimer_ISR:	
  6617                           ; 1 bytes @ 0x0
  6618                           
  6619  0070                     ??_TMR1_SystemTimer_ISR:	
  6620                           ; 1 bytes @ 0x0
  6621                           
  6622  0070                     ?_close_relay:	
  6623                           ; 1 bytes @ 0x0
  6624                           
  6625  0070                     ?_PWM3_Initialize:	
  6626                           ; 1 bytes @ 0x0
  6627                           
  6628  0070                     ?_PWM3_LoadDutyValue:	
  6629                           ; 1 bytes @ 0x0
  6630                           
  6631  0070                     ?_EUSART_Initialize:	
  6632                           ; 1 bytes @ 0x0
  6633                           
  6634  0070                     ?_TMR2_Initialize:	
  6635                           ; 1 bytes @ 0x0
  6636                           
  6637  0070                     ?_TMR2_StartTimer:	
  6638                           ; 1 bytes @ 0x0
  6639                           
  6640  0070                     ?_TMR2_ISR:	
  6641                           ; 1 bytes @ 0x0
  6642                           
  6643  0070                     ?_ADC_Initialize:	
  6644                           ; 1 bytes @ 0x0
  6645                           
  6646  0070                     ?_ADC_SelectChannel:	
  6647                           ; 1 bytes @ 0x0
  6648                           
  6649  0070                     ?_ADC_StartConversion:	
  6650                           ; 1 bytes @ 0x0
  6651                           
  6652  0070                     ?_ADC_ISR:	
  6653                           ; 1 bytes @ 0x0
  6654                           
  6655  0070                     ?_SYSTEM_Initialize:	
  6656                           ; 1 bytes @ 0x0
  6657                           
  6658  0070                     ?_INTERRUPT_InterruptManager:	
  6659                           ; 1 bytes @ 0x0
  6660                           
  6661  0070                     ?_TMR1_WriteTimer:	
  6662                           ; 1 bytes @ 0x0
  6663                           
  6664  0070                     ?_main:	
  6665                           ; 1 bytes @ 0x0
  6666                           
  6667  0070                     ?_LoadDutyValue:	
  6668                           ; 1 bytes @ 0x0
  6669                           
  6670  0070                     ?_start_chopper:	
  6671                           ; 1 bytes @ 0x0
  6672                           
  6673  0070                     ?_stop_chopper:	
  6674                           ; 1 bytes @ 0x0
  6675                           
  6676  0070                     ?_is_chopper_active:	
  6677                           ; 1 bytes @ 0x0
  6678                           
  6679  0070                     ?_save_to_flash:	
  6680                           ; 1 bytes @ 0x0
  6681                           
  6682  0070                     ?_EUSART_CommandHandler_ISR:	
  6683                           ; 1 bytes @ 0x0
  6684                           
  6685  0070                     ??_EUSART_CommandHandler_ISR:	
  6686                           ; 1 bytes @ 0x0
  6687                           
  6688  0070                     ?_open_relay:	
  6689                           ; 1 bytes @ 0x0
  6690                           
  6691  0070                     ?_ADC_GetConversionResult:	
  6692                           ; 1 bytes @ 0x0
  6693                           
  6694  0070                     ?___lmul:	
  6695                           ; 2 bytes @ 0x0
  6696                           
  6697  0070                     ?___lldiv:	
  6698                           ; 4 bytes @ 0x0
  6699                           
  6700  0070                     PWM3_LoadDutyValue@dutyValue:	
  6701                           ; 4 bytes @ 0x0
  6702                           
  6703  0070                     TMR1_WriteTimer@timerVal:	
  6704                           ; 2 bytes @ 0x0
  6705                           
  6706  0070                     LoadDutyValue@duty:	
  6707                           ; 2 bytes @ 0x0
  6708                           
  6709  0070                     ___lmul@multiplier:	
  6710                           ; 2 bytes @ 0x0
  6711                           
  6712  0070                     ___lldiv@divisor:	
  6713                           ; 4 bytes @ 0x0
  6714                           
  6715                           
  6716                           ; 4 bytes @ 0x0
  6717  0070                     	ds	1
  6718  0071                     ??_EUSART_Receive_ISR:	
  6719  0071                     ??_EUSART_DefaultErrorHandler:	
  6720                           ; 1 bytes @ 0x1
  6721                           
  6722  0071                     ??_TMR1_CallBack:	
  6723                           ; 1 bytes @ 0x1
  6724                           
  6725  0071                     EUSART_CommandHandler_ISR@rx_data:	
  6726                           ; 1 bytes @ 0x1
  6727                           
  6728                           
  6729                           ; 1 bytes @ 0x1
  6730  0071                     	ds	1
  6731  0072                     ??_TMR1_ISR:	
  6732  0072                     ??_PWM3_LoadDutyValue:	
  6733                           ; 1 bytes @ 0x2
  6734                           
  6735  0072                     ??_ADC_GetConversionResult:	
  6736                           ; 1 bytes @ 0x2
  6737                           
  6738  0072                     ??_TMR1_WriteTimer:	
  6739                           ; 1 bytes @ 0x2
  6740                           
  6741  0072                     ??_LoadDutyValue:	
  6742                           ; 1 bytes @ 0x2
  6743                           
  6744                           
  6745                           ; 1 bytes @ 0x2
  6746  0072                     	ds	2
  6747  0074                     ??_TMR2_DutyControlHandler_ISR:	
  6748  0074                     ___lmul@multiplicand:	
  6749                           ; 1 bytes @ 0x4
  6750                           
  6751  0074                     ___lldiv@dividend:	
  6752                           ; 4 bytes @ 0x4
  6753                           
  6754                           
  6755                           ; 4 bytes @ 0x4
  6756  0074                     	ds	2
  6757  0076                     ??_TMR2_CallBack:	
  6758  0076                     ??_TMR2_ISR:	
  6759                           ; 1 bytes @ 0x6
  6760                           
  6761                           
  6762                           ; 1 bytes @ 0x6
  6763  0076                     	ds	2
  6764  0078                     ??___lmul:	
  6765  0078                     ??___lldiv:	
  6766                           ; 1 bytes @ 0x8
  6767                           
  6768  0078                     ___lmul@product:	
  6769                           ; 1 bytes @ 0x8
  6770                           
  6771                           
  6772                           ; 4 bytes @ 0x8
  6773  0078                     	ds	1
  6774  0079                     ___lldiv@quotient:	
  6775                           
  6776                           ; 4 bytes @ 0x9
  6777  0079                     	ds	4
  6778  007D                     ___lldiv@counter:	
  6779                           
  6780                           ; 1 bytes @ 0xD
  6781  007D                     	ds	1
  6782  007E                     ??_ADC_ISR:	
  6783  007E                     ??_INTERRUPT_InterruptManager:	
  6784                           ; 1 bytes @ 0xE
  6785                           
  6786                           
  6787                           	psect	cstackBANK0
  6788  0048                     __pcstackBANK0:	
  6789                           ; 1 bytes @ 0xE
  6790                           
  6791  0048                     ??_ADC_VoltageControlHandler_ISR:	
  6792                           
  6793                           ; 1 bytes @ 0x0
  6794  0048                     	ds	4
  6795  004C                     ADC_VoltageControlHandler_ISR@force_inc:	
  6796                           
  6797                           ; 1 bytes @ 0x4
  6798  004C                     	ds	1
  6799  004D                     ADC_VoltageControlHandler_ISR@pwm:	
  6800                           
  6801                           ; 4 bytes @ 0x5
  6802  004D                     	ds	4
  6803  0051                     ?_EUSART_SetRxInterruptHandler:	
  6804  0051                     ?_EUSART_SetFramingErrorHandler:	
  6805                           ; 1 bytes @ 0x9
  6806                           
  6807  0051                     ?_EUSART_SetOverrunErrorHandler:	
  6808                           ; 1 bytes @ 0x9
  6809                           
  6810  0051                     ?_EUSART_SetErrorHandler:	
  6811                           ; 1 bytes @ 0x9
  6812                           
  6813  0051                     ?_FLASH_EraseBlock:	
  6814                           ; 1 bytes @ 0x9
  6815                           
  6816  0051                     ?_TMR2_SetInterruptHandler:	
  6817                           ; 1 bytes @ 0x9
  6818                           
  6819  0051                     ?_ADC_SetInterruptHandler:	
  6820                           ; 1 bytes @ 0x9
  6821                           
  6822  0051                     ??_PIN_MANAGER_Initialize:	
  6823                           ; 1 bytes @ 0x9
  6824                           
  6825  0051                     ??_OSCILLATOR_Initialize:	
  6826                           ; 1 bytes @ 0x9
  6827                           
  6828  0051                     ??_WDT_Initialize:	
  6829                           ; 1 bytes @ 0x9
  6830                           
  6831  0051                     ??_TMR4_Initialize:	
  6832                           ; 1 bytes @ 0x9
  6833                           
  6834  0051                     ?_TMR1_SetInterruptHandler:	
  6835                           ; 1 bytes @ 0x9
  6836                           
  6837  0051                     ??_init_relay_watchdog:	
  6838                           ; 1 bytes @ 0x9
  6839                           
  6840  0051                     ??_start_relay_watchdog:	
  6841                           ; 1 bytes @ 0x9
  6842                           
  6843  0051                     ?_set_relay_reset_voltage:	
  6844                           ; 1 bytes @ 0x9
  6845                           
  6846  0051                     ??_close_relay:	
  6847                           ; 1 bytes @ 0x9
  6848                           
  6849  0051                     ??_PWM3_Initialize:	
  6850                           ; 1 bytes @ 0x9
  6851                           
  6852  0051                     ??_TMR2_StartTimer:	
  6853                           ; 1 bytes @ 0x9
  6854                           
  6855  0051                     ??_ADC_SelectChannel:	
  6856                           ; 1 bytes @ 0x9
  6857                           
  6858  0051                     ??_ADC_StartConversion:	
  6859                           ; 1 bytes @ 0x9
  6860                           
  6861  0051                     ?_set_vdc_threshold:	
  6862                           ; 1 bytes @ 0x9
  6863                           
  6864  0051                     ??_stop_chopper:	
  6865                           ; 1 bytes @ 0x9
  6866                           
  6867  0051                     ??_is_chopper_active:	
  6868                           ; 1 bytes @ 0x9
  6869                           
  6870  0051                     ??_open_relay:	
  6871                           ; 1 bytes @ 0x9
  6872                           
  6873  0051                     ?_get_relay_reset_voltage:	
  6874                           ; 1 bytes @ 0x9
  6875                           
  6876  0051                     ?_get_reset_duration:	
  6877                           ; 2 bytes @ 0x9
  6878                           
  6879  0051                     ?_FLASH_ReadWord:	
  6880                           ; 2 bytes @ 0x9
  6881                           
  6882  0051                     ?_get_vdc_min:	
  6883                           ; 2 bytes @ 0x9
  6884                           
  6885  0051                     ?_get_vdc_max:	
  6886                           ; 2 bytes @ 0x9
  6887                           
  6888  0051                     ?_get_vdc_critic:	
  6889                           ; 2 bytes @ 0x9
  6890                           
  6891  0051                     ?_get_vdc:	
  6892                           ; 2 bytes @ 0x9
  6893                           
  6894  0051                     ?___wmul:	
  6895                           ; 2 bytes @ 0x9
  6896                           
  6897  0051                     ?___lwdiv:	
  6898                           ; 2 bytes @ 0x9
  6899                           
  6900  0051                     EUSART_SetFramingErrorHandler@interruptHandler:	
  6901                           ; 2 bytes @ 0x9
  6902                           
  6903  0051                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  6904                           ; 2 bytes @ 0x9
  6905                           
  6906  0051                     EUSART_SetErrorHandler@interruptHandler:	
  6907                           ; 2 bytes @ 0x9
  6908                           
  6909  0051                     EUSART_SetRxInterruptHandler@interruptHandler:	
  6910                           ; 2 bytes @ 0x9
  6911                           
  6912  0051                     FLASH_ReadWord@flashAddr:	
  6913                           ; 2 bytes @ 0x9
  6914                           
  6915  0051                     FLASH_EraseBlock@startAddr:	
  6916                           ; 2 bytes @ 0x9
  6917                           
  6918  0051                     TMR2_SetInterruptHandler@InterruptHandler:	
  6919                           ; 2 bytes @ 0x9
  6920                           
  6921  0051                     ADC_SetInterruptHandler@InterruptHandler:	
  6922                           ; 2 bytes @ 0x9
  6923                           
  6924  0051                     TMR1_SetInterruptHandler@InterruptHandler:	
  6925                           ; 2 bytes @ 0x9
  6926                           
  6927  0051                     set_vdc_threshold@v_val:	
  6928                           ; 2 bytes @ 0x9
  6929                           
  6930  0051                     set_relay_reset_voltage@relay_vthres:	
  6931                           ; 2 bytes @ 0x9
  6932                           
  6933  0051                     ___wmul@multiplier:	
  6934                           ; 2 bytes @ 0x9
  6935                           
  6936  0051                     ___lwdiv@divisor:	
  6937                           ; 2 bytes @ 0x9
  6938                           
  6939                           
  6940                           ; 2 bytes @ 0x9
  6941  0051                     	ds	1
  6942  0052                     ADC_SelectChannel@channel:	
  6943                           
  6944                           ; 1 bytes @ 0xA
  6945  0052                     	ds	1
  6946  0053                     ??_EUSART_SetRxInterruptHandler:	
  6947  0053                     ??_EUSART_SetFramingErrorHandler:	
  6948                           ; 1 bytes @ 0xB
  6949                           
  6950  0053                     ??_EUSART_SetOverrunErrorHandler:	
  6951                           ; 1 bytes @ 0xB
  6952                           
  6953  0053                     ??_EUSART_SetErrorHandler:	
  6954                           ; 1 bytes @ 0xB
  6955                           
  6956  0053                     ??_FLASH_EraseBlock:	
  6957                           ; 1 bytes @ 0xB
  6958                           
  6959  0053                     ??_TMR2_SetInterruptHandler:	
  6960                           ; 1 bytes @ 0xB
  6961                           
  6962  0053                     ??_ADC_SetInterruptHandler:	
  6963                           ; 1 bytes @ 0xB
  6964                           
  6965  0053                     ??_TMR1_Initialize:	
  6966                           ; 1 bytes @ 0xB
  6967                           
  6968  0053                     ??_TMR1_SetInterruptHandler:	
  6969                           ; 1 bytes @ 0xB
  6970                           
  6971  0053                     ??_init_chopper:	
  6972                           ; 1 bytes @ 0xB
  6973                           
  6974  0053                     ??_uart_start:	
  6975                           ; 1 bytes @ 0xB
  6976                           
  6977  0053                     ??_relay_watchdog_task:	
  6978                           ; 1 bytes @ 0xB
  6979                           
  6980  0053                     ??_get_relay_reset_voltage:	
  6981                           ; 1 bytes @ 0xB
  6982                           
  6983  0053                     ??_get_reset_duration:	
  6984                           ; 1 bytes @ 0xB
  6985                           
  6986  0053                     ??_set_relay_reset_voltage:	
  6987                           ; 1 bytes @ 0xB
  6988                           
  6989  0053                     ??_EUSART_Initialize:	
  6990                           ; 1 bytes @ 0xB
  6991                           
  6992  0053                     ??_FLASH_ReadWord:	
  6993                           ; 1 bytes @ 0xB
  6994                           
  6995  0053                     ??_TMR2_Initialize:	
  6996                           ; 1 bytes @ 0xB
  6997                           
  6998  0053                     ??_ADC_Initialize:	
  6999                           ; 1 bytes @ 0xB
  7000                           
  7001  0053                     ??_SYSTEM_Initialize:	
  7002                           ; 1 bytes @ 0xB
  7003                           
  7004  0053                     ??_get_vdc_min:	
  7005                           ; 1 bytes @ 0xB
  7006                           
  7007  0053                     ??_get_vdc_max:	
  7008                           ; 1 bytes @ 0xB
  7009                           
  7010  0053                     ??_get_vdc_critic:	
  7011                           ; 1 bytes @ 0xB
  7012                           
  7013  0053                     ??_get_vdc:	
  7014                           ; 1 bytes @ 0xB
  7015                           
  7016  0053                     FLASH_ReadWord@GIEBitValue:	
  7017                           ; 1 bytes @ 0xB
  7018                           
  7019  0053                     FLASH_EraseBlock@GIEBitValue:	
  7020                           ; 1 bytes @ 0xB
  7021                           
  7022  0053                     set_vdc_threshold@v_target:	
  7023                           ; 1 bytes @ 0xB
  7024                           
  7025  0053                     ___wmul@multiplicand:	
  7026                           ; 1 bytes @ 0xB
  7027                           
  7028  0053                     ___lwdiv@dividend:	
  7029                           ; 2 bytes @ 0xB
  7030                           
  7031                           
  7032                           ; 2 bytes @ 0xB
  7033  0053                     	ds	1
  7034  0054                     ?_FLASH_WriteBlock:	
  7035  0054                     ??_set_vdc_threshold:	
  7036                           ; 1 bytes @ 0xC
  7037                           
  7038  0054                     ??_start_chopper:	
  7039                           ; 1 bytes @ 0xC
  7040                           
  7041  0054                     ?_set_vdc_min:	
  7042                           ; 1 bytes @ 0xC
  7043                           
  7044  0054                     ?_set_vdc_max:	
  7045                           ; 1 bytes @ 0xC
  7046                           
  7047  0054                     ?_set_vdc_critic:	
  7048                           ; 1 bytes @ 0xC
  7049                           
  7050  0054                     FLASH_WriteBlock@writeAddr:	
  7051                           ; 1 bytes @ 0xC
  7052                           
  7053  0054                     set_vdc_min@vmin:	
  7054                           ; 2 bytes @ 0xC
  7055                           
  7056  0054                     set_vdc_max@vmax:	
  7057                           ; 2 bytes @ 0xC
  7058                           
  7059  0054                     set_vdc_critic@vc:	
  7060                           ; 2 bytes @ 0xC
  7061                           
  7062                           
  7063                           ; 2 bytes @ 0xC
  7064  0054                     	ds	1
  7065  0055                     ??___wmul:	
  7066  0055                     ??___lwdiv:	
  7067                           ; 1 bytes @ 0xD
  7068                           
  7069  0055                     ___wmul@product:	
  7070                           ; 1 bytes @ 0xD
  7071                           
  7072                           
  7073                           ; 2 bytes @ 0xD
  7074  0055                     	ds	1
  7075  0056                     ??_set_vdc_min:	
  7076  0056                     ??_set_vdc_max:	
  7077                           ; 1 bytes @ 0xE
  7078                           
  7079  0056                     ??_set_vdc_critic:	
  7080                           ; 1 bytes @ 0xE
  7081                           
  7082  0056                     FLASH_WriteBlock@flashWordArray:	
  7083                           ; 1 bytes @ 0xE
  7084                           
  7085  0056                     ___lwdiv@counter:	
  7086                           ; 1 bytes @ 0xE
  7087                           
  7088                           
  7089                           ; 1 bytes @ 0xE
  7090  0056                     	ds	1
  7091  0057                     ??_FLASH_WriteBlock:	
  7092  0057                     ?_get_vdc_speed:	
  7093                           ; 1 bytes @ 0xF
  7094                           
  7095  0057                     ___lwdiv@quotient:	
  7096                           ; 2 bytes @ 0xF
  7097                           
  7098                           
  7099                           ; 2 bytes @ 0xF
  7100  0057                     	ds	2
  7101  0059                     ?_set_reset_duration:	
  7102  0059                     ?_set_vdc_speed:	
  7103                           ; 1 bytes @ 0x11
  7104                           
  7105  0059                     ??_get_vdc_speed:	
  7106                           ; 1 bytes @ 0x11
  7107                           
  7108  0059                     set_vdc_speed@msDelay:	
  7109                           ; 1 bytes @ 0x11
  7110                           
  7111  0059                     set_reset_duration@reset_dur_ms:	
  7112                           ; 2 bytes @ 0x11
  7113                           
  7114                           
  7115                           ; 2 bytes @ 0x11
  7116  0059                     	ds	1
  7117  005A                     FLASH_WriteBlock@blockStartAddr:	
  7118                           
  7119                           ; 2 bytes @ 0x12
  7120  005A                     	ds	1
  7121  005B                     ??_ApplicationInit:	
  7122  005B                     ??_set_reset_duration:	
  7123                           ; 1 bytes @ 0x13
  7124                           
  7125  005B                     ??_set_vdc_speed:	
  7126                           ; 1 bytes @ 0x13
  7127                           
  7128  005B                     ApplicationInit@chopper_state:	
  7129                           ; 1 bytes @ 0x13
  7130                           
  7131                           
  7132                           ; 2 bytes @ 0x13
  7133  005B                     	ds	1
  7134  005C                     FLASH_WriteBlock@GIEBitValue:	
  7135                           
  7136                           ; 1 bytes @ 0x14
  7137  005C                     	ds	1
  7138  005D                     FLASH_WriteBlock@i:	
  7139  005D                     ApplicationInit@invalid_param:	
  7140                           ; 1 bytes @ 0x15
  7141                           
  7142                           
  7143                           ; 1 bytes @ 0x15
  7144  005D                     	ds	1
  7145  005E                     ??_save_to_flash:	
  7146  005E                     ApplicationInit@val:	
  7147                           ; 1 bytes @ 0x16
  7148                           
  7149                           
  7150                           ; 2 bytes @ 0x16
  7151  005E                     	ds	1
  7152  005F                     ??_uart_task:	
  7153                           
  7154                           ; 1 bytes @ 0x17
  7155  005F                     	ds	4
  7156  0063                     ??_main:	
  7157                           
  7158                           	psect	maintext
  7159  1739                     __pmaintext:	
  7160                           ; 1 bytes @ 0x1B
  7161 ;;
  7162 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  7163 ;;
  7164 ;; *************** function _main *****************
  7165 ;; Defined at:
  7166 ;;		line 54 in file "main.c"
  7167 ;; Parameters:    Size  Location     Type
  7168 ;;		None
  7169 ;; Auto vars:     Size  Location     Type
  7170 ;;		None
  7171 ;; Return value:  Size  Location     Type
  7172 ;;                  1    wreg      void 
  7173 ;; Registers used:
  7174 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7175 ;; Tracked objects:
  7176 ;;		On entry : B1F/0
  7177 ;;		On exit  : 0/0
  7178 ;;		Unchanged: 0/0
  7179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;Total ram usage:        0 bytes
  7185 ;; Hardware stack levels required when called:    9
  7186 ;; This function calls:
  7187 ;;		_ApplicationInit
  7188 ;;		_SYSTEM_Initialize
  7189 ;;		_init_chopper
  7190 ;;		_init_relay_watchdog
  7191 ;;		_relay_watchdog_task
  7192 ;;		_start_relay_watchdog
  7193 ;;		_uart_start
  7194 ;;		_uart_task
  7195 ;; This function is called by:
  7196 ;;		Startup code after reset
  7197 ;; This function uses a non-reentrant model
  7198 ;;
  7199                           
  7200                           
  7201                           ;psect for function _main
  7202  1739                     _main:	
  7203                           
  7204                           ;main.c: 57:     SYSTEM_Initialize();
  7205                           
  7206                           ;incstack = 0
  7207                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7208  1739  3196  26E7  3197   	fcall	_SYSTEM_Initialize
  7209                           
  7210                           ;main.c: 59:     ApplicationInit();
  7211  173C  318B  2339  3197   	fcall	_ApplicationInit
  7212                           
  7213                           ;main.c: 62:     (INTCONbits.GIE = 1);
  7214  173F  178B               	bsf	11,7	;volatile
  7215                           
  7216                           ;main.c: 64:     (INTCONbits.PEIE = 1);
  7217  1740  170B               	bsf	11,6	;volatile
  7218                           
  7219                           ;main.c: 66:     init_chopper();
  7220  1741  3197  27D9  3197   	fcall	_init_chopper
  7221                           
  7222                           ;main.c: 67:     init_relay_watchdog();
  7223  1744  3180  2003  3197   	fcall	_init_relay_watchdog
  7224                           
  7225                           ;main.c: 69:     uart_start();
  7226  1747  3196  2688  3197   	fcall	_uart_start
  7227                           
  7228                           ;main.c: 70:     start_relay_watchdog();
  7229  174A  3195  2521  3197   	fcall	_start_relay_watchdog
  7230  174D                     l4237:	
  7231                           
  7232                           ;main.c: 72:     {;main.c: 73:         uart_task();
  7233  174D  318D  255D  3197   	fcall	_uart_task
  7234                           
  7235                           ;main.c: 74:         relay_watchdog_task();
  7236  1750  318A  227E  3197   	fcall	_relay_watchdog_task
  7237  1753  0064               	clrwdt	;# 
  7238  1754  2F4D               	goto	l4237
  7239  1755                     __end_of_main:	
  7240                           
  7241                           	psect	text1
  7242  0D5D                     __ptext1:	
  7243 ;; *************** function _uart_task *****************
  7244 ;; Defined at:
  7245 ;;		line 60 in file "UartParser.c"
  7246 ;; Parameters:    Size  Location     Type
  7247 ;;		None
  7248 ;; Auto vars:     Size  Location     Type
  7249 ;;  val             2    2[BANK3 ] unsigned short 
  7250 ;;  val             2    8[BANK3 ] unsigned short 
  7251 ;;  i               1    5[BANK3 ] unsigned char 
  7252 ;;  xor             1    1[BANK3 ] unsigned char 
  7253 ;;  val             2    6[BANK3 ] unsigned short 
  7254 ;;  i               1    4[BANK3 ] unsigned char 
  7255 ;;  xor             1    0[BANK3 ] unsigned char 
  7256 ;; Return value:  Size  Location     Type
  7257 ;;                  1    wreg      void 
  7258 ;; Registers used:
  7259 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7260 ;; Tracked objects:
  7261 ;;		On entry : 0/0
  7262 ;;		On exit  : 1C/0
  7263 ;;		Unchanged: 0/0
  7264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7266 ;;      Locals:         0       0       0       0      10       0       0       0       0       0       0       0       
      +0       0
  7267 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7268 ;;      Totals:         0       4       0       0      10       0       0       0       0       0       0       0       
      +0       0
  7269 ;;Total ram usage:       14 bytes
  7270 ;; Hardware stack levels used:    1
  7271 ;; Hardware stack levels required when called:    8
  7272 ;; This function calls:
  7273 ;;		_get_relay_reset_voltage
  7274 ;;		_get_reset_duration
  7275 ;;		_get_vdc
  7276 ;;		_get_vdc_critic
  7277 ;;		_get_vdc_max
  7278 ;;		_get_vdc_min
  7279 ;;		_get_vdc_speed
  7280 ;;		_is_chopper_active
  7281 ;;		_save_to_flash
  7282 ;;		_set_relay_reset_voltage
  7283 ;;		_set_reset_duration
  7284 ;;		_set_vdc_critic
  7285 ;;		_set_vdc_max
  7286 ;;		_set_vdc_min
  7287 ;;		_set_vdc_speed
  7288 ;;		_start_chopper
  7289 ;;		_stop_chopper
  7290 ;; This function is called by:
  7291 ;;		_main
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           
  7296                           ;psect for function _uart_task
  7297  0D5D                     _uart_task:	
  7298                           
  7299                           ;UartParser.c: 62:     if( st == SHUTDOWN )
  7300                           
  7301                           ;incstack = 0
  7302                           ; Regs used in _uart_task: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7303  0D5D  0020               	movlb	0	; select bank0
  7304  0D5E  082D               	movf	UartParser@st,w
  7305  0D5F  1903               	btfsc	3,2
  7306  0D60  0008               	return
  7307                           
  7308                           ;UartParser.c: 64:     if( st == INIT )
  7309  0D61  032D               	decf	UartParser@st,w
  7310  0D62  1D03               	btfss	3,2
  7311  0D63  2D6F               	goto	l3981
  7312                           
  7313                           ;UartParser.c: 65:     {;UartParser.c: 66:         isr_timer = ((uint8_t)((uint8_t)~syst
      +                          em_counter)+((uint8_t)1));
  7314  0D64  0330               	decf	_system_counter,w
  7315  0D65  3AFF               	xorlw	255
  7316  0D66  00DF               	movwf	??_uart_task
  7317  0D67  085F               	movf	??_uart_task,w
  7318  0D68  00AE               	movwf	_isr_timer
  7319                           
  7320                           ;UartParser.c: 67:         lock_isr = 0;
  7321  0D69  01E4               	clrf	_lock_isr
  7322                           
  7323                           ;UartParser.c: 68:         st = WAIT_IDLE;
  7324  0D6A  3002               	movlw	2
  7325  0D6B  00DF               	movwf	??_uart_task
  7326  0D6C  085F               	movf	??_uart_task,w
  7327  0D6D  00AD               	movwf	UartParser@st
  7328  0D6E  0008               	return
  7329  0D6F                     l3981:	
  7330                           
  7331                           ;UartParser.c: 71:     if( st == WAIT_IDLE )
  7332  0D6F  3002               	movlw	2
  7333  0D70  062D               	xorwf	UartParser@st,w
  7334  0D71  1D03               	btfss	3,2
  7335  0D72  2D80               	goto	l3993
  7336                           
  7337                           ;UartParser.c: 72:     {;UartParser.c: 73:         if( ((uint8_t)(system_counter + isr_t
      +                          imer) >= ((uint8_t)3)) == 0 )
  7338  0D73  082E               	movf	_isr_timer,w
  7339  0D74  0730               	addwf	_system_counter,w
  7340  0D75  00DF               	movwf	??_uart_task
  7341  0D76  3003               	movlw	3
  7342  0D77  025F               	subwf	??_uart_task,w
  7343  0D78  1C03               	btfss	3,0
  7344  0D79  0008               	return
  7345                           
  7346                           ;UartParser.c: 75:         rx_idx = 0;
  7347  0D7A  01AF               	clrf	UartParser@rx_idx
  7348                           
  7349                           ;UartParser.c: 76:         st = READ_FRAME;
  7350  0D7B  3003               	movlw	3
  7351  0D7C  00DF               	movwf	??_uart_task
  7352  0D7D  085F               	movf	??_uart_task,w
  7353  0D7E  00AD               	movwf	UartParser@st
  7354  0D7F  0008               	return
  7355  0D80                     l3993:	
  7356                           
  7357                           ;UartParser.c: 79:     if( st == READ_FRAME )
  7358  0D80  3003               	movlw	3
  7359  0D81  062D               	xorwf	UartParser@st,w
  7360  0D82  1D03               	btfss	3,2
  7361  0D83  2DD3               	goto	l4031
  7362                           
  7363                           ;UartParser.c: 80:     {;UartParser.c: 81:         if( rx_idx == 0 )
  7364  0D84  082F               	movf	UartParser@rx_idx,w
  7365  0D85  1903               	btfsc	3,2
  7366  0D86  0008               	return
  7367                           
  7368                           ;UartParser.c: 83:         if( ((uint8_t)(system_counter + isr_timer) >= ((uint8_t)3)) =
      +                          = 0 )
  7369  0D87  082E               	movf	_isr_timer,w
  7370  0D88  0730               	addwf	_system_counter,w
  7371  0D89  00DF               	movwf	??_uart_task
  7372  0D8A  3003               	movlw	3
  7373  0D8B  025F               	subwf	??_uart_task,w
  7374  0D8C  1C03               	btfss	3,0
  7375  0D8D  0008               	return
  7376                           
  7377                           ;UartParser.c: 86:         lock_isr = 1;
  7378  0D8E  01E4               	clrf	_lock_isr
  7379  0D8F  0AE4               	incf	_lock_isr,f
  7380                           
  7381                           ;UartParser.c: 88:         uint8_t i;;UartParser.c: 89:         uint8_t xor = rx_buffer[
      +                          0];
  7382  0D90  0022               	movlb	2	; select bank2
  7383  0D91  0820               	movf	UartParser@rx_buffer^(0+256),w
  7384  0D92  0020               	movlb	0	; select bank0
  7385  0D93  00DF               	movwf	??_uart_task
  7386  0D94  085F               	movf	??_uart_task,w
  7387  0D95  0023               	movlb	3	; select bank3
  7388  0D96  00B0               	movwf	uart_task@xor^(0+384)
  7389                           
  7390                           ;UartParser.c: 90:         for( i=1 ; i<rx_idx ; i++ )
  7391  0D97  01B4               	clrf	uart_task@i^(0+384)
  7392  0D98  0AB4               	incf	uart_task@i^(0+384),f
  7393  0D99                     l4011:	
  7394  0D99  0020               	movlb	0	; select bank0
  7395  0D9A  082F               	movf	UartParser@rx_idx,w
  7396  0D9B  0023               	movlb	3	; select bank3
  7397  0D9C  0234               	subwf	uart_task@i^(0+384),w
  7398  0D9D  1803               	btfsc	3,0
  7399  0D9E  2DB1               	goto	l4013
  7400                           
  7401                           ;UartParser.c: 91:             xor ^= rx_buffer[i];
  7402  0D9F  0834               	movf	uart_task@i^(0+384),w
  7403  0DA0  3E20               	addlw	(low (UartParser@rx_buffer| (0+256)))& (0+255)
  7404  0DA1  0086               	movwf	6
  7405  0DA2  3001               	movlw	1	; select bank2/3
  7406  0DA3  0087               	movwf	7
  7407  0DA4  0801               	movf	1,w
  7408  0DA5  0020               	movlb	0	; select bank0
  7409  0DA6  00DF               	movwf	??_uart_task
  7410  0DA7  085F               	movf	??_uart_task,w
  7411  0DA8  0023               	movlb	3	; select bank3
  7412  0DA9  06B0               	xorwf	uart_task@xor^(0+384),f
  7413  0DAA  3001               	movlw	1
  7414  0DAB  0020               	movlb	0	; select bank0
  7415  0DAC  00DF               	movwf	??_uart_task
  7416  0DAD  085F               	movf	??_uart_task,w
  7417  0DAE  0023               	movlb	3	; select bank3
  7418  0DAF  07B4               	addwf	uart_task@i^(0+384),f
  7419  0DB0  2D99               	goto	l4011
  7420  0DB1                     l4013:	
  7421                           
  7422                           ;UartParser.c: 92:         if( xor != 0 ||
  7423  0DB1  0830               	movf	uart_task@xor^(0+384),w
  7424  0DB2  1D03               	btfss	3,2
  7425  0DB3  2DCA               	goto	l4025
  7426  0DB4  30AA               	movlw	170
  7427  0DB5  0022               	movlb	2	; select bank2
  7428  0DB6  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7429  0DB7  1903               	btfsc	3,2
  7430  0DB8  2DC1               	goto	l4021
  7431  0DB9  3055               	movlw	85
  7432  0DBA  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7433  0DBB  1903               	btfsc	3,2
  7434  0DBC  2DC1               	goto	l4021
  7435  0DBD  30A5               	movlw	165
  7436  0DBE  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7437  0DBF  1D03               	btfss	3,2
  7438  0DC0  2DCA               	goto	l4025
  7439  0DC1                     l4021:	
  7440  0DC1  300F               	movlw	15
  7441  0DC2  0020               	movlb	0	; select bank0
  7442  0DC3  062F               	xorwf	UartParser@rx_idx,w
  7443  0DC4  1903               	btfsc	3,2
  7444  0DC5  2DCE               	goto	l4027
  7445  0DC6  3002               	movlw	2
  7446  0DC7  062F               	xorwf	UartParser@rx_idx,w
  7447  0DC8  1903               	btfsc	3,2
  7448  0DC9  2DCE               	goto	l4027
  7449  0DCA                     l4025:	
  7450                           
  7451                           ;UartParser.c: 97:         {;UartParser.c: 98:             rx_idx = 0;
  7452  0DCA  0020               	movlb	0	; select bank0
  7453  0DCB  01AF               	clrf	UartParser@rx_idx
  7454                           
  7455                           ;UartParser.c: 99:             lock_isr = 0;
  7456  0DCC  01E4               	clrf	_lock_isr
  7457                           
  7458                           ;UartParser.c: 100:         }
  7459  0DCD  0008               	return
  7460  0DCE                     l4027:	
  7461                           
  7462                           ;UartParser.c: 102:             st = PARSE_FRAME;
  7463  0DCE  3004               	movlw	4
  7464  0DCF  00DF               	movwf	??_uart_task
  7465  0DD0  085F               	movf	??_uart_task,w
  7466  0DD1  00AD               	movwf	UartParser@st
  7467  0DD2  0008               	return
  7468  0DD3                     l4031:	
  7469                           
  7470                           ;UartParser.c: 105:     if( st == PARSE_FRAME )
  7471  0DD3  3004               	movlw	4
  7472  0DD4  062D               	xorwf	UartParser@st,w
  7473  0DD5  1D03               	btfss	3,2
  7474  0DD6  2FE6               	goto	l4159
  7475                           
  7476                           ;UartParser.c: 106:     {;UartParser.c: 107:         if( rx_buffer[0] == SET_PARAMS )
  7477  0DD7  30AA               	movlw	170
  7478  0DD8  0022               	movlb	2	; select bank2
  7479  0DD9  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7480  0DDA  1D03               	btfss	3,2
  7481  0DDB  2DE1               	goto	l980
  7482                           
  7483                           ;UartParser.c: 108:         {;UartParser.c: 109:             static uint8_t none = 2;;Ua
      +                          rtParser.c: 110:             none++;
  7484  0DDC  3001               	movlw	1
  7485  0DDD  0020               	movlb	0	; select bank0
  7486  0DDE  00DF               	movwf	??_uart_task
  7487  0DDF  085F               	movf	??_uart_task,w
  7488  0DE0  07E3               	addwf	uart_task@none,f
  7489  0DE1                     l980:	
  7490                           ;UartParser.c: 111:         }
  7491                           
  7492                           
  7493                           ;UartParser.c: 112:         if( rx_buffer[0] == SET_PARAMS && rx_idx == 15 )
  7494  0DE1  30AA               	movlw	170
  7495  0DE2  0022               	movlb	2	; select bank2
  7496  0DE3  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7497  0DE4  1D03               	btfss	3,2
  7498  0DE5  2EF2               	goto	l4083
  7499  0DE6  300F               	movlw	15
  7500  0DE7  0020               	movlb	0	; select bank0
  7501  0DE8  062F               	xorwf	UartParser@rx_idx,w
  7502  0DE9  1D03               	btfss	3,2
  7503  0DEA  2EF2               	goto	l4083
  7504                           
  7505                           ;UartParser.c: 113:         {;UartParser.c: 114:             uint16_t val;;UartParser.c:
      +                           115:             val = rx_buffer[1];
  7506  0DEB  0022               	movlb	2	; select bank2
  7507  0DEC  0821               	movf	(UartParser@rx_buffer^(0+256)+1),w
  7508  0DED  0020               	movlb	0	; select bank0
  7509  0DEE  00DF               	movwf	??_uart_task
  7510  0DEF  01E0               	clrf	??_uart_task+1
  7511  0DF0  085F               	movf	??_uart_task,w
  7512  0DF1  0023               	movlb	3	; select bank3
  7513  0DF2  00B6               	movwf	uart_task@val^(0+384)
  7514  0DF3  0020               	movlb	0	; select bank0
  7515  0DF4  0860               	movf	??_uart_task+1,w
  7516  0DF5  0023               	movlb	3	; select bank3
  7517  0DF6  00B7               	movwf	(uart_task@val+1)^(0+384)
  7518                           
  7519                           ;UartParser.c: 116:             val = val<<8 | rx_buffer[2];
  7520  0DF7  0022               	movlb	2	; select bank2
  7521  0DF8  0822               	movf	(UartParser@rx_buffer^(0+256)+2),w
  7522  0DF9  0020               	movlb	0	; select bank0
  7523  0DFA  00DF               	movwf	??_uart_task
  7524  0DFB  01E0               	clrf	??_uart_task+1
  7525  0DFC  0023               	movlb	3	; select bank3
  7526  0DFD  0836               	movf	uart_task@val^(0+384),w
  7527  0DFE  0020               	movlb	0	; select bank0
  7528  0DFF  00E2               	movwf	??_uart_task+3
  7529  0E00  01E1               	clrf	??_uart_task+2
  7530  0E01  085F               	movf	??_uart_task,w
  7531  0E02  0461               	iorwf	??_uart_task+2,w
  7532  0E03  0023               	movlb	3	; select bank3
  7533  0E04  00B6               	movwf	uart_task@val^(0+384)
  7534  0E05  0020               	movlb	0	; select bank0
  7535  0E06  0860               	movf	??_uart_task+1,w
  7536  0E07  0462               	iorwf	??_uart_task+3,w
  7537  0E08  0023               	movlb	3	; select bank3
  7538  0E09  00B7               	movwf	(uart_task@val+1)^(0+384)
  7539                           
  7540                           ;UartParser.c: 117:             set_vdc_min(val);
  7541  0E0A  0837               	movf	(uart_task@val+1)^(0+384),w
  7542  0E0B  0020               	movlb	0	; select bank0
  7543  0E0C  00D5               	movwf	set_vdc_min@vmin+1
  7544  0E0D  0023               	movlb	3	; select bank3
  7545  0E0E  0836               	movf	uart_task@val^(0+384),w
  7546  0E0F  0020               	movlb	0	; select bank0
  7547  0E10  00D4               	movwf	set_vdc_min@vmin
  7548  0E11  3195  25CA  318D   	fcall	_set_vdc_min
  7549                           
  7550                           ;UartParser.c: 118:             val = rx_buffer[3];
  7551  0E14  0022               	movlb	2	; select bank2
  7552  0E15  0823               	movf	(UartParser@rx_buffer^(0+256)+3),w
  7553  0E16  0020               	movlb	0	; select bank0
  7554  0E17  00DF               	movwf	??_uart_task
  7555  0E18  01E0               	clrf	??_uart_task+1
  7556  0E19  085F               	movf	??_uart_task,w
  7557  0E1A  0023               	movlb	3	; select bank3
  7558  0E1B  00B6               	movwf	uart_task@val^(0+384)
  7559  0E1C  0020               	movlb	0	; select bank0
  7560  0E1D  0860               	movf	??_uart_task+1,w
  7561  0E1E  0023               	movlb	3	; select bank3
  7562  0E1F  00B7               	movwf	(uart_task@val+1)^(0+384)
  7563                           
  7564                           ;UartParser.c: 119:             val = val<<8 | rx_buffer[4];
  7565  0E20  0022               	movlb	2	; select bank2
  7566  0E21  0824               	movf	(UartParser@rx_buffer^(0+256)+4),w
  7567  0E22  0020               	movlb	0	; select bank0
  7568  0E23  00DF               	movwf	??_uart_task
  7569  0E24  01E0               	clrf	??_uart_task+1
  7570  0E25  0023               	movlb	3	; select bank3
  7571  0E26  0836               	movf	uart_task@val^(0+384),w
  7572  0E27  0020               	movlb	0	; select bank0
  7573  0E28  00E2               	movwf	??_uart_task+3
  7574  0E29  01E1               	clrf	??_uart_task+2
  7575  0E2A  085F               	movf	??_uart_task,w
  7576  0E2B  0461               	iorwf	??_uart_task+2,w
  7577  0E2C  0023               	movlb	3	; select bank3
  7578  0E2D  00B6               	movwf	uart_task@val^(0+384)
  7579  0E2E  0020               	movlb	0	; select bank0
  7580  0E2F  0860               	movf	??_uart_task+1,w
  7581  0E30  0462               	iorwf	??_uart_task+3,w
  7582  0E31  0023               	movlb	3	; select bank3
  7583  0E32  00B7               	movwf	(uart_task@val+1)^(0+384)
  7584                           
  7585                           ;UartParser.c: 120:             set_vdc_max(val);
  7586  0E33  0837               	movf	(uart_task@val+1)^(0+384),w
  7587  0E34  0020               	movlb	0	; select bank0
  7588  0E35  00D5               	movwf	set_vdc_max@vmax+1
  7589  0E36  0023               	movlb	3	; select bank3
  7590  0E37  0836               	movf	uart_task@val^(0+384),w
  7591  0E38  0020               	movlb	0	; select bank0
  7592  0E39  00D4               	movwf	set_vdc_max@vmax
  7593  0E3A  3195  25BF  318D   	fcall	_set_vdc_max
  7594                           
  7595                           ;UartParser.c: 121:             val = rx_buffer[5];
  7596  0E3D  0022               	movlb	2	; select bank2
  7597  0E3E  0825               	movf	(UartParser@rx_buffer^(0+256)+5),w
  7598  0E3F  0020               	movlb	0	; select bank0
  7599  0E40  00DF               	movwf	??_uart_task
  7600  0E41  01E0               	clrf	??_uart_task+1
  7601  0E42  085F               	movf	??_uart_task,w
  7602  0E43  0023               	movlb	3	; select bank3
  7603  0E44  00B6               	movwf	uart_task@val^(0+384)
  7604  0E45  0020               	movlb	0	; select bank0
  7605  0E46  0860               	movf	??_uart_task+1,w
  7606  0E47  0023               	movlb	3	; select bank3
  7607  0E48  00B7               	movwf	(uart_task@val+1)^(0+384)
  7608                           
  7609                           ;UartParser.c: 122:             val = val<<8 | rx_buffer[6];
  7610  0E49  0022               	movlb	2	; select bank2
  7611  0E4A  0826               	movf	(UartParser@rx_buffer^(0+256)+6),w
  7612  0E4B  0020               	movlb	0	; select bank0
  7613  0E4C  00DF               	movwf	??_uart_task
  7614  0E4D  01E0               	clrf	??_uart_task+1
  7615  0E4E  0023               	movlb	3	; select bank3
  7616  0E4F  0836               	movf	uart_task@val^(0+384),w
  7617  0E50  0020               	movlb	0	; select bank0
  7618  0E51  00E2               	movwf	??_uart_task+3
  7619  0E52  01E1               	clrf	??_uart_task+2
  7620  0E53  085F               	movf	??_uart_task,w
  7621  0E54  0461               	iorwf	??_uart_task+2,w
  7622  0E55  0023               	movlb	3	; select bank3
  7623  0E56  00B6               	movwf	uart_task@val^(0+384)
  7624  0E57  0020               	movlb	0	; select bank0
  7625  0E58  0860               	movf	??_uart_task+1,w
  7626  0E59  0462               	iorwf	??_uart_task+3,w
  7627  0E5A  0023               	movlb	3	; select bank3
  7628  0E5B  00B7               	movwf	(uart_task@val+1)^(0+384)
  7629                           
  7630                           ;UartParser.c: 123:             set_vdc_critic(val);
  7631  0E5C  0837               	movf	(uart_task@val+1)^(0+384),w
  7632  0E5D  0020               	movlb	0	; select bank0
  7633  0E5E  00D5               	movwf	set_vdc_critic@vc+1
  7634  0E5F  0023               	movlb	3	; select bank3
  7635  0E60  0836               	movf	uart_task@val^(0+384),w
  7636  0E61  0020               	movlb	0	; select bank0
  7637  0E62  00D4               	movwf	set_vdc_critic@vc
  7638  0E63  3195  25B4  318D   	fcall	_set_vdc_critic
  7639                           
  7640                           ;UartParser.c: 124:             val = rx_buffer[7];
  7641  0E66  0022               	movlb	2	; select bank2
  7642  0E67  0827               	movf	(UartParser@rx_buffer^(0+256)+7),w
  7643  0E68  0020               	movlb	0	; select bank0
  7644  0E69  00DF               	movwf	??_uart_task
  7645  0E6A  01E0               	clrf	??_uart_task+1
  7646  0E6B  085F               	movf	??_uart_task,w
  7647  0E6C  0023               	movlb	3	; select bank3
  7648  0E6D  00B6               	movwf	uart_task@val^(0+384)
  7649  0E6E  0020               	movlb	0	; select bank0
  7650  0E6F  0860               	movf	??_uart_task+1,w
  7651  0E70  0023               	movlb	3	; select bank3
  7652  0E71  00B7               	movwf	(uart_task@val+1)^(0+384)
  7653                           
  7654                           ;UartParser.c: 125:             val = val<<8 | rx_buffer[8];
  7655  0E72  0022               	movlb	2	; select bank2
  7656  0E73  0828               	movf	(UartParser@rx_buffer^(0+256)+8),w
  7657  0E74  0020               	movlb	0	; select bank0
  7658  0E75  00DF               	movwf	??_uart_task
  7659  0E76  01E0               	clrf	??_uart_task+1
  7660  0E77  0023               	movlb	3	; select bank3
  7661  0E78  0836               	movf	uart_task@val^(0+384),w
  7662  0E79  0020               	movlb	0	; select bank0
  7663  0E7A  00E2               	movwf	??_uart_task+3
  7664  0E7B  01E1               	clrf	??_uart_task+2
  7665  0E7C  085F               	movf	??_uart_task,w
  7666  0E7D  0461               	iorwf	??_uart_task+2,w
  7667  0E7E  0023               	movlb	3	; select bank3
  7668  0E7F  00B6               	movwf	uart_task@val^(0+384)
  7669  0E80  0020               	movlb	0	; select bank0
  7670  0E81  0860               	movf	??_uart_task+1,w
  7671  0E82  0462               	iorwf	??_uart_task+3,w
  7672  0E83  0023               	movlb	3	; select bank3
  7673  0E84  00B7               	movwf	(uart_task@val+1)^(0+384)
  7674                           
  7675                           ;UartParser.c: 126:             set_vdc_speed(val);
  7676  0E85  0837               	movf	(uart_task@val+1)^(0+384),w
  7677  0E86  0020               	movlb	0	; select bank0
  7678  0E87  00DA               	movwf	set_vdc_speed@msDelay+1
  7679  0E88  0023               	movlb	3	; select bank3
  7680  0E89  0836               	movf	uart_task@val^(0+384),w
  7681  0E8A  0020               	movlb	0	; select bank0
  7682  0E8B  00D9               	movwf	set_vdc_speed@msDelay
  7683  0E8C  3197  27B3  318D   	fcall	_set_vdc_speed
  7684                           
  7685                           ;UartParser.c: 128:             val = rx_buffer[9];
  7686  0E8F  0022               	movlb	2	; select bank2
  7687  0E90  0829               	movf	(UartParser@rx_buffer^(0+256)+9),w
  7688  0E91  0020               	movlb	0	; select bank0
  7689  0E92  00DF               	movwf	??_uart_task
  7690  0E93  01E0               	clrf	??_uart_task+1
  7691  0E94  085F               	movf	??_uart_task,w
  7692  0E95  0023               	movlb	3	; select bank3
  7693  0E96  00B6               	movwf	uart_task@val^(0+384)
  7694  0E97  0020               	movlb	0	; select bank0
  7695  0E98  0860               	movf	??_uart_task+1,w
  7696  0E99  0023               	movlb	3	; select bank3
  7697  0E9A  00B7               	movwf	(uart_task@val+1)^(0+384)
  7698                           
  7699                           ;UartParser.c: 129:             val = val<<8 | rx_buffer[10];
  7700  0E9B  0022               	movlb	2	; select bank2
  7701  0E9C  082A               	movf	(UartParser@rx_buffer^(0+256)+10),w
  7702  0E9D  0020               	movlb	0	; select bank0
  7703  0E9E  00DF               	movwf	??_uart_task
  7704  0E9F  01E0               	clrf	??_uart_task+1
  7705  0EA0  0023               	movlb	3	; select bank3
  7706  0EA1  0836               	movf	uart_task@val^(0+384),w
  7707  0EA2  0020               	movlb	0	; select bank0
  7708  0EA3  00E2               	movwf	??_uart_task+3
  7709  0EA4  01E1               	clrf	??_uart_task+2
  7710  0EA5  085F               	movf	??_uart_task,w
  7711  0EA6  0461               	iorwf	??_uart_task+2,w
  7712  0EA7  0023               	movlb	3	; select bank3
  7713  0EA8  00B6               	movwf	uart_task@val^(0+384)
  7714  0EA9  0020               	movlb	0	; select bank0
  7715  0EAA  0860               	movf	??_uart_task+1,w
  7716  0EAB  0462               	iorwf	??_uart_task+3,w
  7717  0EAC  0023               	movlb	3	; select bank3
  7718  0EAD  00B7               	movwf	(uart_task@val+1)^(0+384)
  7719                           
  7720                           ;UartParser.c: 130:             set_relay_reset_voltage(val);
  7721  0EAE  0837               	movf	(uart_task@val+1)^(0+384),w
  7722  0EAF  0020               	movlb	0	; select bank0
  7723  0EB0  00D2               	movwf	set_relay_reset_voltage@relay_vthres+1
  7724  0EB1  0023               	movlb	3	; select bank3
  7725  0EB2  0836               	movf	uart_task@val^(0+384),w
  7726  0EB3  0020               	movlb	0	; select bank0
  7727  0EB4  00D1               	movwf	set_relay_reset_voltage@relay_vthres
  7728  0EB5  3196  2672  318D   	fcall	_set_relay_reset_voltage
  7729                           
  7730                           ;UartParser.c: 131:             val = rx_buffer[11];
  7731  0EB8  0022               	movlb	2	; select bank2
  7732  0EB9  082B               	movf	(UartParser@rx_buffer^(0+256)+11),w
  7733  0EBA  0020               	movlb	0	; select bank0
  7734  0EBB  00DF               	movwf	??_uart_task
  7735  0EBC  01E0               	clrf	??_uart_task+1
  7736  0EBD  085F               	movf	??_uart_task,w
  7737  0EBE  0023               	movlb	3	; select bank3
  7738  0EBF  00B6               	movwf	uart_task@val^(0+384)
  7739  0EC0  0020               	movlb	0	; select bank0
  7740  0EC1  0860               	movf	??_uart_task+1,w
  7741  0EC2  0023               	movlb	3	; select bank3
  7742  0EC3  00B7               	movwf	(uart_task@val+1)^(0+384)
  7743                           
  7744                           ;UartParser.c: 132:             val = val<<8 | rx_buffer[12];
  7745  0EC4  0022               	movlb	2	; select bank2
  7746  0EC5  082C               	movf	(UartParser@rx_buffer^(0+256)+12),w
  7747  0EC6  0020               	movlb	0	; select bank0
  7748  0EC7  00DF               	movwf	??_uart_task
  7749  0EC8  01E0               	clrf	??_uart_task+1
  7750  0EC9  0023               	movlb	3	; select bank3
  7751  0ECA  0836               	movf	uart_task@val^(0+384),w
  7752  0ECB  0020               	movlb	0	; select bank0
  7753  0ECC  00E2               	movwf	??_uart_task+3
  7754  0ECD  01E1               	clrf	??_uart_task+2
  7755  0ECE  085F               	movf	??_uart_task,w
  7756  0ECF  0461               	iorwf	??_uart_task+2,w
  7757  0ED0  0023               	movlb	3	; select bank3
  7758  0ED1  00B6               	movwf	uart_task@val^(0+384)
  7759  0ED2  0020               	movlb	0	; select bank0
  7760  0ED3  0860               	movf	??_uart_task+1,w
  7761  0ED4  0462               	iorwf	??_uart_task+3,w
  7762  0ED5  0023               	movlb	3	; select bank3
  7763  0ED6  00B7               	movwf	(uart_task@val+1)^(0+384)
  7764                           
  7765                           ;UartParser.c: 133:             set_reset_duration(val);
  7766  0ED7  0837               	movf	(uart_task@val+1)^(0+384),w
  7767  0ED8  0020               	movlb	0	; select bank0
  7768  0ED9  00DA               	movwf	set_reset_duration@reset_dur_ms+1
  7769  0EDA  0023               	movlb	3	; select bank3
  7770  0EDB  0836               	movf	uart_task@val^(0+384),w
  7771  0EDC  0020               	movlb	0	; select bank0
  7772  0EDD  00D9               	movwf	set_reset_duration@reset_dur_ms
  7773  0EDE  3188  20CE  318D   	fcall	_set_reset_duration
  7774                           
  7775                           ;UartParser.c: 135:             if( rx_buffer[13] == 0 )
  7776  0EE1  0022               	movlb	2	; select bank2
  7777  0EE2  082D               	movf	(UartParser@rx_buffer^(0+256)+13),w
  7778  0EE3  1D03               	btfss	3,2
  7779  0EE4  2EE9               	goto	l4073
  7780                           
  7781                           ;UartParser.c: 136:                 stop_chopper();
  7782  0EE5  3195  25ED  318D   	fcall	_stop_chopper
  7783  0EE8  2EEC               	goto	l4075
  7784  0EE9                     l4073:	
  7785                           
  7786                           ;UartParser.c: 138:                 start_chopper();
  7787  0EE9  3196  269E  318D   	fcall	_start_chopper
  7788  0EEC                     l4075:	
  7789                           
  7790                           ;UartParser.c: 139:             save_to_flash();
  7791  0EEC  3189  21E3         	fcall	_save_to_flash
  7792  0EEE                     l4077:	
  7793                           
  7794                           ;UartParser.c: 140:             st = INIT;
  7795  0EEE  0020               	movlb	0	; select bank0
  7796  0EEF  01AD               	clrf	UartParser@st
  7797  0EF0  0AAD               	incf	UartParser@st,f
  7798  0EF1  0008               	return
  7799  0EF2                     l4083:	
  7800                           
  7801                           ;UartParser.c: 144:         {;UartParser.c: 145:             if( rx_buffer[0] == GET_PAR
      +                          AMS && rx_idx == 2 )
  7802  0EF2  3055               	movlw	85
  7803  0EF3  0022               	movlb	2	; select bank2
  7804  0EF4  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  7805  0EF5  1D03               	btfss	3,2
  7806  0EF6  2FBB               	goto	l4141
  7807  0EF7  3002               	movlw	2
  7808  0EF8  0020               	movlb	0	; select bank0
  7809  0EF9  062F               	xorwf	UartParser@rx_idx,w
  7810  0EFA  1D03               	btfss	3,2
  7811  0EFB  2FBB               	goto	l4141
  7812                           
  7813                           ;UartParser.c: 146:             {;UartParser.c: 147:                 uint16_t val;;UartP
      +                          arser.c: 148:                 val = get_vdc_min();
  7814  0EFC  3195  2510  318D   	fcall	_get_vdc_min
  7815  0EFF  0852               	movf	?_get_vdc_min+1,w
  7816  0F00  0023               	movlb	3	; select bank3
  7817  0F01  00B9               	movwf	(uart_task@val_1493+1)^(0+384)
  7818  0F02  0020               	movlb	0	; select bank0
  7819  0F03  0851               	movf	?_get_vdc_min,w
  7820  0F04  0023               	movlb	3	; select bank3
  7821  0F05  00B8               	movwf	uart_task@val_1493^(0+384)
  7822                           
  7823                           ;UartParser.c: 149:                 rx_buffer[1] = (val>>8) & 0xFF;
  7824  0F06  0839               	movf	(uart_task@val_1493^(0+384)+1),w
  7825  0F07  0020               	movlb	0	; select bank0
  7826  0F08  00DF               	movwf	??_uart_task
  7827  0F09  085F               	movf	??_uart_task,w
  7828  0F0A  0022               	movlb	2	; select bank2
  7829  0F0B  00A1               	movwf	(UartParser@rx_buffer^(0+256)+1)
  7830                           
  7831                           ;UartParser.c: 150:                 rx_buffer[2] = val & 0xFF;
  7832  0F0C  0023               	movlb	3	; select bank3
  7833  0F0D  0838               	movf	uart_task@val_1493^(0+384),w
  7834  0F0E  0020               	movlb	0	; select bank0
  7835  0F0F  00DF               	movwf	??_uart_task
  7836  0F10  085F               	movf	??_uart_task,w
  7837  0F11  0022               	movlb	2	; select bank2
  7838  0F12  00A2               	movwf	(UartParser@rx_buffer^(0+256)+2)
  7839                           
  7840                           ;UartParser.c: 151:                 val = get_vdc_max();
  7841  0F13  3195  252D  318D   	fcall	_get_vdc_max
  7842  0F16  0852               	movf	?_get_vdc_max+1,w
  7843  0F17  0023               	movlb	3	; select bank3
  7844  0F18  00B9               	movwf	(uart_task@val_1493+1)^(0+384)
  7845  0F19  0020               	movlb	0	; select bank0
  7846  0F1A  0851               	movf	?_get_vdc_max,w
  7847  0F1B  0023               	movlb	3	; select bank3
  7848  0F1C  00B8               	movwf	uart_task@val_1493^(0+384)
  7849                           
  7850                           ;UartParser.c: 152:                 rx_buffer[3] = (val>>8) & 0xFF;
  7851  0F1D  0839               	movf	(uart_task@val_1493^(0+384)+1),w
  7852  0F1E  0020               	movlb	0	; select bank0
  7853  0F1F  00DF               	movwf	??_uart_task
  7854  0F20  085F               	movf	??_uart_task,w
  7855  0F21  0022               	movlb	2	; select bank2
  7856  0F22  00A3               	movwf	(UartParser@rx_buffer^(0+256)+3)
  7857                           
  7858                           ;UartParser.c: 153:                 rx_buffer[4] = val & 0xFF;
  7859  0F23  0023               	movlb	3	; select bank3
  7860  0F24  0838               	movf	uart_task@val_1493^(0+384),w
  7861  0F25  0020               	movlb	0	; select bank0
  7862  0F26  00DF               	movwf	??_uart_task
  7863  0F27  085F               	movf	??_uart_task,w
  7864  0F28  0022               	movlb	2	; select bank2
  7865  0F29  00A4               	movwf	(UartParser@rx_buffer^(0+256)+4)
  7866                           
  7867                           ;UartParser.c: 154:                 val = get_vdc_critic();
  7868  0F2A  3195  2527  318D   	fcall	_get_vdc_critic
  7869  0F2D  0852               	movf	?_get_vdc_critic+1,w
  7870  0F2E  0023               	movlb	3	; select bank3
  7871  0F2F  00B9               	movwf	(uart_task@val_1493+1)^(0+384)
  7872  0F30  0020               	movlb	0	; select bank0
  7873  0F31  0851               	movf	?_get_vdc_critic,w
  7874  0F32  0023               	movlb	3	; select bank3
  7875  0F33  00B8               	movwf	uart_task@val_1493^(0+384)
  7876                           
  7877                           ;UartParser.c: 155:                 rx_buffer[5] = (val>>8) & 0xFF;
  7878  0F34  0839               	movf	(uart_task@val_1493^(0+384)+1),w
  7879  0F35  0020               	movlb	0	; select bank0
  7880  0F36  00DF               	movwf	??_uart_task
  7881  0F37  085F               	movf	??_uart_task,w
  7882  0F38  0022               	movlb	2	; select bank2
  7883  0F39  00A5               	movwf	(UartParser@rx_buffer^(0+256)+5)
  7884                           
  7885                           ;UartParser.c: 156:                 rx_buffer[6] = val & 0xFF;
  7886  0F3A  0023               	movlb	3	; select bank3
  7887  0F3B  0838               	movf	uart_task@val_1493^(0+384),w
  7888  0F3C  0020               	movlb	0	; select bank0
  7889  0F3D  00DF               	movwf	??_uart_task
  7890  0F3E  085F               	movf	??_uart_task,w
  7891  0F3F  0022               	movlb	2	; select bank2
  7892  0F40  00A6               	movwf	(UartParser@rx_buffer^(0+256)+6)
  7893                           
  7894                           ;UartParser.c: 157:                 val = get_vdc_speed();
  7895  0F41  3196  2647  318D   	fcall	_get_vdc_speed
  7896  0F44  0858               	movf	?_get_vdc_speed+1,w
  7897  0F45  0023               	movlb	3	; select bank3
  7898  0F46  00B9               	movwf	(uart_task@val_1493+1)^(0+384)
  7899  0F47  0020               	movlb	0	; select bank0
  7900  0F48  0857               	movf	?_get_vdc_speed,w
  7901  0F49  0023               	movlb	3	; select bank3
  7902  0F4A  00B8               	movwf	uart_task@val_1493^(0+384)
  7903                           
  7904                           ;UartParser.c: 158:                 rx_buffer[7] = (val>>8) & 0xFF;
  7905  0F4B  0839               	movf	(uart_task@val_1493^(0+384)+1),w
  7906  0F4C  0020               	movlb	0	; select bank0
  7907  0F4D  00DF               	movwf	??_uart_task
  7908  0F4E  085F               	movf	??_uart_task,w
  7909  0F4F  0022               	movlb	2	; select bank2
  7910  0F50  00A7               	movwf	(UartParser@rx_buffer^(0+256)+7)
  7911                           
  7912                           ;UartParser.c: 159:                 rx_buffer[8] = val & 0xFF;
  7913  0F51  0023               	movlb	3	; select bank3
  7914  0F52  0838               	movf	uart_task@val_1493^(0+384),w
  7915  0F53  0020               	movlb	0	; select bank0
  7916  0F54  00DF               	movwf	??_uart_task
  7917  0F55  085F               	movf	??_uart_task,w
  7918  0F56  0022               	movlb	2	; select bank2
  7919  0F57  00A8               	movwf	(UartParser@rx_buffer^(0+256)+8)
  7920                           
  7921                           ;UartParser.c: 161:                 val = get_relay_reset_voltage();
  7922  0F58  3195  2533  318D   	fcall	_get_relay_reset_voltage
  7923  0F5B  0852               	movf	?_get_relay_reset_voltage+1,w
  7924  0F5C  0023               	movlb	3	; select bank3
  7925  0F5D  00B9               	movwf	(uart_task@val_1493+1)^(0+384)
  7926  0F5E  0020               	movlb	0	; select bank0
  7927  0F5F  0851               	movf	?_get_relay_reset_voltage,w
  7928  0F60  0023               	movlb	3	; select bank3
  7929  0F61  00B8               	movwf	uart_task@val_1493^(0+384)
  7930                           
  7931                           ;UartParser.c: 162:                 rx_buffer[9] = (val>>8) & 0xFF;
  7932  0F62  0839               	movf	(uart_task@val_1493^(0+384)+1),w
  7933  0F63  0020               	movlb	0	; select bank0
  7934  0F64  00DF               	movwf	??_uart_task
  7935  0F65  085F               	movf	??_uart_task,w
  7936  0F66  0022               	movlb	2	; select bank2
  7937  0F67  00A9               	movwf	(UartParser@rx_buffer^(0+256)+9)
  7938                           
  7939                           ;UartParser.c: 163:                 rx_buffer[10] = val & 0xFF;
  7940  0F68  0023               	movlb	3	; select bank3
  7941  0F69  0838               	movf	uart_task@val_1493^(0+384),w
  7942  0F6A  0020               	movlb	0	; select bank0
  7943  0F6B  00DF               	movwf	??_uart_task
  7944  0F6C  085F               	movf	??_uart_task,w
  7945  0F6D  0022               	movlb	2	; select bank2
  7946  0F6E  00AA               	movwf	(UartParser@rx_buffer^(0+256)+10)
  7947                           
  7948                           ;UartParser.c: 164:                 val = get_reset_duration();
  7949  0F6F  3195  258B  318D   	fcall	_get_reset_duration
  7950  0F72  0852               	movf	?_get_reset_duration+1,w
  7951  0F73  0023               	movlb	3	; select bank3
  7952  0F74  00B9               	movwf	(uart_task@val_1493+1)^(0+384)
  7953  0F75  0020               	movlb	0	; select bank0
  7954  0F76  0851               	movf	?_get_reset_duration,w
  7955  0F77  0023               	movlb	3	; select bank3
  7956  0F78  00B8               	movwf	uart_task@val_1493^(0+384)
  7957                           
  7958                           ;UartParser.c: 165:                 rx_buffer[11] = (val>>8) & 0xFF;
  7959  0F79  0839               	movf	(uart_task@val_1493^(0+384)+1),w
  7960  0F7A  0020               	movlb	0	; select bank0
  7961  0F7B  00DF               	movwf	??_uart_task
  7962  0F7C  085F               	movf	??_uart_task,w
  7963  0F7D  0022               	movlb	2	; select bank2
  7964  0F7E  00AB               	movwf	(UartParser@rx_buffer^(0+256)+11)
  7965                           
  7966                           ;UartParser.c: 166:                 rx_buffer[12] = val & 0xFF;
  7967  0F7F  0023               	movlb	3	; select bank3
  7968  0F80  0838               	movf	uart_task@val_1493^(0+384),w
  7969  0F81  0020               	movlb	0	; select bank0
  7970  0F82  00DF               	movwf	??_uart_task
  7971  0F83  085F               	movf	??_uart_task,w
  7972  0F84  0022               	movlb	2	; select bank2
  7973  0F85  00AC               	movwf	(UartParser@rx_buffer^(0+256)+12)
  7974                           
  7975                           ;UartParser.c: 168:                 rx_buffer[13] = is_chopper_active();
  7976  0F86  3194  24F4  318D   	fcall	_is_chopper_active
  7977  0F89  00DF               	movwf	??_uart_task
  7978  0F8A  085F               	movf	??_uart_task,w
  7979  0F8B  0022               	movlb	2	; select bank2
  7980  0F8C  00AD               	movwf	(UartParser@rx_buffer^(0+256)+13)
  7981                           
  7982                           ;UartParser.c: 169:                 uint8_t i;;UartParser.c: 170:                 uint8_
      +                          t xor = rx_buffer[0];
  7983  0F8D  0820               	movf	UartParser@rx_buffer^(0+256),w
  7984  0F8E  0020               	movlb	0	; select bank0
  7985  0F8F  00DF               	movwf	??_uart_task
  7986  0F90  085F               	movf	??_uart_task,w
  7987  0F91  0023               	movlb	3	; select bank3
  7988  0F92  00B1               	movwf	uart_task@xor_1500^(0+384)
  7989                           
  7990                           ;UartParser.c: 171:                 for( i=1 ; i<14 ; i++ )
  7991  0F93  01B5               	clrf	uart_task@i_1499^(0+384)
  7992  0F94  0AB5               	incf	uart_task@i_1499^(0+384),f
  7993  0F95                     l4129:	
  7994                           
  7995                           ;UartParser.c: 172:                     xor ^= rx_buffer[i];
  7996  0F95  0835               	movf	uart_task@i_1499^(0+384),w
  7997  0F96  3E20               	addlw	(low (UartParser@rx_buffer| (0+256)))& (0+255)
  7998  0F97  0086               	movwf	6
  7999  0F98  3001               	movlw	1	; select bank2/3
  8000  0F99  0087               	movwf	7
  8001  0F9A  0801               	movf	1,w
  8002  0F9B  0020               	movlb	0	; select bank0
  8003  0F9C  00DF               	movwf	??_uart_task
  8004  0F9D  085F               	movf	??_uart_task,w
  8005  0F9E  0023               	movlb	3	; select bank3
  8006  0F9F  06B1               	xorwf	uart_task@xor_1500^(0+384),f
  8007  0FA0  3001               	movlw	1
  8008  0FA1  0020               	movlb	0	; select bank0
  8009  0FA2  00DF               	movwf	??_uart_task
  8010  0FA3  085F               	movf	??_uart_task,w
  8011  0FA4  0023               	movlb	3	; select bank3
  8012  0FA5  07B5               	addwf	uart_task@i_1499^(0+384),f
  8013  0FA6  300E               	movlw	14
  8014  0FA7  0235               	subwf	uart_task@i_1499^(0+384),w
  8015  0FA8  1C03               	skipc
  8016  0FA9  2F95               	goto	l4129
  8017                           
  8018                           ;UartParser.c: 173:                 rx_buffer[14] = xor;
  8019  0FAA  0831               	movf	uart_task@xor_1500^(0+384),w
  8020  0FAB  0020               	movlb	0	; select bank0
  8021  0FAC  00DF               	movwf	??_uart_task
  8022  0FAD  085F               	movf	??_uart_task,w
  8023  0FAE  0022               	movlb	2	; select bank2
  8024  0FAF  00AE               	movwf	(UartParser@rx_buffer^(0+256)+14)
  8025                           
  8026                           ;UartParser.c: 174:                 rx_idx = 15;
  8027  0FB0  300F               	movlw	15
  8028  0FB1                     L1:	
  8029  0FB1  0020               	movlb	0	; select bank0
  8030  0FB2  00DF               	movwf	??_uart_task
  8031  0FB3  085F               	movf	??_uart_task,w
  8032  0FB4  00AF               	movwf	UartParser@rx_idx
  8033                           
  8034                           ;UartParser.c: 175:                 tx_idx = 0;
  8035  0FB5  01AC               	clrf	UartParser@tx_idx
  8036                           
  8037                           ;UartParser.c: 176:                 st = SEND_RESPONSE;
  8038  0FB6  3005               	movlw	5
  8039  0FB7  00DF               	movwf	??_uart_task
  8040  0FB8  085F               	movf	??_uart_task,w
  8041  0FB9  00AD               	movwf	UartParser@st
  8042                           
  8043                           ;UartParser.c: 177:             }
  8044  0FBA  0008               	return
  8045  0FBB                     l4141:	
  8046                           
  8047                           ;UartParser.c: 179:             {;UartParser.c: 180:                 if( rx_buffer[0] ==
      +                           GET_VDC && rx_idx == 2 )
  8048  0FBB  30A5               	movlw	165
  8049  0FBC  0022               	movlb	2	; select bank2
  8050  0FBD  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  8051  0FBE  1D03               	btfss	3,2
  8052  0FBF  2EEE               	goto	l4077
  8053  0FC0  3002               	movlw	2
  8054  0FC1  0020               	movlb	0	; select bank0
  8055  0FC2  062F               	xorwf	UartParser@rx_idx,w
  8056  0FC3  1D03               	btfss	3,2
  8057  0FC4  2EEE               	goto	l4077
  8058                           
  8059                           ;UartParser.c: 181:                 {;UartParser.c: 182:                     uint16_t va
      +                          l;;UartParser.c: 183:                     val = get_vdc();
  8060  0FC5  3195  250B  318D   	fcall	_get_vdc
  8061  0FC8  0852               	movf	?_get_vdc+1,w
  8062  0FC9  0023               	movlb	3	; select bank3
  8063  0FCA  00B3               	movwf	(uart_task@val_1501+1)^(0+384)
  8064  0FCB  0020               	movlb	0	; select bank0
  8065  0FCC  0851               	movf	?_get_vdc,w
  8066  0FCD  0023               	movlb	3	; select bank3
  8067  0FCE  00B2               	movwf	uart_task@val_1501^(0+384)
  8068                           
  8069                           ;UartParser.c: 184:                     rx_buffer[1] = (val>>8) & 0xFF;
  8070  0FCF  0833               	movf	(uart_task@val_1501^(0+384)+1),w
  8071  0FD0  0020               	movlb	0	; select bank0
  8072  0FD1  00DF               	movwf	??_uart_task
  8073  0FD2  085F               	movf	??_uart_task,w
  8074  0FD3  0022               	movlb	2	; select bank2
  8075  0FD4  00A1               	movwf	(UartParser@rx_buffer^(0+256)+1)
  8076                           
  8077                           ;UartParser.c: 185:                     rx_buffer[2] = val & 0xFF;
  8078  0FD5  0023               	movlb	3	; select bank3
  8079  0FD6  0832               	movf	uart_task@val_1501^(0+384),w
  8080  0FD7  0020               	movlb	0	; select bank0
  8081  0FD8  00DF               	movwf	??_uart_task
  8082  0FD9  085F               	movf	??_uart_task,w
  8083  0FDA  0022               	movlb	2	; select bank2
  8084  0FDB  00A2               	movwf	(UartParser@rx_buffer^(0+256)+2)
  8085                           
  8086                           ;UartParser.c: 186:                     rx_buffer[3] = rx_buffer[0] ^ rx_buffer[1] ^ rx_
      +                          buffer[2];
  8087  0FDC  0821               	movf	(UartParser@rx_buffer^(0+256)+1),w
  8088  0FDD  0622               	xorwf	(UartParser@rx_buffer^(0+256)+2),w
  8089  0FDE  0620               	xorwf	UartParser@rx_buffer^(0+256),w
  8090  0FDF  0020               	movlb	0	; select bank0
  8091  0FE0  00DF               	movwf	??_uart_task
  8092  0FE1  085F               	movf	??_uart_task,w
  8093  0FE2  0022               	movlb	2	; select bank2
  8094  0FE3  00A3               	movwf	(UartParser@rx_buffer^(0+256)+3)
  8095                           
  8096                           ;UartParser.c: 187:                     rx_idx = 4;
  8097  0FE4  3004               	movlw	4
  8098  0FE5  2FB1               	goto	L1
  8099  0FE6                     l4159:	
  8100                           
  8101                           ;UartParser.c: 198:     if( st == SEND_RESPONSE )
  8102  0FE6  3005               	movlw	5
  8103  0FE7  062D               	xorwf	UartParser@st,w
  8104  0FE8  1D03               	btfss	3,2
  8105  0FE9  0008               	return
  8106                           
  8107                           ;UartParser.c: 199:     {;UartParser.c: 200:         if( TX1STAbits.TRMT == 0 )
  8108  0FEA  0023               	movlb	3	; select bank3
  8109  0FEB  1C9E               	btfss	30,1	;volatile
  8110  0FEC  0008               	return
  8111                           
  8112                           ;UartParser.c: 202:         if( tx_idx < rx_idx )
  8113  0FED  0020               	movlb	0	; select bank0
  8114  0FEE  082F               	movf	UartParser@rx_idx,w
  8115  0FEF  022C               	subwf	UartParser@tx_idx,w
  8116  0FF0  1803               	skipnc
  8117  0FF1  2EEE               	goto	l4077
  8118                           
  8119                           ;UartParser.c: 203:             TX1REG = rx_buffer[tx_idx++];
  8120  0FF2  082C               	movf	UartParser@tx_idx,w
  8121  0FF3  3E20               	addlw	(low (UartParser@rx_buffer| (0+256)))& (0+255)
  8122  0FF4  0086               	movwf	6
  8123  0FF5  3001               	movlw	1	; select bank2/3
  8124  0FF6  0087               	movwf	7
  8125  0FF7  0801               	movf	1,w
  8126  0FF8  0023               	movlb	3	; select bank3
  8127  0FF9  009A               	movwf	26	;volatile
  8128  0FFA  3001               	movlw	1
  8129  0FFB  0020               	movlb	0	; select bank0
  8130  0FFC  00DF               	movwf	??_uart_task
  8131  0FFD  085F               	movf	??_uart_task,w
  8132  0FFE  07AC               	addwf	UartParser@tx_idx,f
  8133  0FFF  0008               	return
  8134  1000                     __end_of_uart_task:	
  8135                           
  8136                           	psect	text2
  8137  15ED                     __ptext2:	
  8138 ;; *************** function _stop_chopper *****************
  8139 ;; Defined at:
  8140 ;;		line 240 in file "vcontrol.c"
  8141 ;; Parameters:    Size  Location     Type
  8142 ;;		None
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;		None
  8145 ;; Return value:  Size  Location     Type
  8146 ;;                  1    wreg      void 
  8147 ;; Registers used:
  8148 ;;		wreg, status,2, status,0
  8149 ;; Tracked objects:
  8150 ;;		On entry : 1F/2
  8151 ;;		On exit  : 1F/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8158 ;;Total ram usage:        0 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; Hardware stack levels required when called:    5
  8161 ;; This function calls:
  8162 ;;		Nothing
  8163 ;; This function is called by:
  8164 ;;		_uart_task
  8165 ;; This function uses a non-reentrant model
  8166 ;;
  8167                           
  8168                           
  8169                           ;psect for function _stop_chopper
  8170  15ED                     _stop_chopper:	
  8171                           
  8172                           ;vcontrol.c: 242:     if( chopper_active == 0 )
  8173                           
  8174                           ;incstack = 0
  8175                           ; Regs used in _stop_chopper: [wreg+status,2+status,0]
  8176  15ED  0020               	movlb	0	; select bank0
  8177  15EE  0832               	movf	_chopper_active,w
  8178  15EF  1903               	btfsc	3,2
  8179  15F0  0008               	return
  8180                           
  8181                           ;vcontrol.c: 245:     TRISAbits.TRISA5 = 1;
  8182  15F1  0021               	movlb	1	; select bank1
  8183  15F2  168C               	bsf	12,5	;volatile
  8184                           
  8185                           ;vcontrol.c: 246:     TRISAbits.TRISA4 = 1;
  8186  15F3  160C               	bsf	12,4	;volatile
  8187                           
  8188                           ;vcontrol.c: 247:     target_duty = 0;
  8189  15F4  0020               	movlb	0	; select bank0
  8190  15F5  01A4               	clrf	_target_duty
  8191  15F6  01A5               	clrf	_target_duty+1
  8192                           
  8193                           ;vcontrol.c: 248:     chopper_active = 0;
  8194  15F7  01B2               	clrf	_chopper_active
  8195  15F8  0008               	return
  8196  15F9                     __end_of_stop_chopper:	
  8197                           
  8198                           	psect	text3
  8199  09E3                     __ptext3:	
  8200 ;; *************** function _save_to_flash *****************
  8201 ;; Defined at:
  8202 ;;		line 281 in file "vcontrol.c"
  8203 ;; Parameters:    Size  Location     Type
  8204 ;;		None
  8205 ;; Auto vars:     Size  Location     Type
  8206 ;;  buff           64    0[BANK1 ] unsigned short [32]
  8207 ;; Return value:  Size  Location     Type
  8208 ;;                  1    wreg      void 
  8209 ;; Registers used:
  8210 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8211 ;; Tracked objects:
  8212 ;;		On entry : 1F/0
  8213 ;;		On exit  : 1F/0
  8214 ;;		Unchanged: 0/0
  8215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;      Locals:         0       0      64       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;      Totals:         0       1      64       0       0       0       0       0       0       0       0       0       
      +0       0
  8220 ;;Total ram usage:       65 bytes
  8221 ;; Hardware stack levels used:    1
  8222 ;; Hardware stack levels required when called:    7
  8223 ;; This function calls:
  8224 ;;		_FLASH_WriteBlock
  8225 ;;		_get_relay_reset_voltage
  8226 ;;		_get_reset_duration
  8227 ;; This function is called by:
  8228 ;;		_uart_task
  8229 ;; This function uses a non-reentrant model
  8230 ;;
  8231                           
  8232                           
  8233                           ;psect for function _save_to_flash
  8234  09E3                     _save_to_flash:	
  8235                           
  8236                           ;vcontrol.c: 283:     uint16_t buff[32];;vcontrol.c: 284:     if( chopper_active == 1 )
  8237                           
  8238                           ;incstack = 0
  8239                           ; Regs used in _save_to_flash: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8240  09E3  0332               	decf	_chopper_active,w
  8241  09E4  1D03               	btfss	3,2
  8242  09E5  29EB               	goto	l3857
  8243                           
  8244                           ;vcontrol.c: 285:         buff[0] = 0x0ABC;
  8245  09E6  30BC               	movlw	188
  8246  09E7  0021               	movlb	1	; select bank1
  8247  09E8  00A0               	movwf	save_to_flash@buff^(0+128)
  8248  09E9  300A               	movlw	10
  8249  09EA  29EF               	goto	L2
  8250  09EB                     l3857:	
  8251                           
  8252                           ;vcontrol.c: 287:         buff[0] = 0x0CBA;
  8253  09EB  30BA               	movlw	186
  8254  09EC  0021               	movlb	1	; select bank1
  8255  09ED  00A0               	movwf	save_to_flash@buff^(0+128)
  8256  09EE  300C               	movlw	12
  8257  09EF                     L2:	
  8258  09EF  00A1               	movwf	(save_to_flash@buff^(0+128)+1)
  8259                           
  8260                           ;vcontrol.c: 288:     buff[1] = vdc_min;
  8261  09F0  0020               	movlb	0	; select bank0
  8262  09F1  0847               	movf	_vdc_min+1,w
  8263  09F2  0021               	movlb	1	; select bank1
  8264  09F3  00A3               	movwf	((save_to_flash@buff+1)^(0+128)+2)
  8265  09F4  0020               	movlb	0	; select bank0
  8266  09F5  0846               	movf	_vdc_min,w
  8267  09F6  0021               	movlb	1	; select bank1
  8268  09F7  00A2               	movwf	(save_to_flash@buff^(0+128)+2)
  8269                           
  8270                           ;vcontrol.c: 289:     buff[2] = vdc_max;
  8271  09F8  0020               	movlb	0	; select bank0
  8272  09F9  0845               	movf	_vdc_max+1,w
  8273  09FA  0021               	movlb	1	; select bank1
  8274  09FB  00A5               	movwf	((save_to_flash@buff+1)^(0+128)+4)
  8275  09FC  0020               	movlb	0	; select bank0
  8276  09FD  0844               	movf	_vdc_max,w
  8277  09FE  0021               	movlb	1	; select bank1
  8278  09FF  00A4               	movwf	(save_to_flash@buff^(0+128)+4)
  8279                           
  8280                           ;vcontrol.c: 290:     buff[3] = vdc_critic;
  8281  0A00  0020               	movlb	0	; select bank0
  8282  0A01  0843               	movf	_vdc_critic+1,w
  8283  0A02  0021               	movlb	1	; select bank1
  8284  0A03  00A7               	movwf	((save_to_flash@buff+1)^(0+128)+6)
  8285  0A04  0020               	movlb	0	; select bank0
  8286  0A05  0842               	movf	_vdc_critic,w
  8287  0A06  0021               	movlb	1	; select bank1
  8288  0A07  00A6               	movwf	(save_to_flash@buff^(0+128)+6)
  8289                           
  8290                           ;vcontrol.c: 291:     buff[4] = duty_count_up_max;
  8291  0A08  086F               	movf	(_duty_count_up_max+1)^(0+128),w
  8292  0A09  00A9               	movwf	((save_to_flash@buff+1)^(0+128)+8)
  8293  0A0A  086E               	movf	_duty_count_up_max^(0+128),w
  8294  0A0B  00A8               	movwf	(save_to_flash@buff^(0+128)+8)
  8295                           
  8296                           ;vcontrol.c: 292:     buff[5] = get_relay_reset_voltage();
  8297  0A0C  3195  2533  3189   	fcall	_get_relay_reset_voltage
  8298  0A0F  0852               	movf	?_get_relay_reset_voltage+1,w
  8299  0A10  0021               	movlb	1	; select bank1
  8300  0A11  00AB               	movwf	((save_to_flash@buff+1)^(0+128)+10)
  8301  0A12  0020               	movlb	0	; select bank0
  8302  0A13  0851               	movf	?_get_relay_reset_voltage,w
  8303  0A14  0021               	movlb	1	; select bank1
  8304  0A15  00AA               	movwf	(save_to_flash@buff^(0+128)+10)
  8305                           
  8306                           ;vcontrol.c: 293:     buff[6] = get_reset_duration();
  8307  0A16  3195  258B  3189   	fcall	_get_reset_duration
  8308  0A19  0852               	movf	?_get_reset_duration+1,w
  8309  0A1A  0021               	movlb	1	; select bank1
  8310  0A1B  00AD               	movwf	((save_to_flash@buff+1)^(0+128)+12)
  8311  0A1C  0020               	movlb	0	; select bank0
  8312  0A1D  0851               	movf	?_get_reset_duration,w
  8313  0A1E  0021               	movlb	1	; select bank1
  8314  0A1F  00AC               	movwf	(save_to_flash@buff^(0+128)+12)
  8315                           
  8316                           ;vcontrol.c: 294:     FLASH_WriteBlock(0x1F00,buff);
  8317  0A20  3000               	movlw	0
  8318  0A21  0020               	movlb	0	; select bank0
  8319  0A22  00D4               	movwf	FLASH_WriteBlock@writeAddr
  8320  0A23  301F               	movlw	31
  8321  0A24  00D5               	movwf	FLASH_WriteBlock@writeAddr+1
  8322  0A25  30A0               	movlw	(low (save_to_flash@buff| 0))& (0+255)
  8323  0A26  00DE               	movwf	??_save_to_flash
  8324  0A27  085E               	movf	??_save_to_flash,w
  8325  0A28  00D6               	movwf	FLASH_WriteBlock@flashWordArray
  8326  0A29  318A  22D3         	fcall	_FLASH_WriteBlock
  8327  0A2B  0008               	return
  8328  0A2C                     __end_of_save_to_flash:	
  8329                           
  8330                           	psect	text4
  8331  158B                     __ptext4:	
  8332 ;; *************** function _get_reset_duration *****************
  8333 ;; Defined at:
  8334 ;;		line 74 in file "SolidStateRelay.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;		None
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;		None
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  2    9[BANK0 ] unsigned short 
  8341 ;; Registers used:
  8342 ;;		wreg
  8343 ;; Tracked objects:
  8344 ;;		On entry : 1C/2
  8345 ;;		On exit  : 1F/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8348 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;Total ram usage:        2 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    5
  8355 ;; This function calls:
  8356 ;;		Nothing
  8357 ;; This function is called by:
  8358 ;;		_save_to_flash
  8359 ;;		_uart_task
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           
  8364                           ;psect for function _get_reset_duration
  8365  158B                     _get_reset_duration:	
  8366                           
  8367                           ;SolidStateRelay.c: 76:     return reset_duration;
  8368                           
  8369                           ;incstack = 0
  8370                           ; Regs used in _get_reset_duration: [wreg]
  8371  158B  0021               	movlb	1	; select bank1
  8372  158C  0863               	movf	(_reset_duration+1)^(0+128),w
  8373  158D  0020               	movlb	0	; select bank0
  8374  158E  00D2               	movwf	?_get_reset_duration+1
  8375  158F  0021               	movlb	1	; select bank1
  8376  1590  0862               	movf	_reset_duration^(0+128),w
  8377  1591  0020               	movlb	0	; select bank0
  8378  1592  00D1               	movwf	?_get_reset_duration
  8379  1593  0008               	return
  8380  1594                     __end_of_get_reset_duration:	
  8381                           
  8382                           	psect	text5
  8383  1533                     __ptext5:	
  8384 ;; *************** function _get_relay_reset_voltage *****************
  8385 ;; Defined at:
  8386 ;;		line 69 in file "SolidStateRelay.c"
  8387 ;; Parameters:    Size  Location     Type
  8388 ;;		None
  8389 ;; Auto vars:     Size  Location     Type
  8390 ;;		None
  8391 ;; Return value:  Size  Location     Type
  8392 ;;                  2    9[BANK0 ] unsigned short 
  8393 ;; Registers used:
  8394 ;;		wreg
  8395 ;; Tracked objects:
  8396 ;;		On entry : 1C/2
  8397 ;;		On exit  : 1F/0
  8398 ;;		Unchanged: 0/0
  8399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8400 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8404 ;;Total ram usage:        2 bytes
  8405 ;; Hardware stack levels used:    1
  8406 ;; Hardware stack levels required when called:    5
  8407 ;; This function calls:
  8408 ;;		Nothing
  8409 ;; This function is called by:
  8410 ;;		_save_to_flash
  8411 ;;		_uart_task
  8412 ;; This function uses a non-reentrant model
  8413 ;;
  8414                           
  8415                           
  8416                           ;psect for function _get_relay_reset_voltage
  8417  1533                     _get_relay_reset_voltage:	
  8418                           
  8419                           ;SolidStateRelay.c: 71:     return relay_reset_voltage;
  8420                           
  8421                           ;incstack = 0
  8422                           ; Regs used in _get_relay_reset_voltage: [wreg]
  8423  1533  0020               	movlb	0	; select bank0
  8424  1534  0821               	movf	_relay_reset_voltage+1,w
  8425  1535  00D2               	movwf	?_get_relay_reset_voltage+1
  8426  1536  0820               	movf	_relay_reset_voltage,w
  8427  1537  00D1               	movwf	?_get_relay_reset_voltage
  8428  1538  0008               	return
  8429  1539                     __end_of_get_relay_reset_voltage:	
  8430                           
  8431                           	psect	text6
  8432  0AD3                     __ptext6:	
  8433 ;; *************** function _FLASH_WriteBlock *****************
  8434 ;; Defined at:
  8435 ;;		line 95 in file "mcc_generated_files/memory.c"
  8436 ;; Parameters:    Size  Location     Type
  8437 ;;  writeAddr       2   12[BANK0 ] unsigned short 
  8438 ;;  flashWordArr    1   14[BANK0 ] PTR unsigned short 
  8439 ;;		 -> save_to_flash@buff(64), 
  8440 ;; Auto vars:     Size  Location     Type
  8441 ;;  blockStartAd    2   18[BANK0 ] unsigned short 
  8442 ;;  i               1   21[BANK0 ] unsigned char 
  8443 ;;  GIEBitValue     1   20[BANK0 ] unsigned char 
  8444 ;; Return value:  Size  Location     Type
  8445 ;;                  1    wreg      char 
  8446 ;; Registers used:
  8447 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8448 ;; Tracked objects:
  8449 ;;		On entry : 1F/0
  8450 ;;		On exit  : 1F/0
  8451 ;;		Unchanged: 0/0
  8452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8453 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8454 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8455 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8456 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8457 ;;Total ram usage:       10 bytes
  8458 ;; Hardware stack levels used:    1
  8459 ;; Hardware stack levels required when called:    6
  8460 ;; This function calls:
  8461 ;;		_FLASH_EraseBlock
  8462 ;; This function is called by:
  8463 ;;		_save_to_flash
  8464 ;; This function uses a non-reentrant model
  8465 ;;
  8466                           
  8467                           
  8468                           ;psect for function _FLASH_WriteBlock
  8469  0AD3                     _FLASH_WriteBlock:	
  8470                           
  8471                           ;mcc_generated_files/memory.c: 95: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 96: {;mcc_generated_files/memory.c: 97:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x2000 -1) ^ (32 -1)));
  8472                           
  8473                           ;incstack = 0
  8474                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8475  0AD3  30E0               	movlw	224
  8476  0AD4  0554               	andwf	FLASH_WriteBlock@writeAddr,w
  8477  0AD5  00DA               	movwf	FLASH_WriteBlock@blockStartAddr
  8478  0AD6  301F               	movlw	31
  8479  0AD7  0555               	andwf	FLASH_WriteBlock@writeAddr+1,w
  8480  0AD8  00DB               	movwf	FLASH_WriteBlock@blockStartAddr+1
  8481                           
  8482                           ;mcc_generated_files/memory.c: 98:     uint8_t GIEBitValue = INTCONbits.GIE;
  8483  0AD9  3000               	movlw	0
  8484  0ADA  1B8B               	btfsc	11,7	;volatile
  8485  0ADB  3001               	movlw	1
  8486  0ADC  00DC               	movwf	FLASH_WriteBlock@GIEBitValue
  8487                           
  8488                           ;mcc_generated_files/memory.c: 99:     uint8_t i;;mcc_generated_files/memory.c: 102:    
      +                           if( writeAddr != blockStartAddr )
  8489  0ADD  085B               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  8490  0ADE  0655               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  8491  0ADF  1D03               	skipz
  8492  0AE0  2AE3               	goto	u2425
  8493  0AE1  085A               	movf	FLASH_WriteBlock@blockStartAddr,w
  8494  0AE2  0654               	xorwf	FLASH_WriteBlock@writeAddr,w
  8495  0AE3                     u2425:	
  8496  0AE3  1D03               	btfss	3,2
  8497  0AE4  0008               	return
  8498                           
  8499                           ;mcc_generated_files/memory.c: 107:     INTCONbits.GIE = 0;
  8500                           
  8501                           ;mcc_generated_files/memory.c: 105:     }
  8502  0AE5  138B               	bcf	11,7	;volatile
  8503                           
  8504                           ;mcc_generated_files/memory.c: 110:     FLASH_EraseBlock(writeAddr);
  8505  0AE6  0855               	movf	FLASH_WriteBlock@writeAddr+1,w
  8506  0AE7  00D2               	movwf	FLASH_EraseBlock@startAddr+1
  8507  0AE8  0854               	movf	FLASH_WriteBlock@writeAddr,w
  8508  0AE9  00D1               	movwf	FLASH_EraseBlock@startAddr
  8509  0AEA  3197  2774  318A   	fcall	_FLASH_EraseBlock
  8510                           
  8511                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.CFGS = 0;
  8512  0AED  0023               	movlb	3	; select bank3
  8513  0AEE  1315               	bcf	21,6	;volatile
  8514                           
  8515                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.WREN = 1;
  8516  0AEF  1515               	bsf	21,2	;volatile
  8517                           
  8518                           ;mcc_generated_files/memory.c: 115:     PMCON1bits.LWLO = 1;
  8519  0AF0  1695               	bsf	21,5	;volatile
  8520                           
  8521                           ;mcc_generated_files/memory.c: 117:     for (i=0; i<32; i++)
  8522  0AF1  0020               	movlb	0	; select bank0
  8523  0AF2  01DD               	clrf	FLASH_WriteBlock@i
  8524  0AF3                     l3691:	
  8525                           
  8526                           ;mcc_generated_files/memory.c: 118:     {;mcc_generated_files/memory.c: 120:         PMA
      +                          DRL = (writeAddr & 0xFF);
  8527  0AF3  0854               	movf	FLASH_WriteBlock@writeAddr,w
  8528  0AF4  0023               	movlb	3	; select bank3
  8529  0AF5  0091               	movwf	17	;volatile
  8530                           
  8531                           ;mcc_generated_files/memory.c: 122:         PMADRH = ((writeAddr & 0xFF00) >> 8);
  8532  0AF6  0020               	movlb	0	; select bank0
  8533  0AF7  0855               	movf	FLASH_WriteBlock@writeAddr+1,w
  8534  0AF8  0023               	movlb	3	; select bank3
  8535  0AF9  0092               	movwf	18	;volatile
  8536                           
  8537                           ;mcc_generated_files/memory.c: 125:         PMDATL = flashWordArray[i];
  8538  0AFA  0020               	movlb	0	; select bank0
  8539  0AFB  355D               	lslf	FLASH_WriteBlock@i,w
  8540  0AFC  0756               	addwf	FLASH_WriteBlock@flashWordArray,w
  8541  0AFD  00D7               	movwf	??_FLASH_WriteBlock
  8542  0AFE  0857               	movf	??_FLASH_WriteBlock,w
  8543  0AFF  0086               	movwf	6
  8544  0B00  0187               	clrf	7
  8545  0B01  0801               	movf	1,w
  8546  0B02  0023               	movlb	3	; select bank3
  8547  0B03  0093               	movwf	19	;volatile
  8548                           
  8549                           ;mcc_generated_files/memory.c: 126:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
  8550  0B04  0020               	movlb	0	; select bank0
  8551  0B05  355D               	lslf	FLASH_WriteBlock@i,w
  8552  0B06  0756               	addwf	FLASH_WriteBlock@flashWordArray,w
  8553  0B07  00D7               	movwf	??_FLASH_WriteBlock
  8554  0B08  0857               	movf	??_FLASH_WriteBlock,w
  8555  0B09  0086               	movwf	6
  8556  0B0A  0187               	clrf	7
  8557  0B0B  3F40               	moviw [0]fsr1
  8558  0B0C  00D8               	movwf	??_FLASH_WriteBlock+1
  8559  0B0D  3F41               	moviw [1]fsr1
  8560  0B0E  00D9               	movwf	??_FLASH_WriteBlock+2
  8561  0B0F  0859               	movf	??_FLASH_WriteBlock+2,w
  8562  0B10  0023               	movlb	3	; select bank3
  8563  0B11  0094               	movwf	20	;volatile
  8564                           
  8565                           ;mcc_generated_files/memory.c: 128:         if(i == (32 -1))
  8566  0B12  301F               	movlw	31
  8567  0B13  0020               	movlb	0	; select bank0
  8568  0B14  065D               	xorwf	FLASH_WriteBlock@i,w
  8569  0B15  1D03               	btfss	3,2
  8570  0B16  2B19               	goto	l3701
  8571                           
  8572                           ;mcc_generated_files/memory.c: 129:         {;mcc_generated_files/memory.c: 131:        
      +                               PMCON1bits.LWLO = 0;
  8573  0B17  0023               	movlb	3	; select bank3
  8574  0B18  1295               	bcf	21,5	;volatile
  8575  0B19                     l3701:	
  8576                           
  8577                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0x55;
  8578  0B19  3055               	movlw	85
  8579  0B1A  0023               	movlb	3	; select bank3
  8580  0B1B  0096               	movwf	22	;volsfr
  8581                           
  8582                           ;mcc_generated_files/memory.c: 135:         PMCON2 = 0xAA;
  8583  0B1C  30AA               	movlw	170
  8584  0B1D  0096               	movwf	22	;volsfr
  8585                           
  8586                           ;mcc_generated_files/memory.c: 136:         PMCON1bits.WR = 1;
  8587  0B1E  1495               	bsf	21,1	;volatile
  8588                           
  8589                           ;mcc_generated_files/memory.c: 137:         __nop();
  8590  0B1F  0000               	nop
  8591                           
  8592                           ;mcc_generated_files/memory.c: 138:         __nop();
  8593  0B20  0000               	nop
  8594                           
  8595                           ;mcc_generated_files/memory.c: 140:  writeAddr++;
  8596  0B21  3001               	movlw	1
  8597  0B22  0020               	movlb	0	; select bank0
  8598  0B23  07D4               	addwf	FLASH_WriteBlock@writeAddr,f
  8599  0B24  3000               	movlw	0
  8600  0B25  3DD5               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  8601  0B26  0064               	clrwdt	;# 
  8602                           
  8603                           ;mcc_generated_files/memory.c: 142:     }
  8604  0B27  3001               	movlw	1
  8605  0B28  0020               	movlb	0	; select bank0
  8606  0B29  00D7               	movwf	??_FLASH_WriteBlock
  8607  0B2A  0857               	movf	??_FLASH_WriteBlock,w
  8608  0B2B  07DD               	addwf	FLASH_WriteBlock@i,f
  8609  0B2C  3020               	movlw	32
  8610  0B2D  025D               	subwf	FLASH_WriteBlock@i,w
  8611  0B2E  1C03               	skipc
  8612  0B2F  2AF3               	goto	l3691
  8613                           
  8614                           ;mcc_generated_files/memory.c: 144:     PMCON1bits.WREN = 0;
  8615  0B30  0023               	movlb	3	; select bank3
  8616  0B31  1115               	bcf	21,2	;volatile
  8617                           
  8618                           ;mcc_generated_files/memory.c: 145:     INTCONbits.GIE = GIEBitValue;
  8619  0B32  0020               	movlb	0	; select bank0
  8620  0B33  0C5C               	rrf	FLASH_WriteBlock@GIEBitValue,w
  8621  0B34  1C03               	skipc
  8622  0B35  138B               	bcf	11,7	;volatile
  8623  0B36  1803               	skipnc
  8624  0B37  178B               	bsf	11,7	;volatile
  8625  0B38  0008               	return
  8626  0B39                     __end_of_FLASH_WriteBlock:	
  8627                           
  8628                           	psect	text7
  8629  1774                     __ptext7:	
  8630 ;; *************** function _FLASH_EraseBlock *****************
  8631 ;; Defined at:
  8632 ;;		line 150 in file "mcc_generated_files/memory.c"
  8633 ;; Parameters:    Size  Location     Type
  8634 ;;  startAddr       2    9[BANK0 ] unsigned short 
  8635 ;; Auto vars:     Size  Location     Type
  8636 ;;  GIEBitValue     1   11[BANK0 ] unsigned char 
  8637 ;; Return value:  Size  Location     Type
  8638 ;;                  1    wreg      void 
  8639 ;; Registers used:
  8640 ;;		wreg, status,2, status,0
  8641 ;; Tracked objects:
  8642 ;;		On entry : 1F/0
  8643 ;;		On exit  : 1F/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8646 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;Total ram usage:        3 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; Hardware stack levels required when called:    5
  8653 ;; This function calls:
  8654 ;;		Nothing
  8655 ;; This function is called by:
  8656 ;;		_FLASH_WriteBlock
  8657 ;; This function uses a non-reentrant model
  8658 ;;
  8659                           
  8660                           
  8661                           ;psect for function _FLASH_EraseBlock
  8662  1774                     _FLASH_EraseBlock:	
  8663                           
  8664                           ;mcc_generated_files/memory.c: 150: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 151: {;mcc_generated_files/memory.c: 152:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
  8665                           
  8666                           ;incstack = 0
  8667                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  8668  1774  3000               	movlw	0
  8669  1775  1B8B               	btfsc	11,7	;volatile
  8670  1776  3001               	movlw	1
  8671  1777  00D3               	movwf	FLASH_EraseBlock@GIEBitValue
  8672                           
  8673                           ;mcc_generated_files/memory.c: 155:     INTCONbits.GIE = 0;
  8674  1778  138B               	bcf	11,7	;volatile
  8675                           
  8676                           ;mcc_generated_files/memory.c: 157:     PMADRL = (startAddr & 0xFF);
  8677  1779  0851               	movf	FLASH_EraseBlock@startAddr,w
  8678  177A  0023               	movlb	3	; select bank3
  8679  177B  0091               	movwf	17	;volatile
  8680                           
  8681                           ;mcc_generated_files/memory.c: 159:     PMADRH = ((startAddr & 0xFF00) >> 8);
  8682  177C  0020               	movlb	0	; select bank0
  8683  177D  0852               	movf	FLASH_EraseBlock@startAddr+1,w
  8684  177E  0023               	movlb	3	; select bank3
  8685  177F  0092               	movwf	18	;volatile
  8686                           
  8687                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.CFGS = 0;
  8688  1780  1315               	bcf	21,6	;volatile
  8689                           
  8690                           ;mcc_generated_files/memory.c: 163:     PMCON1bits.FREE = 1;
  8691  1781  1615               	bsf	21,4	;volatile
  8692                           
  8693                           ;mcc_generated_files/memory.c: 164:     PMCON1bits.WREN = 1;
  8694  1782  1515               	bsf	21,2	;volatile
  8695                           
  8696                           ;mcc_generated_files/memory.c: 167:     PMCON2 = 0x55;
  8697  1783  3055               	movlw	85
  8698  1784  0096               	movwf	22	;volsfr
  8699                           
  8700                           ;mcc_generated_files/memory.c: 168:     PMCON2 = 0xAA;
  8701  1785  30AA               	movlw	170
  8702  1786  0096               	movwf	22	;volsfr
  8703                           
  8704                           ;mcc_generated_files/memory.c: 169:     PMCON1bits.WR = 1;
  8705  1787  1495               	bsf	21,1	;volatile
  8706                           
  8707                           ;mcc_generated_files/memory.c: 170:     __nop();
  8708  1788  0000               	nop
  8709                           
  8710                           ;mcc_generated_files/memory.c: 171:     __nop();
  8711  1789  0000               	nop
  8712                           
  8713                           ;mcc_generated_files/memory.c: 173:     PMCON1bits.WREN = 0;
  8714  178A  0023               	movlb	3	; select bank3
  8715  178B  1115               	bcf	21,2	;volatile
  8716                           
  8717                           ;mcc_generated_files/memory.c: 174:     INTCONbits.GIE = GIEBitValue;
  8718  178C  0020               	movlb	0	; select bank0
  8719  178D  0C53               	rrf	FLASH_EraseBlock@GIEBitValue,w
  8720  178E  1C03               	skipc
  8721  178F  138B               	bcf	11,7	;volatile
  8722  1790  1803               	skipnc
  8723  1791  178B               	bsf	11,7	;volatile
  8724  1792  0008               	return
  8725  1793                     __end_of_FLASH_EraseBlock:	
  8726                           
  8727                           	psect	text8
  8728  14F4                     __ptext8:	
  8729 ;; *************** function _is_chopper_active *****************
  8730 ;; Defined at:
  8731 ;;		line 252 in file "vcontrol.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;		None
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;		None
  8736 ;; Return value:  Size  Location     Type
  8737 ;;                  1    wreg      _Bool 
  8738 ;; Registers used:
  8739 ;;		wreg
  8740 ;; Tracked objects:
  8741 ;;		On entry : 1F/2
  8742 ;;		On exit  : 1F/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8749 ;;Total ram usage:        0 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    5
  8752 ;; This function calls:
  8753 ;;		Nothing
  8754 ;; This function is called by:
  8755 ;;		_uart_task
  8756 ;; This function uses a non-reentrant model
  8757 ;;
  8758                           
  8759                           
  8760                           ;psect for function _is_chopper_active
  8761  14F4                     _is_chopper_active:	
  8762                           
  8763                           ;vcontrol.c: 254:     return chopper_active;
  8764                           
  8765                           ;incstack = 0
  8766                           ; Regs used in _is_chopper_active: [wreg]
  8767  14F4  0020               	movlb	0	; select bank0
  8768  14F5  0832               	movf	_chopper_active,w
  8769  14F6  0008               	return
  8770  14F7                     __end_of_is_chopper_active:	
  8771                           
  8772                           	psect	text9
  8773  1647                     __ptext9:	
  8774 ;; *************** function _get_vdc_speed *****************
  8775 ;; Defined at:
  8776 ;;		line 312 in file "vcontrol.c"
  8777 ;; Parameters:    Size  Location     Type
  8778 ;;		None
  8779 ;; Auto vars:     Size  Location     Type
  8780 ;;		None
  8781 ;; Return value:  Size  Location     Type
  8782 ;;                  2   15[BANK0 ] unsigned short 
  8783 ;; Registers used:
  8784 ;;		wreg, status,2, status,0, pclath, cstack
  8785 ;; Tracked objects:
  8786 ;;		On entry : 1F/2
  8787 ;;		On exit  : 1F/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8790 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;Total ram usage:        2 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; Hardware stack levels required when called:    6
  8797 ;; This function calls:
  8798 ;;		___wmul
  8799 ;; This function is called by:
  8800 ;;		_uart_task
  8801 ;; This function uses a non-reentrant model
  8802 ;;
  8803                           
  8804                           
  8805                           ;psect for function _get_vdc_speed
  8806  1647                     _get_vdc_speed:	
  8807                           
  8808                           ;vcontrol.c: 315:     return (duty_count_up_max + 1)*100;
  8809                           
  8810                           ;incstack = 0
  8811                           ; Regs used in _get_vdc_speed: [wreg+status,2+status,0+pclath+cstack]
  8812  1647  0021               	movlb	1	; select bank1
  8813  1648  086E               	movf	_duty_count_up_max^(0+128),w
  8814  1649  3E01               	addlw	1
  8815  164A  0020               	movlb	0	; select bank0
  8816  164B  00D1               	movwf	___wmul@multiplier
  8817  164C  3000               	movlw	0
  8818  164D  0021               	movlb	1	; select bank1
  8819  164E  3D6F               	addwfc	(_duty_count_up_max+1)^(0+128),w
  8820  164F  0020               	movlb	0	; select bank0
  8821  1650  00D2               	movwf	___wmul@multiplier+1
  8822  1651  3064               	movlw	100
  8823  1652  00D3               	movwf	___wmul@multiplicand
  8824  1653  3000               	movlw	0
  8825  1654  00D4               	movwf	___wmul@multiplicand+1
  8826  1655  3197  2702         	fcall	___wmul
  8827  1657  0852               	movf	?___wmul+1,w
  8828  1658  00D8               	movwf	?_get_vdc_speed+1
  8829  1659  0851               	movf	?___wmul,w
  8830  165A  00D7               	movwf	?_get_vdc_speed
  8831  165B  0008               	return
  8832  165C                     __end_of_get_vdc_speed:	
  8833                           
  8834                           	psect	text10
  8835  1702                     __ptext10:	
  8836 ;; *************** function ___wmul *****************
  8837 ;; Defined at:
  8838 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;  multiplier      2    9[BANK0 ] unsigned int 
  8841 ;;  multiplicand    2   11[BANK0 ] unsigned int 
  8842 ;; Auto vars:     Size  Location     Type
  8843 ;;  product         2   13[BANK0 ] unsigned int 
  8844 ;; Return value:  Size  Location     Type
  8845 ;;                  2    9[BANK0 ] unsigned int 
  8846 ;; Registers used:
  8847 ;;		wreg, status,2, status,0
  8848 ;; Tracked objects:
  8849 ;;		On entry : 1F/0
  8850 ;;		On exit  : 1F/0
  8851 ;;		Unchanged: 0/0
  8852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8853 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8854 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8856 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8857 ;;Total ram usage:        6 bytes
  8858 ;; Hardware stack levels used:    1
  8859 ;; Hardware stack levels required when called:    5
  8860 ;; This function calls:
  8861 ;;		Nothing
  8862 ;; This function is called by:
  8863 ;;		_get_vdc_speed
  8864 ;; This function uses a non-reentrant model
  8865 ;;
  8866                           
  8867                           
  8868                           ;psect for function ___wmul
  8869  1702                     ___wmul:	
  8870                           
  8871                           ;incstack = 0
  8872                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8873  1702  01D5               	clrf	___wmul@product
  8874  1703  01D6               	clrf	___wmul@product+1
  8875  1704                     l3755:	
  8876  1704  1C51               	btfss	___wmul@multiplier,0
  8877  1705  2F0A               	goto	l1187
  8878  1706  0853               	movf	___wmul@multiplicand,w
  8879  1707  07D5               	addwf	___wmul@product,f
  8880  1708  0854               	movf	___wmul@multiplicand+1,w
  8881  1709  3DD6               	addwfc	___wmul@product+1,f
  8882  170A                     l1187:	
  8883  170A  3001               	movlw	1
  8884  170B                     u2495:	
  8885  170B  35D3               	lslf	___wmul@multiplicand,f
  8886  170C  0DD4               	rlf	___wmul@multiplicand+1,f
  8887  170D  0B89               	decfsz	9,f
  8888  170E  2F0B               	goto	u2495
  8889  170F  3001               	movlw	1
  8890  1710                     u2505:	
  8891  1710  36D2               	lsrf	___wmul@multiplier+1,f
  8892  1711  0CD1               	rrf	___wmul@multiplier,f
  8893  1712  0B89               	decfsz	9,f
  8894  1713  2F10               	goto	u2505
  8895  1714  0851               	movf	___wmul@multiplier,w
  8896  1715  0452               	iorwf	___wmul@multiplier+1,w
  8897  1716  1D03               	btfss	3,2
  8898  1717  2F04               	goto	l3755
  8899  1718  0856               	movf	___wmul@product+1,w
  8900  1719  00D2               	movwf	?___wmul+1
  8901  171A  0855               	movf	___wmul@product,w
  8902  171B  00D1               	movwf	?___wmul
  8903  171C  0008               	return
  8904  171D                     __end_of___wmul:	
  8905                           
  8906                           	psect	text11
  8907  1510                     __ptext11:	
  8908 ;; *************** function _get_vdc_min *****************
  8909 ;; Defined at:
  8910 ;;		line 297 in file "vcontrol.c"
  8911 ;; Parameters:    Size  Location     Type
  8912 ;;		None
  8913 ;; Auto vars:     Size  Location     Type
  8914 ;;		None
  8915 ;; Return value:  Size  Location     Type
  8916 ;;                  2    9[BANK0 ] unsigned short 
  8917 ;; Registers used:
  8918 ;;		wreg
  8919 ;; Tracked objects:
  8920 ;;		On entry : 1F/0
  8921 ;;		On exit  : 1F/0
  8922 ;;		Unchanged: 0/0
  8923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8924 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8928 ;;Total ram usage:        2 bytes
  8929 ;; Hardware stack levels used:    1
  8930 ;; Hardware stack levels required when called:    5
  8931 ;; This function calls:
  8932 ;;		Nothing
  8933 ;; This function is called by:
  8934 ;;		_uart_task
  8935 ;; This function uses a non-reentrant model
  8936 ;;
  8937                           
  8938                           
  8939                           ;psect for function _get_vdc_min
  8940  1510                     _get_vdc_min:	
  8941                           
  8942                           ;vcontrol.c: 299:     return vdc_min;
  8943                           
  8944                           ;incstack = 0
  8945                           ; Regs used in _get_vdc_min: [wreg]
  8946  1510  0847               	movf	_vdc_min+1,w
  8947  1511  00D2               	movwf	?_get_vdc_min+1
  8948  1512  0846               	movf	_vdc_min,w
  8949  1513  00D1               	movwf	?_get_vdc_min
  8950  1514  0008               	return
  8951  1515                     __end_of_get_vdc_min:	
  8952                           
  8953                           	psect	text12
  8954  152D                     __ptext12:	
  8955 ;; *************** function _get_vdc_max *****************
  8956 ;; Defined at:
  8957 ;;		line 302 in file "vcontrol.c"
  8958 ;; Parameters:    Size  Location     Type
  8959 ;;		None
  8960 ;; Auto vars:     Size  Location     Type
  8961 ;;		None
  8962 ;; Return value:  Size  Location     Type
  8963 ;;                  2    9[BANK0 ] unsigned short 
  8964 ;; Registers used:
  8965 ;;		wreg
  8966 ;; Tracked objects:
  8967 ;;		On entry : 1F/2
  8968 ;;		On exit  : 1F/0
  8969 ;;		Unchanged: 0/0
  8970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8971 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;Total ram usage:        2 bytes
  8976 ;; Hardware stack levels used:    1
  8977 ;; Hardware stack levels required when called:    5
  8978 ;; This function calls:
  8979 ;;		Nothing
  8980 ;; This function is called by:
  8981 ;;		_uart_task
  8982 ;; This function uses a non-reentrant model
  8983 ;;
  8984                           
  8985                           
  8986                           ;psect for function _get_vdc_max
  8987  152D                     _get_vdc_max:	
  8988                           
  8989                           ;vcontrol.c: 304:     return vdc_max;
  8990                           
  8991                           ;incstack = 0
  8992                           ; Regs used in _get_vdc_max: [wreg]
  8993  152D  0020               	movlb	0	; select bank0
  8994  152E  0845               	movf	_vdc_max+1,w
  8995  152F  00D2               	movwf	?_get_vdc_max+1
  8996  1530  0844               	movf	_vdc_max,w
  8997  1531  00D1               	movwf	?_get_vdc_max
  8998  1532  0008               	return
  8999  1533                     __end_of_get_vdc_max:	
  9000                           
  9001                           	psect	text13
  9002  1527                     __ptext13:	
  9003 ;; *************** function _get_vdc_critic *****************
  9004 ;; Defined at:
  9005 ;;		line 307 in file "vcontrol.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;		None
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;		None
  9010 ;; Return value:  Size  Location     Type
  9011 ;;                  2    9[BANK0 ] unsigned short 
  9012 ;; Registers used:
  9013 ;;		wreg
  9014 ;; Tracked objects:
  9015 ;;		On entry : 1F/2
  9016 ;;		On exit  : 1F/0
  9017 ;;		Unchanged: 0/0
  9018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9019 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9023 ;;Total ram usage:        2 bytes
  9024 ;; Hardware stack levels used:    1
  9025 ;; Hardware stack levels required when called:    5
  9026 ;; This function calls:
  9027 ;;		Nothing
  9028 ;; This function is called by:
  9029 ;;		_uart_task
  9030 ;; This function uses a non-reentrant model
  9031 ;;
  9032                           
  9033                           
  9034                           ;psect for function _get_vdc_critic
  9035  1527                     _get_vdc_critic:	
  9036                           
  9037                           ;vcontrol.c: 309:     return vdc_critic;
  9038                           
  9039                           ;incstack = 0
  9040                           ; Regs used in _get_vdc_critic: [wreg]
  9041  1527  0020               	movlb	0	; select bank0
  9042  1528  0843               	movf	_vdc_critic+1,w
  9043  1529  00D2               	movwf	?_get_vdc_critic+1
  9044  152A  0842               	movf	_vdc_critic,w
  9045  152B  00D1               	movwf	?_get_vdc_critic
  9046  152C  0008               	return
  9047  152D                     __end_of_get_vdc_critic:	
  9048                           
  9049                           	psect	text14
  9050  1688                     __ptext14:	
  9051 ;; *************** function _uart_start *****************
  9052 ;; Defined at:
  9053 ;;		line 43 in file "UartParser.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;		None
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;		None
  9058 ;; Return value:  Size  Location     Type
  9059 ;;                  1    wreg      void 
  9060 ;; Registers used:
  9061 ;;		wreg, status,2, status,0, pclath, cstack
  9062 ;; Tracked objects:
  9063 ;;		On entry : 1D/0
  9064 ;;		On exit  : 1F/0
  9065 ;;		Unchanged: 0/0
  9066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;Total ram usage:        0 bytes
  9072 ;; Hardware stack levels used:    1
  9073 ;; Hardware stack levels required when called:    6
  9074 ;; This function calls:
  9075 ;;		_EUSART_SetRxInterruptHandler
  9076 ;;		_TMR1_SetInterruptHandler
  9077 ;; This function is called by:
  9078 ;;		_main
  9079 ;; This function uses a non-reentrant model
  9080 ;;
  9081                           
  9082                           
  9083                           ;psect for function _uart_start
  9084  1688                     _uart_start:	
  9085                           
  9086                           ;UartParser.c: 45:     if( st == SHUTDOWN )
  9087                           
  9088                           ;incstack = 0
  9089                           ; Regs used in _uart_start: [wreg+status,2+status,0+pclath+cstack]
  9090  1688  0020               	movlb	0	; select bank0
  9091  1689  082D               	movf	UartParser@st,w
  9092  168A  1D03               	btfss	3,2
  9093  168B  0008               	return
  9094                           
  9095                           ;UartParser.c: 46:     {;UartParser.c: 47:         TMR1_SetInterruptHandler(TMR1_SystemT
      +                          imer_ISR);
  9096  168C  301B               	movlw	low _TMR1_SystemTimer_ISR
  9097  168D  00D1               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9098  168E  3015               	movlw	high _TMR1_SystemTimer_ISR
  9099  168F  00D2               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9100  1690  3195  2583  3196   	fcall	_TMR1_SetInterruptHandler
  9101                           
  9102                           ;UartParser.c: 48:         EUSART_SetRxInterruptHandler(EUSART_CommandHandler_ISR);
  9103  1693  3093               	movlw	low _EUSART_CommandHandler_ISR
  9104  1694  0020               	movlb	0	; select bank0
  9105  1695  00D1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  9106  1696  3017               	movlw	high _EUSART_CommandHandler_ISR
  9107  1697  00D2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  9108  1698  3195  2573         	fcall	_EUSART_SetRxInterruptHandler
  9109                           
  9110                           ;UartParser.c: 49:         st = INIT;
  9111  169A  0020               	movlb	0	; select bank0
  9112  169B  01AD               	clrf	UartParser@st
  9113  169C  0AAD               	incf	UartParser@st,f
  9114  169D  0008               	return
  9115  169E                     __end_of_uart_start:	
  9116                           
  9117                           	psect	text15
  9118  1521                     __ptext15:	
  9119 ;; *************** function _start_relay_watchdog *****************
  9120 ;; Defined at:
  9121 ;;		line 28 in file "SolidStateRelay.c"
  9122 ;; Parameters:    Size  Location     Type
  9123 ;;		None
  9124 ;; Auto vars:     Size  Location     Type
  9125 ;;		None
  9126 ;; Return value:  Size  Location     Type
  9127 ;;                  1    wreg      void 
  9128 ;; Registers used:
  9129 ;;		wreg, status,2, status,0
  9130 ;; Tracked objects:
  9131 ;;		On entry : 1F/0
  9132 ;;		On exit  : 1F/0
  9133 ;;		Unchanged: 0/0
  9134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9139 ;;Total ram usage:        0 bytes
  9140 ;; Hardware stack levels used:    1
  9141 ;; Hardware stack levels required when called:    5
  9142 ;; This function calls:
  9143 ;;		Nothing
  9144 ;; This function is called by:
  9145 ;;		_main
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           
  9150                           ;psect for function _start_relay_watchdog
  9151  1521                     _start_relay_watchdog:	
  9152                           
  9153                           ;SolidStateRelay.c: 30:     if( st == SHUTDOWN )
  9154                           
  9155                           ;incstack = 0
  9156                           ; Regs used in _start_relay_watchdog: [wreg+status,2+status,0]
  9157  1521  082B               	movf	SolidStateRelay@st,w
  9158  1522  1D03               	btfss	3,2
  9159  1523  0008               	return
  9160                           
  9161                           ;SolidStateRelay.c: 31:         st = INIT;
  9162  1524  01AB               	clrf	SolidStateRelay@st
  9163  1525  0AAB               	incf	SolidStateRelay@st,f
  9164  1526  0008               	return
  9165  1527                     __end_of_start_relay_watchdog:	
  9166                           
  9167                           	psect	text16
  9168  0A7E                     __ptext16:	
  9169 ;; *************** function _relay_watchdog_task *****************
  9170 ;; Defined at:
  9171 ;;		line 100 in file "SolidStateRelay.c"
  9172 ;; Parameters:    Size  Location     Type
  9173 ;;		None
  9174 ;; Auto vars:     Size  Location     Type
  9175 ;;		None
  9176 ;; Return value:  Size  Location     Type
  9177 ;;                  1    wreg      void 
  9178 ;; Registers used:
  9179 ;;		wreg, status,2, status,0, pclath, cstack
  9180 ;; Tracked objects:
  9181 ;;		On entry : 1C/0
  9182 ;;		On exit  : 1F/0
  9183 ;;		Unchanged: 0/0
  9184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9187 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9188 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9189 ;;Total ram usage:        1 bytes
  9190 ;; Hardware stack levels used:    1
  9191 ;; Hardware stack levels required when called:    6
  9192 ;; This function calls:
  9193 ;;		_close_relay
  9194 ;;		_get_vdc
  9195 ;;		_open_relay
  9196 ;; This function is called by:
  9197 ;;		_main
  9198 ;; This function uses a non-reentrant model
  9199 ;;
  9200                           
  9201                           
  9202                           ;psect for function _relay_watchdog_task
  9203  0A7E                     _relay_watchdog_task:	
  9204                           
  9205                           ;SolidStateRelay.c: 102:     if( st == SHUTDOWN )
  9206                           
  9207                           ;incstack = 0
  9208                           ; Regs used in _relay_watchdog_task: [wreg+status,2+status,0+pclath+cstack]
  9209  0A7E  0020               	movlb	0	; select bank0
  9210  0A7F  082B               	movf	SolidStateRelay@st,w
  9211  0A80  1903               	btfsc	3,2
  9212  0A81  0008               	return
  9213                           
  9214                           ;SolidStateRelay.c: 104:     if( st == INIT )
  9215  0A82  032B               	decf	SolidStateRelay@st,w
  9216  0A83  1D03               	btfss	3,2
  9217  0A84  2A8D               	goto	l4183
  9218  0A85                     l4177:	
  9219                           
  9220                           ;SolidStateRelay.c: 105:     {;SolidStateRelay.c: 107:         close_relay();
  9221  0A85  3194  24EE         	fcall	_close_relay
  9222                           
  9223                           ;SolidStateRelay.c: 108:         st = WAIT_VOLTAGE_RISE;
  9224  0A87  3002               	movlw	2
  9225  0A88  0020               	movlb	0	; select bank0
  9226  0A89  00D3               	movwf	??_relay_watchdog_task
  9227  0A8A  0853               	movf	??_relay_watchdog_task,w
  9228  0A8B  00AB               	movwf	SolidStateRelay@st
  9229  0A8C  0008               	return
  9230  0A8D                     l4183:	
  9231                           
  9232                           ;SolidStateRelay.c: 111:     if( st == WAIT_VOLTAGE_RISE )
  9233  0A8D  3002               	movlw	2
  9234  0A8E  062B               	xorwf	SolidStateRelay@st,w
  9235  0A8F  1D03               	btfss	3,2
  9236  0A90  2AA1               	goto	l4193
  9237                           
  9238                           ;SolidStateRelay.c: 112:     {;SolidStateRelay.c: 114:         if( get_vdc() <= relay_re
      +                          set_voltage )
  9239  0A91  3195  250B  318A   	fcall	_get_vdc
  9240  0A94  0852               	movf	?_get_vdc+1,w
  9241  0A95  0221               	subwf	_relay_reset_voltage+1,w
  9242  0A96  1D03               	skipz
  9243  0A97  2A9A               	goto	u3095
  9244  0A98  0851               	movf	?_get_vdc,w
  9245  0A99  0220               	subwf	_relay_reset_voltage,w
  9246  0A9A                     u3095:	
  9247  0A9A  1803               	btfsc	3,0
  9248  0A9B  0008               	return
  9249                           
  9250                           ;SolidStateRelay.c: 119:         st = WAIT_VOLTAGE_FALL;
  9251  0A9C  3003               	movlw	3
  9252  0A9D  00D3               	movwf	??_relay_watchdog_task
  9253  0A9E  0853               	movf	??_relay_watchdog_task,w
  9254  0A9F  00AB               	movwf	SolidStateRelay@st
  9255  0AA0  0008               	return
  9256  0AA1                     l4193:	
  9257                           
  9258                           ;SolidStateRelay.c: 122:     if( st == WAIT_VOLTAGE_FALL )
  9259  0AA1  3003               	movlw	3
  9260  0AA2  062B               	xorwf	SolidStateRelay@st,w
  9261  0AA3  1D03               	btfss	3,2
  9262  0AA4  2AC5               	goto	l4209
  9263                           
  9264                           ;SolidStateRelay.c: 123:     {;SolidStateRelay.c: 125:         if( get_vdc() >= relay_re
      +                          set_voltage )
  9265  0AA5  3195  250B  318A   	fcall	_get_vdc
  9266  0AA8  0821               	movf	_relay_reset_voltage+1,w
  9267  0AA9  0252               	subwf	?_get_vdc+1,w
  9268  0AAA  1D03               	skipz
  9269  0AAB  2AAE               	goto	u3115
  9270  0AAC  0820               	movf	_relay_reset_voltage,w
  9271  0AAD  0251               	subwf	?_get_vdc,w
  9272  0AAE                     u3115:	
  9273  0AAE  1803               	btfsc	3,0
  9274  0AAF  0008               	return
  9275                           
  9276                           ;SolidStateRelay.c: 129:         open_relay();
  9277  0AB0  3194  24F1         	fcall	_open_relay
  9278                           
  9279                           ;SolidStateRelay.c: 130:         activation_counter++;
  9280  0AB2  3001               	movlw	1
  9281  0AB3  07D0               	addwf	_activation_counter^(0+256),f
  9282  0AB4  3000               	movlw	0
  9283  0AB5  3DD1               	addwfc	(_activation_counter+1)^(0+256),f
  9284  0AB6  3000               	movlw	0
  9285  0AB7  3DD2               	addwfc	(_activation_counter+2)^(0+256),f
  9286  0AB8  3000               	movlw	0
  9287  0AB9  3DD3               	addwfc	(_activation_counter+3)^(0+256),f
  9288                           
  9289                           ;SolidStateRelay.c: 131:         local_timer = ((uint8_t)((uint8_t)~system_counter)+((ui
      +                          nt8_t)1));
  9290  0ABA  0020               	movlb	0	; select bank0
  9291  0ABB  0330               	decf	_system_counter,w
  9292  0ABC  3AFF               	xorlw	255
  9293  0ABD  00D3               	movwf	??_relay_watchdog_task
  9294  0ABE  0853               	movf	??_relay_watchdog_task,w
  9295  0ABF  00AA               	movwf	_local_timer
  9296                           
  9297                           ;SolidStateRelay.c: 132:         st = WAIT_RESET_DURATION;
  9298  0AC0  3004               	movlw	4
  9299  0AC1  00D3               	movwf	??_relay_watchdog_task
  9300  0AC2  0853               	movf	??_relay_watchdog_task,w
  9301  0AC3  00AB               	movwf	SolidStateRelay@st
  9302  0AC4  0008               	return
  9303  0AC5                     l4209:	
  9304                           
  9305                           ;SolidStateRelay.c: 135:     if( st == WAIT_RESET_DURATION )
  9306  0AC5  3004               	movlw	4
  9307  0AC6  062B               	xorwf	SolidStateRelay@st,w
  9308  0AC7  1D03               	btfss	3,2
  9309  0AC8  0008               	return
  9310                           
  9311                           ;SolidStateRelay.c: 136:     {;SolidStateRelay.c: 138:         if( !((uint8_t)(system_co
      +                          unter + local_timer) >= ((uint8_t)reset_duration_ms)) )
  9312  0AC9  082A               	movf	_local_timer,w
  9313  0ACA  0730               	addwf	_system_counter,w
  9314  0ACB  00D3               	movwf	??_relay_watchdog_task
  9315  0ACC  0021               	movlb	1	; select bank1
  9316  0ACD  0860               	movf	_reset_duration_ms^(0+128),w
  9317  0ACE  0020               	movlb	0	; select bank0
  9318  0ACF  0253               	subwf	??_relay_watchdog_task,w
  9319  0AD0  1C03               	btfss	3,0
  9320  0AD1  0008               	return
  9321  0AD2  2A85               	goto	l4177
  9322  0AD3                     __end_of_relay_watchdog_task:	
  9323                           
  9324                           	psect	text17
  9325  14F1                     __ptext17:	
  9326 ;; *************** function _open_relay *****************
  9327 ;; Defined at:
  9328 ;;		line 90 in file "SolidStateRelay.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;		None
  9331 ;; Auto vars:     Size  Location     Type
  9332 ;;		None
  9333 ;; Return value:  Size  Location     Type
  9334 ;;                  1    wreg      void 
  9335 ;; Registers used:
  9336 ;;		None
  9337 ;; Tracked objects:
  9338 ;;		On entry : 1F/0
  9339 ;;		On exit  : 1F/2
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;Total ram usage:        0 bytes
  9347 ;; Hardware stack levels used:    1
  9348 ;; Hardware stack levels required when called:    5
  9349 ;; This function calls:
  9350 ;;		Nothing
  9351 ;; This function is called by:
  9352 ;;		_relay_watchdog_task
  9353 ;; This function uses a non-reentrant model
  9354 ;;
  9355                           
  9356                           
  9357                           ;psect for function _open_relay
  9358  14F1                     _open_relay:	
  9359                           
  9360                           ;incstack = 0
  9361                           ; Regs used in _open_relay: []
  9362                           ;SolidStateRelay.c: 92:     do { LATCbits.LATC5 = 1; } while(0);
  9363  14F1  0022               	movlb	2	; select bank2
  9364  14F2  168E               	bsf	14,5	;volatile
  9365  14F3  0008               	return
  9366  14F4                     __end_of_open_relay:	
  9367                           
  9368                           	psect	text18
  9369  150B                     __ptext18:	
  9370 ;; *************** function _get_vdc *****************
  9371 ;; Defined at:
  9372 ;;		line 318 in file "vcontrol.c"
  9373 ;; Parameters:    Size  Location     Type
  9374 ;;		None
  9375 ;; Auto vars:     Size  Location     Type
  9376 ;;		None
  9377 ;; Return value:  Size  Location     Type
  9378 ;;                  2    9[BANK0 ] unsigned short 
  9379 ;; Registers used:
  9380 ;;		wreg
  9381 ;; Tracked objects:
  9382 ;;		On entry : 1F/0
  9383 ;;		On exit  : 1F/0
  9384 ;;		Unchanged: 0/0
  9385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9386 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9389 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9390 ;;Total ram usage:        2 bytes
  9391 ;; Hardware stack levels used:    1
  9392 ;; Hardware stack levels required when called:    5
  9393 ;; This function calls:
  9394 ;;		Nothing
  9395 ;; This function is called by:
  9396 ;;		_uart_task
  9397 ;;		_relay_watchdog_task
  9398 ;; This function uses a non-reentrant model
  9399 ;;
  9400                           
  9401                           
  9402                           ;psect for function _get_vdc
  9403  150B                     _get_vdc:	
  9404                           
  9405                           ;vcontrol.c: 320:     return vdc;
  9406                           
  9407                           ;incstack = 0
  9408                           ; Regs used in _get_vdc: [wreg]
  9409  150B  0841               	movf	_vdc+1,w
  9410  150C  00D2               	movwf	?_get_vdc+1
  9411  150D  0840               	movf	_vdc,w
  9412  150E  00D1               	movwf	?_get_vdc
  9413  150F  0008               	return
  9414  1510                     __end_of_get_vdc:	
  9415                           
  9416                           	psect	text19
  9417  14EE                     __ptext19:	
  9418 ;; *************** function _close_relay *****************
  9419 ;; Defined at:
  9420 ;;		line 95 in file "SolidStateRelay.c"
  9421 ;; Parameters:    Size  Location     Type
  9422 ;;		None
  9423 ;; Auto vars:     Size  Location     Type
  9424 ;;		None
  9425 ;; Return value:  Size  Location     Type
  9426 ;;                  1    wreg      void 
  9427 ;; Registers used:
  9428 ;;		None
  9429 ;; Tracked objects:
  9430 ;;		On entry : 1C/0
  9431 ;;		On exit  : 1F/2
  9432 ;;		Unchanged: 0/0
  9433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;Total ram usage:        0 bytes
  9439 ;; Hardware stack levels used:    1
  9440 ;; Hardware stack levels required when called:    5
  9441 ;; This function calls:
  9442 ;;		Nothing
  9443 ;; This function is called by:
  9444 ;;		_relay_watchdog_task
  9445 ;; This function uses a non-reentrant model
  9446 ;;
  9447                           
  9448                           
  9449                           ;psect for function _close_relay
  9450  14EE                     _close_relay:	
  9451                           
  9452                           ;incstack = 0
  9453                           ; Regs used in _close_relay: []
  9454                           ;SolidStateRelay.c: 97:     do { LATCbits.LATC5 = 0; } while(0);
  9455  14EE  0022               	movlb	2	; select bank2
  9456  14EF  128E               	bcf	14,5	;volatile
  9457  14F0  0008               	return
  9458  14F1                     __end_of_close_relay:	
  9459                           
  9460                           	psect	text20
  9461  0003                     __ptext20:	
  9462 ;; *************** function _init_relay_watchdog *****************
  9463 ;; Defined at:
  9464 ;;		line 23 in file "SolidStateRelay.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;		None
  9467 ;; Auto vars:     Size  Location     Type
  9468 ;;		None
  9469 ;; Return value:  Size  Location     Type
  9470 ;;                  1    wreg      void 
  9471 ;; Registers used:
  9472 ;;		None
  9473 ;; Tracked objects:
  9474 ;;		On entry : 1D/0
  9475 ;;		On exit  : 1D/0
  9476 ;;		Unchanged: 1D/0
  9477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;Total ram usage:        0 bytes
  9483 ;; Hardware stack levels used:    1
  9484 ;; Hardware stack levels required when called:    5
  9485 ;; This function calls:
  9486 ;;		Nothing
  9487 ;; This function is called by:
  9488 ;;		_main
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           
  9493                           ;psect for function _init_relay_watchdog
  9494  0003                     _init_relay_watchdog:	
  9495                           
  9496                           ;incstack = 0
  9497                           ; Regs used in _init_relay_watchdog: []
  9498  0003  0008               	return
  9499  0004                     __end_of_init_relay_watchdog:	
  9500                           
  9501                           	psect	text21
  9502  16E7                     __ptext21:	
  9503 ;; *************** function _SYSTEM_Initialize *****************
  9504 ;; Defined at:
  9505 ;;		line 50 in file "mcc_generated_files/mcc.c"
  9506 ;; Parameters:    Size  Location     Type
  9507 ;;		None
  9508 ;; Auto vars:     Size  Location     Type
  9509 ;;		None
  9510 ;; Return value:  Size  Location     Type
  9511 ;;                  1    wreg      void 
  9512 ;; Registers used:
  9513 ;;		wreg, status,2, status,0, pclath, cstack
  9514 ;; Tracked objects:
  9515 ;;		On entry : B1F/0
  9516 ;;		On exit  : 1F/1
  9517 ;;		Unchanged: 0/0
  9518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;Total ram usage:        0 bytes
  9524 ;; Hardware stack levels used:    1
  9525 ;; Hardware stack levels required when called:    7
  9526 ;; This function calls:
  9527 ;;		_ADC_Initialize
  9528 ;;		_EUSART_Initialize
  9529 ;;		_OSCILLATOR_Initialize
  9530 ;;		_PIN_MANAGER_Initialize
  9531 ;;		_PWM3_Initialize
  9532 ;;		_TMR1_Initialize
  9533 ;;		_TMR2_Initialize
  9534 ;;		_TMR4_Initialize
  9535 ;;		_WDT_Initialize
  9536 ;; This function is called by:
  9537 ;;		_main
  9538 ;; This function uses a non-reentrant model
  9539 ;;
  9540                           
  9541                           
  9542                           ;psect for function _SYSTEM_Initialize
  9543  16E7                     _SYSTEM_Initialize:	
  9544                           
  9545                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  9546                           
  9547                           ;incstack = 0
  9548                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9549  16E7  3188  2073  3196   	fcall	_PIN_MANAGER_Initialize
  9550                           
  9551                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  9552  16EA  3195  257B  3196   	fcall	_OSCILLATOR_Initialize
  9553                           
  9554                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  9555  16ED  3195  2502  3196   	fcall	_WDT_Initialize
  9556                           
  9557                           ;mcc_generated_files/mcc.c: 56:     ADC_Initialize();
  9558  16F0  3196  2624  3196   	fcall	_ADC_Initialize
  9559                           
  9560                           ;mcc_generated_files/mcc.c: 57:     TMR4_Initialize();
  9561  16F3  3195  2594  3196   	fcall	_TMR4_Initialize
  9562                           
  9563                           ;mcc_generated_files/mcc.c: 58:     PWM3_Initialize();
  9564  16F6  3195  25F9  3196   	fcall	_PWM3_Initialize
  9565                           
  9566                           ;mcc_generated_files/mcc.c: 59:     TMR2_Initialize();
  9567  16F9  3196  2635  3196   	fcall	_TMR2_Initialize
  9568                           
  9569                           ;mcc_generated_files/mcc.c: 60:     TMR1_Initialize();
  9570  16FC  3196  26CD  3196   	fcall	_TMR1_Initialize
  9571                           
  9572                           ;mcc_generated_files/mcc.c: 61:     EUSART_Initialize();
  9573  16FF  3188  20FE         	fcall	_EUSART_Initialize
  9574  1701  0008               	return
  9575  1702                     __end_of_SYSTEM_Initialize:	
  9576                           
  9577                           	psect	text22
  9578  1502                     __ptext22:	
  9579 ;; *************** function _WDT_Initialize *****************
  9580 ;; Defined at:
  9581 ;;		line 76 in file "mcc_generated_files/mcc.c"
  9582 ;; Parameters:    Size  Location     Type
  9583 ;;		None
  9584 ;; Auto vars:     Size  Location     Type
  9585 ;;		None
  9586 ;; Return value:  Size  Location     Type
  9587 ;;                  1    wreg      void 
  9588 ;; Registers used:
  9589 ;;		wreg
  9590 ;; Tracked objects:
  9591 ;;		On entry : B1F/2
  9592 ;;		On exit  : B1F/1
  9593 ;;		Unchanged: B00/0
  9594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;Total ram usage:        0 bytes
  9600 ;; Hardware stack levels used:    1
  9601 ;; Hardware stack levels required when called:    5
  9602 ;; This function calls:
  9603 ;;		Nothing
  9604 ;; This function is called by:
  9605 ;;		_SYSTEM_Initialize
  9606 ;; This function uses a non-reentrant model
  9607 ;;
  9608                           
  9609                           
  9610                           ;psect for function _WDT_Initialize
  9611  1502                     _WDT_Initialize:	
  9612                           
  9613                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x16;
  9614                           
  9615                           ;incstack = 0
  9616                           ; Regs used in _WDT_Initialize: [wreg]
  9617  1502  3016               	movlw	22
  9618  1503  0021               	movlb	1	; select bank1
  9619  1504  0097               	movwf	23	;volatile
  9620  1505  0008               	return
  9621  1506                     __end_of_WDT_Initialize:	
  9622                           
  9623                           	psect	text23
  9624  1594                     __ptext23:	
  9625 ;; *************** function _TMR4_Initialize *****************
  9626 ;; Defined at:
  9627 ;;		line 62 in file "mcc_generated_files/tmr4.c"
  9628 ;; Parameters:    Size  Location     Type
  9629 ;;		None
  9630 ;; Auto vars:     Size  Location     Type
  9631 ;;		None
  9632 ;; Return value:  Size  Location     Type
  9633 ;;                  1    wreg      void 
  9634 ;; Registers used:
  9635 ;;		wreg, status,2
  9636 ;; Tracked objects:
  9637 ;;		On entry : 1F/2
  9638 ;;		On exit  : 1F/8
  9639 ;;		Unchanged: 0/0
  9640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;Total ram usage:        0 bytes
  9646 ;; Hardware stack levels used:    1
  9647 ;; Hardware stack levels required when called:    5
  9648 ;; This function calls:
  9649 ;;		Nothing
  9650 ;; This function is called by:
  9651 ;;		_SYSTEM_Initialize
  9652 ;; This function uses a non-reentrant model
  9653 ;;
  9654                           
  9655                           
  9656                           ;psect for function _TMR4_Initialize
  9657  1594                     _TMR4_Initialize:	
  9658                           
  9659                           ;mcc_generated_files/tmr4.c: 67:     PR4 = 0xC7;
  9660                           
  9661                           ;incstack = 0
  9662                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
  9663  1594  30C7               	movlw	199
  9664  1595  0028               	movlb	8	; select bank8
  9665  1596  0096               	movwf	22	;volatile
  9666                           
  9667                           ;mcc_generated_files/tmr4.c: 70:     TMR4 = 0x00;
  9668  1597  0195               	clrf	21	;volatile
  9669                           
  9670                           ;mcc_generated_files/tmr4.c: 73:     PIR2bits.TMR4IF = 0;
  9671  1598  0020               	movlb	0	; select bank0
  9672  1599  1092               	bcf	18,1	;volatile
  9673                           
  9674                           ;mcc_generated_files/tmr4.c: 76:     T4CON = 0x05;
  9675  159A  3005               	movlw	5
  9676  159B  0028               	movlb	8	; select bank8
  9677  159C  0097               	movwf	23	;volatile
  9678  159D  0008               	return
  9679  159E                     __end_of_TMR4_Initialize:	
  9680                           
  9681                           	psect	text24
  9682  1635                     __ptext24:	
  9683 ;; *************** function _TMR2_Initialize *****************
  9684 ;; Defined at:
  9685 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;		None
  9688 ;; Auto vars:     Size  Location     Type
  9689 ;;		None
  9690 ;; Return value:  Size  Location     Type
  9691 ;;                  1    wreg      void 
  9692 ;; Registers used:
  9693 ;;		wreg, status,2, status,0, pclath, cstack
  9694 ;; Tracked objects:
  9695 ;;		On entry : 1F/5
  9696 ;;		On exit  : 1F/0
  9697 ;;		Unchanged: 0/0
  9698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;Total ram usage:        0 bytes
  9704 ;; Hardware stack levels used:    1
  9705 ;; Hardware stack levels required when called:    6
  9706 ;; This function calls:
  9707 ;;		_TMR2_SetInterruptHandler
  9708 ;; This function is called by:
  9709 ;;		_SYSTEM_Initialize
  9710 ;; This function uses a non-reentrant model
  9711 ;;
  9712                           
  9713                           
  9714                           ;psect for function _TMR2_Initialize
  9715  1635                     _TMR2_Initialize:	
  9716                           
  9717                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x3E;
  9718                           
  9719                           ;incstack = 0
  9720                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9721  1635  303E               	movlw	62
  9722  1636  0020               	movlb	0	; select bank0
  9723  1637  009B               	movwf	27	;volatile
  9724                           
  9725                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  9726  1638  019A               	clrf	26	;volatile
  9727                           
  9728                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  9729  1639  1091               	bcf	17,1	;volatile
  9730                           
  9731                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  9732  163A  0021               	movlb	1	; select bank1
  9733  163B  1491               	bsf	17,1	;volatile
  9734                           
  9735                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  9736  163C  3002               	movlw	low _TMR2_DefaultInterruptHandler
  9737  163D  0020               	movlb	0	; select bank0
  9738  163E  00D1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  9739  163F  3000               	movlw	high _TMR2_DefaultInterruptHandler
  9740  1640  00D2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  9741  1641  3195  2553         	fcall	_TMR2_SetInterruptHandler
  9742                           
  9743                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x07;
  9744  1643  3007               	movlw	7
  9745  1644  0020               	movlb	0	; select bank0
  9746  1645  009C               	movwf	28	;volatile
  9747  1646  0008               	return
  9748  1647                     __end_of_TMR2_Initialize:	
  9749                           
  9750                           	psect	text25
  9751  16CD                     __ptext25:	
  9752 ;; *************** function _TMR1_Initialize *****************
  9753 ;; Defined at:
  9754 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  9755 ;; Parameters:    Size  Location     Type
  9756 ;;		None
  9757 ;; Auto vars:     Size  Location     Type
  9758 ;;		None
  9759 ;; Return value:  Size  Location     Type
  9760 ;;                  1    wreg      void 
  9761 ;; Registers used:
  9762 ;;		wreg, status,2, status,0, pclath, cstack
  9763 ;; Tracked objects:
  9764 ;;		On entry : 1F/0
  9765 ;;		On exit  : 1F/0
  9766 ;;		Unchanged: 0/0
  9767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9772 ;;Total ram usage:        0 bytes
  9773 ;; Hardware stack levels used:    1
  9774 ;; Hardware stack levels required when called:    6
  9775 ;; This function calls:
  9776 ;;		_TMR1_SetInterruptHandler
  9777 ;; This function is called by:
  9778 ;;		_SYSTEM_Initialize
  9779 ;; This function uses a non-reentrant model
  9780 ;;
  9781                           
  9782                           
  9783                           ;psect for function _TMR1_Initialize
  9784  16CD                     _TMR1_Initialize:	
  9785                           
  9786                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  9787                           
  9788                           ;incstack = 0
  9789                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  9790  16CD  0199               	clrf	25	;volatile
  9791                           
  9792                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0x3C;
  9793  16CE  303C               	movlw	60
  9794  16CF  0097               	movwf	23	;volatile
  9795                           
  9796                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0xB0;
  9797  16D0  30B0               	movlw	176
  9798  16D1  0096               	movwf	22	;volatile
  9799                           
  9800                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  9801  16D2  1011               	bcf	17,0	;volatile
  9802                           
  9803                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  9804  16D3  0817               	movf	23,w	;volatile
  9805  16D4  0022               	movlb	2	; select bank2
  9806  16D5  00E2               	movwf	(_timer1ReloadVal+1)^(0+256)	;volatile
  9807  16D6  0020               	movlb	0	; select bank0
  9808  16D7  0816               	movf	22,w	;volatile
  9809  16D8  0022               	movlb	2	; select bank2
  9810  16D9  00E1               	movwf	_timer1ReloadVal^(0+256)	;volatile
  9811                           
  9812                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  9813  16DA  0021               	movlb	1	; select bank1
  9814  16DB  1411               	bsf	17,0	;volatile
  9815                           
  9816                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  9817  16DC  3072               	movlw	low _TMR1_DefaultInterruptHandler
  9818  16DD  0020               	movlb	0	; select bank0
  9819  16DE  00D1               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  9820  16DF  3008               	movlw	high _TMR1_DefaultInterruptHandler
  9821  16E0  00D2               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  9822  16E1  3195  2583         	fcall	_TMR1_SetInterruptHandler
  9823                           
  9824                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x31;
  9825  16E3  3031               	movlw	49
  9826  16E4  0020               	movlb	0	; select bank0
  9827  16E5  0098               	movwf	24	;volatile
  9828  16E6  0008               	return
  9829  16E7                     __end_of_TMR1_Initialize:	
  9830                           
  9831                           	psect	text26
  9832  1583                     __ptext26:	
  9833 ;; *************** function _TMR1_SetInterruptHandler *****************
  9834 ;; Defined at:
  9835 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  9836 ;; Parameters:    Size  Location     Type
  9837 ;;  InterruptHan    2    9[BANK0 ] PTR FTN()void 
  9838 ;;		 -> TMR1_SystemTimer_ISR(1), TMR1_DefaultInterruptHandler(1), 
  9839 ;; Auto vars:     Size  Location     Type
  9840 ;;		None
  9841 ;; Return value:  Size  Location     Type
  9842 ;;                  1    wreg      void 
  9843 ;; Registers used:
  9844 ;;		wreg
  9845 ;; Tracked objects:
  9846 ;;		On entry : 1F/0
  9847 ;;		On exit  : 1F/2
  9848 ;;		Unchanged: 0/0
  9849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9850 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;Total ram usage:        2 bytes
  9855 ;; Hardware stack levels used:    1
  9856 ;; Hardware stack levels required when called:    5
  9857 ;; This function calls:
  9858 ;;		Nothing
  9859 ;; This function is called by:
  9860 ;;		_TMR1_Initialize
  9861 ;;		_uart_start
  9862 ;; This function uses a non-reentrant model
  9863 ;;
  9864                           
  9865                           
  9866                           ;psect for function _TMR1_SetInterruptHandler
  9867  1583                     _TMR1_SetInterruptHandler:	
  9868                           
  9869                           ;mcc_generated_files/tmr1.c: 179:     TMR1_InterruptHandler = InterruptHandler;
  9870                           
  9871                           ;incstack = 0
  9872                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  9873  1583  0852               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  9874  1584  0022               	movlb	2	; select bank2
  9875  1585  00E0               	movwf	(_TMR1_InterruptHandler+1)^(0+256)
  9876  1586  0020               	movlb	0	; select bank0
  9877  1587  0851               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  9878  1588  0022               	movlb	2	; select bank2
  9879  1589  00DF               	movwf	_TMR1_InterruptHandler^(0+256)
  9880  158A  0008               	return
  9881  158B                     __end_of_TMR1_SetInterruptHandler:	
  9882                           
  9883                           	psect	text27
  9884  15F9                     __ptext27:	
  9885 ;; *************** function _PWM3_Initialize *****************
  9886 ;; Defined at:
  9887 ;;		line 58 in file "mcc_generated_files/pwm3.c"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;		None
  9890 ;; Auto vars:     Size  Location     Type
  9891 ;;		None
  9892 ;; Return value:  Size  Location     Type
  9893 ;;                  1    wreg      void 
  9894 ;; Registers used:
  9895 ;;		wreg, status,2, status,0
  9896 ;; Tracked objects:
  9897 ;;		On entry : 1F/8
  9898 ;;		On exit  : 1F/5
  9899 ;;		Unchanged: 0/0
  9900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;Total ram usage:        0 bytes
  9906 ;; Hardware stack levels used:    1
  9907 ;; Hardware stack levels required when called:    5
  9908 ;; This function calls:
  9909 ;;		Nothing
  9910 ;; This function is called by:
  9911 ;;		_SYSTEM_Initialize
  9912 ;; This function uses a non-reentrant model
  9913 ;;
  9914                           
  9915                           
  9916                           ;psect for function _PWM3_Initialize
  9917  15F9                     _PWM3_Initialize:	
  9918                           
  9919                           ;mcc_generated_files/pwm3.c: 62:     PWM3CON = 0x80;
  9920                           
  9921                           ;incstack = 0
  9922                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
  9923  15F9  3080               	movlw	128
  9924  15FA  002C               	movlb	12	; select bank12
  9925  15FB  0099               	movwf	25	;volatile
  9926                           
  9927                           ;mcc_generated_files/pwm3.c: 65:     PWM3DCH = 0xBD;
  9928  15FC  30BD               	movlw	189
  9929  15FD  0098               	movwf	24	;volatile
  9930                           
  9931                           ;mcc_generated_files/pwm3.c: 68:     PWM3DCL = 0xC0;
  9932  15FE  30C0               	movlw	192
  9933  15FF  0097               	movwf	23	;volatile
  9934                           
  9935                           ;mcc_generated_files/pwm3.c: 71:     CCPTMRSbits.P3TSEL = 1;
  9936  1600  0025               	movlb	5	; select bank5
  9937  1601  081E               	movf	30,w	;volatile
  9938  1602  39CF               	andlw	-49
  9939  1603  3810               	iorlw	16
  9940  1604  009E               	movwf	30	;volatile
  9941  1605  0008               	return
  9942  1606                     __end_of_PWM3_Initialize:	
  9943                           
  9944                           	psect	text28
  9945  0873                     __ptext28:	
  9946 ;; *************** function _PIN_MANAGER_Initialize *****************
  9947 ;; Defined at:
  9948 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;		None
  9951 ;; Auto vars:     Size  Location     Type
  9952 ;;		None
  9953 ;; Return value:  Size  Location     Type
  9954 ;;                  1    wreg      void 
  9955 ;; Registers used:
  9956 ;;		wreg, status,2
  9957 ;; Tracked objects:
  9958 ;;		On entry : B1F/0
  9959 ;;		On exit  : B1F/1D
  9960 ;;		Unchanged: B00/0
  9961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;Total ram usage:        0 bytes
  9967 ;; Hardware stack levels used:    1
  9968 ;; Hardware stack levels required when called:    5
  9969 ;; This function calls:
  9970 ;;		Nothing
  9971 ;; This function is called by:
  9972 ;;		_SYSTEM_Initialize
  9973 ;; This function uses a non-reentrant model
  9974 ;;
  9975                           
  9976                           
  9977                           ;psect for function _PIN_MANAGER_Initialize
  9978  0873                     _PIN_MANAGER_Initialize:	
  9979                           
  9980                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  9981                           
  9982                           ;incstack = 0
  9983                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  9984  0873  0022               	movlb	2	; select bank2
  9985  0874  018C               	clrf	12	;volatile
  9986                           
  9987                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x01;
  9988  0875  3001               	movlw	1
  9989  0876  008E               	movwf	14	;volatile
  9990                           
  9991                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x07;
  9992  0877  3007               	movlw	7
  9993  0878  0021               	movlb	1	; select bank1
  9994  0879  008C               	movwf	12	;volatile
  9995                           
  9996                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x18;
  9997  087A  3018               	movlw	24
  9998  087B  008E               	movwf	14	;volatile
  9999                           
 10000                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x18;
 10001  087C  3018               	movlw	24
 10002  087D  0023               	movlb	3	; select bank3
 10003  087E  008E               	movwf	14	;volatile
 10004                           
 10005                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x03;
 10006  087F  3003               	movlw	3
 10007  0880  008C               	movwf	12	;volatile
 10008                           
 10009                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
 10010  0881  0024               	movlb	4	; select bank4
 10011  0882  018C               	clrf	12	;volatile
 10012                           
 10013                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
 10014  0883  018E               	clrf	14	;volatile
 10015                           
 10016                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 1;
 10017  0884  0021               	movlb	1	; select bank1
 10018  0885  1795               	bsf	21,7	;volatile
 10019                           
 10020                           ;mcc_generated_files/pin_manager.c: 85:     ODCONA = 0x00;
 10021  0886  0025               	movlb	5	; select bank5
 10022  0887  018C               	clrf	12	;volatile
 10023                           
 10024                           ;mcc_generated_files/pin_manager.c: 86:     ODCONC = 0x00;
 10025  0888  018E               	clrf	14	;volatile
 10026                           
 10027                           ;mcc_generated_files/pin_manager.c: 91:     SLRCONA = 0x37;
 10028  0889  3037               	movlw	55
 10029  088A  0026               	movlb	6	; select bank6
 10030  088B  008C               	movwf	12	;volatile
 10031                           
 10032                           ;mcc_generated_files/pin_manager.c: 92:     SLRCONC = 0x3F;
 10033  088C  303F               	movlw	63
 10034  088D  008E               	movwf	14	;volatile
 10035                           
 10036                           ;mcc_generated_files/pin_manager.c: 97:     INLVLA = 0x3F;
 10037  088E  303F               	movlw	63
 10038  088F  0027               	movlb	7	; select bank7
 10039  0890  008C               	movwf	12	;volatile
 10040                           
 10041                           ;mcc_generated_files/pin_manager.c: 98:     INLVLC = 0x3F;
 10042  0891  303F               	movlw	63
 10043  0892  008E               	movwf	14	;volatile
 10044                           
 10045                           ;mcc_generated_files/pin_manager.c: 107:     RC0PPS = 0x14;
 10046  0893  3014               	movlw	20
 10047  0894  003D               	movlb	29	; select bank29
 10048  0895  00A0               	movwf	32	;volatile
 10049                           
 10050                           ;mcc_generated_files/pin_manager.c: 108:     RXPPS = 0x02;
 10051  0896  3002               	movlw	2
 10052  0897  003C               	movlb	28	; select bank28
 10053  0898  00A4               	movwf	36	;volatile
 10054                           
 10055                           ;mcc_generated_files/pin_manager.c: 109:     RC1PPS = 0x0E;
 10056  0899  300E               	movlw	14
 10057  089A  003D               	movlb	29	; select bank29
 10058  089B  00A1               	movwf	33	;volatile
 10059                           
 10060                           ;mcc_generated_files/pin_manager.c: 110:     RC2PPS = 0x0E;
 10061  089C  300E               	movlw	14
 10062  089D  00A2               	movwf	34	;volatile
 10063  089E  0008               	return
 10064  089F                     __end_of_PIN_MANAGER_Initialize:	
 10065                           
 10066                           	psect	text29
 10067  157B                     __ptext29:	
 10068 ;; *************** function _OSCILLATOR_Initialize *****************
 10069 ;; Defined at:
 10070 ;;		line 64 in file "mcc_generated_files/mcc.c"
 10071 ;; Parameters:    Size  Location     Type
 10072 ;;		None
 10073 ;; Auto vars:     Size  Location     Type
 10074 ;;		None
 10075 ;; Return value:  Size  Location     Type
 10076 ;;                  1    wreg      void 
 10077 ;; Registers used:
 10078 ;;		wreg, status,2
 10079 ;; Tracked objects:
 10080 ;;		On entry : B1F/1D
 10081 ;;		On exit  : B1F/2
 10082 ;;		Unchanged: B00/0
 10083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10088 ;;Total ram usage:        0 bytes
 10089 ;; Hardware stack levels used:    1
 10090 ;; Hardware stack levels required when called:    5
 10091 ;; This function calls:
 10092 ;;		Nothing
 10093 ;; This function is called by:
 10094 ;;		_SYSTEM_Initialize
 10095 ;; This function uses a non-reentrant model
 10096 ;;
 10097                           
 10098                           
 10099                           ;psect for function _OSCILLATOR_Initialize
 10100  157B                     _OSCILLATOR_Initialize:	
 10101                           
 10102                           ;mcc_generated_files/mcc.c: 67:     OSCCON = 0x7A;
 10103                           
 10104                           ;incstack = 0
 10105                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10106  157B  307A               	movlw	122
 10107  157C  0021               	movlb	1	; select bank1
 10108  157D  0099               	movwf	25	;volatile
 10109                           
 10110                           ;mcc_generated_files/mcc.c: 69:     OSCSTAT = 0x00;
 10111  157E  019A               	clrf	26	;volatile
 10112                           
 10113                           ;mcc_generated_files/mcc.c: 71:     OSCTUNE = 0x00;
 10114  157F  0198               	clrf	24	;volatile
 10115                           
 10116                           ;mcc_generated_files/mcc.c: 73:     BORCON = 0x00;
 10117  1580  0022               	movlb	2	; select bank2
 10118  1581  0196               	clrf	22	;volatile
 10119  1582  0008               	return
 10120  1583                     __end_of_OSCILLATOR_Initialize:	
 10121                           
 10122                           	psect	text30
 10123  08FE                     __ptext30:	
 10124 ;; *************** function _EUSART_Initialize *****************
 10125 ;; Defined at:
 10126 ;;		line 83 in file "mcc_generated_files/eusart.c"
 10127 ;; Parameters:    Size  Location     Type
 10128 ;;		None
 10129 ;; Auto vars:     Size  Location     Type
 10130 ;;		None
 10131 ;; Return value:  Size  Location     Type
 10132 ;;                  1    wreg      void 
 10133 ;; Registers used:
 10134 ;;		wreg, status,2, status,0, pclath, cstack
 10135 ;; Tracked objects:
 10136 ;;		On entry : 1F/0
 10137 ;;		On exit  : 1F/1
 10138 ;;		Unchanged: 0/0
 10139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10143 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10144 ;;Total ram usage:        0 bytes
 10145 ;; Hardware stack levels used:    1
 10146 ;; Hardware stack levels required when called:    6
 10147 ;; This function calls:
 10148 ;;		_EUSART_SetErrorHandler
 10149 ;;		_EUSART_SetFramingErrorHandler
 10150 ;;		_EUSART_SetOverrunErrorHandler
 10151 ;;		_EUSART_SetRxInterruptHandler
 10152 ;; This function is called by:
 10153 ;;		_SYSTEM_Initialize
 10154 ;; This function uses a non-reentrant model
 10155 ;;
 10156                           
 10157                           
 10158                           ;psect for function _EUSART_Initialize
 10159  08FE                     _EUSART_Initialize:	
 10160                           
 10161                           ;mcc_generated_files/eusart.c: 86:     PIE1bits.RCIE = 0;
 10162                           
 10163                           ;incstack = 0
 10164                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10165  08FE  0021               	movlb	1	; select bank1
 10166  08FF  1291               	bcf	17,5	;volatile
 10167                           
 10168                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 10169  0900  3065               	movlw	low _EUSART_Receive_ISR
 10170  0901  0020               	movlb	0	; select bank0
 10171  0902  00D1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 10172  0903  3009               	movlw	high _EUSART_Receive_ISR
 10173  0904  00D2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 10174  0905  3195  2573  3188   	fcall	_EUSART_SetRxInterruptHandler
 10175                           
 10176                           ;mcc_generated_files/eusart.c: 91:     BAUD1CON = 0x08;
 10177  0908  3008               	movlw	8
 10178  0909  0023               	movlb	3	; select bank3
 10179  090A  009F               	movwf	31	;volatile
 10180                           
 10181                           ;mcc_generated_files/eusart.c: 94:     RC1STA = 0x90;
 10182  090B  3090               	movlw	144
 10183  090C  009D               	movwf	29	;volatile
 10184                           
 10185                           ;mcc_generated_files/eusart.c: 97:     TX1STA = 0x24;
 10186  090D  3024               	movlw	36
 10187  090E  009E               	movwf	30	;volatile
 10188                           
 10189                           ;mcc_generated_files/eusart.c: 100:     SP1BRGL = 0x22;
 10190  090F  3022               	movlw	34
 10191  0910  009B               	movwf	27	;volatile
 10192                           
 10193                           ;mcc_generated_files/eusart.c: 103:     SP1BRGH = 0x00;
 10194  0911  019C               	clrf	28	;volatile
 10195                           
 10196                           ;mcc_generated_files/eusart.c: 106:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
 10197  0912  3071               	movlw	low _EUSART_DefaultFramingErrorHandler
 10198  0913  0020               	movlb	0	; select bank0
 10199  0914  00D1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 10200  0915  3008               	movlw	high _EUSART_DefaultFramingErrorHandler
 10201  0916  00D2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 10202  0917  3195  2563  3188   	fcall	_EUSART_SetFramingErrorHandler
 10203                           
 10204                           ;mcc_generated_files/eusart.c: 107:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
 10205  091A  30FA               	movlw	low _EUSART_DefaultOverrunErrorHandler
 10206  091B  0020               	movlb	0	; select bank0
 10207  091C  00D1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 10208  091D  3014               	movlw	high _EUSART_DefaultOverrunErrorHandler
 10209  091E  00D2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 10210  091F  3195  256B  3188   	fcall	_EUSART_SetOverrunErrorHandler
 10211                           
 10212                           ;mcc_generated_files/eusart.c: 108:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
 10213  0922  30E5               	movlw	low _EUSART_DefaultErrorHandler
 10214  0923  0020               	movlb	0	; select bank0
 10215  0924  00D1               	movwf	EUSART_SetErrorHandler@interruptHandler
 10216  0925  3014               	movlw	high _EUSART_DefaultErrorHandler
 10217  0926  00D2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 10218  0927  3195  255B         	fcall	_EUSART_SetErrorHandler
 10219                           
 10220                           ;mcc_generated_files/eusart.c: 110:     eusartRxLastError.status = 0;
 10221  0929  0020               	movlb	0	; select bank0
 10222  092A  01BC               	clrf	_eusartRxLastError	;volatile
 10223                           
 10224                           ;mcc_generated_files/eusart.c: 113:     eusartRxHead = 0;
 10225  092B  01BF               	clrf	_eusartRxHead	;volatile
 10226                           
 10227                           ;mcc_generated_files/eusart.c: 114:     eusartRxTail = 0;
 10228  092C  01BE               	clrf	_eusartRxTail	;volatile
 10229                           
 10230                           ;mcc_generated_files/eusart.c: 115:     eusartRxCount = 0;
 10231  092D  01BD               	clrf	_eusartRxCount	;volatile
 10232                           
 10233                           ;mcc_generated_files/eusart.c: 118:     PIE1bits.RCIE = 1;
 10234  092E  0021               	movlb	1	; select bank1
 10235  092F  1691               	bsf	17,5	;volatile
 10236  0930  0008               	return
 10237  0931                     __end_of_EUSART_Initialize:	
 10238                           
 10239                           	psect	text31
 10240  1573                     __ptext31:	
 10241 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 10242 ;; Defined at:
 10243 ;;		line 236 in file "mcc_generated_files/eusart.c"
 10244 ;; Parameters:    Size  Location     Type
 10245 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
 10246 ;;		 -> EUSART_CommandHandler_ISR(1), EUSART_Receive_ISR(1), 
 10247 ;; Auto vars:     Size  Location     Type
 10248 ;;		None
 10249 ;; Return value:  Size  Location     Type
 10250 ;;                  1    wreg      void 
 10251 ;; Registers used:
 10252 ;;		wreg
 10253 ;; Tracked objects:
 10254 ;;		On entry : 1F/0
 10255 ;;		On exit  : 1F/2
 10256 ;;		Unchanged: 0/0
 10257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10258 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10261 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10262 ;;Total ram usage:        2 bytes
 10263 ;; Hardware stack levels used:    1
 10264 ;; Hardware stack levels required when called:    5
 10265 ;; This function calls:
 10266 ;;		Nothing
 10267 ;; This function is called by:
 10268 ;;		_EUSART_Initialize
 10269 ;;		_uart_start
 10270 ;; This function uses a non-reentrant model
 10271 ;;
 10272                           
 10273                           
 10274                           ;psect for function _EUSART_SetRxInterruptHandler
 10275  1573                     _EUSART_SetRxInterruptHandler:	
 10276                           
 10277                           ;mcc_generated_files/eusart.c: 237:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
 10278                           
 10279                           ;incstack = 0
 10280                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 10281  1573  0852               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 10282  1574  0022               	movlb	2	; select bank2
 10283  1575  00EE               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
 10284  1576  0020               	movlb	0	; select bank0
 10285  1577  0851               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 10286  1578  0022               	movlb	2	; select bank2
 10287  1579  00ED               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
 10288  157A  0008               	return
 10289  157B                     __end_of_EUSART_SetRxInterruptHandler:	
 10290                           
 10291                           	psect	text32
 10292  156B                     __ptext32:	
 10293 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 10294 ;; Defined at:
 10295 ;;		line 227 in file "mcc_generated_files/eusart.c"
 10296 ;; Parameters:    Size  Location     Type
 10297 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
 10298 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 10299 ;; Auto vars:     Size  Location     Type
 10300 ;;		None
 10301 ;; Return value:  Size  Location     Type
 10302 ;;                  1    wreg      void 
 10303 ;; Registers used:
 10304 ;;		wreg
 10305 ;; Tracked objects:
 10306 ;;		On entry : 1F/0
 10307 ;;		On exit  : 1F/2
 10308 ;;		Unchanged: 0/0
 10309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10310 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;Total ram usage:        2 bytes
 10315 ;; Hardware stack levels used:    1
 10316 ;; Hardware stack levels required when called:    5
 10317 ;; This function calls:
 10318 ;;		Nothing
 10319 ;; This function is called by:
 10320 ;;		_EUSART_Initialize
 10321 ;; This function uses a non-reentrant model
 10322 ;;
 10323                           
 10324                           
 10325                           ;psect for function _EUSART_SetOverrunErrorHandler
 10326  156B                     _EUSART_SetOverrunErrorHandler:	
 10327                           
 10328                           ;mcc_generated_files/eusart.c: 228:     EUSART_OverrunErrorHandler = interruptHandler;
 10329                           
 10330                           ;incstack = 0
 10331                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 10332  156B  0852               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 10333  156C  0022               	movlb	2	; select bank2
 10334  156D  00EA               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
 10335  156E  0020               	movlb	0	; select bank0
 10336  156F  0851               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 10337  1570  0022               	movlb	2	; select bank2
 10338  1571  00E9               	movwf	_EUSART_OverrunErrorHandler^(0+256)
 10339  1572  0008               	return
 10340  1573                     __end_of_EUSART_SetOverrunErrorHandler:	
 10341                           
 10342                           	psect	text33
 10343  1563                     __ptext33:	
 10344 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 10345 ;; Defined at:
 10346 ;;		line 223 in file "mcc_generated_files/eusart.c"
 10347 ;; Parameters:    Size  Location     Type
 10348 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
 10349 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 10350 ;; Auto vars:     Size  Location     Type
 10351 ;;		None
 10352 ;; Return value:  Size  Location     Type
 10353 ;;                  1    wreg      void 
 10354 ;; Registers used:
 10355 ;;		wreg
 10356 ;; Tracked objects:
 10357 ;;		On entry : 1F/0
 10358 ;;		On exit  : 1F/2
 10359 ;;		Unchanged: 0/0
 10360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10361 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10364 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10365 ;;Total ram usage:        2 bytes
 10366 ;; Hardware stack levels used:    1
 10367 ;; Hardware stack levels required when called:    5
 10368 ;; This function calls:
 10369 ;;		Nothing
 10370 ;; This function is called by:
 10371 ;;		_EUSART_Initialize
 10372 ;; This function uses a non-reentrant model
 10373 ;;
 10374                           
 10375                           
 10376                           ;psect for function _EUSART_SetFramingErrorHandler
 10377  1563                     _EUSART_SetFramingErrorHandler:	
 10378                           
 10379                           ;mcc_generated_files/eusart.c: 224:     EUSART_FramingErrorHandler = interruptHandler;
 10380                           
 10381                           ;incstack = 0
 10382                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 10383  1563  0852               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 10384  1564  0022               	movlb	2	; select bank2
 10385  1565  00EC               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
 10386  1566  0020               	movlb	0	; select bank0
 10387  1567  0851               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 10388  1568  0022               	movlb	2	; select bank2
 10389  1569  00EB               	movwf	_EUSART_FramingErrorHandler^(0+256)
 10390  156A  0008               	return
 10391  156B                     __end_of_EUSART_SetFramingErrorHandler:	
 10392                           
 10393                           	psect	text34
 10394  155B                     __ptext34:	
 10395 ;; *************** function _EUSART_SetErrorHandler *****************
 10396 ;; Defined at:
 10397 ;;		line 231 in file "mcc_generated_files/eusart.c"
 10398 ;; Parameters:    Size  Location     Type
 10399 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
 10400 ;;		 -> EUSART_DefaultErrorHandler(1), 
 10401 ;; Auto vars:     Size  Location     Type
 10402 ;;		None
 10403 ;; Return value:  Size  Location     Type
 10404 ;;                  1    wreg      void 
 10405 ;; Registers used:
 10406 ;;		wreg
 10407 ;; Tracked objects:
 10408 ;;		On entry : 1F/0
 10409 ;;		On exit  : 1F/2
 10410 ;;		Unchanged: 0/0
 10411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10412 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10416 ;;Total ram usage:        2 bytes
 10417 ;; Hardware stack levels used:    1
 10418 ;; Hardware stack levels required when called:    5
 10419 ;; This function calls:
 10420 ;;		Nothing
 10421 ;; This function is called by:
 10422 ;;		_EUSART_Initialize
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           
 10427                           ;psect for function _EUSART_SetErrorHandler
 10428  155B                     _EUSART_SetErrorHandler:	
 10429                           
 10430                           ;mcc_generated_files/eusart.c: 232:     EUSART_ErrorHandler = interruptHandler;
 10431                           
 10432                           ;incstack = 0
 10433                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 10434  155B  0852               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 10435  155C  0022               	movlb	2	; select bank2
 10436  155D  00E8               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
 10437  155E  0020               	movlb	0	; select bank0
 10438  155F  0851               	movf	EUSART_SetErrorHandler@interruptHandler,w
 10439  1560  0022               	movlb	2	; select bank2
 10440  1561  00E7               	movwf	_EUSART_ErrorHandler^(0+256)
 10441  1562  0008               	return
 10442  1563                     __end_of_EUSART_SetErrorHandler:	
 10443                           
 10444                           	psect	text35
 10445  1624                     __ptext35:	
 10446 ;; *************** function _ADC_Initialize *****************
 10447 ;; Defined at:
 10448 ;;		line 67 in file "mcc_generated_files/adc.c"
 10449 ;; Parameters:    Size  Location     Type
 10450 ;;		None
 10451 ;; Auto vars:     Size  Location     Type
 10452 ;;		None
 10453 ;; Return value:  Size  Location     Type
 10454 ;;                  1    wreg      void 
 10455 ;; Registers used:
 10456 ;;		wreg, status,2, status,0, pclath, cstack
 10457 ;; Tracked objects:
 10458 ;;		On entry : B1F/1
 10459 ;;		On exit  : 1F/2
 10460 ;;		Unchanged: 0/0
 10461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10466 ;;Total ram usage:        0 bytes
 10467 ;; Hardware stack levels used:    1
 10468 ;; Hardware stack levels required when called:    6
 10469 ;; This function calls:
 10470 ;;		_ADC_SetInterruptHandler
 10471 ;; This function is called by:
 10472 ;;		_SYSTEM_Initialize
 10473 ;; This function uses a non-reentrant model
 10474 ;;
 10475                           
 10476                           
 10477                           ;psect for function _ADC_Initialize
 10478  1624                     _ADC_Initialize:	
 10479                           
 10480                           ;mcc_generated_files/adc.c: 72:     ADCON0 = 0x01;
 10481                           
 10482                           ;incstack = 0
 10483                           ; Regs used in _ADC_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10484  1624  3001               	movlw	1
 10485  1625  009D               	movwf	29	;volatile
 10486                           
 10487                           ;mcc_generated_files/adc.c: 75:     ADCON1 = 0xE0;
 10488  1626  30E0               	movlw	224
 10489  1627  009E               	movwf	30	;volatile
 10490                           
 10491                           ;mcc_generated_files/adc.c: 78:     ADCON2 = 0x50;
 10492  1628  3050               	movlw	80
 10493  1629  009F               	movwf	31	;volatile
 10494                           
 10495                           ;mcc_generated_files/adc.c: 81:     ADRESL = 0x00;
 10496  162A  019B               	clrf	27	;volatile
 10497                           
 10498                           ;mcc_generated_files/adc.c: 84:     ADRESH = 0x00;
 10499  162B  019C               	clrf	28	;volatile
 10500                           
 10501                           ;mcc_generated_files/adc.c: 87:     PIE1bits.ADIE = 1;
 10502  162C  1711               	bsf	17,6	;volatile
 10503                           
 10504                           ;mcc_generated_files/adc.c: 90:     ADC_SetInterruptHandler(ADC_DefaultInterruptHandler)
      +                          ;
 10505  162D  30E4               	movlw	low _ADC_DefaultInterruptHandler
 10506  162E  0020               	movlb	0	; select bank0
 10507  162F  00D1               	movwf	ADC_SetInterruptHandler@InterruptHandler
 10508  1630  3014               	movlw	high _ADC_DefaultInterruptHandler
 10509  1631  00D2               	movwf	ADC_SetInterruptHandler@InterruptHandler+1
 10510  1632  3195  254B         	fcall	_ADC_SetInterruptHandler
 10511  1634  0008               	return
 10512  1635                     __end_of_ADC_Initialize:	
 10513                           
 10514                           	psect	text36
 10515  0B39                     __ptext36:	
 10516 ;; *************** function _ApplicationInit *****************
 10517 ;; Defined at:
 10518 ;;		line 13 in file "GlobalSystem.c"
 10519 ;; Parameters:    Size  Location     Type
 10520 ;;		None
 10521 ;; Auto vars:     Size  Location     Type
 10522 ;;  val             2   22[BANK0 ] unsigned short 
 10523 ;;  chopper_stat    2   19[BANK0 ] unsigned short 
 10524 ;;  invalid_para    1   21[BANK0 ] _Bool 
 10525 ;; Return value:  Size  Location     Type
 10526 ;;                  1    wreg      void 
 10527 ;; Registers used:
 10528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10529 ;; Tracked objects:
 10530 ;;		On entry : 1F/1
 10531 ;;		On exit  : 1E/0
 10532 ;;		Unchanged: 0/0
 10533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10535 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10538 ;;Total ram usage:        5 bytes
 10539 ;; Hardware stack levels used:    1
 10540 ;; Hardware stack levels required when called:    8
 10541 ;; This function calls:
 10542 ;;		_FLASH_ReadWord
 10543 ;;		_set_relay_reset_voltage
 10544 ;;		_set_reset_duration
 10545 ;;		_set_vdc_critic
 10546 ;;		_set_vdc_max
 10547 ;;		_set_vdc_min
 10548 ;;		_set_vdc_speed
 10549 ;;		_start_chopper
 10550 ;; This function is called by:
 10551 ;;		_main
 10552 ;; This function uses a non-reentrant model
 10553 ;;
 10554                           
 10555                           
 10556                           ;psect for function _ApplicationInit
 10557  0B39                     _ApplicationInit:	
 10558                           
 10559                           ;GlobalSystem.c: 15:     _Bool invalid_param = 0;
 10560                           
 10561                           ;incstack = 0
 10562                           ; Regs used in _ApplicationInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10563  0B39  0020               	movlb	0	; select bank0
 10564  0B3A  01DD               	clrf	ApplicationInit@invalid_param
 10565                           
 10566                           ;GlobalSystem.c: 16:     uint16_t chopper_state = FLASH_ReadWord(0x1F00);
 10567  0B3B  3000               	movlw	0
 10568  0B3C  00D1               	movwf	FLASH_ReadWord@flashAddr
 10569  0B3D  301F               	movlw	31
 10570  0B3E  00D2               	movwf	FLASH_ReadWord@flashAddr+1
 10571  0B3F  3197  2755  318B   	fcall	_FLASH_ReadWord
 10572  0B42  0852               	movf	?_FLASH_ReadWord+1,w
 10573  0B43  00DC               	movwf	ApplicationInit@chopper_state+1
 10574  0B44  0851               	movf	?_FLASH_ReadWord,w
 10575  0B45  00DB               	movwf	ApplicationInit@chopper_state
 10576                           
 10577                           ;GlobalSystem.c: 17:     uint16_t val = FLASH_ReadWord(0x1F00 +1);
 10578  0B46  3001               	movlw	1
 10579  0B47  00D1               	movwf	FLASH_ReadWord@flashAddr
 10580  0B48  301F               	movlw	31
 10581  0B49  00D2               	movwf	FLASH_ReadWord@flashAddr+1
 10582  0B4A  3197  2755  318B   	fcall	_FLASH_ReadWord
 10583  0B4D  0852               	movf	?_FLASH_ReadWord+1,w
 10584  0B4E  00DF               	movwf	ApplicationInit@val+1
 10585  0B4F  0851               	movf	?_FLASH_ReadWord,w
 10586  0B50  00DE               	movwf	ApplicationInit@val
 10587                           
 10588                           ;GlobalSystem.c: 18:     if( val <= 800 )
 10589  0B51  3003               	movlw	3
 10590  0B52  025F               	subwf	ApplicationInit@val+1,w
 10591  0B53  3021               	movlw	33
 10592  0B54  1903               	skipnz
 10593  0B55  025E               	subwf	ApplicationInit@val,w
 10594  0B56  1803               	skipnc
 10595  0B57  2B60               	goto	l1100
 10596                           
 10597                           ;GlobalSystem.c: 19:         set_vdc_min(val);
 10598  0B58  085F               	movf	ApplicationInit@val+1,w
 10599  0B59  00D5               	movwf	set_vdc_min@vmin+1
 10600  0B5A  085E               	movf	ApplicationInit@val,w
 10601  0B5B  00D4               	movwf	set_vdc_min@vmin
 10602  0B5C  3195  25CA  318B   	fcall	_set_vdc_min
 10603  0B5F  2B62               	goto	l3919
 10604  0B60                     l1100:	
 10605                           ;GlobalSystem.c: 20:     else
 10606                           
 10607                           
 10608                           ;GlobalSystem.c: 21:         invalid_param = 1;
 10609  0B60  01DD               	clrf	ApplicationInit@invalid_param
 10610  0B61  0ADD               	incf	ApplicationInit@invalid_param,f
 10611  0B62                     l3919:	
 10612                           
 10613                           ;GlobalSystem.c: 23:     val = FLASH_ReadWord(0x1F00 +2);
 10614  0B62  3002               	movlw	2
 10615  0B63  00D1               	movwf	FLASH_ReadWord@flashAddr
 10616  0B64  301F               	movlw	31
 10617  0B65  00D2               	movwf	FLASH_ReadWord@flashAddr+1
 10618  0B66  3197  2755  318B   	fcall	_FLASH_ReadWord
 10619  0B69  0852               	movf	?_FLASH_ReadWord+1,w
 10620  0B6A  00DF               	movwf	ApplicationInit@val+1
 10621  0B6B  0851               	movf	?_FLASH_ReadWord,w
 10622  0B6C  00DE               	movwf	ApplicationInit@val
 10623                           
 10624                           ;GlobalSystem.c: 24:     if( val <= 800 )
 10625  0B6D  3003               	movlw	3
 10626  0B6E  025F               	subwf	ApplicationInit@val+1,w
 10627  0B6F  3021               	movlw	33
 10628  0B70  1903               	skipnz
 10629  0B71  025E               	subwf	ApplicationInit@val,w
 10630  0B72  1803               	skipnc
 10631  0B73  2B7C               	goto	l1102
 10632                           
 10633                           ;GlobalSystem.c: 25:         set_vdc_max(val);
 10634  0B74  085F               	movf	ApplicationInit@val+1,w
 10635  0B75  00D5               	movwf	set_vdc_max@vmax+1
 10636  0B76  085E               	movf	ApplicationInit@val,w
 10637  0B77  00D4               	movwf	set_vdc_max@vmax
 10638  0B78  3195  25BF  318B   	fcall	_set_vdc_max
 10639  0B7B  2B7E               	goto	l3925
 10640  0B7C                     l1102:	
 10641                           ;GlobalSystem.c: 26:     else
 10642                           
 10643                           
 10644                           ;GlobalSystem.c: 27:         invalid_param = 1;
 10645  0B7C  01DD               	clrf	ApplicationInit@invalid_param
 10646  0B7D  0ADD               	incf	ApplicationInit@invalid_param,f
 10647  0B7E                     l3925:	
 10648                           
 10649                           ;GlobalSystem.c: 29:     val = FLASH_ReadWord(0x1F00 +3);
 10650  0B7E  3003               	movlw	3
 10651  0B7F  00D1               	movwf	FLASH_ReadWord@flashAddr
 10652  0B80  301F               	movlw	31
 10653  0B81  00D2               	movwf	FLASH_ReadWord@flashAddr+1
 10654  0B82  3197  2755  318B   	fcall	_FLASH_ReadWord
 10655  0B85  0852               	movf	?_FLASH_ReadWord+1,w
 10656  0B86  00DF               	movwf	ApplicationInit@val+1
 10657  0B87  0851               	movf	?_FLASH_ReadWord,w
 10658  0B88  00DE               	movwf	ApplicationInit@val
 10659                           
 10660                           ;GlobalSystem.c: 30:     if( val <= 800 )
 10661  0B89  3003               	movlw	3
 10662  0B8A  025F               	subwf	ApplicationInit@val+1,w
 10663  0B8B  3021               	movlw	33
 10664  0B8C  1903               	skipnz
 10665  0B8D  025E               	subwf	ApplicationInit@val,w
 10666  0B8E  1803               	skipnc
 10667  0B8F  2B98               	goto	l1104
 10668                           
 10669                           ;GlobalSystem.c: 31:         set_vdc_critic(val);
 10670  0B90  085F               	movf	ApplicationInit@val+1,w
 10671  0B91  00D5               	movwf	set_vdc_critic@vc+1
 10672  0B92  085E               	movf	ApplicationInit@val,w
 10673  0B93  00D4               	movwf	set_vdc_critic@vc
 10674  0B94  3195  25B4  318B   	fcall	_set_vdc_critic
 10675  0B97  2B9A               	goto	l3931
 10676  0B98                     l1104:	
 10677                           ;GlobalSystem.c: 32:     else
 10678                           
 10679                           
 10680                           ;GlobalSystem.c: 33:         invalid_param = 1;
 10681  0B98  01DD               	clrf	ApplicationInit@invalid_param
 10682  0B99  0ADD               	incf	ApplicationInit@invalid_param,f
 10683  0B9A                     l3931:	
 10684                           
 10685                           ;GlobalSystem.c: 35:     val = FLASH_ReadWord(0x1F00 +4);
 10686  0B9A  3004               	movlw	4
 10687  0B9B  00D1               	movwf	FLASH_ReadWord@flashAddr
 10688  0B9C  301F               	movlw	31
 10689  0B9D  00D2               	movwf	FLASH_ReadWord@flashAddr+1
 10690  0B9E  3197  2755  318B   	fcall	_FLASH_ReadWord
 10691  0BA1  0852               	movf	?_FLASH_ReadWord+1,w
 10692  0BA2  00DF               	movwf	ApplicationInit@val+1
 10693  0BA3  0851               	movf	?_FLASH_ReadWord,w
 10694  0BA4  00DE               	movwf	ApplicationInit@val
 10695                           
 10696                           ;GlobalSystem.c: 36:     if( val <= 25500 )
 10697  0BA5  3063               	movlw	99
 10698  0BA6  025F               	subwf	ApplicationInit@val+1,w
 10699  0BA7  309D               	movlw	157
 10700  0BA8  1903               	skipnz
 10701  0BA9  025E               	subwf	ApplicationInit@val,w
 10702  0BAA  1803               	skipnc
 10703  0BAB  2BB4               	goto	l1106
 10704                           
 10705                           ;GlobalSystem.c: 37:         set_vdc_speed(val);
 10706  0BAC  085F               	movf	ApplicationInit@val+1,w
 10707  0BAD  00DA               	movwf	set_vdc_speed@msDelay+1
 10708  0BAE  085E               	movf	ApplicationInit@val,w
 10709  0BAF  00D9               	movwf	set_vdc_speed@msDelay
 10710  0BB0  3197  27B3  318B   	fcall	_set_vdc_speed
 10711  0BB3  2BB6               	goto	l3937
 10712  0BB4                     l1106:	
 10713                           ;GlobalSystem.c: 38:     else
 10714                           
 10715                           
 10716                           ;GlobalSystem.c: 39:         invalid_param = 1;
 10717  0BB4  01DD               	clrf	ApplicationInit@invalid_param
 10718  0BB5  0ADD               	incf	ApplicationInit@invalid_param,f
 10719  0BB6                     l3937:	
 10720                           
 10721                           ;GlobalSystem.c: 41:     val = FLASH_ReadWord(0x1F00 +5);
 10722  0BB6  3005               	movlw	5
 10723  0BB7  0020               	movlb	0	; select bank0
 10724  0BB8  00D1               	movwf	FLASH_ReadWord@flashAddr
 10725  0BB9  301F               	movlw	31
 10726  0BBA  00D2               	movwf	FLASH_ReadWord@flashAddr+1
 10727  0BBB  3197  2755  318B   	fcall	_FLASH_ReadWord
 10728  0BBE  0852               	movf	?_FLASH_ReadWord+1,w
 10729  0BBF  00DF               	movwf	ApplicationInit@val+1
 10730  0BC0  0851               	movf	?_FLASH_ReadWord,w
 10731  0BC1  00DE               	movwf	ApplicationInit@val
 10732                           
 10733                           ;GlobalSystem.c: 42:     if( val <= 800 )
 10734  0BC2  3003               	movlw	3
 10735  0BC3  025F               	subwf	ApplicationInit@val+1,w
 10736  0BC4  3021               	movlw	33
 10737  0BC5  1903               	skipnz
 10738  0BC6  025E               	subwf	ApplicationInit@val,w
 10739  0BC7  1803               	skipnc
 10740  0BC8  2BD1               	goto	l1108
 10741                           
 10742                           ;GlobalSystem.c: 43:         set_relay_reset_voltage(val);
 10743  0BC9  085F               	movf	ApplicationInit@val+1,w
 10744  0BCA  00D2               	movwf	set_relay_reset_voltage@relay_vthres+1
 10745  0BCB  085E               	movf	ApplicationInit@val,w
 10746  0BCC  00D1               	movwf	set_relay_reset_voltage@relay_vthres
 10747  0BCD  3196  2672  318B   	fcall	_set_relay_reset_voltage
 10748  0BD0  2BD3               	goto	l3943
 10749  0BD1                     l1108:	
 10750                           ;GlobalSystem.c: 44:     else
 10751                           
 10752                           
 10753                           ;GlobalSystem.c: 45:         invalid_param = 1;
 10754  0BD1  01DD               	clrf	ApplicationInit@invalid_param
 10755  0BD2  0ADD               	incf	ApplicationInit@invalid_param,f
 10756  0BD3                     l3943:	
 10757                           
 10758                           ;GlobalSystem.c: 47:     val = FLASH_ReadWord(0x1F00 +6);
 10759  0BD3  3006               	movlw	6
 10760  0BD4  00D1               	movwf	FLASH_ReadWord@flashAddr
 10761  0BD5  301F               	movlw	31
 10762  0BD6  00D2               	movwf	FLASH_ReadWord@flashAddr+1
 10763  0BD7  3197  2755  318B   	fcall	_FLASH_ReadWord
 10764  0BDA  0852               	movf	?_FLASH_ReadWord+1,w
 10765  0BDB  00DF               	movwf	ApplicationInit@val+1
 10766  0BDC  0851               	movf	?_FLASH_ReadWord,w
 10767  0BDD  00DE               	movwf	ApplicationInit@val
 10768                           
 10769                           ;GlobalSystem.c: 48:     if( val <= 25500 )
 10770  0BDE  3063               	movlw	99
 10771  0BDF  025F               	subwf	ApplicationInit@val+1,w
 10772  0BE0  309D               	movlw	157
 10773  0BE1  1903               	skipnz
 10774  0BE2  025E               	subwf	ApplicationInit@val,w
 10775  0BE3  1803               	skipnc
 10776  0BE4  2BED               	goto	l1110
 10777                           
 10778                           ;GlobalSystem.c: 49:         set_reset_duration(val);
 10779  0BE5  085F               	movf	ApplicationInit@val+1,w
 10780  0BE6  00DA               	movwf	set_reset_duration@reset_dur_ms+1
 10781  0BE7  085E               	movf	ApplicationInit@val,w
 10782  0BE8  00D9               	movwf	set_reset_duration@reset_dur_ms
 10783  0BE9  3188  20CE  318B   	fcall	_set_reset_duration
 10784  0BEC  2BEF               	goto	l3949
 10785  0BED                     l1110:	
 10786                           ;GlobalSystem.c: 50:     else
 10787                           
 10788                           
 10789                           ;GlobalSystem.c: 51:         invalid_param = 1;
 10790  0BED  01DD               	clrf	ApplicationInit@invalid_param
 10791  0BEE  0ADD               	incf	ApplicationInit@invalid_param,f
 10792  0BEF                     l3949:	
 10793                           
 10794                           ;GlobalSystem.c: 53:     if( invalid_param == 0 )
 10795  0BEF  0020               	movlb	0	; select bank0
 10796  0BF0  085D               	movf	ApplicationInit@invalid_param,w
 10797  0BF1  1D03               	btfss	3,2
 10798  0BF2  2C0B               	goto	l3959
 10799                           
 10800                           ;GlobalSystem.c: 54:     {;GlobalSystem.c: 57:         if( chopper_state == 0x0ABC || ch
      +                          opper_state == 0x0CBA )
 10801  0BF3  30BC               	movlw	188
 10802  0BF4  065B               	xorwf	ApplicationInit@chopper_state,w
 10803  0BF5  300A               	movlw	10
 10804  0BF6  1903               	skipnz
 10805  0BF7  065C               	xorwf	ApplicationInit@chopper_state+1,w
 10806  0BF8  1903               	btfsc	3,2
 10807  0BF9  2C01               	goto	l3955
 10808  0BFA  30BA               	movlw	186
 10809  0BFB  065B               	xorwf	ApplicationInit@chopper_state,w
 10810  0BFC  300C               	movlw	12
 10811  0BFD  1903               	skipnz
 10812  0BFE  065C               	xorwf	ApplicationInit@chopper_state+1,w
 10813  0BFF  1D03               	btfss	3,2
 10814  0C00  0008               	return
 10815  0C01                     l3955:	
 10816                           
 10817                           ;GlobalSystem.c: 58:         {;GlobalSystem.c: 59:             if( chopper_state == 0x0A
      +                          BC )
 10818  0C01  30BC               	movlw	188
 10819  0C02  065B               	xorwf	ApplicationInit@chopper_state,w
 10820  0C03  300A               	movlw	10
 10821  0C04  1903               	skipnz
 10822  0C05  065C               	xorwf	ApplicationInit@chopper_state+1,w
 10823  0C06  1D03               	btfss	3,2
 10824  0C07  0008               	return
 10825                           
 10826                           ;GlobalSystem.c: 60:                 start_chopper();
 10827  0C08  3196  269E         	fcall	_start_chopper
 10828                           
 10829                           ;GlobalSystem.c: 62:         else
 10830  0C0A  0008               	return
 10831  0C0B                     l3959:	
 10832                           
 10833                           ;GlobalSystem.c: 66:     {;GlobalSystem.c: 69:         set_vdc_min(0);
 10834  0C0B  3000               	movlw	0
 10835  0C0C  00D4               	movwf	set_vdc_min@vmin
 10836  0C0D  00D5               	movwf	set_vdc_min@vmin+1
 10837  0C0E  3195  25CA  318B   	fcall	_set_vdc_min
 10838                           
 10839                           ;GlobalSystem.c: 70:         set_vdc_max(0);
 10840  0C11  3000               	movlw	0
 10841  0C12  00D4               	movwf	set_vdc_max@vmax
 10842  0C13  00D5               	movwf	set_vdc_max@vmax+1
 10843  0C14  3195  25BF  318B   	fcall	_set_vdc_max
 10844                           
 10845                           ;GlobalSystem.c: 71:         set_vdc_critic(0);
 10846  0C17  3000               	movlw	0
 10847  0C18  00D4               	movwf	set_vdc_critic@vc
 10848  0C19  00D5               	movwf	set_vdc_critic@vc+1
 10849  0C1A  3195  25B4  318B   	fcall	_set_vdc_critic
 10850                           
 10851                           ;GlobalSystem.c: 72:         set_vdc_speed(0);
 10852  0C1D  3000               	movlw	0
 10853  0C1E  00D9               	movwf	set_vdc_speed@msDelay
 10854  0C1F  00DA               	movwf	set_vdc_speed@msDelay+1
 10855  0C20  3197  27B3  318B   	fcall	_set_vdc_speed
 10856                           
 10857                           ;GlobalSystem.c: 73:         set_relay_reset_voltage(0);
 10858  0C23  3000               	movlw	0
 10859  0C24  0020               	movlb	0	; select bank0
 10860  0C25  00D1               	movwf	set_relay_reset_voltage@relay_vthres
 10861  0C26  00D2               	movwf	set_relay_reset_voltage@relay_vthres+1
 10862  0C27  3196  2672  318B   	fcall	_set_relay_reset_voltage
 10863                           
 10864                           ;GlobalSystem.c: 74:         set_reset_duration(0);
 10865  0C2A  3000               	movlw	0
 10866  0C2B  00D9               	movwf	set_reset_duration@reset_dur_ms
 10867  0C2C  00DA               	movwf	set_reset_duration@reset_dur_ms+1
 10868  0C2D  3188  20CE         	fcall	_set_reset_duration
 10869  0C2F  0008               	return
 10870  0C30                     __end_of_ApplicationInit:	
 10871                           
 10872                           	psect	text37
 10873  169E                     __ptext37:	
 10874 ;; *************** function _start_chopper *****************
 10875 ;; Defined at:
 10876 ;;		line 224 in file "vcontrol.c"
 10877 ;; Parameters:    Size  Location     Type
 10878 ;;		None
 10879 ;; Auto vars:     Size  Location     Type
 10880 ;;		None
 10881 ;; Return value:  Size  Location     Type
 10882 ;;                  1    wreg      void 
 10883 ;; Registers used:
 10884 ;;		wreg, status,2, status,0, pclath, cstack
 10885 ;; Tracked objects:
 10886 ;;		On entry : 1D/2
 10887 ;;		On exit  : 1F/0
 10888 ;;		Unchanged: 0/0
 10889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10894 ;;Total ram usage:        0 bytes
 10895 ;; Hardware stack levels used:    1
 10896 ;; Hardware stack levels required when called:    7
 10897 ;; This function calls:
 10898 ;;		_init_chopper
 10899 ;; This function is called by:
 10900 ;;		_uart_task
 10901 ;;		_ApplicationInit
 10902 ;; This function uses a non-reentrant model
 10903 ;;
 10904                           
 10905                           
 10906                           ;psect for function _start_chopper
 10907  169E                     _start_chopper:	
 10908                           
 10909                           ;vcontrol.c: 226:     if( chopper_active == 1 )
 10910                           
 10911                           ;incstack = 0
 10912                           ; Regs used in _start_chopper: [wreg+status,2+status,0+pclath+cstack]
 10913  169E  0020               	movlb	0	; select bank0
 10914  169F  0332               	decf	_chopper_active,w
 10915  16A0  1903               	btfsc	3,2
 10916  16A1  0008               	return
 10917                           
 10918                           ;vcontrol.c: 228:     TRISAbits.TRISA5 = 0;
 10919  16A2  0021               	movlb	1	; select bank1
 10920  16A3  128C               	bcf	12,5	;volatile
 10921                           
 10922                           ;vcontrol.c: 229:     TRISAbits.TRISA4 = 0;
 10923  16A4  120C               	bcf	12,4	;volatile
 10924                           
 10925                           ;vcontrol.c: 230:     pwm_duty = 0;
 10926  16A5  0020               	movlb	0	; select bank0
 10927  16A6  01A6               	clrf	_pwm_duty
 10928  16A7  01A7               	clrf	_pwm_duty+1
 10929                           
 10930                           ;vcontrol.c: 231:     current_duty = 0;
 10931  16A8  01A2               	clrf	_current_duty
 10932  16A9  01A3               	clrf	_current_duty+1
 10933                           
 10934                           ;vcontrol.c: 232:     target_duty = 0;
 10935  16AA  01A4               	clrf	_target_duty
 10936  16AB  01A5               	clrf	_target_duty+1
 10937                           
 10938                           ;vcontrol.c: 234:     if( init_required == 1 )
 10939  16AC  0365               	decf	_init_required,w
 10940  16AD  1D03               	btfss	3,2
 10941  16AE  2EB1               	goto	l3825
 10942                           
 10943                           ;vcontrol.c: 235:         init_chopper();
 10944  16AF  3197  27D9         	fcall	_init_chopper
 10945  16B1                     l3825:	
 10946                           
 10947                           ;vcontrol.c: 237:     chopper_active = 1;
 10948  16B1  0020               	movlb	0	; select bank0
 10949  16B2  01B2               	clrf	_chopper_active
 10950  16B3  0AB2               	incf	_chopper_active,f
 10951  16B4  0008               	return
 10952  16B5                     __end_of_start_chopper:	
 10953                           
 10954                           	psect	text38
 10955  17D9                     __ptext38:	
 10956 ;; *************** function _init_chopper *****************
 10957 ;; Defined at:
 10958 ;;		line 210 in file "vcontrol.c"
 10959 ;; Parameters:    Size  Location     Type
 10960 ;;		None
 10961 ;; Auto vars:     Size  Location     Type
 10962 ;;		None
 10963 ;; Return value:  Size  Location     Type
 10964 ;;                  1    wreg      void 
 10965 ;; Registers used:
 10966 ;;		wreg, status,2, status,0, pclath, cstack
 10967 ;; Tracked objects:
 10968 ;;		On entry : 1E/1
 10969 ;;		On exit  : 1D/0
 10970 ;;		Unchanged: 0/0
 10971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10975 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10976 ;;Total ram usage:        1 bytes
 10977 ;; Hardware stack levels used:    1
 10978 ;; Hardware stack levels required when called:    6
 10979 ;; This function calls:
 10980 ;;		_ADC_SelectChannel
 10981 ;;		_ADC_SetInterruptHandler
 10982 ;;		_ADC_StartConversion
 10983 ;;		_TMR2_SetInterruptHandler
 10984 ;;		_TMR2_StartTimer
 10985 ;; This function is called by:
 10986 ;;		_main
 10987 ;;		_start_chopper
 10988 ;; This function uses a non-reentrant model
 10989 ;;
 10990                           
 10991                           
 10992                           ;psect for function _init_chopper
 10993  17D9                     _init_chopper:	
 10994                           
 10995                           ;vcontrol.c: 212:     if( init_required == 0 )
 10996                           
 10997                           ;incstack = 0
 10998                           ; Regs used in _init_chopper: [wreg+status,2+status,0+pclath+cstack]
 10999  17D9  0020               	movlb	0	; select bank0
 11000  17DA  0865               	movf	_init_required,w
 11001  17DB  1903               	btfsc	3,2
 11002  17DC  0008               	return
 11003                           
 11004                           ;vcontrol.c: 214:     init_required = 0;
 11005  17DD  01E5               	clrf	_init_required
 11006                           
 11007                           ;vcontrol.c: 215:     ADC_SelectChannel(V_BUSDC);
 11008  17DE  3007               	movlw	7
 11009  17DF  3196  2615  3197   	fcall	_ADC_SelectChannel
 11010                           
 11011                           ;vcontrol.c: 216:     _delay((unsigned long)((1)*(16000000/4000.0)));
 11012  17E2  3006               	movlw	6
 11013  17E3  0020               	movlb	0	; select bank0
 11014  17E4  00D3               	movwf	??_init_chopper
 11015  17E5  3030               	movlw	48
 11016  17E6                     u3147:	
 11017  17E6  0B89               	decfsz	9,f
 11018  17E7  2FE6               	goto	u3147
 11019  17E8  0BD3               	decfsz	??_init_chopper,f
 11020  17E9  2FE6               	goto	u3147
 11021  17EA  0000               	nop
 11022                           
 11023                           ;vcontrol.c: 217:     ADC_StartConversion();
 11024  17EB  3194  24E8  3197   	fcall	_ADC_StartConversion
 11025                           
 11026                           ;vcontrol.c: 218:     TMR2_StartTimer();
 11027  17EE  3194  24EB  3197   	fcall	_TMR2_StartTimer
 11028                           
 11029                           ;vcontrol.c: 220:     TMR2_SetInterruptHandler(TMR2_DutyControlHandler_ISR);
 11030  17F1  309F               	movlw	low _TMR2_DutyControlHandler_ISR
 11031  17F2  00D1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
 11032  17F3  3009               	movlw	high _TMR2_DutyControlHandler_ISR
 11033  17F4  00D2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
 11034  17F5  3195  2553  3197   	fcall	_TMR2_SetInterruptHandler
 11035                           
 11036                           ;vcontrol.c: 221:     ADC_SetInterruptHandler(ADC_VoltageControlHandler_ISR);
 11037  17F8  3030               	movlw	low _ADC_VoltageControlHandler_ISR
 11038  17F9  0020               	movlb	0	; select bank0
 11039  17FA  00D1               	movwf	ADC_SetInterruptHandler@InterruptHandler
 11040  17FB  300C               	movlw	high _ADC_VoltageControlHandler_ISR
 11041  17FC  00D2               	movwf	ADC_SetInterruptHandler@InterruptHandler+1
 11042  17FD  3195  254B         	fcall	_ADC_SetInterruptHandler
 11043  17FF  0008               	return
 11044  1800                     __end_of_init_chopper:	
 11045                           
 11046                           	psect	text39
 11047  14EB                     __ptext39:	
 11048 ;; *************** function _TMR2_StartTimer *****************
 11049 ;; Defined at:
 11050 ;;		line 87 in file "mcc_generated_files/tmr2.c"
 11051 ;; Parameters:    Size  Location     Type
 11052 ;;		None
 11053 ;; Auto vars:     Size  Location     Type
 11054 ;;		None
 11055 ;; Return value:  Size  Location     Type
 11056 ;;                  1    wreg      void 
 11057 ;; Registers used:
 11058 ;;		None
 11059 ;; Tracked objects:
 11060 ;;		On entry : 1F/1
 11061 ;;		On exit  : 1F/0
 11062 ;;		Unchanged: 0/0
 11063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;Total ram usage:        0 bytes
 11069 ;; Hardware stack levels used:    1
 11070 ;; Hardware stack levels required when called:    5
 11071 ;; This function calls:
 11072 ;;		Nothing
 11073 ;; This function is called by:
 11074 ;;		_init_chopper
 11075 ;; This function uses a non-reentrant model
 11076 ;;
 11077                           
 11078                           
 11079                           ;psect for function _TMR2_StartTimer
 11080  14EB                     _TMR2_StartTimer:	
 11081                           
 11082                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
 11083                           
 11084                           ;incstack = 0
 11085                           ; Regs used in _TMR2_StartTimer: []
 11086  14EB  0020               	movlb	0	; select bank0
 11087  14EC  151C               	bsf	28,2	;volatile
 11088  14ED  0008               	return
 11089  14EE                     __end_of_TMR2_StartTimer:	
 11090                           
 11091                           	psect	text40
 11092  1553                     __ptext40:	
 11093 ;; *************** function _TMR2_SetInterruptHandler *****************
 11094 ;; Defined at:
 11095 ;;		line 140 in file "mcc_generated_files/tmr2.c"
 11096 ;; Parameters:    Size  Location     Type
 11097 ;;  InterruptHan    2    9[BANK0 ] PTR FTN()void 
 11098 ;;		 -> TMR2_DutyControlHandler_ISR(1), TMR2_DefaultInterruptHandler(1), 
 11099 ;; Auto vars:     Size  Location     Type
 11100 ;;		None
 11101 ;; Return value:  Size  Location     Type
 11102 ;;                  1    wreg      void 
 11103 ;; Registers used:
 11104 ;;		wreg
 11105 ;; Tracked objects:
 11106 ;;		On entry : 1F/0
 11107 ;;		On exit  : 1F/2
 11108 ;;		Unchanged: 0/0
 11109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11110 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11113 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11114 ;;Total ram usage:        2 bytes
 11115 ;; Hardware stack levels used:    1
 11116 ;; Hardware stack levels required when called:    5
 11117 ;; This function calls:
 11118 ;;		Nothing
 11119 ;; This function is called by:
 11120 ;;		_TMR2_Initialize
 11121 ;;		_init_chopper
 11122 ;; This function uses a non-reentrant model
 11123 ;;
 11124                           
 11125                           
 11126                           ;psect for function _TMR2_SetInterruptHandler
 11127  1553                     _TMR2_SetInterruptHandler:	
 11128                           
 11129                           ;mcc_generated_files/tmr2.c: 141:     TMR2_InterruptHandler = InterruptHandler;
 11130                           
 11131                           ;incstack = 0
 11132                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
 11133  1553  0852               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
 11134  1554  0022               	movlb	2	; select bank2
 11135  1555  00E6               	movwf	(_TMR2_InterruptHandler+1)^(0+256)
 11136  1556  0020               	movlb	0	; select bank0
 11137  1557  0851               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
 11138  1558  0022               	movlb	2	; select bank2
 11139  1559  00E5               	movwf	_TMR2_InterruptHandler^(0+256)
 11140  155A  0008               	return
 11141  155B                     __end_of_TMR2_SetInterruptHandler:	
 11142                           
 11143                           	psect	text41
 11144  14E8                     __ptext41:	
 11145 ;; *************** function _ADC_StartConversion *****************
 11146 ;; Defined at:
 11147 ;;		line 101 in file "mcc_generated_files/adc.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;		None
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;		None
 11152 ;; Return value:  Size  Location     Type
 11153 ;;                  1    wreg      void 
 11154 ;; Registers used:
 11155 ;;		None
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/1
 11158 ;;		On exit  : 1F/1
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;Total ram usage:        0 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; Hardware stack levels required when called:    5
 11168 ;; This function calls:
 11169 ;;		Nothing
 11170 ;; This function is called by:
 11171 ;;		_init_chopper
 11172 ;; This function uses a non-reentrant model
 11173 ;;
 11174                           
 11175                           
 11176                           ;psect for function _ADC_StartConversion
 11177  14E8                     _ADC_StartConversion:	
 11178                           
 11179                           ;mcc_generated_files/adc.c: 104:     ADCON0bits.GO_nDONE = 1;
 11180                           
 11181                           ;incstack = 0
 11182                           ; Regs used in _ADC_StartConversion: []
 11183  14E8  0021               	movlb	1	; select bank1
 11184  14E9  149D               	bsf	29,1	;volatile
 11185  14EA  0008               	return
 11186  14EB                     __end_of_ADC_StartConversion:	
 11187                           
 11188                           	psect	text42
 11189  154B                     __ptext42:	
 11190 ;; *************** function _ADC_SetInterruptHandler *****************
 11191 ;; Defined at:
 11192 ;;		line 160 in file "mcc_generated_files/adc.c"
 11193 ;; Parameters:    Size  Location     Type
 11194 ;;  InterruptHan    2    9[BANK0 ] PTR FTN()void 
 11195 ;;		 -> ADC_VoltageControlHandler_ISR(1), ADC_DefaultInterruptHandler(1), 
 11196 ;; Auto vars:     Size  Location     Type
 11197 ;;		None
 11198 ;; Return value:  Size  Location     Type
 11199 ;;                  1    wreg      void 
 11200 ;; Registers used:
 11201 ;;		wreg
 11202 ;; Tracked objects:
 11203 ;;		On entry : 1F/0
 11204 ;;		On exit  : 1F/2
 11205 ;;		Unchanged: 0/0
 11206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11207 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;Total ram usage:        2 bytes
 11212 ;; Hardware stack levels used:    1
 11213 ;; Hardware stack levels required when called:    5
 11214 ;; This function calls:
 11215 ;;		Nothing
 11216 ;; This function is called by:
 11217 ;;		_ADC_Initialize
 11218 ;;		_init_chopper
 11219 ;; This function uses a non-reentrant model
 11220 ;;
 11221                           
 11222                           
 11223                           ;psect for function _ADC_SetInterruptHandler
 11224  154B                     _ADC_SetInterruptHandler:	
 11225                           
 11226                           ;mcc_generated_files/adc.c: 161:     ADC_InterruptHandler = InterruptHandler;
 11227                           
 11228                           ;incstack = 0
 11229                           ; Regs used in _ADC_SetInterruptHandler: [wreg]
 11230  154B  0852               	movf	ADC_SetInterruptHandler@InterruptHandler+1,w
 11231  154C  0022               	movlb	2	; select bank2
 11232  154D  00E4               	movwf	(_ADC_InterruptHandler+1)^(0+256)
 11233  154E  0020               	movlb	0	; select bank0
 11234  154F  0851               	movf	ADC_SetInterruptHandler@InterruptHandler,w
 11235  1550  0022               	movlb	2	; select bank2
 11236  1551  00E3               	movwf	_ADC_InterruptHandler^(0+256)
 11237  1552  0008               	return
 11238  1553                     __end_of_ADC_SetInterruptHandler:	
 11239                           
 11240                           	psect	text43
 11241  1615                     __ptext43:	
 11242 ;; *************** function _ADC_SelectChannel *****************
 11243 ;; Defined at:
 11244 ;;		line 93 in file "mcc_generated_files/adc.c"
 11245 ;; Parameters:    Size  Location     Type
 11246 ;;  channel         1    wreg     enum E4137
 11247 ;; Auto vars:     Size  Location     Type
 11248 ;;  channel         1   10[BANK0 ] enum E4137
 11249 ;; Return value:  Size  Location     Type
 11250 ;;                  1    wreg      void 
 11251 ;; Registers used:
 11252 ;;		wreg, status,2, status,0
 11253 ;; Tracked objects:
 11254 ;;		On entry : 1F/0
 11255 ;;		On exit  : 1F/1
 11256 ;;		Unchanged: 0/0
 11257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11261 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11262 ;;Total ram usage:        2 bytes
 11263 ;; Hardware stack levels used:    1
 11264 ;; Hardware stack levels required when called:    5
 11265 ;; This function calls:
 11266 ;;		Nothing
 11267 ;; This function is called by:
 11268 ;;		_init_chopper
 11269 ;; This function uses a non-reentrant model
 11270 ;;
 11271                           
 11272                           
 11273                           ;psect for function _ADC_SelectChannel
 11274  1615                     _ADC_SelectChannel:	
 11275                           
 11276                           ;incstack = 0
 11277                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
 11278                           ;ADC_SelectChannel@channel stored from wreg
 11279  1615  00D2               	movwf	ADC_SelectChannel@channel
 11280                           
 11281                           ;mcc_generated_files/adc.c: 93: void ADC_SelectChannel(adc_channel_t channel);mcc_genera
      +                          ted_files/adc.c: 94: {;mcc_generated_files/adc.c: 96:     ADCON0bits.CHS = channel;
 11282  1616  0852               	movf	ADC_SelectChannel@channel,w
 11283  1617  00D1               	movwf	??_ADC_SelectChannel
 11284  1618  0DD1               	rlf	??_ADC_SelectChannel,f
 11285  1619  0DD1               	rlf	??_ADC_SelectChannel,f
 11286  161A  0021               	movlb	1	; select bank1
 11287  161B  081D               	movf	29,w	;volatile
 11288  161C  0020               	movlb	0	; select bank0
 11289  161D  0651               	xorwf	??_ADC_SelectChannel,w
 11290  161E  3983               	andlw	-125
 11291  161F  0651               	xorwf	??_ADC_SelectChannel,w
 11292  1620  0021               	movlb	1	; select bank1
 11293  1621  009D               	movwf	29	;volatile
 11294                           
 11295                           ;mcc_generated_files/adc.c: 98:     ADCON0bits.ADON = 1;
 11296  1622  141D               	bsf	29,0	;volatile
 11297  1623  0008               	return
 11298  1624                     __end_of_ADC_SelectChannel:	
 11299                           
 11300                           	psect	text44
 11301  17B3                     __ptext44:	
 11302 ;; *************** function _set_vdc_speed *****************
 11303 ;; Defined at:
 11304 ;;		line 272 in file "vcontrol.c"
 11305 ;; Parameters:    Size  Location     Type
 11306 ;;  msDelay         2   17[BANK0 ] unsigned short 
 11307 ;; Auto vars:     Size  Location     Type
 11308 ;;		None
 11309 ;; Return value:  Size  Location     Type
 11310 ;;                  1    wreg      void 
 11311 ;; Registers used:
 11312 ;;		wreg, status,2, status,0, pclath, cstack
 11313 ;; Tracked objects:
 11314 ;;		On entry : 1F/0
 11315 ;;		On exit  : 1E/0
 11316 ;;		Unchanged: 0/0
 11317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11318 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11322 ;;Total ram usage:        2 bytes
 11323 ;; Hardware stack levels used:    1
 11324 ;; Hardware stack levels required when called:    6
 11325 ;; This function calls:
 11326 ;;		___lwdiv
 11327 ;; This function is called by:
 11328 ;;		_uart_task
 11329 ;;		_ApplicationInit
 11330 ;; This function uses a non-reentrant model
 11331 ;;
 11332                           
 11333                           
 11334                           ;psect for function _set_vdc_speed
 11335  17B3                     _set_vdc_speed:	
 11336                           
 11337                           ;vcontrol.c: 272: void set_vdc_speed(uint16_t msDelay);vcontrol.c: 273: {;vcontrol.c: 27
      +                          4:     if( msDelay == 0xFFFF )
 11338                           
 11339                           ;incstack = 0
 11340                           ; Regs used in _set_vdc_speed: [wreg+status,2+status,0+pclath+cstack]
 11341  17B3  0A59               	incf	set_vdc_speed@msDelay,w
 11342  17B4  1903               	btfsc	3,2
 11343  17B5  0A5A               	incf	set_vdc_speed@msDelay+1,w
 11344  17B6  1903               	btfsc	3,2
 11345  17B7  0008               	return
 11346                           
 11347                           ;vcontrol.c: 276:     if( msDelay > 25500 )
 11348  17B8  3063               	movlw	99
 11349  17B9  025A               	subwf	set_vdc_speed@msDelay+1,w
 11350  17BA  309D               	movlw	157
 11351  17BB  1903               	skipnz
 11352  17BC  0259               	subwf	set_vdc_speed@msDelay,w
 11353  17BD  1C03               	skipc
 11354  17BE  2FC4               	goto	l3851
 11355                           
 11356                           ;vcontrol.c: 277:         duty_count_up_max = 255;
 11357  17BF  30FF               	movlw	255
 11358  17C0  0021               	movlb	1	; select bank1
 11359  17C1  00EE               	movwf	_duty_count_up_max^(0+128)
 11360  17C2  3000               	movlw	0
 11361  17C3  00EF               	movwf	(_duty_count_up_max^(0+128)+1)
 11362  17C4                     l3851:	
 11363                           
 11364                           ;vcontrol.c: 278:     duty_count_up_max = msDelay/100 - 1;
 11365  17C4  3064               	movlw	100
 11366  17C5  0020               	movlb	0	; select bank0
 11367  17C6  00D1               	movwf	___lwdiv@divisor
 11368  17C7  3000               	movlw	0
 11369  17C8  00D2               	movwf	___lwdiv@divisor+1
 11370  17C9  085A               	movf	set_vdc_speed@msDelay+1,w
 11371  17CA  00D4               	movwf	___lwdiv@dividend+1
 11372  17CB  0859               	movf	set_vdc_speed@msDelay,w
 11373  17CC  00D3               	movwf	___lwdiv@dividend
 11374  17CD  3189  2131         	fcall	___lwdiv
 11375  17CF  0851               	movf	?___lwdiv,w
 11376  17D0  3EFF               	addlw	255
 11377  17D1  0021               	movlb	1	; select bank1
 11378  17D2  00EE               	movwf	_duty_count_up_max^(0+128)
 11379  17D3  30FF               	movlw	255
 11380  17D4  0020               	movlb	0	; select bank0
 11381  17D5  3D52               	addwfc	?___lwdiv+1,w
 11382  17D6  0021               	movlb	1	; select bank1
 11383  17D7  00EF               	movwf	(_duty_count_up_max+1)^(0+128)
 11384  17D8  0008               	return
 11385  17D9                     __end_of_set_vdc_speed:	
 11386                           
 11387                           	psect	text45
 11388  15CA                     __ptext45:	
 11389 ;; *************** function _set_vdc_min *****************
 11390 ;; Defined at:
 11391 ;;		line 257 in file "vcontrol.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;  vmin            2   12[BANK0 ] unsigned short 
 11394 ;; Auto vars:     Size  Location     Type
 11395 ;;		None
 11396 ;; Return value:  Size  Location     Type
 11397 ;;                  1    wreg      void 
 11398 ;; Registers used:
 11399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11400 ;; Tracked objects:
 11401 ;;		On entry : 1F/0
 11402 ;;		On exit  : 1F/0
 11403 ;;		Unchanged: 0/0
 11404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11405 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11407 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11408 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11409 ;;Total ram usage:        3 bytes
 11410 ;; Hardware stack levels used:    1
 11411 ;; Hardware stack levels required when called:    6
 11412 ;; This function calls:
 11413 ;;		_set_vdc_threshold
 11414 ;; This function is called by:
 11415 ;;		_uart_task
 11416 ;;		_ApplicationInit
 11417 ;; This function uses a non-reentrant model
 11418 ;;
 11419                           
 11420                           
 11421                           ;psect for function _set_vdc_min
 11422  15CA                     _set_vdc_min:	
 11423                           
 11424                           ;vcontrol.c: 257: void set_vdc_min(uint16_t vmin);vcontrol.c: 258: {;vcontrol.c: 259:   
      +                            set_vdc_threshold(vmin,&vdc_min);
 11425                           
 11426                           ;incstack = 0
 11427                           ; Regs used in _set_vdc_min: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11428  15CA  0855               	movf	set_vdc_min@vmin+1,w
 11429  15CB  00D2               	movwf	set_vdc_threshold@v_val+1
 11430  15CC  0854               	movf	set_vdc_min@vmin,w
 11431  15CD  00D1               	movwf	set_vdc_threshold@v_val
 11432  15CE  3046               	movlw	(low (_vdc_min| 0))& (0+255)
 11433  15CF  00D6               	movwf	??_set_vdc_min
 11434  15D0  0856               	movf	??_set_vdc_min,w
 11435  15D1  00D3               	movwf	set_vdc_threshold@v_target
 11436  15D2  3197  271D         	fcall	_set_vdc_threshold
 11437  15D4  0008               	return
 11438  15D5                     __end_of_set_vdc_min:	
 11439                           
 11440                           	psect	text46
 11441  15BF                     __ptext46:	
 11442 ;; *************** function _set_vdc_max *****************
 11443 ;; Defined at:
 11444 ;;		line 262 in file "vcontrol.c"
 11445 ;; Parameters:    Size  Location     Type
 11446 ;;  vmax            2   12[BANK0 ] unsigned short 
 11447 ;; Auto vars:     Size  Location     Type
 11448 ;;		None
 11449 ;; Return value:  Size  Location     Type
 11450 ;;                  1    wreg      void 
 11451 ;; Registers used:
 11452 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11453 ;; Tracked objects:
 11454 ;;		On entry : 1F/0
 11455 ;;		On exit  : 1F/0
 11456 ;;		Unchanged: 0/0
 11457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11458 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11460 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11461 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11462 ;;Total ram usage:        3 bytes
 11463 ;; Hardware stack levels used:    1
 11464 ;; Hardware stack levels required when called:    6
 11465 ;; This function calls:
 11466 ;;		_set_vdc_threshold
 11467 ;; This function is called by:
 11468 ;;		_uart_task
 11469 ;;		_ApplicationInit
 11470 ;; This function uses a non-reentrant model
 11471 ;;
 11472                           
 11473                           
 11474                           ;psect for function _set_vdc_max
 11475  15BF                     _set_vdc_max:	
 11476                           
 11477                           ;vcontrol.c: 262: void set_vdc_max(uint16_t vmax);vcontrol.c: 263: {;vcontrol.c: 264:   
      +                            set_vdc_threshold(vmax,&vdc_max);
 11478                           
 11479                           ;incstack = 0
 11480                           ; Regs used in _set_vdc_max: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11481  15BF  0855               	movf	set_vdc_max@vmax+1,w
 11482  15C0  00D2               	movwf	set_vdc_threshold@v_val+1
 11483  15C1  0854               	movf	set_vdc_max@vmax,w
 11484  15C2  00D1               	movwf	set_vdc_threshold@v_val
 11485  15C3  3044               	movlw	(low (_vdc_max| 0))& (0+255)
 11486  15C4  00D6               	movwf	??_set_vdc_max
 11487  15C5  0856               	movf	??_set_vdc_max,w
 11488  15C6  00D3               	movwf	set_vdc_threshold@v_target
 11489  15C7  3197  271D         	fcall	_set_vdc_threshold
 11490  15C9  0008               	return
 11491  15CA                     __end_of_set_vdc_max:	
 11492                           
 11493                           	psect	text47
 11494  15B4                     __ptext47:	
 11495 ;; *************** function _set_vdc_critic *****************
 11496 ;; Defined at:
 11497 ;;		line 267 in file "vcontrol.c"
 11498 ;; Parameters:    Size  Location     Type
 11499 ;;  vc              2   12[BANK0 ] unsigned short 
 11500 ;; Auto vars:     Size  Location     Type
 11501 ;;		None
 11502 ;; Return value:  Size  Location     Type
 11503 ;;                  1    wreg      void 
 11504 ;; Registers used:
 11505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11506 ;; Tracked objects:
 11507 ;;		On entry : 1F/0
 11508 ;;		On exit  : 1F/0
 11509 ;;		Unchanged: 0/0
 11510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11511 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11513 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11514 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11515 ;;Total ram usage:        3 bytes
 11516 ;; Hardware stack levels used:    1
 11517 ;; Hardware stack levels required when called:    6
 11518 ;; This function calls:
 11519 ;;		_set_vdc_threshold
 11520 ;; This function is called by:
 11521 ;;		_uart_task
 11522 ;;		_ApplicationInit
 11523 ;; This function uses a non-reentrant model
 11524 ;;
 11525                           
 11526                           
 11527                           ;psect for function _set_vdc_critic
 11528  15B4                     _set_vdc_critic:	
 11529                           
 11530                           ;vcontrol.c: 267: void set_vdc_critic(uint16_t vc);vcontrol.c: 268: {;vcontrol.c: 269:  
      +                             set_vdc_threshold(vc,&vdc_critic);
 11531                           
 11532                           ;incstack = 0
 11533                           ; Regs used in _set_vdc_critic: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11534  15B4  0855               	movf	set_vdc_critic@vc+1,w
 11535  15B5  00D2               	movwf	set_vdc_threshold@v_val+1
 11536  15B6  0854               	movf	set_vdc_critic@vc,w
 11537  15B7  00D1               	movwf	set_vdc_threshold@v_val
 11538  15B8  3042               	movlw	(low (_vdc_critic| 0))& (0+255)
 11539  15B9  00D6               	movwf	??_set_vdc_critic
 11540  15BA  0856               	movf	??_set_vdc_critic,w
 11541  15BB  00D3               	movwf	set_vdc_threshold@v_target
 11542  15BC  3197  271D         	fcall	_set_vdc_threshold
 11543  15BE  0008               	return
 11544  15BF                     __end_of_set_vdc_critic:	
 11545                           
 11546                           	psect	text48
 11547  171D                     __ptext48:	
 11548 ;; *************** function _set_vdc_threshold *****************
 11549 ;; Defined at:
 11550 ;;		line 195 in file "vcontrol.c"
 11551 ;; Parameters:    Size  Location     Type
 11552 ;;  v_val           2    9[BANK0 ] unsigned short 
 11553 ;;  v_target        1   11[BANK0 ] PTR unsigned short 
 11554 ;;		 -> vdc_critic(2), vdc_max(2), vdc_min(2), 
 11555 ;; Auto vars:     Size  Location     Type
 11556 ;;		None
 11557 ;; Return value:  Size  Location     Type
 11558 ;;                  1    wreg      void 
 11559 ;; Registers used:
 11560 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11561 ;; Tracked objects:
 11562 ;;		On entry : 1F/0
 11563 ;;		On exit  : 1F/0
 11564 ;;		Unchanged: 0/0
 11565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11566 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11569 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;Total ram usage:        3 bytes
 11571 ;; Hardware stack levels used:    1
 11572 ;; Hardware stack levels required when called:    5
 11573 ;; This function calls:
 11574 ;;		Nothing
 11575 ;; This function is called by:
 11576 ;;		_set_vdc_min
 11577 ;;		_set_vdc_max
 11578 ;;		_set_vdc_critic
 11579 ;; This function uses a non-reentrant model
 11580 ;;
 11581                           
 11582                           
 11583                           ;psect for function _set_vdc_threshold
 11584  171D                     _set_vdc_threshold:	
 11585                           
 11586                           ;vcontrol.c: 195: static void set_vdc_threshold(uint16_t v_val,uint16_t *v_target);vcont
      +                          rol.c: 196: {;vcontrol.c: 197:     if( v_val == 0xFFFF )
 11587                           
 11588                           ;incstack = 0
 11589                           ; Regs used in _set_vdc_threshold: [wreg+fsr1l+fsr1h+status,2+status,0]
 11590  171D  0A51               	incf	set_vdc_threshold@v_val,w
 11591  171E  1903               	btfsc	3,2
 11592  171F  0A52               	incf	set_vdc_threshold@v_val+1,w
 11593  1720  1903               	btfsc	3,2
 11594  1721  0008               	return
 11595                           
 11596                           ;vcontrol.c: 199:     if( v_val >= 800 )
 11597  1722  3003               	movlw	3
 11598  1723  0252               	subwf	set_vdc_threshold@v_val+1,w
 11599  1724  3020               	movlw	32
 11600  1725  1903               	skipnz
 11601  1726  0251               	subwf	set_vdc_threshold@v_val,w
 11602  1727  1C03               	skipc
 11603  1728  2F31               	goto	l3743
 11604                           
 11605                           ;vcontrol.c: 200:         *v_target = 800;
 11606  1729  0853               	movf	set_vdc_threshold@v_target,w
 11607  172A  0086               	movwf	6
 11608  172B  0187               	clrf	7
 11609  172C  3020               	movlw	32
 11610  172D  3FC0               	movwi [0]fsr1
 11611  172E  3003               	movlw	3
 11612  172F  3FC1               	movwi [1]fsr1
 11613  1730  0008               	return
 11614  1731                     l3743:	
 11615                           
 11616                           ;vcontrol.c: 202:         *v_target = v_val;
 11617  1731  0853               	movf	set_vdc_threshold@v_target,w
 11618  1732  0086               	movwf	6
 11619  1733  0187               	clrf	7
 11620  1734  0851               	movf	set_vdc_threshold@v_val,w
 11621  1735  3FC0               	movwi [0]fsr1
 11622  1736  0852               	movf	set_vdc_threshold@v_val+1,w
 11623  1737  3FC1               	movwi [1]fsr1
 11624  1738  0008               	return
 11625  1739                     __end_of_set_vdc_threshold:	
 11626                           
 11627                           	psect	text49
 11628  08CE                     __ptext49:	
 11629 ;; *************** function _set_reset_duration *****************
 11630 ;; Defined at:
 11631 ;;		line 55 in file "SolidStateRelay.c"
 11632 ;; Parameters:    Size  Location     Type
 11633 ;;  reset_dur_ms    2   17[BANK0 ] unsigned short 
 11634 ;; Auto vars:     Size  Location     Type
 11635 ;;		None
 11636 ;; Return value:  Size  Location     Type
 11637 ;;                  1    wreg      void 
 11638 ;; Registers used:
 11639 ;;		wreg, status,2, status,0, pclath, cstack
 11640 ;; Tracked objects:
 11641 ;;		On entry : 1F/0
 11642 ;;		On exit  : 1E/0
 11643 ;;		Unchanged: 0/0
 11644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11645 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11649 ;;Total ram usage:        2 bytes
 11650 ;; Hardware stack levels used:    1
 11651 ;; Hardware stack levels required when called:    6
 11652 ;; This function calls:
 11653 ;;		___lwdiv
 11654 ;; This function is called by:
 11655 ;;		_uart_task
 11656 ;;		_ApplicationInit
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           
 11661                           ;psect for function _set_reset_duration
 11662  08CE                     _set_reset_duration:	
 11663                           
 11664                           ;SolidStateRelay.c: 55: void set_reset_duration(uint16_t reset_dur_ms);SolidStateRelay.c
      +                          : 56: {;SolidStateRelay.c: 57:     if( reset_dur_ms == 0xFFFF )
 11665                           
 11666                           ;incstack = 0
 11667                           ; Regs used in _set_reset_duration: [wreg+status,2+status,0+pclath+cstack]
 11668  08CE  0A59               	incf	set_reset_duration@reset_dur_ms,w
 11669  08CF  1903               	btfsc	3,2
 11670  08D0  0A5A               	incf	set_reset_duration@reset_dur_ms+1,w
 11671  08D1  1903               	btfsc	3,2
 11672  08D2  0008               	return
 11673                           
 11674                           ;SolidStateRelay.c: 59:     if( reset_dur_ms > 25500 )
 11675  08D3  3063               	movlw	99
 11676  08D4  025A               	subwf	set_reset_duration@reset_dur_ms+1,w
 11677  08D5  309D               	movlw	157
 11678  08D6  1903               	skipnz
 11679  08D7  0259               	subwf	set_reset_duration@reset_dur_ms,w
 11680  08D8  1C03               	skipc
 11681  08D9  28E0               	goto	l3903
 11682                           
 11683                           ;SolidStateRelay.c: 60:         reset_duration = 25500;
 11684  08DA  309C               	movlw	156
 11685  08DB  0021               	movlb	1	; select bank1
 11686  08DC  00E2               	movwf	_reset_duration^(0+128)
 11687  08DD  3063               	movlw	99
 11688  08DE  00E3               	movwf	(_reset_duration^(0+128)+1)
 11689  08DF  28E7               	goto	l3905
 11690  08E0                     l3903:	
 11691                           
 11692                           ;SolidStateRelay.c: 62:         reset_duration = reset_dur_ms;
 11693  08E0  085A               	movf	set_reset_duration@reset_dur_ms+1,w
 11694  08E1  0021               	movlb	1	; select bank1
 11695  08E2  00E3               	movwf	(_reset_duration+1)^(0+128)
 11696  08E3  0020               	movlb	0	; select bank0
 11697  08E4  0859               	movf	set_reset_duration@reset_dur_ms,w
 11698  08E5  0021               	movlb	1	; select bank1
 11699  08E6  00E2               	movwf	_reset_duration^(0+128)
 11700  08E7                     l3905:	
 11701                           
 11702                           ;SolidStateRelay.c: 66:     reset_duration_ms = reset_duration/100;
 11703  08E7  3064               	movlw	100
 11704  08E8  0020               	movlb	0	; select bank0
 11705  08E9  00D1               	movwf	___lwdiv@divisor
 11706  08EA  3000               	movlw	0
 11707  08EB  00D2               	movwf	___lwdiv@divisor+1
 11708  08EC  0021               	movlb	1	; select bank1
 11709  08ED  0863               	movf	(_reset_duration+1)^(0+128),w
 11710  08EE  0020               	movlb	0	; select bank0
 11711  08EF  00D4               	movwf	___lwdiv@dividend+1
 11712  08F0  0021               	movlb	1	; select bank1
 11713  08F1  0862               	movf	_reset_duration^(0+128),w
 11714  08F2  0020               	movlb	0	; select bank0
 11715  08F3  00D3               	movwf	___lwdiv@dividend
 11716  08F4  3189  2131         	fcall	___lwdiv
 11717  08F6  0852               	movf	?___lwdiv+1,w
 11718  08F7  0021               	movlb	1	; select bank1
 11719  08F8  00E1               	movwf	(_reset_duration_ms+1)^(0+128)
 11720  08F9  0020               	movlb	0	; select bank0
 11721  08FA  0851               	movf	?___lwdiv,w
 11722  08FB  0021               	movlb	1	; select bank1
 11723  08FC  00E0               	movwf	_reset_duration_ms^(0+128)
 11724  08FD  0008               	return
 11725  08FE                     __end_of_set_reset_duration:	
 11726                           
 11727                           	psect	text50
 11728  0931                     __ptext50:	
 11729 ;; *************** function ___lwdiv *****************
 11730 ;; Defined at:
 11731 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwdiv.c"
 11732 ;; Parameters:    Size  Location     Type
 11733 ;;  divisor         2    9[BANK0 ] unsigned int 
 11734 ;;  dividend        2   11[BANK0 ] unsigned int 
 11735 ;; Auto vars:     Size  Location     Type
 11736 ;;  quotient        2   15[BANK0 ] unsigned int 
 11737 ;;  counter         1   14[BANK0 ] unsigned char 
 11738 ;; Return value:  Size  Location     Type
 11739 ;;                  2    9[BANK0 ] unsigned int 
 11740 ;; Registers used:
 11741 ;;		wreg, status,2, status,0
 11742 ;; Tracked objects:
 11743 ;;		On entry : 1F/0
 11744 ;;		On exit  : 1F/0
 11745 ;;		Unchanged: 0/0
 11746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11747 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11748 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11750 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11751 ;;Total ram usage:        8 bytes
 11752 ;; Hardware stack levels used:    1
 11753 ;; Hardware stack levels required when called:    5
 11754 ;; This function calls:
 11755 ;;		Nothing
 11756 ;; This function is called by:
 11757 ;;		_set_vdc_speed
 11758 ;;		_set_reset_duration
 11759 ;; This function uses a non-reentrant model
 11760 ;;
 11761                           
 11762                           
 11763                           ;psect for function ___lwdiv
 11764  0931                     ___lwdiv:	
 11765                           
 11766                           ;incstack = 0
 11767                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11768  0931  01D7               	clrf	___lwdiv@quotient
 11769  0932  01D8               	clrf	___lwdiv@quotient+1
 11770  0933  0851               	movf	___lwdiv@divisor,w
 11771  0934  0452               	iorwf	___lwdiv@divisor+1,w
 11772  0935  1903               	btfsc	3,2
 11773  0936  2960               	goto	l3789
 11774  0937  01D6               	clrf	___lwdiv@counter
 11775  0938  0AD6               	incf	___lwdiv@counter,f
 11776  0939                     l3777:	
 11777  0939  1BD2               	btfsc	___lwdiv@divisor+1,7
 11778  093A  2945               	goto	l3779
 11779  093B  3001               	movlw	1
 11780  093C                     u2535:	
 11781  093C  35D1               	lslf	___lwdiv@divisor,f
 11782  093D  0DD2               	rlf	___lwdiv@divisor+1,f
 11783  093E  0B89               	decfsz	9,f
 11784  093F  293C               	goto	u2535
 11785  0940  3001               	movlw	1
 11786  0941  00D5               	movwf	??___lwdiv
 11787  0942  0855               	movf	??___lwdiv,w
 11788  0943  07D6               	addwf	___lwdiv@counter,f
 11789  0944  2939               	goto	l3777
 11790  0945                     l3779:	
 11791  0945  3001               	movlw	1
 11792  0946                     u2555:	
 11793  0946  35D7               	lslf	___lwdiv@quotient,f
 11794  0947  0DD8               	rlf	___lwdiv@quotient+1,f
 11795  0948  0B89               	decfsz	9,f
 11796  0949  2946               	goto	u2555
 11797  094A  0852               	movf	___lwdiv@divisor+1,w
 11798  094B  0254               	subwf	___lwdiv@dividend+1,w
 11799  094C  1D03               	skipz
 11800  094D  2950               	goto	u2565
 11801  094E  0851               	movf	___lwdiv@divisor,w
 11802  094F  0253               	subwf	___lwdiv@dividend,w
 11803  0950                     u2565:	
 11804  0950  1C03               	skipc
 11805  0951  2957               	goto	l3785
 11806  0952  0851               	movf	___lwdiv@divisor,w
 11807  0953  02D3               	subwf	___lwdiv@dividend,f
 11808  0954  0852               	movf	___lwdiv@divisor+1,w
 11809  0955  3BD4               	subwfb	___lwdiv@dividend+1,f
 11810  0956  1457               	bsf	___lwdiv@quotient,0
 11811  0957                     l3785:	
 11812  0957  3001               	movlw	1
 11813  0958                     u2575:	
 11814  0958  36D2               	lsrf	___lwdiv@divisor+1,f
 11815  0959  0CD1               	rrf	___lwdiv@divisor,f
 11816  095A  0B89               	decfsz	9,f
 11817  095B  2958               	goto	u2575
 11818  095C  3001               	movlw	1
 11819  095D  02D6               	subwf	___lwdiv@counter,f
 11820  095E  1D03               	btfss	3,2
 11821  095F  2945               	goto	l3779
 11822  0960                     l3789:	
 11823  0960  0858               	movf	___lwdiv@quotient+1,w
 11824  0961  00D2               	movwf	?___lwdiv+1
 11825  0962  0857               	movf	___lwdiv@quotient,w
 11826  0963  00D1               	movwf	?___lwdiv
 11827  0964  0008               	return
 11828  0965                     __end_of___lwdiv:	
 11829                           
 11830                           	psect	text51
 11831  1672                     __ptext51:	
 11832 ;; *************** function _set_relay_reset_voltage *****************
 11833 ;; Defined at:
 11834 ;;		line 45 in file "SolidStateRelay.c"
 11835 ;; Parameters:    Size  Location     Type
 11836 ;;  relay_vthres    2    9[BANK0 ] unsigned short 
 11837 ;; Auto vars:     Size  Location     Type
 11838 ;;		None
 11839 ;; Return value:  Size  Location     Type
 11840 ;;                  1    wreg      void 
 11841 ;; Registers used:
 11842 ;;		wreg, status,2, status,0
 11843 ;; Tracked objects:
 11844 ;;		On entry : 1F/0
 11845 ;;		On exit  : 1F/0
 11846 ;;		Unchanged: 0/0
 11847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11848 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11851 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11852 ;;Total ram usage:        2 bytes
 11853 ;; Hardware stack levels used:    1
 11854 ;; Hardware stack levels required when called:    5
 11855 ;; This function calls:
 11856 ;;		Nothing
 11857 ;; This function is called by:
 11858 ;;		_uart_task
 11859 ;;		_ApplicationInit
 11860 ;; This function uses a non-reentrant model
 11861 ;;
 11862                           
 11863                           
 11864                           ;psect for function _set_relay_reset_voltage
 11865  1672                     _set_relay_reset_voltage:	
 11866                           
 11867                           ;SolidStateRelay.c: 45: void set_relay_reset_voltage(uint16_t relay_vthres);SolidStateRe
      +                          lay.c: 46: {;SolidStateRelay.c: 47:     if( relay_vthres == 0xFFFF )
 11868                           
 11869                           ;incstack = 0
 11870                           ; Regs used in _set_relay_reset_voltage: [wreg+status,2+status,0]
 11871  1672  0A51               	incf	set_relay_reset_voltage@relay_vthres,w
 11872  1673  1903               	btfsc	3,2
 11873  1674  0A52               	incf	set_relay_reset_voltage@relay_vthres+1,w
 11874  1675  1903               	btfsc	3,2
 11875  1676  0008               	return
 11876                           
 11877                           ;SolidStateRelay.c: 49:     if( relay_vthres > 800 )
 11878  1677  3003               	movlw	3
 11879  1678  0252               	subwf	set_relay_reset_voltage@relay_vthres+1,w
 11880  1679  3021               	movlw	33
 11881  167A  1903               	skipnz
 11882  167B  0251               	subwf	set_relay_reset_voltage@relay_vthres,w
 11883  167C  1C03               	skipc
 11884  167D  2E83               	goto	l3893
 11885                           
 11886                           ;SolidStateRelay.c: 50:         relay_reset_voltage = 800;
 11887  167E  3020               	movlw	32
 11888  167F  00A0               	movwf	_relay_reset_voltage
 11889  1680  3003               	movlw	3
 11890  1681  00A1               	movwf	_relay_reset_voltage+1
 11891  1682  0008               	return
 11892  1683                     l3893:	
 11893                           
 11894                           ;SolidStateRelay.c: 52:         relay_reset_voltage = relay_vthres;
 11895  1683  0852               	movf	set_relay_reset_voltage@relay_vthres+1,w
 11896  1684  00A1               	movwf	_relay_reset_voltage+1
 11897  1685  0851               	movf	set_relay_reset_voltage@relay_vthres,w
 11898  1686  00A0               	movwf	_relay_reset_voltage
 11899  1687  0008               	return
 11900  1688                     __end_of_set_relay_reset_voltage:	
 11901                           
 11902                           	psect	text52
 11903  1755                     __ptext52:	
 11904 ;; *************** function _FLASH_ReadWord *****************
 11905 ;; Defined at:
 11906 ;;		line 58 in file "mcc_generated_files/memory.c"
 11907 ;; Parameters:    Size  Location     Type
 11908 ;;  flashAddr       2    9[BANK0 ] unsigned short 
 11909 ;; Auto vars:     Size  Location     Type
 11910 ;;  GIEBitValue     1   11[BANK0 ] unsigned char 
 11911 ;; Return value:  Size  Location     Type
 11912 ;;                  2    9[BANK0 ] unsigned short 
 11913 ;; Registers used:
 11914 ;;		wreg, status,2, status,0
 11915 ;; Tracked objects:
 11916 ;;		On entry : 1F/0
 11917 ;;		On exit  : 1F/0
 11918 ;;		Unchanged: 0/0
 11919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11920 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11923 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11924 ;;Total ram usage:        3 bytes
 11925 ;; Hardware stack levels used:    1
 11926 ;; Hardware stack levels required when called:    5
 11927 ;; This function calls:
 11928 ;;		Nothing
 11929 ;; This function is called by:
 11930 ;;		_ApplicationInit
 11931 ;; This function uses a non-reentrant model
 11932 ;;
 11933                           
 11934                           
 11935                           ;psect for function _FLASH_ReadWord
 11936  1755                     _FLASH_ReadWord:	
 11937                           
 11938                           ;mcc_generated_files/memory.c: 58: uint16_t FLASH_ReadWord(uint16_t flashAddr);mcc_gener
      +                          ated_files/memory.c: 59: {;mcc_generated_files/memory.c: 60:     uint8_t GIEBitValue = I
      +                          NTCONbits.GIE;
 11939                           
 11940                           ;incstack = 0
 11941                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 11942  1755  3000               	movlw	0
 11943  1756  1B8B               	btfsc	11,7	;volatile
 11944  1757  3001               	movlw	1
 11945  1758  00D3               	movwf	FLASH_ReadWord@GIEBitValue
 11946                           
 11947                           ;mcc_generated_files/memory.c: 62:     INTCONbits.GIE = 0;
 11948  1759  138B               	bcf	11,7	;volatile
 11949                           
 11950                           ;mcc_generated_files/memory.c: 63:     PMADRL = (flashAddr & 0x00FF);
 11951  175A  0851               	movf	FLASH_ReadWord@flashAddr,w
 11952  175B  0023               	movlb	3	; select bank3
 11953  175C  0091               	movwf	17	;volatile
 11954                           
 11955                           ;mcc_generated_files/memory.c: 64:     PMADRH = ((flashAddr & 0xFF00) >> 8);
 11956  175D  0020               	movlb	0	; select bank0
 11957  175E  0852               	movf	FLASH_ReadWord@flashAddr+1,w
 11958  175F  0023               	movlb	3	; select bank3
 11959  1760  0092               	movwf	18	;volatile
 11960                           
 11961                           ;mcc_generated_files/memory.c: 66:     PMCON1bits.CFGS = 0;
 11962  1761  1315               	bcf	21,6	;volatile
 11963                           
 11964                           ;mcc_generated_files/memory.c: 67:     PMCON1bits.RD = 1;
 11965  1762  1415               	bsf	21,0	;volatile
 11966                           
 11967                           ;mcc_generated_files/memory.c: 68:     __nop();
 11968  1763  0000               	nop
 11969                           
 11970                           ;mcc_generated_files/memory.c: 69:     __nop();
 11971  1764  0000               	nop
 11972                           
 11973                           ;mcc_generated_files/memory.c: 70:     INTCONbits.GIE = GIEBitValue;
 11974  1765  0020               	movlb	0	; select bank0
 11975  1766  0C53               	rrf	FLASH_ReadWord@GIEBitValue,w
 11976  1767  1C03               	skipc
 11977  1768  138B               	bcf	11,7	;volatile
 11978  1769  1803               	skipnc
 11979  176A  178B               	bsf	11,7	;volatile
 11980                           
 11981                           ;mcc_generated_files/memory.c: 72:     return ((uint16_t)((PMDATH << 8) | PMDATL));
 11982  176B  0023               	movlb	3	; select bank3
 11983  176C  0814               	movf	20,w	;volatile
 11984  176D  0020               	movlb	0	; select bank0
 11985  176E  00D2               	movwf	?_FLASH_ReadWord+1
 11986  176F  0023               	movlb	3	; select bank3
 11987  1770  0813               	movf	19,w	;volatile
 11988  1771  0020               	movlb	0	; select bank0
 11989  1772  00D1               	movwf	?_FLASH_ReadWord
 11990  1773  0008               	return
 11991  1774                     __end_of_FLASH_ReadWord:	
 11992                           
 11993                           	psect	intentry
 11994  0004                     __pintentry:	
 11995 ;; *************** function _INTERRUPT_InterruptManager *****************
 11996 ;; Defined at:
 11997 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11998 ;; Parameters:    Size  Location     Type
 11999 ;;		None
 12000 ;; Auto vars:     Size  Location     Type
 12001 ;;		None
 12002 ;; Return value:  Size  Location     Type
 12003 ;;                  1    wreg      void 
 12004 ;; Registers used:
 12005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12006 ;; Tracked objects:
 12007 ;;		On entry : 0/0
 12008 ;;		On exit  : 0/0
 12009 ;;		Unchanged: 0/0
 12010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12015 ;;Total ram usage:        0 bytes
 12016 ;; Hardware stack levels used:    1
 12017 ;; Hardware stack levels required when called:    4
 12018 ;; This function calls:
 12019 ;;		Absolute function
 12020 ;;		_ADC_ISR
 12021 ;;		_EUSART_CommandHandler_ISR
 12022 ;;		_EUSART_Receive_ISR
 12023 ;;		_TMR1_ISR
 12024 ;;		_TMR2_ISR
 12025 ;; This function is called by:
 12026 ;;		Interrupt level 1
 12027 ;; This function uses a non-reentrant model
 12028 ;;
 12029                           
 12030  0004                     _INTERRUPT_InterruptManager:	
 12031                           
 12032                           ;incstack = 0
 12033  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12034                           
 12035                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12036  0005  3180               	pagesel	$
 12037  0006  0064               	clrwdt	;# 
 12038                           
 12039                           ;mcc_generated_files/interrupt_manager.c: 56:     if(INTCONbits.PEIE == 1)
 12040  0007  1F0B               	btfss	11,6	;volatile
 12041  0008  2832               	goto	i1l393
 12042                           
 12043                           ;mcc_generated_files/interrupt_manager.c: 57:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 58:         if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 12044  0009  0021               	movlb	1	; select bank1
 12045  000A  1F11               	btfss	17,6	;volatile
 12046  000B  2813               	goto	i1l384
 12047  000C  0020               	movlb	0	; select bank0
 12048  000D  1F11               	btfss	17,6	;volatile
 12049  000E  2813               	goto	i1l384
 12050                           
 12051                           ;mcc_generated_files/interrupt_manager.c: 59:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 60:             ADC_ISR();
 12052  000F  3195  25D5  3180   	fcall	_ADC_ISR
 12053                           
 12054                           ;mcc_generated_files/interrupt_manager.c: 61:         }
 12055  0012  2832               	goto	i1l393
 12056  0013                     i1l384:	
 12057                           ;mcc_generated_files/interrupt_manager.c: 62:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 12058                           
 12059  0013  0021               	movlb	1	; select bank1
 12060  0014  1E91               	btfss	17,5	;volatile
 12061  0015  2820               	goto	i1l386
 12062  0016  0020               	movlb	0	; select bank0
 12063  0017  1E91               	btfss	17,5	;volatile
 12064  0018  2820               	goto	i1l386
 12065                           
 12066                           ;mcc_generated_files/interrupt_manager.c: 63:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 64:             EUSART_RxDefaultInterruptHandler();
 12067  0019  0022               	movlb	2	; select bank2
 12068  001A  086E               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
 12069  001B  008A               	movwf	10
 12070  001C  086D               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
 12071  001D  000A               	callw
 12072  001E  3180               	pagesel	$
 12073                           
 12074                           ;mcc_generated_files/interrupt_manager.c: 65:         }
 12075  001F  2832               	goto	i1l393
 12076  0020                     i1l386:	
 12077                           ;mcc_generated_files/interrupt_manager.c: 66:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
 12078                           
 12079  0020  0021               	movlb	1	; select bank1
 12080  0021  1C91               	btfss	17,1	;volatile
 12081  0022  282A               	goto	i1l388
 12082  0023  0020               	movlb	0	; select bank0
 12083  0024  1C91               	btfss	17,1	;volatile
 12084  0025  282A               	goto	i1l388
 12085                           
 12086                           ;mcc_generated_files/interrupt_manager.c: 67:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 68:             TMR2_ISR();
 12087  0026  3194  24FE  3180   	fcall	_TMR2_ISR
 12088                           
 12089                           ;mcc_generated_files/interrupt_manager.c: 69:         }
 12090  0029  2832               	goto	i1l393
 12091  002A                     i1l388:	
 12092                           ;mcc_generated_files/interrupt_manager.c: 70:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
 12093                           
 12094  002A  0021               	movlb	1	; select bank1
 12095  002B  1C11               	btfss	17,0	;volatile
 12096  002C  2832               	goto	i1l393
 12097  002D  0020               	movlb	0	; select bank0
 12098  002E  1C11               	btfss	17,0	;volatile
 12099  002F  2832               	goto	i1l393
 12100                           
 12101                           ;mcc_generated_files/interrupt_manager.c: 71:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 72:             TMR1_ISR();
 12102  0030  3195  25E1         	fcall	_TMR1_ISR
 12103  0032                     i1l393:	
 12104                           ;mcc_generated_files/interrupt_manager.c: 73:         }
 12105                           
 12106  0032  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12107  0033  0009               	retfie
 12108  0034                     __end_of_INTERRUPT_InterruptManager:	
 12109                           
 12110                           	psect	text54
 12111  14FE                     __ptext54:	
 12112 ;; *************** function _TMR2_ISR *****************
 12113 ;; Defined at:
 12114 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 12115 ;; Parameters:    Size  Location     Type
 12116 ;;		None
 12117 ;; Auto vars:     Size  Location     Type
 12118 ;;		None
 12119 ;; Return value:  Size  Location     Type
 12120 ;;                  1    wreg      void 
 12121 ;; Registers used:
 12122 ;;		wreg, status,2, status,0, pclath, cstack
 12123 ;; Tracked objects:
 12124 ;;		On entry : 1F/0
 12125 ;;		On exit  : 0/0
 12126 ;;		Unchanged: 0/0
 12127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;Total ram usage:        0 bytes
 12133 ;; Hardware stack levels used:    1
 12134 ;; Hardware stack levels required when called:    3
 12135 ;; This function calls:
 12136 ;;		_TMR2_CallBack
 12137 ;; This function is called by:
 12138 ;;		_INTERRUPT_InterruptManager
 12139 ;; This function uses a non-reentrant model
 12140 ;;
 12141                           
 12142                           
 12143                           ;psect for function _TMR2_ISR
 12144  14FE                     _TMR2_ISR:	
 12145                           
 12146                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 12147                           
 12148                           ;incstack = 0
 12149                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 12150  14FE  1091               	bcf	17,1	;volatile
 12151                           
 12152                           ;mcc_generated_files/tmr2.c: 127:     TMR2_CallBack();
 12153  14FF  3195  25A9         	fcall	_TMR2_CallBack
 12154  1501  0008               	return
 12155  1502                     __end_of_TMR2_ISR:	
 12156                           
 12157                           	psect	text55
 12158  15A9                     __ptext55:	
 12159 ;; *************** function _TMR2_CallBack *****************
 12160 ;; Defined at:
 12161 ;;		line 130 in file "mcc_generated_files/tmr2.c"
 12162 ;; Parameters:    Size  Location     Type
 12163 ;;		None
 12164 ;; Auto vars:     Size  Location     Type
 12165 ;;		None
 12166 ;; Return value:  Size  Location     Type
 12167 ;;                  1    wreg      void 
 12168 ;; Registers used:
 12169 ;;		wreg, status,2, status,0, pclath, cstack
 12170 ;; Tracked objects:
 12171 ;;		On entry : 1F/0
 12172 ;;		On exit  : 0/0
 12173 ;;		Unchanged: 0/0
 12174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12179 ;;Total ram usage:        0 bytes
 12180 ;; Hardware stack levels used:    1
 12181 ;; Hardware stack levels required when called:    2
 12182 ;; This function calls:
 12183 ;;		Absolute function
 12184 ;;		_TMR2_DefaultInterruptHandler
 12185 ;;		_TMR2_DutyControlHandler_ISR
 12186 ;; This function is called by:
 12187 ;;		_TMR2_ISR
 12188 ;; This function uses a non-reentrant model
 12189 ;;
 12190                           
 12191                           
 12192                           ;psect for function _TMR2_CallBack
 12193  15A9                     _TMR2_CallBack:	
 12194                           
 12195                           ;mcc_generated_files/tmr2.c: 134:     if(TMR2_InterruptHandler)
 12196                           
 12197                           ;incstack = 0
 12198                           ; Regs used in _TMR2_CallBack: [wreg+status,2+status,0+pclath+cstack]
 12199  15A9  0022               	movlb	2	; select bank2
 12200  15AA  0865               	movf	_TMR2_InterruptHandler^(0+256),w
 12201  15AB  0466               	iorwf	(_TMR2_InterruptHandler+1)^(0+256),w
 12202  15AC  1903               	btfsc	3,2
 12203  15AD  0008               	return
 12204                           
 12205                           ;mcc_generated_files/tmr2.c: 135:     {;mcc_generated_files/tmr2.c: 136:         TMR2_In
      +                          terruptHandler();
 12206  15AE  0866               	movf	(_TMR2_InterruptHandler+1)^(0+256),w
 12207  15AF  008A               	movwf	10
 12208  15B0  0865               	movf	_TMR2_InterruptHandler^(0+256),w
 12209  15B1  000A               	callw
 12210  15B2  3195               	pagesel	$
 12211  15B3  0008               	return
 12212  15B4                     __end_of_TMR2_CallBack:	
 12213                           
 12214                           	psect	text56
 12215  0002                     __ptext56:	
 12216 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 12217 ;; Defined at:
 12218 ;;		line 144 in file "mcc_generated_files/tmr2.c"
 12219 ;; Parameters:    Size  Location     Type
 12220 ;;		None
 12221 ;; Auto vars:     Size  Location     Type
 12222 ;;		None
 12223 ;; Return value:  Size  Location     Type
 12224 ;;                  1    wreg      void 
 12225 ;; Registers used:
 12226 ;;		None
 12227 ;; Tracked objects:
 12228 ;;		On entry : 1F/2
 12229 ;;		On exit  : 1F/2
 12230 ;;		Unchanged: 1F/0
 12231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12236 ;;Total ram usage:        0 bytes
 12237 ;; Hardware stack levels used:    1
 12238 ;; This function calls:
 12239 ;;		Nothing
 12240 ;; This function is called by:
 12241 ;;		_TMR2_Initialize
 12242 ;;		_TMR2_CallBack
 12243 ;; This function uses a non-reentrant model
 12244 ;;
 12245                           
 12246                           
 12247                           ;psect for function _TMR2_DefaultInterruptHandler
 12248  0002                     _TMR2_DefaultInterruptHandler:	
 12249                           
 12250                           ;incstack = 0
 12251                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 12252  0002  0008               	return
 12253  0003                     __end_of_TMR2_DefaultInterruptHandler:	
 12254                           
 12255                           	psect	text57
 12256  099F                     __ptext57:	
 12257 ;; *************** function _TMR2_DutyControlHandler_ISR *****************
 12258 ;; Defined at:
 12259 ;;		line 420 in file "vcontrol.c"
 12260 ;; Parameters:    Size  Location     Type
 12261 ;;		None
 12262 ;; Auto vars:     Size  Location     Type
 12263 ;;		None
 12264 ;; Return value:  Size  Location     Type
 12265 ;;                  1    wreg      void 
 12266 ;; Registers used:
 12267 ;;		wreg, status,2, status,0, pclath, cstack
 12268 ;; Tracked objects:
 12269 ;;		On entry : 1F/2
 12270 ;;		On exit  : 1F/C
 12271 ;;		Unchanged: 0/0
 12272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12275 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12276 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12277 ;;Total ram usage:        2 bytes
 12278 ;; Hardware stack levels used:    1
 12279 ;; Hardware stack levels required when called:    1
 12280 ;; This function calls:
 12281 ;;		_PWM3_LoadDutyValue
 12282 ;; This function is called by:
 12283 ;;		_init_chopper
 12284 ;;		_TMR2_CallBack
 12285 ;; This function uses a non-reentrant model
 12286 ;;
 12287                           
 12288                           
 12289                           ;psect for function _TMR2_DutyControlHandler_ISR
 12290  099F                     _TMR2_DutyControlHandler_ISR:	
 12291                           
 12292                           ;vcontrol.c: 422:     if( current_duty > target_duty )
 12293                           
 12294                           ;incstack = 0
 12295                           ; Regs used in _TMR2_DutyControlHandler_ISR: [wreg+status,2+status,0+pclath+cstack]
 12296  099F  0020               	movlb	0	; select bank0
 12297  09A0  0823               	movf	_current_duty+1,w
 12298  09A1  0225               	subwf	_target_duty+1,w
 12299  09A2  1D03               	skipz
 12300  09A3  29A6               	goto	u128_25
 12301  09A4  0822               	movf	_current_duty,w
 12302  09A5  0224               	subwf	_target_duty,w
 12303  09A6                     u128_25:	
 12304  09A6  1803               	skipnc
 12305  09A7  29BE               	goto	i1l877
 12306                           
 12307                           ;vcontrol.c: 423:     {;vcontrol.c: 424:         if( current_duty - target_duty > duty_i
      +                          nc )
 12308  09A8  0824               	movf	_target_duty,w
 12309  09A9  0222               	subwf	_current_duty,w
 12310  09AA  00F4               	movwf	??_TMR2_DutyControlHandler_ISR
 12311  09AB  0825               	movf	_target_duty+1,w
 12312  09AC  3B23               	subwfb	_current_duty+1,w
 12313  09AD  00F5               	movwf	??_TMR2_DutyControlHandler_ISR+1
 12314  09AE  3000               	movlw	0
 12315  09AF  0275               	subwf	??_TMR2_DutyControlHandler_ISR+1,w
 12316  09B0  3009               	movlw	9
 12317  09B1  1903               	skipnz
 12318  09B2  0274               	subwf	??_TMR2_DutyControlHandler_ISR,w
 12319  09B3  1C03               	skipc
 12320  09B4  29BA               	goto	i1l2793
 12321                           
 12322                           ;vcontrol.c: 425:             current_duty -= duty_inc;
 12323  09B5  3008               	movlw	8
 12324  09B6  02A2               	subwf	_current_duty,f
 12325  09B7  3000               	movlw	0
 12326  09B8  3BA3               	subwfb	_current_duty+1,f
 12327  09B9  29BE               	goto	i1l877
 12328  09BA                     i1l2793:	
 12329                           
 12330                           ;vcontrol.c: 427:             current_duty = target_duty;
 12331  09BA  0825               	movf	_target_duty+1,w
 12332  09BB  00A3               	movwf	_current_duty+1
 12333  09BC  0824               	movf	_target_duty,w
 12334  09BD  00A2               	movwf	_current_duty
 12335  09BE                     i1l877:	
 12336                           ;vcontrol.c: 428:     }
 12337                           
 12338                           
 12339                           ;vcontrol.c: 429:     if( current_duty < target_duty )
 12340  09BE  0825               	movf	_target_duty+1,w
 12341  09BF  0223               	subwf	_current_duty+1,w
 12342  09C0  1D03               	skipz
 12343  09C1  29C4               	goto	u130_25
 12344  09C2  0824               	movf	_target_duty,w
 12345  09C3  0222               	subwf	_current_duty,w
 12346  09C4                     u130_25:	
 12347  09C4  1803               	skipnc
 12348  09C5  29DC               	goto	i1l2801
 12349                           
 12350                           ;vcontrol.c: 430:     {;vcontrol.c: 431:         if( target_duty - current_duty > duty_i
      +                          nc )
 12351  09C6  0822               	movf	_current_duty,w
 12352  09C7  0224               	subwf	_target_duty,w
 12353  09C8  00F4               	movwf	??_TMR2_DutyControlHandler_ISR
 12354  09C9  0823               	movf	_current_duty+1,w
 12355  09CA  3B25               	subwfb	_target_duty+1,w
 12356  09CB  00F5               	movwf	??_TMR2_DutyControlHandler_ISR+1
 12357  09CC  3000               	movlw	0
 12358  09CD  0275               	subwf	??_TMR2_DutyControlHandler_ISR+1,w
 12359  09CE  3009               	movlw	9
 12360  09CF  1903               	skipnz
 12361  09D0  0274               	subwf	??_TMR2_DutyControlHandler_ISR,w
 12362  09D1  1C03               	skipc
 12363  09D2  29D8               	goto	i1l2799
 12364                           
 12365                           ;vcontrol.c: 433:             current_duty += duty_inc;
 12366  09D3  3008               	movlw	8
 12367  09D4  07A2               	addwf	_current_duty,f
 12368  09D5  3000               	movlw	0
 12369  09D6  3DA3               	addwfc	_current_duty+1,f
 12370  09D7  29DC               	goto	i1l2801
 12371  09D8                     i1l2799:	
 12372                           
 12373                           ;vcontrol.c: 435:             current_duty = target_duty;
 12374  09D8  0825               	movf	_target_duty+1,w
 12375  09D9  00A3               	movwf	_current_duty+1
 12376  09DA  0824               	movf	_target_duty,w
 12377  09DB  00A2               	movwf	_current_duty
 12378  09DC                     i1l2801:	
 12379                           
 12380                           ;vcontrol.c: 437:     PWM3_LoadDutyValue(current_duty);
 12381  09DC  0823               	movf	_current_duty+1,w
 12382  09DD  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 12383  09DE  0822               	movf	_current_duty,w
 12384  09DF  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
 12385  09E0  3196  265C         	fcall	_PWM3_LoadDutyValue
 12386  09E2  0008               	return
 12387  09E3                     __end_of_TMR2_DutyControlHandler_ISR:	
 12388                           
 12389                           	psect	text58
 12390  15E1                     __ptext58:	
 12391 ;; *************** function _TMR1_ISR *****************
 12392 ;; Defined at:
 12393 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 12394 ;; Parameters:    Size  Location     Type
 12395 ;;		None
 12396 ;; Auto vars:     Size  Location     Type
 12397 ;;		None
 12398 ;; Return value:  Size  Location     Type
 12399 ;;                  1    wreg      void 
 12400 ;; Registers used:
 12401 ;;		wreg, status,2, status,0, pclath, cstack
 12402 ;; Tracked objects:
 12403 ;;		On entry : 1F/0
 12404 ;;		On exit  : 0/0
 12405 ;;		Unchanged: 0/0
 12406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12411 ;;Total ram usage:        0 bytes
 12412 ;; Hardware stack levels used:    1
 12413 ;; Hardware stack levels required when called:    2
 12414 ;; This function calls:
 12415 ;;		_TMR1_CallBack
 12416 ;;		_TMR1_WriteTimer
 12417 ;; This function is called by:
 12418 ;;		_INTERRUPT_InterruptManager
 12419 ;; This function uses a non-reentrant model
 12420 ;;
 12421                           
 12422                           
 12423                           ;psect for function _TMR1_ISR
 12424  15E1                     _TMR1_ISR:	
 12425                           
 12426                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
 12427                           
 12428                           ;incstack = 0
 12429                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 12430  15E1  1011               	bcf	17,0	;volatile
 12431                           
 12432                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
 12433  15E2  0022               	movlb	2	; select bank2
 12434  15E3  0862               	movf	(_timer1ReloadVal+1)^(0+256),w	;volatile
 12435  15E4  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 12436  15E5  0861               	movf	_timer1ReloadVal^(0+256),w	;volatile
 12437  15E6  00F0               	movwf	TMR1_WriteTimer@timerVal
 12438  15E7  3196  2606  3195   	fcall	_TMR1_WriteTimer
 12439                           
 12440                           ;mcc_generated_files/tmr1.c: 166:     TMR1_CallBack();
 12441  15EA  3195  259E         	fcall	_TMR1_CallBack
 12442  15EC  0008               	return
 12443  15ED                     __end_of_TMR1_ISR:	
 12444                           
 12445                           	psect	text59
 12446  1606                     __ptext59:	
 12447 ;; *************** function _TMR1_WriteTimer *****************
 12448 ;; Defined at:
 12449 ;;		line 120 in file "mcc_generated_files/tmr1.c"
 12450 ;; Parameters:    Size  Location     Type
 12451 ;;  timerVal        2    0[COMMON] unsigned short 
 12452 ;; Auto vars:     Size  Location     Type
 12453 ;;		None
 12454 ;; Return value:  Size  Location     Type
 12455 ;;                  1    wreg      void 
 12456 ;; Registers used:
 12457 ;;		wreg
 12458 ;; Tracked objects:
 12459 ;;		On entry : 1F/2
 12460 ;;		On exit  : 1F/0
 12461 ;;		Unchanged: 0/0
 12462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12463 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12467 ;;Total ram usage:        2 bytes
 12468 ;; Hardware stack levels used:    1
 12469 ;; This function calls:
 12470 ;;		Nothing
 12471 ;; This function is called by:
 12472 ;;		_TMR1_ISR
 12473 ;; This function uses a non-reentrant model
 12474 ;;
 12475                           
 12476                           
 12477                           ;psect for function _TMR1_WriteTimer
 12478  1606                     _TMR1_WriteTimer:	
 12479                           
 12480                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
 12481                           
 12482                           ;incstack = 0
 12483                           ; Regs used in _TMR1_WriteTimer: [wreg]
 12484  1606  0020               	movlb	0	; select bank0
 12485  1607  1D18               	btfss	24,2	;volatile
 12486  1608  2E10               	goto	i1l3041
 12487                           
 12488                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
 12489  1609  1018               	bcf	24,0	;volatile
 12490                           
 12491                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (timerVal >> 8);
 12492  160A  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 12493  160B  0097               	movwf	23	;volatile
 12494                           
 12495                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = timerVal;
 12496  160C  0870               	movf	TMR1_WriteTimer@timerVal,w
 12497  160D  0096               	movwf	22	;volatile
 12498                           
 12499                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
 12500  160E  1418               	bsf	24,0	;volatile
 12501                           
 12502                           ;mcc_generated_files/tmr1.c: 133:     }
 12503  160F  0008               	return
 12504  1610                     i1l3041:	
 12505                           
 12506                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (timerVal >> 8);
 12507  1610  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 12508  1611  0097               	movwf	23	;volatile
 12509                           
 12510                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = timerVal;
 12511  1612  0870               	movf	TMR1_WriteTimer@timerVal,w
 12512  1613  0096               	movwf	22	;volatile
 12513  1614  0008               	return
 12514  1615                     __end_of_TMR1_WriteTimer:	
 12515                           
 12516                           	psect	text60
 12517  159E                     __ptext60:	
 12518 ;; *************** function _TMR1_CallBack *****************
 12519 ;; Defined at:
 12520 ;;		line 169 in file "mcc_generated_files/tmr1.c"
 12521 ;; Parameters:    Size  Location     Type
 12522 ;;		None
 12523 ;; Auto vars:     Size  Location     Type
 12524 ;;		None
 12525 ;; Return value:  Size  Location     Type
 12526 ;;                  1    wreg      void 
 12527 ;; Registers used:
 12528 ;;		wreg, status,2, status,0, pclath, cstack
 12529 ;; Tracked objects:
 12530 ;;		On entry : 1F/0
 12531 ;;		On exit  : 0/0
 12532 ;;		Unchanged: 0/0
 12533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12538 ;;Total ram usage:        0 bytes
 12539 ;; Hardware stack levels used:    1
 12540 ;; Hardware stack levels required when called:    1
 12541 ;; This function calls:
 12542 ;;		Absolute function
 12543 ;;		_TMR1_DefaultInterruptHandler
 12544 ;;		_TMR1_SystemTimer_ISR
 12545 ;; This function is called by:
 12546 ;;		_TMR1_ISR
 12547 ;; This function uses a non-reentrant model
 12548 ;;
 12549                           
 12550                           
 12551                           ;psect for function _TMR1_CallBack
 12552  159E                     _TMR1_CallBack:	
 12553                           
 12554                           ;mcc_generated_files/tmr1.c: 172:     if(TMR1_InterruptHandler)
 12555                           
 12556                           ;incstack = 0
 12557                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 12558  159E  0022               	movlb	2	; select bank2
 12559  159F  085F               	movf	_TMR1_InterruptHandler^(0+256),w
 12560  15A0  0460               	iorwf	(_TMR1_InterruptHandler+1)^(0+256),w
 12561  15A1  1903               	btfsc	3,2
 12562  15A2  0008               	return
 12563                           
 12564                           ;mcc_generated_files/tmr1.c: 173:     {;mcc_generated_files/tmr1.c: 174:         TMR1_In
      +                          terruptHandler();
 12565  15A3  0860               	movf	(_TMR1_InterruptHandler+1)^(0+256),w
 12566  15A4  008A               	movwf	10
 12567  15A5  085F               	movf	_TMR1_InterruptHandler^(0+256),w
 12568  15A6  000A               	callw
 12569  15A7  3195               	pagesel	$
 12570  15A8  0008               	return
 12571  15A9                     __end_of_TMR1_CallBack:	
 12572                           
 12573                           	psect	text61
 12574  0872                     __ptext61:	
 12575 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 12576 ;; Defined at:
 12577 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 12578 ;; Parameters:    Size  Location     Type
 12579 ;;		None
 12580 ;; Auto vars:     Size  Location     Type
 12581 ;;		None
 12582 ;; Return value:  Size  Location     Type
 12583 ;;                  1    wreg      void 
 12584 ;; Registers used:
 12585 ;;		None
 12586 ;; Tracked objects:
 12587 ;;		On entry : 1F/2
 12588 ;;		On exit  : 1F/2
 12589 ;;		Unchanged: 1F/0
 12590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;Total ram usage:        0 bytes
 12596 ;; Hardware stack levels used:    1
 12597 ;; This function calls:
 12598 ;;		Nothing
 12599 ;; This function is called by:
 12600 ;;		_TMR1_Initialize
 12601 ;;		_TMR1_CallBack
 12602 ;; This function uses a non-reentrant model
 12603 ;;
 12604                           
 12605                           
 12606                           ;psect for function _TMR1_DefaultInterruptHandler
 12607  0872                     _TMR1_DefaultInterruptHandler:	
 12608                           
 12609                           ;incstack = 0
 12610                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 12611  0872  0008               	return
 12612  0873                     __end_of_TMR1_DefaultInterruptHandler:	
 12613                           
 12614                           	psect	text62
 12615  151B                     __ptext62:	
 12616 ;; *************** function _TMR1_SystemTimer_ISR *****************
 12617 ;; Defined at:
 12618 ;;		line 5 in file "SystemTimer.c"
 12619 ;; Parameters:    Size  Location     Type
 12620 ;;		None
 12621 ;; Auto vars:     Size  Location     Type
 12622 ;;		None
 12623 ;; Return value:  Size  Location     Type
 12624 ;;                  1    wreg      void 
 12625 ;; Registers used:
 12626 ;;		wreg, status,2, status,0
 12627 ;; Tracked objects:
 12628 ;;		On entry : 1F/2
 12629 ;;		On exit  : 1F/0
 12630 ;;		Unchanged: 0/0
 12631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12634 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12635 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12636 ;;Total ram usage:        1 bytes
 12637 ;; Hardware stack levels used:    1
 12638 ;; This function calls:
 12639 ;;		Nothing
 12640 ;; This function is called by:
 12641 ;;		_uart_start
 12642 ;;		_TMR1_CallBack
 12643 ;; This function uses a non-reentrant model
 12644 ;;
 12645                           
 12646                           
 12647                           ;psect for function _TMR1_SystemTimer_ISR
 12648  151B                     _TMR1_SystemTimer_ISR:	
 12649                           
 12650                           ;SystemTimer.c: 7:     system_counter++;
 12651                           
 12652                           ;incstack = 0
 12653                           ; Regs used in _TMR1_SystemTimer_ISR: [wreg+status,2+status,0]
 12654  151B  3001               	movlw	1
 12655  151C  00F0               	movwf	??_TMR1_SystemTimer_ISR
 12656  151D  0870               	movf	??_TMR1_SystemTimer_ISR,w
 12657  151E  0020               	movlb	0	; select bank0
 12658  151F  07B0               	addwf	_system_counter,f
 12659  1520  0008               	return
 12660  1521                     __end_of_TMR1_SystemTimer_ISR:	
 12661                           
 12662                           	psect	text63
 12663  1793                     __ptext63:	
 12664 ;; *************** function _EUSART_CommandHandler_ISR *****************
 12665 ;; Defined at:
 12666 ;;		line 13 in file "UartParser.c"
 12667 ;; Parameters:    Size  Location     Type
 12668 ;;		None
 12669 ;; Auto vars:     Size  Location     Type
 12670 ;;  rx_data         1    1[COMMON] unsigned char 
 12671 ;; Return value:  Size  Location     Type
 12672 ;;                  1    wreg      void 
 12673 ;; Registers used:
 12674 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12675 ;; Tracked objects:
 12676 ;;		On entry : 1F/2
 12677 ;;		On exit  : 1F/0
 12678 ;;		Unchanged: 0/0
 12679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12681 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12682 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12683 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12684 ;;Total ram usage:        2 bytes
 12685 ;; Hardware stack levels used:    1
 12686 ;; This function calls:
 12687 ;;		Nothing
 12688 ;; This function is called by:
 12689 ;;		_uart_start
 12690 ;;		_INTERRUPT_InterruptManager
 12691 ;; This function uses a non-reentrant model
 12692 ;;
 12693                           
 12694                           
 12695                           ;psect for function _EUSART_CommandHandler_ISR
 12696  1793                     _EUSART_CommandHandler_ISR:	
 12697                           
 12698                           ;UartParser.c: 15:     uint8_t rx_data = RC1REG;
 12699                           
 12700                           ;incstack = 0
 12701                           ; Regs used in _EUSART_CommandHandler_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 12702  1793  0023               	movlb	3	; select bank3
 12703  1794  0819               	movf	25,w	;volatile
 12704  1795  00F0               	movwf	??_EUSART_CommandHandler_ISR
 12705  1796  0870               	movf	??_EUSART_CommandHandler_ISR,w
 12706  1797  00F1               	movwf	EUSART_CommandHandler_ISR@rx_data
 12707                           
 12708                           ;UartParser.c: 16:     if( lock_isr )
 12709  1798  0020               	movlb	0	; select bank0
 12710  1799  0864               	movf	_lock_isr,w
 12711  179A  1D03               	btfss	3,2
 12712  179B  0008               	return
 12713                           
 12714                           ;UartParser.c: 18:     isr_timer = ((uint8_t)((uint8_t)~system_counter)+((uint8_t)1));
 12715  179C  0330               	decf	_system_counter,w
 12716  179D  3AFF               	xorlw	255
 12717  179E  00F0               	movwf	??_EUSART_CommandHandler_ISR
 12718  179F  0870               	movf	??_EUSART_CommandHandler_ISR,w
 12719  17A0  00AE               	movwf	_isr_timer
 12720                           
 12721                           ;UartParser.c: 19:     if( rx_idx < 32 )
 12722  17A1  3020               	movlw	32
 12723  17A2  022F               	subwf	UartParser@rx_idx,w
 12724  17A3  1803               	skipnc
 12725  17A4  0008               	return
 12726                           
 12727                           ;UartParser.c: 20:         rx_buffer[rx_idx++] = rx_data;
 12728  17A5  0871               	movf	EUSART_CommandHandler_ISR@rx_data,w
 12729  17A6  00F0               	movwf	??_EUSART_CommandHandler_ISR
 12730  17A7  082F               	movf	UartParser@rx_idx,w
 12731  17A8  3E20               	addlw	(low (UartParser@rx_buffer| (0+256)))& (0+255)
 12732  17A9  0086               	movwf	6
 12733  17AA  3001               	movlw	1	; select bank2/3
 12734  17AB  0087               	movwf	7
 12735  17AC  0870               	movf	??_EUSART_CommandHandler_ISR,w
 12736  17AD  0081               	movwf	1
 12737  17AE  3001               	movlw	1
 12738  17AF  00F0               	movwf	??_EUSART_CommandHandler_ISR
 12739  17B0  0870               	movf	??_EUSART_CommandHandler_ISR,w
 12740  17B1  07AF               	addwf	UartParser@rx_idx,f
 12741  17B2  0008               	return
 12742  17B3                     __end_of_EUSART_CommandHandler_ISR:	
 12743                           
 12744                           	psect	text64
 12745  0965                     __ptext64:	
 12746 ;; *************** function _EUSART_Receive_ISR *****************
 12747 ;; Defined at:
 12748 ;;		line 175 in file "mcc_generated_files/eusart.c"
 12749 ;; Parameters:    Size  Location     Type
 12750 ;;		None
 12751 ;; Auto vars:     Size  Location     Type
 12752 ;;		None
 12753 ;; Return value:  Size  Location     Type
 12754 ;;                  1    wreg      void 
 12755 ;; Registers used:
 12756 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12757 ;; Tracked objects:
 12758 ;;		On entry : 1F/2
 12759 ;;		On exit  : 0/0
 12760 ;;		Unchanged: 0/0
 12761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12766 ;;Total ram usage:        0 bytes
 12767 ;; Hardware stack levels used:    1
 12768 ;; Hardware stack levels required when called:    2
 12769 ;; This function calls:
 12770 ;;		Absolute function
 12771 ;;		_EUSART_DefaultErrorHandler
 12772 ;;		_EUSART_DefaultFramingErrorHandler
 12773 ;;		_EUSART_DefaultOverrunErrorHandler
 12774 ;;		_EUSART_RxDataHandler
 12775 ;; This function is called by:
 12776 ;;		_EUSART_Initialize
 12777 ;;		_INTERRUPT_InterruptManager
 12778 ;; This function uses a non-reentrant model
 12779 ;;
 12780                           
 12781                           
 12782                           ;psect for function _EUSART_Receive_ISR
 12783  0965                     _EUSART_Receive_ISR:	
 12784                           
 12785                           ;mcc_generated_files/eusart.c: 178:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 12786                           
 12787                           ;incstack = 0
 12788                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12789  0965  0020               	movlb	0	; select bank0
 12790  0966  083F               	movf	_eusartRxHead,w	;volatile
 12791  0967  3E40               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 12792  0968  0086               	movwf	6
 12793  0969  3001               	movlw	1	; select bank2/3
 12794  096A  0087               	movwf	7
 12795  096B  0181               	clrf	1
 12796                           
 12797                           ;mcc_generated_files/eusart.c: 180:     if(RC1STAbits.FERR){
 12798  096C  0023               	movlb	3	; select bank3
 12799  096D  1D1D               	btfss	29,2	;volatile
 12800  096E  297C               	goto	i1l3225
 12801                           
 12802                           ;mcc_generated_files/eusart.c: 181:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 12803  096F  0020               	movlb	0	; select bank0
 12804  0970  083F               	movf	_eusartRxHead,w	;volatile
 12805  0971  3E40               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 12806  0972  0086               	movwf	6
 12807  0973  3001               	movlw	1	; select bank2/3
 12808  0974  0087               	movwf	7
 12809  0975  1481               	bsf	1,1
 12810                           
 12811                           ;mcc_generated_files/eusart.c: 182:         EUSART_FramingErrorHandler();
 12812  0976  0022               	movlb	2	; select bank2
 12813  0977  086C               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 12814  0978  008A               	movwf	10
 12815  0979  086B               	movf	_EUSART_FramingErrorHandler^(0+256),w
 12816  097A  000A               	callw
 12817  097B  3189               	pagesel	$
 12818  097C                     i1l3225:	
 12819                           
 12820                           ;mcc_generated_files/eusart.c: 185:     if(RC1STAbits.OERR){
 12821  097C  0023               	movlb	3	; select bank3
 12822  097D  1C9D               	btfss	29,1	;volatile
 12823  097E  298C               	goto	i1l3231
 12824                           
 12825                           ;mcc_generated_files/eusart.c: 186:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 12826  097F  0020               	movlb	0	; select bank0
 12827  0980  083F               	movf	_eusartRxHead,w	;volatile
 12828  0981  3E40               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 12829  0982  0086               	movwf	6
 12830  0983  3001               	movlw	1	; select bank2/3
 12831  0984  0087               	movwf	7
 12832  0985  1501               	bsf	1,2
 12833                           
 12834                           ;mcc_generated_files/eusart.c: 187:         EUSART_OverrunErrorHandler();
 12835  0986  0022               	movlb	2	; select bank2
 12836  0987  086A               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 12837  0988  008A               	movwf	10
 12838  0989  0869               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 12839  098A  000A               	callw
 12840  098B  3189               	pagesel	$
 12841  098C                     i1l3231:	
 12842                           
 12843                           ;mcc_generated_files/eusart.c: 190:     if(eusartRxStatusBuffer[eusartRxHead].status){
 12844  098C  0020               	movlb	0	; select bank0
 12845  098D  083F               	movf	_eusartRxHead,w	;volatile
 12846  098E  3E40               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 12847  098F  0086               	movwf	6
 12848  0990  3001               	movlw	1	; select bank2/3
 12849  0991  0087               	movwf	7
 12850  0992  0801               	movf	1,w
 12851  0993  1903               	btfsc	3,2
 12852  0994  299C               	goto	i1l3235
 12853                           
 12854                           ;mcc_generated_files/eusart.c: 191:         EUSART_ErrorHandler();
 12855  0995  0022               	movlb	2	; select bank2
 12856  0996  0868               	movf	(_EUSART_ErrorHandler+1)^(0+256),w
 12857  0997  008A               	movwf	10
 12858  0998  0867               	movf	_EUSART_ErrorHandler^(0+256),w
 12859  0999  000A               	callw
 12860  099A  3189               	pagesel	$
 12861                           
 12862                           ;mcc_generated_files/eusart.c: 192:     } else {
 12863  099B  0008               	return
 12864  099C                     i1l3235:	
 12865                           
 12866                           ;mcc_generated_files/eusart.c: 193:         EUSART_RxDataHandler();
 12867  099C  3196  26B5         	fcall	_EUSART_RxDataHandler
 12868  099E  0008               	return
 12869  099F                     __end_of_EUSART_Receive_ISR:	
 12870                           
 12871                           	psect	text65
 12872  14FA                     __ptext65:	
 12873 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 12874 ;; Defined at:
 12875 ;;		line 211 in file "mcc_generated_files/eusart.c"
 12876 ;; Parameters:    Size  Location     Type
 12877 ;;		None
 12878 ;; Auto vars:     Size  Location     Type
 12879 ;;		None
 12880 ;; Return value:  Size  Location     Type
 12881 ;;                  1    wreg      void 
 12882 ;; Registers used:
 12883 ;;		None
 12884 ;; Tracked objects:
 12885 ;;		On entry : 1F/2
 12886 ;;		On exit  : 1F/3
 12887 ;;		Unchanged: 0/0
 12888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;Total ram usage:        0 bytes
 12894 ;; Hardware stack levels used:    1
 12895 ;; This function calls:
 12896 ;;		Nothing
 12897 ;; This function is called by:
 12898 ;;		_EUSART_Initialize
 12899 ;;		_EUSART_Receive_ISR
 12900 ;; This function uses a non-reentrant model
 12901 ;;
 12902                           
 12903                           
 12904                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 12905  14FA                     _EUSART_DefaultOverrunErrorHandler:	
 12906                           
 12907                           ;mcc_generated_files/eusart.c: 214:     RC1STAbits.CREN = 0;
 12908                           
 12909                           ;incstack = 0
 12910                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 12911  14FA  0023               	movlb	3	; select bank3
 12912  14FB  121D               	bcf	29,4	;volatile
 12913                           
 12914                           ;mcc_generated_files/eusart.c: 215:     RC1STAbits.CREN = 1;
 12915  14FC  161D               	bsf	29,4	;volatile
 12916  14FD  0008               	return
 12917  14FE                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 12918                           
 12919                           	psect	text66
 12920  0871                     __ptext66:	
 12921 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 12922 ;; Defined at:
 12923 ;;		line 209 in file "mcc_generated_files/eusart.c"
 12924 ;; Parameters:    Size  Location     Type
 12925 ;;		None
 12926 ;; Auto vars:     Size  Location     Type
 12927 ;;		None
 12928 ;; Return value:  Size  Location     Type
 12929 ;;                  1    wreg      void 
 12930 ;; Registers used:
 12931 ;;		None
 12932 ;; Tracked objects:
 12933 ;;		On entry : 1F/2
 12934 ;;		On exit  : 1F/2
 12935 ;;		Unchanged: 1F/0
 12936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12941 ;;Total ram usage:        0 bytes
 12942 ;; Hardware stack levels used:    1
 12943 ;; This function calls:
 12944 ;;		Nothing
 12945 ;; This function is called by:
 12946 ;;		_EUSART_Initialize
 12947 ;;		_EUSART_Receive_ISR
 12948 ;; This function uses a non-reentrant model
 12949 ;;
 12950                           
 12951                           
 12952                           ;psect for function _EUSART_DefaultFramingErrorHandler
 12953  0871                     _EUSART_DefaultFramingErrorHandler:	
 12954                           
 12955                           ;incstack = 0
 12956                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 12957  0871  0008               	return
 12958  0872                     __end_of_EUSART_DefaultFramingErrorHandler:	
 12959                           
 12960                           	psect	text67
 12961  14E5                     __ptext67:	
 12962 ;; *************** function _EUSART_DefaultErrorHandler *****************
 12963 ;; Defined at:
 12964 ;;		line 219 in file "mcc_generated_files/eusart.c"
 12965 ;; Parameters:    Size  Location     Type
 12966 ;;		None
 12967 ;; Auto vars:     Size  Location     Type
 12968 ;;		None
 12969 ;; Return value:  Size  Location     Type
 12970 ;;                  1    wreg      void 
 12971 ;; Registers used:
 12972 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12973 ;; Tracked objects:
 12974 ;;		On entry : 1F/2
 12975 ;;		On exit  : 1F/0
 12976 ;;		Unchanged: 0/0
 12977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12982 ;;Total ram usage:        0 bytes
 12983 ;; Hardware stack levels used:    1
 12984 ;; Hardware stack levels required when called:    1
 12985 ;; This function calls:
 12986 ;;		_EUSART_RxDataHandler
 12987 ;; This function is called by:
 12988 ;;		_EUSART_Initialize
 12989 ;;		_EUSART_Receive_ISR
 12990 ;; This function uses a non-reentrant model
 12991 ;;
 12992                           
 12993                           
 12994                           ;psect for function _EUSART_DefaultErrorHandler
 12995  14E5                     _EUSART_DefaultErrorHandler:	
 12996                           
 12997                           ;mcc_generated_files/eusart.c: 220:     EUSART_RxDataHandler();
 12998                           
 12999                           ;incstack = 0
 13000                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 13001  14E5  3196  26B5         	fcall	_EUSART_RxDataHandler
 13002  14E7  0008               	return
 13003  14E8                     __end_of_EUSART_DefaultErrorHandler:	
 13004                           
 13005                           	psect	text68
 13006  16B5                     __ptext68:	
 13007 ;; *************** function _EUSART_RxDataHandler *****************
 13008 ;; Defined at:
 13009 ;;		line 199 in file "mcc_generated_files/eusart.c"
 13010 ;; Parameters:    Size  Location     Type
 13011 ;;		None
 13012 ;; Auto vars:     Size  Location     Type
 13013 ;;		None
 13014 ;; Return value:  Size  Location     Type
 13015 ;;                  1    wreg      void 
 13016 ;; Registers used:
 13017 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13018 ;; Tracked objects:
 13019 ;;		On entry : 1D/0
 13020 ;;		On exit  : 1F/0
 13021 ;;		Unchanged: 0/0
 13022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;Total ram usage:        1 bytes
 13028 ;; Hardware stack levels used:    1
 13029 ;; This function calls:
 13030 ;;		Nothing
 13031 ;; This function is called by:
 13032 ;;		_EUSART_Receive_ISR
 13033 ;;		_EUSART_DefaultErrorHandler
 13034 ;; This function uses a non-reentrant model
 13035 ;;
 13036                           
 13037                           
 13038                           ;psect for function _EUSART_RxDataHandler
 13039  16B5                     _EUSART_RxDataHandler:	
 13040                           
 13041                           ;mcc_generated_files/eusart.c: 201:     eusartRxBuffer[eusartRxHead++] = RC1REG;
 13042                           
 13043                           ;incstack = 0
 13044                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 13045  16B5  0023               	movlb	3	; select bank3
 13046  16B6  0819               	movf	25,w	;volatile
 13047  16B7  00F0               	movwf	??_EUSART_RxDataHandler
 13048  16B8  0020               	movlb	0	; select bank0
 13049  16B9  083F               	movf	_eusartRxHead,w
 13050  16BA  3E48               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 13051  16BB  0086               	movwf	6
 13052  16BC  3001               	movlw	1	; select bank2/3
 13053  16BD  0087               	movwf	7
 13054  16BE  0870               	movf	??_EUSART_RxDataHandler,w
 13055  16BF  0081               	movwf	1
 13056  16C0  3001               	movlw	1
 13057  16C1  00F0               	movwf	??_EUSART_RxDataHandler
 13058  16C2  0870               	movf	??_EUSART_RxDataHandler,w
 13059  16C3  07BF               	addwf	_eusartRxHead,f	;volatile
 13060                           
 13061                           ;mcc_generated_files/eusart.c: 202:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 13062  16C4  3008               	movlw	8
 13063  16C5  023F               	subwf	_eusartRxHead,w
 13064  16C6  1803               	btfsc	3,0
 13065                           
 13066                           ;mcc_generated_files/eusart.c: 203:     {;mcc_generated_files/eusart.c: 204:         eus
      +                          artRxHead = 0;
 13067  16C7  01BF               	clrf	_eusartRxHead	;volatile
 13068                           
 13069                           ;mcc_generated_files/eusart.c: 206:     eusartRxCount++;
 13070  16C8  3001               	movlw	1
 13071  16C9  00F0               	movwf	??_EUSART_RxDataHandler
 13072  16CA  0870               	movf	??_EUSART_RxDataHandler,w
 13073  16CB  07BD               	addwf	_eusartRxCount,f	;volatile
 13074  16CC  0008               	return
 13075  16CD                     __end_of_EUSART_RxDataHandler:	
 13076                           
 13077                           	psect	text69
 13078  15D5                     __ptext69:	
 13079 ;; *************** function _ADC_ISR *****************
 13080 ;; Defined at:
 13081 ;;		line 149 in file "mcc_generated_files/adc.c"
 13082 ;; Parameters:    Size  Location     Type
 13083 ;;		None
 13084 ;; Auto vars:     Size  Location     Type
 13085 ;;		None
 13086 ;; Return value:  Size  Location     Type
 13087 ;;                  1    wreg      void 
 13088 ;; Registers used:
 13089 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13090 ;; Tracked objects:
 13091 ;;		On entry : 1F/0
 13092 ;;		On exit  : 0/0
 13093 ;;		Unchanged: 0/0
 13094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13099 ;;Total ram usage:        0 bytes
 13100 ;; Hardware stack levels used:    1
 13101 ;; Hardware stack levels required when called:    2
 13102 ;; This function calls:
 13103 ;;		Absolute function
 13104 ;;		_ADC_DefaultInterruptHandler
 13105 ;;		_ADC_VoltageControlHandler_ISR
 13106 ;; This function is called by:
 13107 ;;		_INTERRUPT_InterruptManager
 13108 ;; This function uses a non-reentrant model
 13109 ;;
 13110                           
 13111                           
 13112                           ;psect for function _ADC_ISR
 13113  15D5                     _ADC_ISR:	
 13114                           
 13115                           ;mcc_generated_files/adc.c: 152:     PIR1bits.ADIF = 0;
 13116                           
 13117                           ;incstack = 0
 13118                           ; Regs used in _ADC_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13119  15D5  1311               	bcf	17,6	;volatile
 13120                           
 13121                           ;mcc_generated_files/adc.c: 154:  if(ADC_InterruptHandler)
 13122  15D6  0022               	movlb	2	; select bank2
 13123  15D7  0863               	movf	_ADC_InterruptHandler^(0+256),w
 13124  15D8  0464               	iorwf	(_ADC_InterruptHandler+1)^(0+256),w
 13125  15D9  1903               	btfsc	3,2
 13126  15DA  0008               	return
 13127                           
 13128                           ;mcc_generated_files/adc.c: 155:     {;mcc_generated_files/adc.c: 156:         ADC_Inter
      +                          ruptHandler();
 13129  15DB  0864               	movf	(_ADC_InterruptHandler+1)^(0+256),w
 13130  15DC  008A               	movwf	10
 13131  15DD  0863               	movf	_ADC_InterruptHandler^(0+256),w
 13132  15DE  000A               	callw
 13133  15DF  3195               	pagesel	$
 13134  15E0  0008               	return
 13135  15E1                     __end_of_ADC_ISR:	
 13136                           
 13137                           	psect	text70
 13138  14E4                     __ptext70:	
 13139 ;; *************** function _ADC_DefaultInterruptHandler *****************
 13140 ;; Defined at:
 13141 ;;		line 164 in file "mcc_generated_files/adc.c"
 13142 ;; Parameters:    Size  Location     Type
 13143 ;;		None
 13144 ;; Auto vars:     Size  Location     Type
 13145 ;;		None
 13146 ;; Return value:  Size  Location     Type
 13147 ;;                  1    wreg      void 
 13148 ;; Registers used:
 13149 ;;		None
 13150 ;; Tracked objects:
 13151 ;;		On entry : 1F/2
 13152 ;;		On exit  : 1F/2
 13153 ;;		Unchanged: 1F/0
 13154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;Total ram usage:        0 bytes
 13160 ;; Hardware stack levels used:    1
 13161 ;; This function calls:
 13162 ;;		Nothing
 13163 ;; This function is called by:
 13164 ;;		_ADC_Initialize
 13165 ;;		_ADC_ISR
 13166 ;; This function uses a non-reentrant model
 13167 ;;
 13168                           
 13169                           
 13170                           ;psect for function _ADC_DefaultInterruptHandler
 13171  14E4                     _ADC_DefaultInterruptHandler:	
 13172                           
 13173                           ;incstack = 0
 13174                           ; Regs used in _ADC_DefaultInterruptHandler: []
 13175  14E4  0008               	return
 13176  14E5                     __end_of_ADC_DefaultInterruptHandler:	
 13177                           
 13178                           	psect	text71
 13179  0C30                     __ptext71:	
 13180 ;; *************** function _ADC_VoltageControlHandler_ISR *****************
 13181 ;; Defined at:
 13182 ;;		line 323 in file "vcontrol.c"
 13183 ;; Parameters:    Size  Location     Type
 13184 ;;		None
 13185 ;; Auto vars:     Size  Location     Type
 13186 ;;  pwm             4    5[BANK0 ] unsigned long 
 13187 ;;  force_inc       1    4[BANK0 ] _Bool 
 13188 ;; Return value:  Size  Location     Type
 13189 ;;                  1    wreg      void 
 13190 ;; Registers used:
 13191 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13192 ;; Tracked objects:
 13193 ;;		On entry : 1F/2
 13194 ;;		On exit  : 1F/0
 13195 ;;		Unchanged: 0/0
 13196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13200 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13201 ;;Total ram usage:        9 bytes
 13202 ;; Hardware stack levels used:    1
 13203 ;; Hardware stack levels required when called:    1
 13204 ;; This function calls:
 13205 ;;		_ADC_GetConversionResult
 13206 ;;		_LoadDutyValue
 13207 ;;		_PWM3_LoadDutyValue
 13208 ;;		___lldiv
 13209 ;;		___lmul
 13210 ;; This function is called by:
 13211 ;;		_init_chopper
 13212 ;;		_ADC_ISR
 13213 ;; This function uses a non-reentrant model
 13214 ;;
 13215                           
 13216                           
 13217                           ;psect for function _ADC_VoltageControlHandler_ISR
 13218  0C30                     _ADC_VoltageControlHandler_ISR:	
 13219                           
 13220                           ;vcontrol.c: 325:     vdc_prev = vdc;
 13221                           
 13222                           ;incstack = 0
 13223                           ; Regs used in _ADC_VoltageControlHandler_ISR: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
 13224  0C30  0020               	movlb	0	; select bank0
 13225  0C31  0841               	movf	_vdc+1,w
 13226  0C32  00A9               	movwf	_vdc_prev+1
 13227  0C33  0840               	movf	_vdc,w
 13228  0C34  00A8               	movwf	_vdc_prev
 13229                           
 13230                           ;vcontrol.c: 326:     vdc = v_table[ADC_GetConversionResult() & 0x03FF ];
 13231  0C35  3195  2515  318C   	fcall	_ADC_GetConversionResult
 13232  0C38  30FF               	movlw	255
 13233  0C39  0570               	andwf	?_ADC_GetConversionResult,w
 13234  0C3A  0020               	movlb	0	; select bank0
 13235  0C3B  00C8               	movwf	??_ADC_VoltageControlHandler_ISR
 13236  0C3C  3003               	movlw	3
 13237  0C3D  0571               	andwf	?_ADC_GetConversionResult+1,w
 13238  0C3E  00C9               	movwf	??_ADC_VoltageControlHandler_ISR+1
 13239  0C3F  35C8               	lslf	??_ADC_VoltageControlHandler_ISR,f
 13240  0C40  0DC9               	rlf	??_ADC_VoltageControlHandler_ISR+1,f
 13241  0C41  3071               	movlw	low (_v_table| (0+32768))
 13242  0C42  0748               	addwf	??_ADC_VoltageControlHandler_ISR,w
 13243  0C43  0084               	movwf	4
 13244  0C44  3080               	movlw	high (_v_table| (0+32768))
 13245  0C45  3D49               	addwfc	??_ADC_VoltageControlHandler_ISR+1,w
 13246  0C46  0085               	movwf	5
 13247  0C47  3F00               	moviw [0]fsr0
 13248  0C48  00C0               	movwf	_vdc
 13249  0C49  3F01               	moviw [1]fsr0
 13250  0C4A  00C1               	movwf	_vdc+1
 13251                           
 13252                           ;vcontrol.c: 328:     if( chopper_active == 0 )
 13253  0C4B  0832               	movf	_chopper_active,w
 13254  0C4C  1903               	btfsc	3,2
 13255  0C4D  0008               	return
 13256                           
 13257                           ;vcontrol.c: 331:     diff_vdc = vdc - vdc_prev;
 13258  0C4E  0828               	movf	_vdc_prev,w
 13259  0C4F  0240               	subwf	_vdc,w
 13260  0C50  0022               	movlb	2	; select bank2
 13261  0C51  00D8               	movwf	_diff_vdc^(0+256)
 13262  0C52  0020               	movlb	0	; select bank0
 13263  0C53  0829               	movf	_vdc_prev+1,w
 13264  0C54  3B41               	subwfb	_vdc+1,w
 13265  0C55  0022               	movlb	2	; select bank2
 13266  0C56  00D9               	movwf	(_diff_vdc+1)^(0+256)
 13267                           
 13268                           ;vcontrol.c: 332:     if( vdc > vdc_prev )
 13269  0C57  0020               	movlb	0	; select bank0
 13270  0C58  0841               	movf	_vdc+1,w
 13271  0C59  0229               	subwf	_vdc_prev+1,w
 13272  0C5A  1D03               	skipz
 13273  0C5B  2C5E               	goto	u164_25
 13274  0C5C  0840               	movf	_vdc,w
 13275  0C5D  0228               	subwf	_vdc_prev,w
 13276  0C5E                     u164_25:	
 13277  0C5E  1803               	skipnc
 13278  0C5F  2C63               	goto	i1l3131
 13279                           
 13280                           ;vcontrol.c: 333:         diff_positive = 1;
 13281  0C60  01B3               	clrf	_diff_positive
 13282  0C61  0AB3               	incf	_diff_positive,f
 13283  0C62  2C64               	goto	i1l3133
 13284  0C63                     i1l3131:	
 13285                           
 13286                           ;vcontrol.c: 335:         diff_positive = 0;
 13287  0C63  01B3               	clrf	_diff_positive
 13288  0C64                     i1l3133:	
 13289                           
 13290                           ;vcontrol.c: 337:     if( vdc > vdc_critic )
 13291  0C64  0841               	movf	_vdc+1,w
 13292  0C65  0243               	subwf	_vdc_critic+1,w
 13293  0C66  1D03               	skipz
 13294  0C67  2C6A               	goto	u165_25
 13295  0C68  0840               	movf	_vdc,w
 13296  0C69  0242               	subwf	_vdc_critic,w
 13297  0C6A                     u165_25:	
 13298  0C6A  1803               	skipnc
 13299  0C6B  2C85               	goto	i1l3143
 13300                           
 13301                           ;vcontrol.c: 338:     {;vcontrol.c: 339:         do { LATAbits.LATA4 = 1; } while(0);
 13302  0C6C  0022               	movlb	2	; select bank2
 13303  0C6D  160C               	bsf	12,4	;volatile
 13304                           
 13305                           ;vcontrol.c: 340:         do { LATAbits.LATA5 = 0; } while(0);
 13306  0C6E  128C               	bcf	12,5	;volatile
 13307                           
 13308                           ;vcontrol.c: 341:         PWM3_LoadDutyValue(759);
 13309  0C6F  30F7               	movlw	247
 13310  0C70  00F0               	movwf	PWM3_LoadDutyValue@dutyValue
 13311  0C71  3002               	movlw	2
 13312  0C72  00F1               	movwf	PWM3_LoadDutyValue@dutyValue+1
 13313  0C73  3196  265C  318C   	fcall	_PWM3_LoadDutyValue
 13314                           
 13315                           ;vcontrol.c: 342:         current_duty = 759;
 13316  0C76  30F7               	movlw	247
 13317  0C77  0020               	movlb	0	; select bank0
 13318  0C78  00A2               	movwf	_current_duty
 13319  0C79  3002               	movlw	2
 13320  0C7A  00A3               	movwf	_current_duty+1
 13321                           
 13322                           ;vcontrol.c: 343:         target_duty = 759;
 13323  0C7B  30F7               	movlw	247
 13324  0C7C  00A4               	movwf	_target_duty
 13325  0C7D  3002               	movlw	2
 13326  0C7E  00A5               	movwf	_target_duty+1
 13327  0C7F                     i1l3141:	
 13328                           
 13329                           ;vcontrol.c: 344:         pwm_duty = 759;
 13330  0C7F  30F7               	movlw	247
 13331  0C80  0020               	movlb	0	; select bank0
 13332  0C81  00A6               	movwf	_pwm_duty
 13333  0C82  3002               	movlw	2
 13334  0C83  00A7               	movwf	_pwm_duty+1
 13335                           
 13336                           ;vcontrol.c: 345:     }
 13337  0C84  2D55               	goto	i1l3193
 13338  0C85                     i1l3143:	
 13339                           
 13340                           ;vcontrol.c: 347:     {;vcontrol.c: 348:         if( vdc >= vdc_max )
 13341  0C85  0845               	movf	_vdc_max+1,w
 13342  0C86  0241               	subwf	_vdc+1,w
 13343  0C87  1D03               	skipz
 13344  0C88  2C8B               	goto	u166_25
 13345  0C89  0844               	movf	_vdc_max,w
 13346  0C8A  0240               	subwf	_vdc,w
 13347  0C8B                     u166_25:	
 13348  0C8B  1C03               	skipc
 13349  0C8C  2C91               	goto	i1l3147
 13350                           
 13351                           ;vcontrol.c: 349:         {;vcontrol.c: 351:             do { LATAbits.LATA4 = 1; } whil
      +                          e(0);
 13352  0C8D  0022               	movlb	2	; select bank2
 13353  0C8E  160C               	bsf	12,4	;volatile
 13354                           
 13355                           ;vcontrol.c: 352:             do { LATAbits.LATA5 = 0; } while(0);
 13356  0C8F  128C               	bcf	12,5	;volatile
 13357  0C90  2C7F               	goto	i1l3141
 13358  0C91                     i1l3147:	
 13359                           
 13360                           ;vcontrol.c: 356:         {;vcontrol.c: 357:             if( vdc >= vdc_min )
 13361  0C91  0847               	movf	_vdc_min+1,w
 13362  0C92  0241               	subwf	_vdc+1,w
 13363  0C93  1D03               	skipz
 13364  0C94  2C97               	goto	u167_25
 13365  0C95  0846               	movf	_vdc_min,w
 13366  0C96  0240               	subwf	_vdc,w
 13367  0C97                     u167_25:	
 13368  0C97  1C03               	skipc
 13369  0C98  2D2B               	goto	i1l865
 13370                           
 13371                           ;vcontrol.c: 358:             {;vcontrol.c: 359:                 do { LATAbits.LATA4 = 1
      +                          ; } while(0);
 13372  0C99  0022               	movlb	2	; select bank2
 13373  0C9A  160C               	bsf	12,4	;volatile
 13374                           
 13375                           ;vcontrol.c: 360:                 do { LATAbits.LATA5 = 1; } while(0);
 13376  0C9B  168C               	bsf	12,5	;volatile
 13377                           
 13378                           ;vcontrol.c: 361:                 _Bool force_inc = 1;
 13379  0C9C  0020               	movlb	0	; select bank0
 13380  0C9D  01CC               	clrf	ADC_VoltageControlHandler_ISR@force_inc
 13381  0C9E  0ACC               	incf	ADC_VoltageControlHandler_ISR@force_inc,f
 13382                           
 13383                           ;vcontrol.c: 362:                 if( diff_positive == 1 )
 13384  0C9F  0333               	decf	_diff_positive,w
 13385  0CA0  1D03               	btfss	3,2
 13386  0CA1  2D04               	goto	i1l3165
 13387                           
 13388                           ;vcontrol.c: 363:                 {;vcontrol.c: 364:                     uint32_t pwm = 
      +                          (uint32_t)759 * (uint32_t)(vdc - vdc_min);
 13389  0CA2  0846               	movf	_vdc_min,w
 13390  0CA3  0240               	subwf	_vdc,w
 13391  0CA4  00F0               	movwf	___lmul@multiplier
 13392  0CA5  0847               	movf	_vdc_min+1,w
 13393  0CA6  3B41               	subwfb	_vdc+1,w
 13394  0CA7  00F1               	movwf	___lmul@multiplier+1
 13395  0CA8  01F2               	clrf	___lmul@multiplier+2
 13396  0CA9  01F3               	clrf	___lmul@multiplier+3
 13397  0CAA  3000               	movlw	0
 13398  0CAB  00F7               	movwf	___lmul@multiplicand+3
 13399  0CAC  3000               	movlw	0
 13400  0CAD  00F6               	movwf	___lmul@multiplicand+2
 13401  0CAE  3002               	movlw	2
 13402  0CAF  00F5               	movwf	___lmul@multiplicand+1
 13403  0CB0  30F7               	movlw	247
 13404  0CB1  00F4               	movwf	___lmul@multiplicand
 13405  0CB2  3188  209F  318C   	fcall	___lmul
 13406  0CB5  0873               	movf	?___lmul+3,w
 13407  0CB6  00D0               	movwf	ADC_VoltageControlHandler_ISR@pwm+3
 13408  0CB7  0872               	movf	?___lmul+2,w
 13409  0CB8  00CF               	movwf	ADC_VoltageControlHandler_ISR@pwm+2
 13410  0CB9  0871               	movf	?___lmul+1,w
 13411  0CBA  00CE               	movwf	ADC_VoltageControlHandler_ISR@pwm+1
 13412  0CBB  0870               	movf	?___lmul,w
 13413  0CBC  00CD               	movwf	ADC_VoltageControlHandler_ISR@pwm
 13414                           
 13415                           ;vcontrol.c: 365:                     pwm /= (vdc_max - vdc_min);
 13416  0CBD  0846               	movf	_vdc_min,w
 13417  0CBE  0244               	subwf	_vdc_max,w
 13418  0CBF  00F0               	movwf	___lldiv@divisor
 13419  0CC0  0847               	movf	_vdc_min+1,w
 13420  0CC1  3B45               	subwfb	_vdc_max+1,w
 13421  0CC2  00F1               	movwf	___lldiv@divisor+1
 13422  0CC3  01F2               	clrf	___lldiv@divisor+2
 13423  0CC4  01F3               	clrf	___lldiv@divisor+3
 13424  0CC5  0850               	movf	ADC_VoltageControlHandler_ISR@pwm+3,w
 13425  0CC6  00F7               	movwf	___lldiv@dividend+3
 13426  0CC7  084F               	movf	ADC_VoltageControlHandler_ISR@pwm+2,w
 13427  0CC8  00F6               	movwf	___lldiv@dividend+2
 13428  0CC9  084E               	movf	ADC_VoltageControlHandler_ISR@pwm+1,w
 13429  0CCA  00F5               	movwf	___lldiv@dividend+1
 13430  0CCB  084D               	movf	ADC_VoltageControlHandler_ISR@pwm,w
 13431  0CCC  00F4               	movwf	___lldiv@dividend
 13432  0CCD  318A  222C  318C   	fcall	___lldiv
 13433  0CD0  0873               	movf	?___lldiv+3,w
 13434  0CD1  00D0               	movwf	ADC_VoltageControlHandler_ISR@pwm+3
 13435  0CD2  0872               	movf	?___lldiv+2,w
 13436  0CD3  00CF               	movwf	ADC_VoltageControlHandler_ISR@pwm+2
 13437  0CD4  0871               	movf	?___lldiv+1,w
 13438  0CD5  00CE               	movwf	ADC_VoltageControlHandler_ISR@pwm+1
 13439  0CD6  0870               	movf	?___lldiv,w
 13440  0CD7  00CD               	movwf	ADC_VoltageControlHandler_ISR@pwm
 13441                           
 13442                           ;vcontrol.c: 366:                     if( pwm > 759 )
 13443  0CD8  0850               	movf	ADC_VoltageControlHandler_ISR@pwm+3,w
 13444  0CD9  1D03               	btfss	3,2
 13445  0CDA  2CE4               	goto	i1l3155
 13446  0CDB  084F               	movf	ADC_VoltageControlHandler_ISR@pwm+2,w
 13447  0CDC  1D03               	btfss	3,2
 13448  0CDD  2CE4               	goto	i1l3155
 13449  0CDE  30F8               	movlw	248
 13450  0CDF  024D               	subwf	ADC_VoltageControlHandler_ISR@pwm,w
 13451  0CE0  3002               	movlw	2
 13452  0CE1  3B4E               	subwfb	ADC_VoltageControlHandler_ISR@pwm+1,w
 13453  0CE2  1C03               	btfss	3,0
 13454  0CE3  2CE9               	goto	i1l3159
 13455  0CE4                     i1l3155:	
 13456                           
 13457                           ;vcontrol.c: 367:                     {;vcontrol.c: 368:                         pwm_dut
      +                          y = 759;
 13458  0CE4  30F7               	movlw	247
 13459  0CE5  00A6               	movwf	_pwm_duty
 13460  0CE6  3002               	movlw	2
 13461  0CE7  00A7               	movwf	_pwm_duty+1
 13462                           
 13463                           ;vcontrol.c: 370:                     }
 13464  0CE8  2D03               	goto	i1l3157
 13465  0CE9                     i1l3159:	
 13466                           
 13467                           ;vcontrol.c: 372:                     {;vcontrol.c: 373:                         if( pwm
      +                          _duty < pwm )
 13468  0CE9  0826               	movf	_pwm_duty,w
 13469  0CEA  00C8               	movwf	??_ADC_VoltageControlHandler_ISR
 13470  0CEB  0827               	movf	_pwm_duty+1,w
 13471  0CEC  00C9               	movwf	??_ADC_VoltageControlHandler_ISR+1
 13472  0CED  01CA               	clrf	??_ADC_VoltageControlHandler_ISR+2
 13473  0CEE  01CB               	clrf	??_ADC_VoltageControlHandler_ISR+3
 13474  0CEF  0850               	movf	ADC_VoltageControlHandler_ISR@pwm+3,w
 13475  0CF0  024B               	subwf	??_ADC_VoltageControlHandler_ISR+3,w
 13476  0CF1  1D03               	skipz
 13477  0CF2  2CFD               	goto	u170_25
 13478  0CF3  084F               	movf	ADC_VoltageControlHandler_ISR@pwm+2,w
 13479  0CF4  024A               	subwf	??_ADC_VoltageControlHandler_ISR+2,w
 13480  0CF5  1D03               	skipz
 13481  0CF6  2CFD               	goto	u170_25
 13482  0CF7  084E               	movf	ADC_VoltageControlHandler_ISR@pwm+1,w
 13483  0CF8  0249               	subwf	??_ADC_VoltageControlHandler_ISR+1,w
 13484  0CF9  1D03               	skipz
 13485  0CFA  2CFD               	goto	u170_25
 13486  0CFB  084D               	movf	ADC_VoltageControlHandler_ISR@pwm,w
 13487  0CFC  0248               	subwf	??_ADC_VoltageControlHandler_ISR,w
 13488  0CFD                     u170_25:	
 13489  0CFD  1803               	skipnc
 13490  0CFE  2D04               	goto	i1l3165
 13491                           
 13492                           ;vcontrol.c: 374:                         {;vcontrol.c: 375:                            
      +                           pwm_duty = pwm;
 13493  0CFF  084E               	movf	ADC_VoltageControlHandler_ISR@pwm+1,w
 13494  0D00  00A7               	movwf	_pwm_duty+1
 13495  0D01  084D               	movf	ADC_VoltageControlHandler_ISR@pwm,w
 13496  0D02  00A6               	movwf	_pwm_duty
 13497  0D03                     i1l3157:	
 13498                           
 13499                           ;vcontrol.c: 369:                         force_inc = 0;
 13500  0D03  01CC               	clrf	ADC_VoltageControlHandler_ISR@force_inc
 13501  0D04                     i1l3165:	
 13502                           
 13503                           ;vcontrol.c: 380:                 if( force_inc == 1 )
 13504  0D04  034C               	decf	ADC_VoltageControlHandler_ISR@force_inc,w
 13505  0D05  1D03               	btfss	3,2
 13506  0D06  2D27               	goto	i1l3179
 13507                           
 13508                           ;vcontrol.c: 381:                 {;vcontrol.c: 382:                     if( duty_count_
      +                          up >= duty_count_up_max )
 13509  0D07  0021               	movlb	1	; select bank1
 13510  0D08  086F               	movf	(_duty_count_up_max+1)^(0+128),w
 13511  0D09  0267               	subwf	(_duty_count_up+1)^(0+128),w
 13512  0D0A  1D03               	skipz
 13513  0D0B  2D0E               	goto	u172_25
 13514  0D0C  086E               	movf	_duty_count_up_max^(0+128),w
 13515  0D0D  0266               	subwf	_duty_count_up^(0+128),w
 13516  0D0E                     u172_25:	
 13517  0D0E  1C03               	skipc
 13518  0D0F  2D23               	goto	i1l3177
 13519                           
 13520                           ;vcontrol.c: 383:                     {;vcontrol.c: 384:                         duty_co
      +                          unt_up = 0;
 13521  0D10  01E6               	clrf	_duty_count_up^(0+128)
 13522  0D11  01E7               	clrf	(_duty_count_up+1)^(0+128)
 13523                           
 13524                           ;vcontrol.c: 385:                         pwm_duty += duty_pwm_inc;
 13525  0D12  3008               	movlw	8
 13526  0D13  0020               	movlb	0	; select bank0
 13527  0D14  07A6               	addwf	_pwm_duty,f
 13528  0D15  3000               	movlw	0
 13529  0D16  3DA7               	addwfc	_pwm_duty+1,f
 13530                           
 13531                           ;vcontrol.c: 386:                         if( pwm_duty > 759 )
 13532  0D17  3002               	movlw	2
 13533  0D18  0227               	subwf	_pwm_duty+1,w
 13534  0D19  30F8               	movlw	248
 13535  0D1A  1903               	skipnz
 13536  0D1B  0226               	subwf	_pwm_duty,w
 13537  0D1C  1C03               	skipc
 13538  0D1D  2D27               	goto	i1l3179
 13539                           
 13540                           ;vcontrol.c: 387:                             pwm_duty = 759;
 13541  0D1E  30F7               	movlw	247
 13542  0D1F  00A6               	movwf	_pwm_duty
 13543  0D20  3002               	movlw	2
 13544  0D21  00A7               	movwf	_pwm_duty+1
 13545  0D22  2D27               	goto	i1l3179
 13546  0D23                     i1l3177:	
 13547                           
 13548                           ;vcontrol.c: 390:                         duty_count_up++;
 13549  0D23  3001               	movlw	1
 13550  0D24  07E6               	addwf	_duty_count_up^(0+128),f
 13551  0D25  3000               	movlw	0
 13552  0D26  3DE7               	addwfc	(_duty_count_up+1)^(0+128),f
 13553  0D27                     i1l3179:	
 13554                           
 13555                           ;vcontrol.c: 392:                 duty_count_down = 0;
 13556  0D27  0021               	movlb	1	; select bank1
 13557  0D28  01E4               	clrf	_duty_count_down^(0+128)
 13558  0D29  01E5               	clrf	(_duty_count_down+1)^(0+128)
 13559                           
 13560                           ;vcontrol.c: 393:             }
 13561  0D2A  2D55               	goto	i1l3193
 13562  0D2B                     i1l865:	
 13563                           ;vcontrol.c: 395:             {;vcontrol.c: 396:                 do { LATAbits.LATA4 = 0
      +                          ; } while(0);
 13564                           
 13565  0D2B  0022               	movlb	2	; select bank2
 13566  0D2C  120C               	bcf	12,4	;volatile
 13567                           
 13568                           ;vcontrol.c: 397:                 do { LATAbits.LATA5 = 1; } while(0);
 13569  0D2D  168C               	bsf	12,5	;volatile
 13570                           
 13571                           ;vcontrol.c: 398:                 if( duty_count_down >= duty_count_down_max )
 13572  0D2E  0021               	movlb	1	; select bank1
 13573  0D2F  086B               	movf	(_duty_count_down_max+1)^(0+128),w
 13574  0D30  0265               	subwf	(_duty_count_down+1)^(0+128),w
 13575  0D31  1D03               	skipz
 13576  0D32  2D35               	goto	u174_25
 13577  0D33  086A               	movf	_duty_count_down_max^(0+128),w
 13578  0D34  0264               	subwf	_duty_count_down^(0+128),w
 13579  0D35                     u174_25:	
 13580  0D35  1C03               	skipc
 13581  0D36  2D51               	goto	i1l3191
 13582                           
 13583                           ;vcontrol.c: 399:                 {;vcontrol.c: 400:                     duty_count_down
      +                           = 0;
 13584  0D37  01E4               	clrf	_duty_count_down^(0+128)
 13585  0D38  01E5               	clrf	(_duty_count_down+1)^(0+128)
 13586                           
 13587                           ;vcontrol.c: 401:                     if( pwm_duty > duty_pwm_dec )
 13588  0D39  0020               	movlb	0	; select bank0
 13589  0D3A  0827               	movf	_pwm_duty+1,w
 13590  0D3B  0021               	movlb	1	; select bank1
 13591  0D3C  026D               	subwf	(_duty_pwm_dec+1)^(0+128),w
 13592  0D3D  1D03               	skipz
 13593  0D3E  2D43               	goto	u175_25
 13594  0D3F  0020               	movlb	0	; select bank0
 13595  0D40  0826               	movf	_pwm_duty,w
 13596  0D41  0021               	movlb	1	; select bank1
 13597  0D42  026C               	subwf	_duty_pwm_dec^(0+128),w
 13598  0D43                     u175_25:	
 13599  0D43  1803               	skipnc
 13600  0D44  2D4D               	goto	i1l3189
 13601                           
 13602                           ;vcontrol.c: 402:                         pwm_duty -= duty_pwm_dec;
 13603  0D45  086C               	movf	_duty_pwm_dec^(0+128),w
 13604  0D46  0020               	movlb	0	; select bank0
 13605  0D47  02A6               	subwf	_pwm_duty,f
 13606  0D48  0021               	movlb	1	; select bank1
 13607  0D49  086D               	movf	(_duty_pwm_dec+1)^(0+128),w
 13608  0D4A  0020               	movlb	0	; select bank0
 13609  0D4B  3BA7               	subwfb	_pwm_duty+1,f
 13610  0D4C  2D55               	goto	i1l3193
 13611  0D4D                     i1l3189:	
 13612                           
 13613                           ;vcontrol.c: 404:                         pwm_duty = 0;
 13614  0D4D  0020               	movlb	0	; select bank0
 13615  0D4E  01A6               	clrf	_pwm_duty
 13616  0D4F  01A7               	clrf	_pwm_duty+1
 13617  0D50  2D55               	goto	i1l3193
 13618  0D51                     i1l3191:	
 13619                           
 13620                           ;vcontrol.c: 407:                     duty_count_down++;
 13621  0D51  3001               	movlw	1
 13622  0D52  07E4               	addwf	_duty_count_down^(0+128),f
 13623  0D53  3000               	movlw	0
 13624  0D54  3DE5               	addwfc	(_duty_count_down+1)^(0+128),f
 13625  0D55                     i1l3193:	
 13626                           
 13627                           ;vcontrol.c: 413:     LoadDutyValue( pwm_duty );
 13628  0D55  0020               	movlb	0	; select bank0
 13629  0D56  0827               	movf	_pwm_duty+1,w
 13630  0D57  00F1               	movwf	LoadDutyValue@duty+1
 13631  0D58  0826               	movf	_pwm_duty,w
 13632  0D59  00F0               	movwf	LoadDutyValue@duty
 13633  0D5A  3195  2506         	fcall	_LoadDutyValue
 13634  0D5C  0008               	return
 13635  0D5D                     __end_of_ADC_VoltageControlHandler_ISR:	
 13636                           
 13637                           	psect	text72
 13638  089F                     __ptext72:	
 13639 ;; *************** function ___lmul *****************
 13640 ;; Defined at:
 13641 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul32.c"
 13642 ;; Parameters:    Size  Location     Type
 13643 ;;  multiplier      4    0[COMMON] unsigned long 
 13644 ;;  multiplicand    4    4[COMMON] unsigned long 
 13645 ;; Auto vars:     Size  Location     Type
 13646 ;;  product         4    8[COMMON] unsigned long 
 13647 ;; Return value:  Size  Location     Type
 13648 ;;                  4    0[COMMON] unsigned long 
 13649 ;; Registers used:
 13650 ;;		wreg, status,2, status,0
 13651 ;; Tracked objects:
 13652 ;;		On entry : 1F/0
 13653 ;;		On exit  : 1F/0
 13654 ;;		Unchanged: 1F/0
 13655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13656 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13657 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13659 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13660 ;;Total ram usage:       12 bytes
 13661 ;; Hardware stack levels used:    1
 13662 ;; This function calls:
 13663 ;;		Nothing
 13664 ;; This function is called by:
 13665 ;;		_ADC_VoltageControlHandler_ISR
 13666 ;; This function uses a non-reentrant model
 13667 ;;
 13668                           
 13669                           
 13670                           ;psect for function ___lmul
 13671  089F                     ___lmul:	
 13672                           
 13673                           ;incstack = 0
 13674                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 13675  089F  3000               	movlw	0
 13676  08A0  00FB               	movwf	___lmul@product+3
 13677  08A1  3000               	movlw	0
 13678  08A2  00FA               	movwf	___lmul@product+2
 13679  08A3  3000               	movlw	0
 13680  08A4  00F9               	movwf	___lmul@product+1
 13681  08A5  3000               	movlw	0
 13682  08A6  00F8               	movwf	___lmul@product
 13683  08A7                     i1l2821:	
 13684  08A7  1C70               	btfss	___lmul@multiplier,0
 13685  08A8  28B1               	goto	i1l2825
 13686  08A9  0874               	movf	___lmul@multiplicand,w
 13687  08AA  07F8               	addwf	___lmul@product,f
 13688  08AB  0875               	movf	___lmul@multiplicand+1,w
 13689  08AC  3DF9               	addwfc	___lmul@product+1,f
 13690  08AD  0876               	movf	___lmul@multiplicand+2,w
 13691  08AE  3DFA               	addwfc	___lmul@product+2,f
 13692  08AF  0877               	movf	___lmul@multiplicand+3,w
 13693  08B0  3DFB               	addwfc	___lmul@product+3,f
 13694  08B1                     i1l2825:	
 13695  08B1  3001               	movlw	1
 13696  08B2                     u137_25:	
 13697  08B2  35F4               	lslf	___lmul@multiplicand,f
 13698  08B3  0DF5               	rlf	___lmul@multiplicand+1,f
 13699  08B4  0DF6               	rlf	___lmul@multiplicand+2,f
 13700  08B5  0DF7               	rlf	___lmul@multiplicand+3,f
 13701  08B6  0B89               	decfsz	9,f
 13702  08B7  28B2               	goto	u137_25
 13703  08B8  3001               	movlw	1
 13704  08B9                     u138_25:	
 13705  08B9  36F3               	lsrf	___lmul@multiplier+3,f
 13706  08BA  0CF2               	rrf	___lmul@multiplier+2,f
 13707  08BB  0CF1               	rrf	___lmul@multiplier+1,f
 13708  08BC  0CF0               	rrf	___lmul@multiplier,f
 13709  08BD  0B89               	decfsz	9,f
 13710  08BE  28B9               	goto	u138_25
 13711  08BF  0873               	movf	___lmul@multiplier+3,w
 13712  08C0  0472               	iorwf	___lmul@multiplier+2,w
 13713  08C1  0471               	iorwf	___lmul@multiplier+1,w
 13714  08C2  0470               	iorwf	___lmul@multiplier,w
 13715  08C3  1D03               	skipz
 13716  08C4  28A7               	goto	i1l2821
 13717  08C5  087B               	movf	___lmul@product+3,w
 13718  08C6  00F3               	movwf	?___lmul+3
 13719  08C7  087A               	movf	___lmul@product+2,w
 13720  08C8  00F2               	movwf	?___lmul+2
 13721  08C9  0879               	movf	___lmul@product+1,w
 13722  08CA  00F1               	movwf	?___lmul+1
 13723  08CB  0878               	movf	___lmul@product,w
 13724  08CC  00F0               	movwf	?___lmul
 13725  08CD  0008               	return
 13726  08CE                     __end_of___lmul:	
 13727                           
 13728                           	psect	text73
 13729  0A2C                     __ptext73:	
 13730 ;; *************** function ___lldiv *****************
 13731 ;; Defined at:
 13732 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\__lldiv.c"
 13733 ;; Parameters:    Size  Location     Type
 13734 ;;  divisor         4    0[COMMON] unsigned long 
 13735 ;;  dividend        4    4[COMMON] unsigned long 
 13736 ;; Auto vars:     Size  Location     Type
 13737 ;;  quotient        4    9[COMMON] unsigned long 
 13738 ;;  counter         1   13[COMMON] unsigned char 
 13739 ;; Return value:  Size  Location     Type
 13740 ;;                  4    0[COMMON] unsigned long 
 13741 ;; Registers used:
 13742 ;;		wreg, status,2, status,0
 13743 ;; Tracked objects:
 13744 ;;		On entry : 1F/0
 13745 ;;		On exit  : 1F/0
 13746 ;;		Unchanged: 1F/0
 13747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13748 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13749 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13750 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13751 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13752 ;;Total ram usage:       14 bytes
 13753 ;; Hardware stack levels used:    1
 13754 ;; This function calls:
 13755 ;;		Nothing
 13756 ;; This function is called by:
 13757 ;;		_ADC_VoltageControlHandler_ISR
 13758 ;; This function uses a non-reentrant model
 13759 ;;
 13760                           
 13761                           
 13762                           ;psect for function ___lldiv
 13763  0A2C                     ___lldiv:	
 13764                           
 13765                           ;incstack = 0
 13766                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 13767  0A2C  3000               	movlw	0
 13768  0A2D  00FC               	movwf	___lldiv@quotient+3
 13769  0A2E  3000               	movlw	0
 13770  0A2F  00FB               	movwf	___lldiv@quotient+2
 13771  0A30  3000               	movlw	0
 13772  0A31  00FA               	movwf	___lldiv@quotient+1
 13773  0A32  3000               	movlw	0
 13774  0A33  00F9               	movwf	___lldiv@quotient
 13775  0A34  0873               	movf	___lldiv@divisor+3,w
 13776  0A35  0472               	iorwf	___lldiv@divisor+2,w
 13777  0A36  0471               	iorwf	___lldiv@divisor+1,w
 13778  0A37  0470               	iorwf	___lldiv@divisor,w
 13779  0A38  1903               	skipnz
 13780  0A39  2A75               	goto	i1l2853
 13781  0A3A  01FD               	clrf	___lldiv@counter
 13782  0A3B  0AFD               	incf	___lldiv@counter,f
 13783  0A3C                     i1l2839:	
 13784  0A3C  1BF3               	btfsc	___lldiv@divisor+3,7
 13785  0A3D  2A4A               	goto	i1l2841
 13786  0A3E  3001               	movlw	1
 13787  0A3F                     u141_25:	
 13788  0A3F  35F0               	lslf	___lldiv@divisor,f
 13789  0A40  0DF1               	rlf	___lldiv@divisor+1,f
 13790  0A41  0DF2               	rlf	___lldiv@divisor+2,f
 13791  0A42  0DF3               	rlf	___lldiv@divisor+3,f
 13792  0A43  0B89               	decfsz	9,f
 13793  0A44  2A3F               	goto	u141_25
 13794  0A45  3001               	movlw	1
 13795  0A46  00F8               	movwf	??___lldiv
 13796  0A47  0878               	movf	??___lldiv,w
 13797  0A48  07FD               	addwf	___lldiv@counter,f
 13798  0A49  2A3C               	goto	i1l2839
 13799  0A4A                     i1l2841:	
 13800  0A4A  3001               	movlw	1
 13801  0A4B                     u143_25:	
 13802  0A4B  35F9               	lslf	___lldiv@quotient,f
 13803  0A4C  0DFA               	rlf	___lldiv@quotient+1,f
 13804  0A4D  0DFB               	rlf	___lldiv@quotient+2,f
 13805  0A4E  0DFC               	rlf	___lldiv@quotient+3,f
 13806  0A4F  0B89               	decfsz	9,f
 13807  0A50  2A4B               	goto	u143_25
 13808  0A51  0873               	movf	___lldiv@divisor+3,w
 13809  0A52  0277               	subwf	___lldiv@dividend+3,w
 13810  0A53  1D03               	skipz
 13811  0A54  2A5F               	goto	u144_25
 13812  0A55  0872               	movf	___lldiv@divisor+2,w
 13813  0A56  0276               	subwf	___lldiv@dividend+2,w
 13814  0A57  1D03               	skipz
 13815  0A58  2A5F               	goto	u144_25
 13816  0A59  0871               	movf	___lldiv@divisor+1,w
 13817  0A5A  0275               	subwf	___lldiv@dividend+1,w
 13818  0A5B  1D03               	skipz
 13819  0A5C  2A5F               	goto	u144_25
 13820  0A5D  0870               	movf	___lldiv@divisor,w
 13821  0A5E  0274               	subwf	___lldiv@dividend,w
 13822  0A5F                     u144_25:	
 13823  0A5F  1C03               	skipc
 13824  0A60  2A6A               	goto	i1l2849
 13825  0A61  0870               	movf	___lldiv@divisor,w
 13826  0A62  02F4               	subwf	___lldiv@dividend,f
 13827  0A63  0871               	movf	___lldiv@divisor+1,w
 13828  0A64  3BF5               	subwfb	___lldiv@dividend+1,f
 13829  0A65  0872               	movf	___lldiv@divisor+2,w
 13830  0A66  3BF6               	subwfb	___lldiv@dividend+2,f
 13831  0A67  0873               	movf	___lldiv@divisor+3,w
 13832  0A68  3BF7               	subwfb	___lldiv@dividend+3,f
 13833  0A69  1479               	bsf	___lldiv@quotient,0
 13834  0A6A                     i1l2849:	
 13835  0A6A  3001               	movlw	1
 13836  0A6B                     u145_25:	
 13837  0A6B  36F3               	lsrf	___lldiv@divisor+3,f
 13838  0A6C  0CF2               	rrf	___lldiv@divisor+2,f
 13839  0A6D  0CF1               	rrf	___lldiv@divisor+1,f
 13840  0A6E  0CF0               	rrf	___lldiv@divisor,f
 13841  0A6F  0B89               	decfsz	9,f
 13842  0A70  2A6B               	goto	u145_25
 13843  0A71  3001               	movlw	1
 13844  0A72  02FD               	subwf	___lldiv@counter,f
 13845  0A73  1D03               	btfss	3,2
 13846  0A74  2A4A               	goto	i1l2841
 13847  0A75                     i1l2853:	
 13848  0A75  087C               	movf	___lldiv@quotient+3,w
 13849  0A76  00F3               	movwf	?___lldiv+3
 13850  0A77  087B               	movf	___lldiv@quotient+2,w
 13851  0A78  00F2               	movwf	?___lldiv+2
 13852  0A79  087A               	movf	___lldiv@quotient+1,w
 13853  0A7A  00F1               	movwf	?___lldiv+1
 13854  0A7B  0879               	movf	___lldiv@quotient,w
 13855  0A7C  00F0               	movwf	?___lldiv
 13856  0A7D  0008               	return
 13857  0A7E                     __end_of___lldiv:	
 13858                           
 13859                           	psect	text74
 13860  165C                     __ptext74:	
 13861 ;; *************** function _PWM3_LoadDutyValue *****************
 13862 ;; Defined at:
 13863 ;;		line 74 in file "mcc_generated_files/pwm3.c"
 13864 ;; Parameters:    Size  Location     Type
 13865 ;;  dutyValue       2    0[COMMON] unsigned short 
 13866 ;; Auto vars:     Size  Location     Type
 13867 ;;		None
 13868 ;; Return value:  Size  Location     Type
 13869 ;;                  1    wreg      void 
 13870 ;; Registers used:
 13871 ;;		wreg, status,2, status,0
 13872 ;; Tracked objects:
 13873 ;;		On entry : 1D/0
 13874 ;;		On exit  : 1F/C
 13875 ;;		Unchanged: 0/0
 13876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13877 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13879 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13880 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13881 ;;Total ram usage:        4 bytes
 13882 ;; Hardware stack levels used:    1
 13883 ;; This function calls:
 13884 ;;		Nothing
 13885 ;; This function is called by:
 13886 ;;		_ADC_VoltageControlHandler_ISR
 13887 ;;		_TMR2_DutyControlHandler_ISR
 13888 ;; This function uses a non-reentrant model
 13889 ;;
 13890                           
 13891                           
 13892                           ;psect for function _PWM3_LoadDutyValue
 13893  165C                     _PWM3_LoadDutyValue:	
 13894                           
 13895                           ;mcc_generated_files/pwm3.c: 74:  void PWM3_LoadDutyValue(uint16_t dutyValue);mcc_genera
      +                          ted_files/pwm3.c: 75:  {;mcc_generated_files/pwm3.c: 77:      PWM3DCH = (dutyValue & 0x0
      +                          3FC)>>2;
 13896                           
 13897                           ;incstack = 0
 13898                           ; Regs used in _PWM3_LoadDutyValue: [wreg+status,2+status,0]
 13899  165C  0871               	movf	PWM3_LoadDutyValue@dutyValue+1,w
 13900  165D  00F3               	movwf	??_PWM3_LoadDutyValue+1
 13901  165E  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 13902  165F  00F2               	movwf	??_PWM3_LoadDutyValue
 13903  1660  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 13904  1661  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 13905  1662  36F3               	lsrf	??_PWM3_LoadDutyValue+1,f
 13906  1663  0CF2               	rrf	??_PWM3_LoadDutyValue,f
 13907  1664  0872               	movf	??_PWM3_LoadDutyValue,w
 13908  1665  002C               	movlb	12	; select bank12
 13909  1666  0098               	movwf	24	;volatile
 13910                           
 13911                           ;mcc_generated_files/pwm3.c: 80:      PWM3DCL = (dutyValue & 0x0003)<<6;
 13912  1667  0870               	movf	PWM3_LoadDutyValue@dutyValue,w
 13913  1668  3903               	andlw	3
 13914  1669  00F2               	movwf	??_PWM3_LoadDutyValue
 13915  166A  3005               	movlw	5
 13916  166B                     u120_25:	
 13917  166B  35F2               	lslf	??_PWM3_LoadDutyValue,f
 13918  166C  3EFF               	addlw	-1
 13919  166D  1D03               	skipz
 13920  166E  2E6B               	goto	u120_25
 13921  166F  3572               	lslf	??_PWM3_LoadDutyValue,w
 13922  1670  0097               	movwf	23	;volatile
 13923  1671  0008               	return
 13924  1672                     __end_of_PWM3_LoadDutyValue:	
 13925                           
 13926                           	psect	text75
 13927  1506                     __ptext75:	
 13928 ;; *************** function _LoadDutyValue *****************
 13929 ;; Defined at:
 13930 ;;		line 205 in file "vcontrol.c"
 13931 ;; Parameters:    Size  Location     Type
 13932 ;;  duty            2    0[COMMON] unsigned short 
 13933 ;; Auto vars:     Size  Location     Type
 13934 ;;		None
 13935 ;; Return value:  Size  Location     Type
 13936 ;;                  1    wreg      void 
 13937 ;; Registers used:
 13938 ;;		wreg
 13939 ;; Tracked objects:
 13940 ;;		On entry : 1F/0
 13941 ;;		On exit  : 1F/0
 13942 ;;		Unchanged: 0/0
 13943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13944 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13947 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13948 ;;Total ram usage:        2 bytes
 13949 ;; Hardware stack levels used:    1
 13950 ;; This function calls:
 13951 ;;		Nothing
 13952 ;; This function is called by:
 13953 ;;		_ADC_VoltageControlHandler_ISR
 13954 ;; This function uses a non-reentrant model
 13955 ;;
 13956                           
 13957                           
 13958                           ;psect for function _LoadDutyValue
 13959  1506                     _LoadDutyValue:	
 13960                           
 13961                           ;vcontrol.c: 205: static void LoadDutyValue(uint16_t duty);vcontrol.c: 206: {;vcontrol.c
      +                          : 207:     target_duty = duty;
 13962                           
 13963                           ;incstack = 0
 13964                           ; Regs used in _LoadDutyValue: [wreg]
 13965  1506  0871               	movf	LoadDutyValue@duty+1,w
 13966  1507  00A5               	movwf	_target_duty+1
 13967  1508  0870               	movf	LoadDutyValue@duty,w
 13968  1509  00A4               	movwf	_target_duty
 13969  150A  0008               	return
 13970  150B                     __end_of_LoadDutyValue:	
 13971                           
 13972                           	psect	text76
 13973  1515                     __ptext76:	
 13974 ;; *************** function _ADC_GetConversionResult *****************
 13975 ;; Defined at:
 13976 ;;		line 114 in file "mcc_generated_files/adc.c"
 13977 ;; Parameters:    Size  Location     Type
 13978 ;;		None
 13979 ;; Auto vars:     Size  Location     Type
 13980 ;;		None
 13981 ;; Return value:  Size  Location     Type
 13982 ;;                  2    0[COMMON] unsigned short 
 13983 ;; Registers used:
 13984 ;;		wreg
 13985 ;; Tracked objects:
 13986 ;;		On entry : 1F/0
 13987 ;;		On exit  : 1F/1
 13988 ;;		Unchanged: 0/0
 13989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13990 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13993 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13994 ;;Total ram usage:        2 bytes
 13995 ;; Hardware stack levels used:    1
 13996 ;; This function calls:
 13997 ;;		Nothing
 13998 ;; This function is called by:
 13999 ;;		_ADC_VoltageControlHandler_ISR
 14000 ;; This function uses a non-reentrant model
 14001 ;;
 14002                           
 14003                           
 14004                           ;psect for function _ADC_GetConversionResult
 14005  1515                     _ADC_GetConversionResult:	
 14006                           
 14007                           ;mcc_generated_files/adc.c: 117:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 14008                           
 14009                           ;incstack = 0
 14010                           ; Regs used in _ADC_GetConversionResult: [wreg]
 14011  1515  0021               	movlb	1	; select bank1
 14012  1516  081C               	movf	28,w	;volatile
 14013  1517  00F1               	movwf	?_ADC_GetConversionResult+1
 14014  1518  081B               	movf	27,w	;volatile
 14015  1519  00F0               	movwf	?_ADC_GetConversionResult
 14016  151A  0008               	return
 14017  151B                     __end_of_ADC_GetConversionResult:	
 14018  007E                     btemp	set	126	;btemp
 14019  007E                     int$flags	set	126
 14020  007E                     wtemp0	set	126


Data Sizes:
    Strings     300
    Constant    2096
    Data        9
    BSS         129
    Persistent  48
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     27      70
    BANK1            80     64      80
    BANK2            80      0      79
    BANK3            80     10      26
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    set_vdc_threshold@v_target	PTR unsigned short  size(1) Largest target is 2
		 -> vdc_critic(BANK0[2]), vdc_max(BANK0[2]), vdc_min(BANK0[2]), 

    tx_string	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_20(CODE[25]), STR_19(CODE[25]), STR_18(CODE[22]), STR_17(CODE[24]), 
		 -> STR_16(CODE[23]), STR_15(CODE[22]), STR_14(CODE[34]), STR_13(CODE[15]), 
		 -> STR_12(CODE[16]), STR_11(CODE[18]), STR_10(CODE[23]), STR_9(CODE[5]), 
		 -> STR_8(CODE[25]), STR_7(CODE[3]), STR_6(CODE[6]), STR_5(CODE[3]), 
		 -> STR_4(CODE[6]), STR_3(CODE[3]), num_buffer(BANK2[5]), STR_2(CODE[6]), 
		 -> STR_1(CODE[5]), NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_SystemTimer_ISR(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_SystemTimer_ISR(), TMR1_DefaultInterruptHandler(), Absolute function(), 

    ADC_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_VoltageControlHandler_ISR(), ADC_DefaultInterruptHandler(), 

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_VoltageControlHandler_ISR(), ADC_DefaultInterruptHandler(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DutyControlHandler_ISR(), TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DutyControlHandler_ISR(), Absolute function(), TMR2_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> save_to_flash@buff(BANK1[64]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_CommandHandler_ISR(), EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_CommandHandler_ISR(), Absolute function(), EUSART_Receive_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR2_CallBack->_TMR2_DutyControlHandler_ISR
    _TMR2_DutyControlHandler_ISR->_PWM3_LoadDutyValue
    _TMR1_ISR->_TMR1_WriteTimer
    _TMR1_CallBack->_TMR1_SystemTimer_ISR
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler
    _ADC_VoltageControlHandler_ISR->___lldiv

Critical Paths under _main in BANK0

    _main->_uart_task
    _uart_task->_save_to_flash
    _save_to_flash->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _get_vdc_speed->___wmul
    _uart_start->_EUSART_SetRxInterruptHandler
    _uart_start->_TMR1_SetInterruptHandler
    _relay_watchdog_task->_get_vdc
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _ADC_Initialize->_ADC_SetInterruptHandler
    _ApplicationInit->_set_reset_duration
    _ApplicationInit->_set_vdc_speed
    _start_chopper->_init_chopper
    _init_chopper->_ADC_SelectChannel
    _init_chopper->_ADC_SetInterruptHandler
    _init_chopper->_TMR2_SetInterruptHandler
    _set_vdc_speed->___lwdiv
    _set_vdc_min->_set_vdc_threshold
    _set_vdc_max->_set_vdc_threshold
    _set_vdc_critic->_set_vdc_threshold
    _set_reset_duration->___lwdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _ADC_ISR->_ADC_VoltageControlHandler_ISR

Critical Paths under _main in BANK1

    _uart_task->_save_to_flash

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_uart_task

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   18432
                    _ApplicationInit
                  _SYSTEM_Initialize
                       _init_chopper
                _init_relay_watchdog
                _relay_watchdog_task
               _start_relay_watchdog
                         _uart_start
                          _uart_task
 ---------------------------------------------------------------------------------
 (1) _uart_task                                           14    14      0    9099
                                             23 BANK0      4     4      0
                                              0 BANK3     10    10      0
            _get_relay_reset_voltage
                 _get_reset_duration
                            _get_vdc
                     _get_vdc_critic
                        _get_vdc_max
                        _get_vdc_min
                      _get_vdc_speed
                  _is_chopper_active
                      _save_to_flash
            _set_relay_reset_voltage
                 _set_reset_duration
                     _set_vdc_critic
                        _set_vdc_max
                        _set_vdc_min
                      _set_vdc_speed
                      _start_chopper
                       _stop_chopper
 ---------------------------------------------------------------------------------
 (2) _stop_chopper                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _save_to_flash                                       65    65      0    1226
                                             22 BANK0      1     1      0
                                              0 BANK1     64    64      0
                   _FLASH_WriteBlock
            _get_relay_reset_voltage
                 _get_reset_duration
 ---------------------------------------------------------------------------------
 (3) _get_reset_duration                                   2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _get_relay_reset_voltage                              2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    10     7      3     961
                                             12 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     189
                                              9 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _is_chopper_active                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_vdc_speed                                        2     0      2     736
                                             15 BANK0      2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     736
                                              9 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _get_vdc_min                                          2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _get_vdc_max                                          2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _get_vdc_critic                                       2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _uart_start                                           0     0      0     474
       _EUSART_SetRxInterruptHandler
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _start_relay_watchdog                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _relay_watchdog_task                                  1     1      0       0
                                             11 BANK0      1     1      0
                        _close_relay
                            _get_vdc
                         _open_relay
 ---------------------------------------------------------------------------------
 (2) _open_relay                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _get_vdc                                              2     0      2       0
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _close_relay                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_relay_watchdog                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1190
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM3_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     211
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     237
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_SetInterruptHandler                             2     0      2     237
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     531
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _EUSART_SetRxInterruptHandler                         2     0      2     237
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0     211
            _ADC_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _ApplicationInit                                      5     5      0    7216
                                             19 BANK0      5     5      0
                     _FLASH_ReadWord
            _set_relay_reset_voltage
                 _set_reset_duration
                     _set_vdc_critic
                        _set_vdc_max
                        _set_vdc_min
                      _set_vdc_speed
                      _start_chopper
 ---------------------------------------------------------------------------------
 (2) _start_chopper                                        0     0      0     453
                       _init_chopper
 ---------------------------------------------------------------------------------
 (3) _init_chopper                                         1     1      0     453
                                             11 BANK0      1     1      0
                  _ADC_SelectChannel
            _ADC_SetInterruptHandler
                _ADC_StartConversion
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (4) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TMR2_SetInterruptHandler                             2     0      2     211
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetInterruptHandler                              2     0      2     211
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _ADC_SelectChannel                                    2     2      0      31
                                              9 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _set_vdc_speed                                        2     0      2    1104
                                             17 BANK0      2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) _set_vdc_min                                          3     1      2     996
                                             12 BANK0      3     1      2
                  _set_vdc_threshold
 ---------------------------------------------------------------------------------
 (2) _set_vdc_max                                          3     1      2     996
                                             12 BANK0      3     1      2
                  _set_vdc_threshold
 ---------------------------------------------------------------------------------
 (2) _set_vdc_critic                                       3     1      2     996
                                             12 BANK0      3     1      2
                  _set_vdc_threshold
 ---------------------------------------------------------------------------------
 (3) _set_vdc_threshold                                    3     0      3     695
                                              9 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _set_reset_duration                                   2     0      2    1104
                                             17 BANK0      2     0      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     741
                                              9 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _set_relay_reset_voltage                              2     0      2     363
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     663
                                              9 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0    1415
                   Absolute function *
                            _ADC_ISR
          _EUSART_CommandHandler_ISR *
                 _EUSART_Receive_ISR *
                           _TMR1_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR2_ISR                                             0     0      0     196
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR2_CallBack                                        0     0      0     196
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
        _TMR2_DutyControlHandler_ISR *
 ---------------------------------------------------------------------------------
 (8) _TMR2_DutyControlHandler_ISR                          2     2      0     196
                                              4 COMMON     2     2      0
                 _PWM3_LoadDutyValue
 ---------------------------------------------------------------------------------
 (8) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0     229
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_WriteTimer                                      2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) _TMR1_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
               _TMR1_SystemTimer_ISR *
 ---------------------------------------------------------------------------------
 (8) _TMR1_SystemTimer_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_CommandHandler_ISR                            2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _ADC_ISR                                              0     0      0     967
                   Absolute function *
        _ADC_DefaultInterruptHandler *
      _ADC_VoltageControlHandler_ISR *
 ---------------------------------------------------------------------------------
 (7) _ADC_VoltageControlHandler_ISR                        9     9      0     967
                                              0 BANK0      9     9      0
            _ADC_GetConversionResult
                      _LoadDutyValue
                 _PWM3_LoadDutyValue
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (8) ___lmul                                              12     4      8     244
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (8) ___lldiv                                             14     6      8     314
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (9) _PWM3_LoadDutyValue                                   4     2      2     196
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (8) _LoadDutyValue                                        2     0      2      98
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) _ADC_DefaultInterruptHandler                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ApplicationInit
     _FLASH_ReadWord
     _set_relay_reset_voltage
     _set_reset_duration
       ___lwdiv
     _set_vdc_critic
       _set_vdc_threshold
     _set_vdc_max
       _set_vdc_threshold
     _set_vdc_min
       _set_vdc_threshold
     _set_vdc_speed
       ___lwdiv
     _start_chopper
       _init_chopper
         _ADC_SelectChannel
         _ADC_SetInterruptHandler
         _ADC_StartConversion
         _TMR2_SetInterruptHandler
         _TMR2_StartTimer
   _SYSTEM_Initialize
     _ADC_Initialize
       _ADC_SetInterruptHandler
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM3_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _TMR4_Initialize
     _WDT_Initialize
   _init_chopper
     _ADC_SelectChannel
     _ADC_SetInterruptHandler
     _ADC_StartConversion
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
   _init_relay_watchdog
   _relay_watchdog_task
     _close_relay
     _get_vdc
     _open_relay
   _start_relay_watchdog
   _uart_start
     _EUSART_SetRxInterruptHandler
     _TMR1_SetInterruptHandler
   _uart_task
     _get_relay_reset_voltage
     _get_reset_duration
     _get_vdc
     _get_vdc_critic
     _get_vdc_max
     _get_vdc_min
     _get_vdc_speed
       ___wmul
     _is_chopper_active
     _save_to_flash
       _FLASH_WriteBlock
         _FLASH_EraseBlock
       _get_relay_reset_voltage
       _get_reset_duration
     _set_relay_reset_voltage
     _set_reset_duration
       ___lwdiv
     _set_vdc_critic
       _set_vdc_threshold
     _set_vdc_max
       _set_vdc_threshold
     _set_vdc_min
       _set_vdc_threshold
     _set_vdc_speed
       ___lwdiv
     _start_chopper
       _init_chopper
         _ADC_SelectChannel
         _ADC_SetInterruptHandler
         _ADC_StartConversion
         _TMR2_SetInterruptHandler
         _TMR2_StartTimer
     _stop_chopper

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _ADC_ISR *
     Absolute function(Fake) *
     _ADC_DefaultInterruptHandler *
     _ADC_VoltageControlHandler_ISR *
       _ADC_GetConversionResult
       _LoadDutyValue
       _PWM3_LoadDutyValue
       ___lldiv
       ___lmul
   _EUSART_CommandHandler_ISR *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _TMR1_ISR *
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _TMR1_SystemTimer_ISR *
     _TMR1_WriteTimer
   _TMR2_ISR *
     _TMR2_CallBack
       Absolute function(Fake) *
       _TMR2_DefaultInterruptHandler *
       _TMR2_DutyControlHandler_ISR *
         _PWM3_LoadDutyValue

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1B      46       5       87.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     40      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      A      1A      11       32.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     10D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     10D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Feb 25 14:36:09 2021

                                 ?_get_vdc_max 0051                                   ?_get_vdc_min 0051  
                ?_EUSART_SetRxInterruptHandler 0051           __size_of_TMR2_DutyControlHandler_ISR 0044  
             __end_of_TMR2_SetInterruptHandler 155B                                    __CFG_CP$OFF 0000  
                               ?_get_vdc_speed 0057                                             _st 0031  
                          ___wmul@multiplicand 0053                                    __CFG_LVP$ON 0000  
                              ?_get_vdc_critic 0051                                            l980 0DE1  
                                          _PR2 001B                                            _PR4 0416  
                              _timer1ReloadVal 0161                         ??_EUSART_RxDataHandler 0070  
                              __end_of_ADC_ISR 15E1                                            _vdc 0040  
               ?_EUSART_SetFramingErrorHandler 0051                __end_of_ADC_SetInterruptHandler 1553  
                              _TMR2_Initialize 1635                                  _LoadDutyValue 1506  
                                 __CFG_BORV$LO 0000                                            wreg 0009  
                                 __CFG_IESO$ON 0000         ADC_VoltageControlHandler_ISR@force_inc 004C  
                 ?_ADC_DefaultInterruptHandler 0070                 FLASH_WriteBlock@flashWordArray 0056  
                                         l1100 0B60                                           l1110 0BED  
                                         l1102 0B7C                                           l1104 0B98  
                                         l1106 0BB4                                           l1108 0BD1  
                                         l1187 170A                                           l4011 0D99  
                                         l4021 0DC1                                           l4013 0DB1  
                                         l4031 0DD3                                           l4025 0DCA  
                                         l4027 0DCE                                           l4141 0FBB  
                                         l4209 0AC5                                           l4129 0F95  
                                         l4073 0EE9                                           l4075 0EEC  
                                         l4083 0EF2                                           l3701 0B19  
                                         l4077 0EEE                                           l4237 174D  
                                         l4183 0A8D                                           l4159 0FE6  
                                         l4193 0AA1                                           l4177 0A85  
                                         l3903 08E0                                           l3743 1731  
                                         l3905 08E7                                           l3825 16B1  
                                         l3851 17C4                                           l3931 0B9A  
                                         l3755 1704                                           l3691 0AF3  
                                         l3925 0B7E                                           l3943 0BD3  
                                         l3919 0B62                                           l3785 0957  
                                         l3777 0939                                           l3937 0BB6  
                                         l3857 09EB                                           l3779 0945  
                                         l3955 0C01                                           l3893 1683  
                                         l3789 0960                                           l3949 0BEF  
                                         l3981 0D6F                                           l3959 0C0B  
                                         l3993 0D80                                           STR_1 1953  
                                 __CFG_WDTE$ON 0000                                           STR_2 193C  
                                         STR_4 1942                                           STR_6 1948  
                                         STR_8 1822                                           STR_9 194E  
                                         _LATA 010C                                           _LATC 010E  
                                         u3115 0AAE                                           u2505 1710  
                                         u2425 0AE3                                           u3147 17E6  
                                         u2535 093C                                           u3095 0A9A  
                                         u2555 0946                                           u2565 0950  
                                         u2575 0958                                           u2495 170B  
                                         _TMR2 001A                                           _TMR4 0415  
                                         _WPUA 020C                                           _WPUC 020E  
                    set_vdc_threshold@v_target 0053                                   __CFG_WRT$OFF 0000  
                                __CFG_FCMEN$ON 0000                                           _main 1739  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                              ?_FLASH_WriteBlock 0054  
                                __CFG_BOREN$ON 0000                                           start 0034  
                           ??_FLASH_WriteBlock 0057                     ??_TMR1_SetInterruptHandler 0053  
                                __CFG_MCLRE$ON 0000                          __size_of_stop_chopper 000C  
               __size_of_OSCILLATOR_Initialize 0008                        __end_of_ApplicationInit 0C30  
                __end_of_OSCILLATOR_Initialize 1583                                          ?_main 0070  
                                        STR_10 1885                                          STR_11 190B  
                                        STR_12 191D                                          STR_20 1854  
                                        STR_13 192D                                          STR_14 1800  
                                        STR_15 18DF                                          STR_16 189C  
                                        STR_17 186D                                          STR_18 18F5  
                                        STR_19 183B                                __end_of___lldiv 0A7E  
                                        _T1CON 0018                                          _T2CON 001C  
                                        _T4CON 0417                             ApplicationInit@val 005E  
                              __end_of___lwdiv 0965                                          i1l384 0013  
                                        i1l393 0032                                          i1l386 0020  
                                        i1l388 002A                                          i1l865 0D2B  
                                        i1l877 09BE                ??_ADC_VoltageControlHandler_ISR 0048  
                               ?_LoadDutyValue 0070                                          _TMR1H 0017  
                                        _TMR1L 0016                                          _TRISA 008C  
                                        _TRISC 008E                                 _system_counter 0030  
                                        _RXPPS 0E24               __size_of_ADC_GetConversionResult 0006  
                                _start_chopper 169E                                _TMR4_Initialize 1594  
                          ___lmul@multiplicand 0074                               __end_of_TMR1_ISR 15ED  
                              __end_of_get_vdc 1510                               __end_of_TMR2_ISR 1502  
                               _WDT_Initialize 1502                        __end_of_PWM3_Initialize 1606  
                      __end_of_TMR1_Initialize 16E7                                __end_of_v_table 0871  
                                        pclath 000A                                          status 0003  
                                        wtemp0 007E                                _TMR2_StartTimer 14EB  
                                 _stop_chopper 15ED                                _TMR1_WriteTimer 1606  
                              __initialization 0036            set_relay_reset_voltage@relay_vthres 0051  
             ADC_VoltageControlHandler_ISR@pwm 004D                                   __end_of_main 1755  
                              ??_get_vdc_speed 0059                 set_reset_duration@reset_dur_ms 0059  
                  ??_EUSART_CommandHandler_ISR 0070                        __end_of_TMR2_Initialize 1647  
                                    ??_ADC_ISR 007E                                 __CFG_LPBOR$OFF 0000  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 0053  
                     _TMR2_SetInterruptHandler 1553                                         ??_main 0063  
                               ?_start_chopper 0070                        __size_of_FLASH_ReadWord 001F  
                               __CFG_PLLEN$OFF 0000                                set_vdc_max@vmax 0054  
                              set_vdc_min@vmin 0054                         __end_of_WDT_Initialize 1506  
    __end_of_EUSART_DefaultFramingErrorHandler 0872     __size_of_EUSART_DefaultFramingErrorHandler 0001  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 0871                                         _ADCON0 009D  
                                       _ADCON1 009E                                         _ADCON2 009F  
                   _EUSART_OverrunErrorHandler 0169                      FLASH_WriteBlock@writeAddr 0054  
                __size_of_TMR1_SystemTimer_ISR 0006                                         _ADRESH 009C  
                                       _ADRESL 009B                                 __CFG_ZCDDIS$ON 0000  
                                       _ANSELA 018C                                         _ANSELC 018E  
                                       _BORCON 0116                                         _T1GCON 0019  
                                       _RC1REG 0199                                         _RC0PPS 0EA0  
                                       _RC1PPS 0EA1                                         _RC1STA 019D  
                                       _RC2PPS 0EA2                        TMR1_WriteTimer@timerVal 0070  
                                ?_init_chopper 0070                                         i1l3041 1610  
                                       _ODCONA 028C                                         i1l3131 0C63  
                                       _ODCONC 028E                                         u120_25 166B  
                                       i1l3141 0C7F                                         i1l3133 0C64  
                                       i1l3143 0C85                                         i1l3231 098C  
                                       i1l3225 097C                                         i1l3155 0CE4  
                                       i1l3147 0C91                                         i1l3235 099C  
                                       i1l3157 0D03                                         i1l3165 0D04  
                                       i1l3191 0D51                                         i1l3159 0CE9  
                                       i1l3177 0D23                                         i1l3193 0D55  
                                       i1l2801 09DC                                         i1l3179 0D27  
                                       i1l2821 08A7                                         i1l3189 0D4D  
                                       u130_25 09C4                                         i1l2841 0A4A  
                                       i1l2825 08B1                                         i1l2853 0A75  
                                       i1l2839 0A3C                                         i1l2849 0A6A  
                                       i1l2793 09BA                                         i1l2799 09D8  
                                       u141_25 0A3F                                         u143_25 0A4B  
                                       _INLVLA 038C                                         _INLVLC 038E  
                                       u144_25 0A5F                                         u128_25 09A6  
                                       u145_25 0A6B                                         u137_25 08B2  
                                       u138_25 08B9                                         u170_25 0CFD  
                                       u172_25 0D0E                                         u164_25 0C5E  
                                       u165_25 0C6A                                         u174_25 0D35  
                                       u166_25 0C8B                                         u175_25 0D43  
                                       u167_25 0C97                                         _PMADRH 0192  
                                       _PMADRL 0191                                         _PMDATH 0194  
                       set_vdc_threshold@v_val 0051                                         _PMDATL 0193  
                 __size_of_relay_watchdog_task 0055                                         _PMCON2 0196  
                    __size_of_FLASH_EraseBlock 001F                                         _OSCCON 0099  
                                       _TX1REG 019A                                         _WDTCON 0097  
                                       _TX1STA 019E                          __end_of_save_to_flash 0A2C  
                               __CFG_PWRTE$OFF 0000                       ?_get_relay_reset_voltage 0051  
         __end_of_TMR1_DefaultInterruptHandler 0873          __size_of_TMR1_DefaultInterruptHandler 0001  
                 _TMR1_DefaultInterruptHandler 0872           __size_of_ADC_DefaultInterruptHandler 0001  
             __size_of_ADC_SetInterruptHandler 0008                                         ___lmul 089F  
                  __size_of_PWM3_LoadDutyValue 0016                                   ?_set_vdc_max 0054  
                                 ?_set_vdc_min 0054                                         ___wmul 1702  
                               __CFG_STVREN$ON 0000                                      ??___lldiv 0078  
                         __size_of_close_relay 0003                                      ??___lwdiv 0055  
                         __size_of_get_vdc_max 0006                           __size_of_get_vdc_min 0005  
                      __end_of_TMR4_Initialize 159E                              _set_vdc_threshold 171D  
                             __end_of_duty_inc 195A                               ?_ApplicationInit 0070  
                                       _vcs_st 0035                                ??_LoadDutyValue 0072  
                                       _rx_idx 003A                                         _tx_idx 0037  
                                       _tx_len 0036                                      ??_get_vdc 0053  
                     ?_set_relay_reset_voltage 0051                             ?_set_vdc_threshold 0051  
                      FLASH_ReadWord@flashAddr 0051                                ?_WDT_Initialize 0070  
                      __end_of_TMR2_StartTimer 14EE          __end_of_ADC_VoltageControlHandler_ISR 0D5D  
       __size_of_ADC_VoltageControlHandler_ISR 012D                  _ADC_VoltageControlHandler_ISR 0C30  
     TMR1_SetInterruptHandler@InterruptHandler 0051        ADC_SetInterruptHandler@InterruptHandler 0051  
     TMR2_SetInterruptHandler@InterruptHandler 0051                            ??_set_vdc_threshold 0054  
                      __end_of_TMR1_WriteTimer 1615                      _EUSART_CommandHandler_ISR 1793  
                               ??_init_chopper 0053                          __end_of_TMR1_CallBack 15A9  
                             ?_PWM3_Initialize 0070                               ?_TMR1_Initialize 0070  
                            LoadDutyValue@duty 0070                              _SYSTEM_Initialize 16E7  
                      __end_of__initialization 006D                          __end_of_TMR2_CallBack 15B4  
                           ?_SYSTEM_Initialize 0070                     __end_of_get_reset_duration 1594  
                   __end_of_set_reset_duration 08FE                   __size_of_init_relay_watchdog 0001  
                          _relay_reset_voltage 0020                   __size_of_ADC_StartConversion 0003  
                               __pcstackCOMMON 0070                                   __pidataBANK0 14F7  
                                 __pidataBANK1 1545                            ??_SYSTEM_Initialize 0053  
                             ??_get_vdc_critic 0053                                      ?_TMR1_ISR 0070  
                                    ?_TMR2_ISR 0070                  ?_TMR1_DefaultInterruptHandler 0070  
                    __end_of_set_vdc_threshold 1739                               ?_TMR2_Initialize 0070  
                              ??_start_chopper 0054                        _ADC_GetConversionResult 1515  
                        __end_of_set_vdc_speed 17D9                                 _OPTION_REGbits 0095  
                         _eusartRxStatusBuffer 0140            __end_of_TMR2_DutyControlHandler_ISR 09E3  
                  _TMR2_DutyControlHandler_ISR 099F                    FLASH_WriteBlock@GIEBitValue 005C  
              ??_EUSART_SetOverrunErrorHandler 0053                      __end_of_SYSTEM_Initialize 1702  
                                   __pbssBANK0 0020                                     __pbssBANK1 00E0  
                                   __pbssBANK2 0120                                     __pbssBANK3 01A0  
                             set_vdc_critic@vc 0054                        __size_of_set_vdc_critic 000B  
                  __size_of_EUSART_Receive_ISR 003A                                  _init_required 0065  
                                   __pmaintext 1739                  __size_of_start_relay_watchdog 0006  
                                      ?___lmul 0070                                     _delta_duty 0156  
                            uart_task@val_1501 01B2                              uart_task@val_1493 01B8  
                                      ?___wmul 0051                                     ??_TMR1_ISR 0072  
                              __CFG_PPS1WAY$ON 0000                                     ??_TMR2_ISR 0076  
                                   __pintentry 0004                                        _ADC_ISR 15D5  
                               ___lmul@product 0078                               ?_TMR4_Initialize 0070  
                 ??_EUSART_DefaultErrorHandler 0071                      __size_of_FLASH_WriteBlock 0066  
                      __size_of_ADC_Initialize 0011                                 _FLASH_ReadWord 1755  
                                _eusartRxCount 003D                             __size_of_uart_task 02A3  
                            uart_task@xor_1500 01B1                                        _SP1BRGH 019C  
                                      _SP1BRGL 019B                              save_to_flash@buff 00A0  
                __size_of_EUSART_RxDataHandler 0018                                        _OSCSTAT 009A  
                                      _OSCTUNE 0098                                        _PWM3DCH 0618  
                                      _PWM3DCL 0617                                        _PWM3CON 0619  
                                      _SLRCONA 030C                                        _SLRCONC 030E  
                     ??_EUSART_SetErrorHandler 0053                               ?_TMR2_StartTimer 0070  
                             ?_TMR1_WriteTimer 0070                            UartParser@rx_buffer 0120  
                             _FLASH_EraseBlock 1774                 ?_ADC_VoltageControlHandler_ISR 0070  
             EUSART_CommandHandler_ISR@rx_data 0071                           _ADC_InterruptHandler 0163  
                      _ADC_SetInterruptHandler 154B            __size_of_EUSART_DefaultErrorHandler 0003  
                   ??_TMR2_SetInterruptHandler 0053                                __size_of___lmul 002F  
                                      ___lldiv 0A2C                                __size_of___wmul 001B  
                   __size_of_set_vdc_threshold 001C                                        ___lwdiv 0931  
                         __end_of_init_chopper 1800                      ??_ADC_GetConversionResult 0072  
                       __end_of_FLASH_ReadWord 1774                           __size_of_set_vdc_max 000B  
                         __size_of_set_vdc_min 000B                            _relay_watchdog_task 0A7E  
                                      __ptext1 0D5D                                        __ptext2 15ED  
                                      __ptext3 09E3                                        __ptext4 158B  
                                      __ptext5 1533                                        __ptext6 0AD3  
                                      __ptext7 1774                                        __ptext8 14F4  
                                      __ptext9 1647                                        _get_vdc 150B  
               ??_TMR1_DefaultInterruptHandler 0070                                      _T1CONbits 0018  
                        _OSCILLATOR_Initialize 157B                                      _T2CONbits 001C  
            __size_of_TMR1_SetInterruptHandler 0008                       ??_PIN_MANAGER_Initialize 0051  
                    ?_TMR1_SetInterruptHandler 0051                                        _vdc_max 0044  
                                      _vdc_min 0046                                        _v_table 0071  
                                _duty_count_up 00E6                     __size_of_SYSTEM_Initialize 001B  
                                      clrloop0 153A                           end_of_initialization 006D  
                               _reset_duration 00E2                           ?_relay_watchdog_task 0070  
        __end_of_EUSART_SetOverrunErrorHandler 1573         __size_of_EUSART_SetOverrunErrorHandler 0008  
                _EUSART_SetOverrunErrorHandler 156B                                     _vdc_critic 0042  
                                      init_ram 153F                                        initloop 1540  
                            _EUSART_Initialize 08FE                                     _open_relay 14F1  
                           _activation_counter 0150                              __end_of_uart_task 1000  
                              ___lldiv@divisor 0070                                ___lldiv@counter 007D  
                           ?_EUSART_Initialize 0070                   __end_of_TMR1_SystemTimer_ISR 1521  
                                   _num_buffer 015A                      FLASH_ReadWord@GIEBitValue 0053  
                        __end_of_get_vdc_speed 165C                                ?_FLASH_ReadWord 0051  
                                   _uart_start 1688                            ??_EUSART_Initialize 0053  
                             ??_WDT_Initialize 0051                                     _vcs_sub_st 0034  
             __size_of_get_relay_reset_voltage 0006                           __end_of_duty_pwm_inc 195C  
                             __CFG_FOSC$INTOSC 0000            __end_of_ADC_DefaultInterruptHandler 14E5  
                  _ADC_DefaultInterruptHandler 14E4                                      _TRISAbits 008C  
                          _init_relay_watchdog 0003                   ApplicationInit@invalid_param 005D  
                          _ADC_StartConversion 14E8                __size_of_EUSART_SetErrorHandler 0008  
                        ??_relay_watchdog_task 0053                      __end_of_EUSART_Initialize 0931  
                ??_ADC_DefaultInterruptHandler 0070               __size_of_set_relay_reset_voltage 0016  
                               _set_vdc_critic 15B4                      ??_ADC_SetInterruptHandler 0053  
                   __end_of_PWM3_LoadDutyValue 1672                              FLASH_WriteBlock@i 005D  
                                ??_close_relay 0051                           ?_init_relay_watchdog 0070  
                         ?_ADC_StartConversion 0070                                  ??_get_vdc_max 0053  
                                ??_get_vdc_min 0053           __end_of_TMR2_DefaultInterruptHandler 0003  
        __size_of_TMR2_DefaultInterruptHandler 0001                   _TMR2_DefaultInterruptHandler 0002  
                            _is_chopper_active 14F4                                 __end_of___lmul 08CE  
           __end_of_EUSART_DefaultErrorHandler 14E8                     _EUSART_DefaultErrorHandler 14E5  
                               __end_of___wmul 171D                              __size_of_TMR1_ISR 000C  
                            __size_of_TMR2_ISR 0004                             ?_is_chopper_active 0070  
                               _ADC_Initialize 1624                             _get_reset_duration 158B  
                           _set_reset_duration 08CE                               _FLASH_WriteBlock 0AD3  
                       ?_OSCILLATOR_Initialize 0070                              _reset_duration_ms 00E0  
                        __end_of_LoadDutyValue 150B                         __size_of_save_to_flash 0049  
                          start_initialization 0036                              SolidStateRelay@st 002B  
                          ??_is_chopper_active 0051                            ?_get_reset_duration 0051  
              __size_of_PIN_MANAGER_Initialize 002C                            ?_set_reset_duration 0059  
                     __size_of_ApplicationInit 00F7   EUSART_SetRxInterruptHandler@interruptHandler 0051  
                       __end_of_set_vdc_critic 15BF                                    ?_open_relay 0070  
                        ??_init_relay_watchdog 0051                 ?_EUSART_SetOverrunErrorHandler 0051  
                        ??_ADC_StartConversion 0051                          __size_of_init_chopper 0027  
                         ??_get_reset_duration 0053                           ??_set_reset_duration 005B  
                     __size_of_PWM3_Initialize 000D                       __size_of_TMR1_Initialize 001A  
                    __end_of_is_chopper_active 14F7                     _EUSART_FramingErrorHandler 016B  
                                     ??___lmul 0078                                       ??___wmul 0055  
                       _EUSART_SetErrorHandler 155B                                    _CCPTMRSbits 029E  
                       __end_of_ADC_Initialize 1635                                    __pdataBANK0 0063  
                                  __pdataBANK1 00EA                                       ?_ADC_ISR 0070  
                  FLASH_EraseBlock@GIEBitValue 0053                                    ?_uart_start 0070  
                ?_TMR2_DefaultInterruptHandler 0070                       __end_of_FLASH_EraseBlock 1793  
                          __end_of_close_relay 14F1                         __size_of_TMR1_CallBack 000B  
                          __end_of_get_vdc_max 1533                            __end_of_get_vdc_min 1515  
                        __end_of_start_chopper 16B5                         __size_of_TMR2_CallBack 000B  
                                    ___latbits 0002                                  __pcstackBANK0 0048  
                                __pcstackBANK1 00A0                                  __pcstackBANK3 01B0  
                 __end_of_start_relay_watchdog 1527                       __size_of_TMR2_Initialize 0012  
                         _TMR1_SystemTimer_ISR 151B                                ?_set_vdc_critic 0054  
                   __end_of_EUSART_Receive_ISR 099F                                   _init_chopper 17D9  
                   __size_of_EUSART_Initialize 0033                                  ?_stop_chopper 0070  
             _EUSART_RxDefaultInterruptHandler 016D                                  _diff_positive 0033  
                               _chopper_active 0032                                   _current_duty 0022  
                                _save_to_flash 09E3                                      __pnvBANK2 015F  
                 __end_of_EUSART_RxDataHandler 16CD                         __size_of_set_vdc_speed 0026  
                             ___lwdiv@dividend 0053                         _PIN_MANAGER_Initialize 0873  
                            _ADC_SelectChannel 1615               __end_of_TMR1_SetInterruptHandler 158B  
                             UartParser@rx_idx 002F                               UartParser@tx_idx 002C  
                                     ?___lldiv 0070                                       ?___lwdiv 0051  
                              ?_ADC_Initialize 0070                                   _eusartRxHead 003F  
                           ?_ADC_SelectChannel 0070                                   _eusartRxTail 003E  
                 ??_INTERRUPT_InterruptManager 007E                                       ?_get_vdc 0051  
                      _get_relay_reset_voltage 1533                                       _BAUD1CON 019F  
                          ??_ADC_SelectChannel 0051                            __size_of_open_relay 0003  
                      __size_of_get_vdc_critic 0006                       __size_of_TMR4_Initialize 000A  
                        ?_TMR1_SystemTimer_ISR 0070                               ___lwdiv@quotient 0057  
               FLASH_WriteBlock@blockStartAddr 005A                        _set_relay_reset_voltage 1672  
                               _eusartRxBuffer 0148                                  _TMR1_CallBack 159E  
                               ??_stop_chopper 0051                                 ___wmul@product 0055  
                          __size_of_uart_start 0016                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 0051                                 ?_save_to_flash 0070  
                                     _LATCbits 010E                                      _isr_timer 002E  
                            ??_ApplicationInit 005B                                      clear_ram0 1539  
                                _TMR2_CallBack 15A9                                       _PIE1bits 0091  
                            _eusartRxLastError 003C                       __size_of_TMR2_StartTimer 0003  
                    __end_of_ADC_SelectChannel 1624                                   _duty_pwm_dec 00EC  
                                 UartParser@st 002D                       __size_of_TMR1_WriteTimer 000F  
                                 _duty_pwm_inc 195A            __size_of_INTERRUPT_InterruptManager 0030  
                          _duty_count_down_max 00EA                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0053                                       _PIR2bits 0012  
                    FLASH_EraseBlock@startAddr 0051                                _duty_count_down 00E4  
                                  _close_relay 14EE                            __end_of_invalid_arg 18C9  
                          __end_of_invalid_com 18DF                     __size_of_is_chopper_active 0003  
                             ??_FLASH_ReadWord 0053                                    _get_vdc_max 152D  
                                  _get_vdc_min 1510                                  ??_set_vdc_max 0056  
                                ??_set_vdc_min 0056      __end_of_EUSART_DefaultOverrunErrorHandler 14FE  
   __size_of_EUSART_DefaultOverrunErrorHandler 0004            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 14FA  
                                    _uart_task 0D5D                                       _TMR1_ISR 15E1  
                                     _TMR2_ISR 14FE                                     uart_task@i 01B4  
                                    _rx_buffer 01A0                              ??_TMR1_Initialize 0053  
                            ??_PWM3_Initialize 0051                               __size_of_ADC_ISR 000C  
                                   _ADCON0bits 009D                              ___wmul@multiplier 0051  
                     ADC_SelectChannel@channel 0052                                  _set_vdc_speed 17B3  
               ??_TMR2_DefaultInterruptHandler 0070              __size_of_TMR2_SetInterruptHandler 0008  
                    ?_TMR2_SetInterruptHandler 0051                                      _tx_string 00E8  
                            ___lmul@multiplier 0070                                       _Commands 003B  
                               ?_TMR1_CallBack 0070                              ??_TMR2_Initialize 0053  
                     __end_of_FLASH_WriteBlock 0B39                                 ?_TMR2_CallBack 0070  
                              _command_pending 0039                       ?_ADC_GetConversionResult 0070  
                         _start_relay_watchdog 1521                                     ?_uart_task 0070  
                      ??_OSCILLATOR_Initialize 0051                            _EUSART_ErrorHandler 0167  
                    ??_get_relay_reset_voltage 0053                               __size_of___lldiv 0052  
                  ?_EUSART_DefaultErrorHandler 0070                               __size_of___lwdiv 0034  
                              uart_task@i_1499 01B5                       _TMR1_SetInterruptHandler 1583  
                           _PWM3_LoadDutyValue 165C                            __end_of_set_vdc_max 15CA  
                          __end_of_set_vdc_min 15D5                          _TMR1_InterruptHandler 015F  
                             __size_of_get_vdc 0005                                 ?_set_vdc_speed 0059  
                  __end_of_relay_watchdog_task 0AD3                                    _local_timer 002A  
                       ??_TMR1_SystemTimer_ISR 0070                                       _diff_vdc 0158  
                              ___lwdiv@divisor 0051                           _EUSART_RxDataHandler 16B5  
                 ?_TMR2_DutyControlHandler_ISR 0070                                ___lwdiv@counter 0056  
                    ??_set_relay_reset_voltage 0053                                       __ptext10 1702  
                                     __ptext11 1510                                       __ptext20 0003  
                                     __ptext12 152D                                       __ptext21 16E7  
                                     __ptext13 1527                                       __ptext30 08FE  
                                     __ptext22 1502                                       __ptext14 1688  
                                     __ptext31 1573                                       __ptext23 1594  
                                     __ptext15 1521                                       __ptext40 1553  
                                     __ptext32 156B                                       __ptext24 1635  
                                     __ptext16 0A7E                                       __ptext41 14E8  
                                     __ptext33 1563                                       __ptext25 16CD  
                                     __ptext17 14F1                                       __ptext50 0931  
                                     __ptext42 154B                                       __ptext34 155B  
                                     __ptext26 1583                                       __ptext18 150B  
                                     __ptext51 1672                                       __ptext43 1615  
                                     __ptext35 1624                                       __ptext27 15F9  
                                     __ptext19 14EE                                       __ptext60 159E  
                                     __ptext52 1755                                       __ptext44 17B3  
                                     __ptext36 0B39                                       __ptext28 0873  
                                     __ptext61 0872                                       __ptext45 15CA  
                                     __ptext37 169E                                       __ptext29 157B  
                                     __ptext70 14E4                                       __ptext62 151B  
                                     __ptext54 14FE                                       __ptext46 15BF  
                                     __ptext38 17D9                                       __ptext71 0C30  
                                     __ptext63 1793                                       __ptext55 15A9  
                                     __ptext47 15B4                                       __ptext39 14EB  
                                     __ptext72 089F                                       __ptext64 0965  
                                     __ptext56 0002                                       __ptext48 171D  
                                     __ptext73 0A2C                                       __ptext65 14FA  
                                     __ptext57 099F                                       __ptext49 08CE  
                                     __ptext74 165C                                       __ptext66 0871  
                                     __ptext58 15E1                            ?_PWM3_LoadDutyValue 0070  
                                     __ptext75 1506                                       __ptext67 14E5  
                                     __ptext59 1606                                       __ptext76 1515  
                                     __ptext68 16B5                                       __ptext69 15D5  
                              ??_save_to_flash 005E                                    _invalid_arg 18B3  
                                  _invalid_com 18C9                         __size_of_get_vdc_speed 0015  
                            ??_TMR4_Initialize 0051                                  __size_of_main 001C  
                                     _lock_isr 0064                                       _duty_inc 1958  
                                 ??_open_relay 0051                        ?_EUSART_SetErrorHandler 0051  
                   __size_of_ADC_SelectChannel 000F                                       _vdc_prev 0028  
                                   _RC1STAbits 019D                          ?_start_relay_watchdog 0070  
EUSART_SetOverrunErrorHandler@interruptHandler 0051                           ??_PWM3_LoadDutyValue 0072  
                                     _prev_vdc 0154             __size_of_EUSART_CommandHandler_ISR 0020  
                                     int$flags 007E                     ?_EUSART_CommandHandler_ISR 0070  
                                     _pwm_duty 0026                              ??_TMR2_StartTimer 0051  
                         set_vdc_speed@msDelay 0059             __end_of_INTERRUPT_InterruptManager 0034  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 156B  
       __size_of_EUSART_SetFramingErrorHandler 0008                  _EUSART_SetFramingErrorHandler 1563  
                            ??_TMR1_WriteTimer 0072                                   ??_uart_start 0053  
                            ?_FLASH_EraseBlock 0051                           __end_of_stop_chopper 15F9  
                           ??_FLASH_EraseBlock 0053                                     _INTCONbits 000B  
                               _get_vdc_critic 1527                               ??_set_vdc_critic 0056  
                        ?_EUSART_RxDataHandler 0070                             __end_of_open_relay 14F4  
                               __pstringtext10 186D                                 __pstringtext11 1885  
                               __pstringtext20 1948                                 __pstringtext12 189C  
                               __pstringtext21 194E                                 __pstringtext13 18DF  
                               __pstringtext22 1953                                 __pstringtext14 18F5  
                               __pstringtext23 0000                                 __pstringtext15 190B  
                               __pstringtext16 191D                                 __pstringtext17 192D  
                               __pstringtext18 193C                                 __pstringtext19 1942  
                              ??_TMR1_CallBack 0071                       ?_ADC_SetInterruptHandler 0051  
                      __size_of_WDT_Initialize 0004                  ??_TMR2_DutyControlHandler_ISR 0074  
              __end_of_get_relay_reset_voltage 1539                                       intlevel1 0000  
                              ??_TMR2_CallBack 0076                    __end_of_init_relay_watchdog 0004  
                  __end_of_ADC_StartConversion 14EB                                     _PMCON1bits 0195  
                             ___lldiv@dividend 0074                        ?_PIN_MANAGER_Initialize 0070  
              __end_of_ADC_GetConversionResult 151B                 __end_of_EUSART_SetErrorHandler 1563  
                            __CFG_CLKOUTEN$OFF 0000                                    _target_duty 0024  
                           __end_of_uart_start 169E                   ApplicationInit@chopper_state 005B  
                             ??_ADC_Initialize 0053           __end_of_EUSART_SetRxInterruptHandler 157B  
        __size_of_EUSART_SetRxInterruptHandler 0008                   _EUSART_SetRxInterruptHandler 1573  
                       __size_of_LoadDutyValue 0005                    __size_of_get_reset_duration 0009  
              __end_of_set_relay_reset_voltage 1688                    __size_of_set_reset_duration 0030  
                            _duty_count_up_max 00EE                                    ??_uart_task 005F  
                                  _set_vdc_max 15BF                                    _set_vdc_min 15CA  
                           _EUSART_Receive_ISR 0965  EUSART_SetFramingErrorHandler@interruptHandler 0051  
                  PWM3_LoadDutyValue@dutyValue 0070              __end_of_EUSART_CommandHandler_ISR 17B3  
                                _command_error 0038                                  _get_vdc_speed 1647  
                                __pstringtext1 0071                                  __pstringtext2 18B3  
                                __pstringtext3 18C9                                  __pstringtext4 1958  
                                __pstringtext5 195A                                  __pstringtext6 1800  
                                __pstringtext7 1822                                  __pstringtext8 183B  
                                __pstringtext9 1854                                ??_set_vdc_speed 005B  
                       __end_of_get_vdc_critic 152D                            ?_EUSART_Receive_ISR 0070  
                                uart_task@none 0063                               ___lldiv@quotient 0079  
                              _ApplicationInit 0B39                                     _TX1STAbits 019E  
                                 uart_task@val 01B6                 __end_of_PIN_MANAGER_Initialize 089F  
                                 uart_task@xor 01B0                           ??_EUSART_Receive_ISR 0071  
                        _TMR2_InterruptHandler 0165                                _TMR1_Initialize 16CD  
                              _PWM3_Initialize 15F9                         ??_start_relay_watchdog 0051  
                       __size_of_start_chopper 0017                                   ?_close_relay 0070  
